
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009094  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000009c  20000000  00009094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000515c  2000009c  00009130  0002009c  2**2
                  ALLOC
  3 .stack        00002000  200051f8  0000e28c  0002009c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004bc56  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000744f  00000000  00000000  0006bd73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00015521  00000000  00000000  000731c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000eb8  00000000  00000000  000886e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001788  00000000  00000000  0008959b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023c76  00000000  00000000  0008ad23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a6bc  00000000  00000000  000ae999  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009f1f7  00000000  00000000  000c9055  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003080  00000000  00000000  0016824c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 71 00 20 e5 50 00 00 e1 50 00 00 e1 50 00 00     .q. .P...P...P..
	...
      2c:	15 53 00 00 00 00 00 00 00 00 00 00 f1 53 00 00     .S...........S..
      3c:	35 54 00 00 e1 50 00 00 e1 50 00 00 e1 50 00 00     5T...P...P...P..
      4c:	05 15 00 00 e1 50 00 00 e1 50 00 00 e1 50 00 00     .....P...P...P..
      5c:	e1 50 00 00 e1 50 00 00 4d 45 00 00 5d 45 00 00     .P...P..ME..]E..
      6c:	6d 45 00 00 7d 45 00 00 8d 45 00 00 9d 45 00 00     mE..}E...E...E..
      7c:	e1 50 00 00 e1 50 00 00 e1 50 00 00 e1 50 00 00     .P...P...P...P..
      8c:	e1 50 00 00 e1 50 00 00 e1 50 00 00 e1 50 00 00     .P...P...P...P..
      9c:	e1 50 00 00 e1 50 00 00 e1 50 00 00 e1 50 00 00     .P...P...P...P..
      ac:	e1 50 00 00 00 00 00 00                             .P......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000009c 	.word	0x2000009c
      d4:	00000000 	.word	0x00000000
      d8:	00009094 	.word	0x00009094

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a0 	.word	0x200000a0
     108:	00009094 	.word	0x00009094
     10c:	00009094 	.word	0x00009094
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <sd_mmc_configure_slot+0x20>)
     118:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     11a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11c:	5ccb      	ldrb	r3, [r1, r3]
     11e:	1e5a      	subs	r2, r3, #1
     120:	4193      	sbcs	r3, r2
     122:	b2db      	uxtb	r3, r3
     124:	7c4a      	ldrb	r2, [r1, #17]
     126:	6809      	ldr	r1, [r1, #0]
     128:	4803      	ldr	r0, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12a:	7800      	ldrb	r0, [r0, #0]
     12c:	4c03      	ldr	r4, [pc, #12]	; (13c <sd_mmc_configure_slot+0x28>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	200000b8 	.word	0x200000b8
     138:	200000c1 	.word	0x200000c1
     13c:	00000e8d 	.word	0x00000e8d

00000140 <sd_mmc_select_slot>:
{
     140:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     142:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     144:	2800      	cmp	r0, #0
     146:	d001      	beq.n	14c <sd_mmc_select_slot+0xc>
}
     148:	0018      	movs	r0, r3
     14a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     14c:	4b38      	ldr	r3, [pc, #224]	; (230 <sd_mmc_select_slot+0xf0>)
     14e:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     150:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     152:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     154:	2a00      	cmp	r2, #0
     156:	d104      	bne.n	162 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     158:	094b      	lsrs	r3, r1, #5
     15a:	01db      	lsls	r3, r3, #7
     15c:	4a35      	ldr	r2, [pc, #212]	; (234 <sd_mmc_select_slot+0xf4>)
     15e:	4694      	mov	ip, r2
     160:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     162:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     164:	221f      	movs	r2, #31
     166:	400a      	ands	r2, r1
     168:	2301      	movs	r3, #1
     16a:	4093      	lsls	r3, r2
     16c:	4218      	tst	r0, r3
     16e:	d010      	beq.n	192 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     170:	4b2f      	ldr	r3, [pc, #188]	; (230 <sd_mmc_select_slot+0xf0>)
     172:	7b9b      	ldrb	r3, [r3, #14]
     174:	2b01      	cmp	r3, #1
     176:	d004      	beq.n	182 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     178:	2204      	movs	r2, #4
     17a:	4b2d      	ldr	r3, [pc, #180]	; (230 <sd_mmc_select_slot+0xf0>)
     17c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     17e:	2302      	movs	r3, #2
     180:	e7e2      	b.n	148 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     182:	4b2d      	ldr	r3, [pc, #180]	; (238 <sd_mmc_select_slot+0xf8>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d0f6      	beq.n	178 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     18a:	2200      	movs	r2, #0
     18c:	4b2b      	ldr	r3, [pc, #172]	; (23c <sd_mmc_select_slot+0xfc>)
     18e:	601a      	str	r2, [r3, #0]
     190:	e7f2      	b.n	178 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     192:	4b27      	ldr	r3, [pc, #156]	; (230 <sd_mmc_select_slot+0xf0>)
     194:	7b9a      	ldrb	r2, [r3, #14]
     196:	2a04      	cmp	r2, #4
     198:	d005      	beq.n	1a6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     19a:	2a01      	cmp	r2, #1
     19c:	d024      	beq.n	1e8 <sd_mmc_select_slot+0xa8>
		return SD_MMC_ERR_UNUSABLE;
     19e:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     1a0:	2a03      	cmp	r2, #3
     1a2:	d0d1      	beq.n	148 <sd_mmc_select_slot+0x8>
     1a4:	e036      	b.n	214 <sd_mmc_select_slot+0xd4>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     1a6:	3a03      	subs	r2, #3
     1a8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     1aa:	4b24      	ldr	r3, [pc, #144]	; (23c <sd_mmc_select_slot+0xfc>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d008      	beq.n	1c4 <sd_mmc_select_slot+0x84>
		sd_mmc_sam_systick_used = false;
     1b2:	2200      	movs	r2, #0
     1b4:	4b20      	ldr	r3, [pc, #128]	; (238 <sd_mmc_select_slot+0xf8>)
     1b6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     1b8:	20fa      	movs	r0, #250	; 0xfa
     1ba:	0080      	lsls	r0, r0, #2
     1bc:	4b20      	ldr	r3, [pc, #128]	; (240 <sd_mmc_select_slot+0x100>)
     1be:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     1c0:	2302      	movs	r3, #2
     1c2:	e7c1      	b.n	148 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     1c4:	2401      	movs	r4, #1
     1c6:	4b1c      	ldr	r3, [pc, #112]	; (238 <sd_mmc_select_slot+0xf8>)
     1c8:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1ca:	2000      	movs	r0, #0
     1cc:	4b1d      	ldr	r3, [pc, #116]	; (244 <sd_mmc_select_slot+0x104>)
     1ce:	4798      	blx	r3
     1d0:	21fa      	movs	r1, #250	; 0xfa
     1d2:	0149      	lsls	r1, r1, #5
     1d4:	4b1c      	ldr	r3, [pc, #112]	; (248 <sd_mmc_select_slot+0x108>)
     1d6:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     1d8:	23fa      	movs	r3, #250	; 0xfa
     1da:	009b      	lsls	r3, r3, #2
     1dc:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1de:	4b17      	ldr	r3, [pc, #92]	; (23c <sd_mmc_select_slot+0xfc>)
     1e0:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     1e2:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     1e4:	2302      	movs	r3, #2
     1e6:	e7af      	b.n	148 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     1e8:	4b13      	ldr	r3, [pc, #76]	; (238 <sd_mmc_select_slot+0xf8>)
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d007      	beq.n	200 <sd_mmc_select_slot+0xc0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1f0:	4b12      	ldr	r3, [pc, #72]	; (23c <sd_mmc_select_slot+0xfc>)
     1f2:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     1f4:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1f6:	03d2      	lsls	r2, r2, #15
     1f8:	d5a6      	bpl.n	148 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     1fa:	2200      	movs	r2, #0
     1fc:	4b0f      	ldr	r3, [pc, #60]	; (23c <sd_mmc_select_slot+0xfc>)
     1fe:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     200:	4b0b      	ldr	r3, [pc, #44]	; (230 <sd_mmc_select_slot+0xf0>)
     202:	2202      	movs	r2, #2
     204:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     206:	4a11      	ldr	r2, [pc, #68]	; (24c <sd_mmc_select_slot+0x10c>)
     208:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     20a:	2201      	movs	r2, #1
     20c:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     20e:	2100      	movs	r1, #0
     210:	3221      	adds	r2, #33	; 0x21
     212:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     214:	2200      	movs	r2, #0
     216:	4b0e      	ldr	r3, [pc, #56]	; (250 <sd_mmc_select_slot+0x110>)
     218:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     21a:	4c05      	ldr	r4, [pc, #20]	; (230 <sd_mmc_select_slot+0xf0>)
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <sd_mmc_select_slot+0x114>)
     21e:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <sd_mmc_select_slot+0x118>)
     222:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     224:	7ba3      	ldrb	r3, [r4, #14]
     226:	3b02      	subs	r3, #2
     228:	425a      	negs	r2, r3
     22a:	4153      	adcs	r3, r2
     22c:	b2db      	uxtb	r3, r3
     22e:	e78b      	b.n	148 <sd_mmc_select_slot+0x8>
     230:	20000000 	.word	0x20000000
     234:	41004400 	.word	0x41004400
     238:	200000c0 	.word	0x200000c0
     23c:	e000e010 	.word	0xe000e010
     240:	000012e1 	.word	0x000012e1
     244:	00004e71 	.word	0x00004e71
     248:	0000700d 	.word	0x0000700d
     24c:	00061a80 	.word	0x00061a80
     250:	200000c1 	.word	0x200000c1
     254:	200000b8 	.word	0x200000b8
     258:	00000115 	.word	0x00000115

0000025c <sd_mmc_cmd13>:
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     25e:	4d09      	ldr	r5, [pc, #36]	; (284 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     260:	4f09      	ldr	r7, [pc, #36]	; (288 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     262:	4e0a      	ldr	r6, [pc, #40]	; (28c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     264:	2100      	movs	r1, #0
     266:	480a      	ldr	r0, [pc, #40]	; (290 <sd_mmc_cmd13+0x34>)
     268:	47b8      	blx	r7
     26a:	1e04      	subs	r4, r0, #0
     26c:	d007      	beq.n	27e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     26e:	47b0      	blx	r6
     270:	23ff      	movs	r3, #255	; 0xff
     272:	4203      	tst	r3, r0
     274:	d003      	beq.n	27e <sd_mmc_cmd13+0x22>
     276:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     278:	2d00      	cmp	r5, #0
     27a:	d1f3      	bne.n	264 <sd_mmc_cmd13+0x8>
			return false;
     27c:	2400      	movs	r4, #0
}
     27e:	0020      	movs	r0, r4
     280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	00030d41 	.word	0x00030d41
     288:	000010d1 	.word	0x000010d1
     28c:	000010e9 	.word	0x000010e9
     290:	00001b0d 	.word	0x00001b0d

00000294 <sd_mmc_cmd9_spi>:
{
     294:	b510      	push	{r4, lr}
     296:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     298:	4b0c      	ldr	r3, [pc, #48]	; (2cc <sd_mmc_cmd9_spi+0x38>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	8999      	ldrh	r1, [r3, #12]
     29e:	0409      	lsls	r1, r1, #16
     2a0:	2301      	movs	r3, #1
     2a2:	9300      	str	r3, [sp, #0]
     2a4:	2210      	movs	r2, #16
     2a6:	480a      	ldr	r0, [pc, #40]	; (2d0 <sd_mmc_cmd9_spi+0x3c>)
     2a8:	4c0a      	ldr	r4, [pc, #40]	; (2d4 <sd_mmc_cmd9_spi+0x40>)
     2aa:	47a0      	blx	r4
     2ac:	2800      	cmp	r0, #0
     2ae:	d101      	bne.n	2b4 <sd_mmc_cmd9_spi+0x20>
}
     2b0:	b002      	add	sp, #8
     2b2:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     2b4:	4b05      	ldr	r3, [pc, #20]	; (2cc <sd_mmc_cmd9_spi+0x38>)
     2b6:	6818      	ldr	r0, [r3, #0]
     2b8:	3012      	adds	r0, #18
     2ba:	2101      	movs	r1, #1
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <sd_mmc_cmd9_spi+0x44>)
     2be:	4798      	blx	r3
     2c0:	2800      	cmp	r0, #0
     2c2:	d0f5      	beq.n	2b0 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     2c4:	4b05      	ldr	r3, [pc, #20]	; (2dc <sd_mmc_cmd9_spi+0x48>)
     2c6:	4798      	blx	r3
     2c8:	e7f2      	b.n	2b0 <sd_mmc_cmd9_spi+0x1c>
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	200000b8 	.word	0x200000b8
     2d0:	00081109 	.word	0x00081109
     2d4:	00000f41 	.word	0x00000f41
     2d8:	0000116d 	.word	0x0000116d
     2dc:	000011f9 	.word	0x000011f9

000002e0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     2e0:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <sd_mmc_deselect_slot+0x14>)
     2e4:	781b      	ldrb	r3, [r3, #0]
     2e6:	2b00      	cmp	r3, #0
     2e8:	d000      	beq.n	2ec <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     2ea:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     2ec:	2000      	movs	r0, #0
     2ee:	4b02      	ldr	r3, [pc, #8]	; (2f8 <sd_mmc_deselect_slot+0x18>)
     2f0:	4798      	blx	r3
}
     2f2:	e7fa      	b.n	2ea <sd_mmc_deselect_slot+0xa>
     2f4:	200000c1 	.word	0x200000c1
     2f8:	00000ee1 	.word	0x00000ee1

000002fc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     2fc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     2fe:	2204      	movs	r2, #4
     300:	4b03      	ldr	r3, [pc, #12]	; (310 <sd_mmc_init+0x14>)
     302:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     304:	32fb      	adds	r2, #251	; 0xfb
     306:	4b03      	ldr	r3, [pc, #12]	; (314 <sd_mmc_init+0x18>)
     308:	701a      	strb	r2, [r3, #0]
	driver_init();
     30a:	4b03      	ldr	r3, [pc, #12]	; (318 <sd_mmc_init+0x1c>)
     30c:	4798      	blx	r3
}
     30e:	bd10      	pop	{r4, pc}
     310:	20000000 	.word	0x20000000
     314:	200000c1 	.word	0x200000c1
     318:	00000d81 	.word	0x00000d81

0000031c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     31c:	b5f0      	push	{r4, r5, r6, r7, lr}
     31e:	46c6      	mov	lr, r8
     320:	b500      	push	{lr}
     322:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     324:	4bcb      	ldr	r3, [pc, #812]	; (654 <sd_mmc_check+0x338>)
     326:	4798      	blx	r3
     328:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     32a:	2801      	cmp	r0, #1
     32c:	d006      	beq.n	33c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     32e:	4bca      	ldr	r3, [pc, #808]	; (658 <sd_mmc_check+0x33c>)
     330:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     332:	0020      	movs	r0, r4
     334:	b008      	add	sp, #32
     336:	bc04      	pop	{r2}
     338:	4690      	mov	r8, r2
     33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     33c:	4bc7      	ldr	r3, [pc, #796]	; (65c <sd_mmc_check+0x340>)
     33e:	681b      	ldr	r3, [r3, #0]
     340:	2201      	movs	r2, #1
     342:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     344:	2200      	movs	r2, #0
     346:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     348:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     34a:	4bc5      	ldr	r3, [pc, #788]	; (660 <sd_mmc_check+0x344>)
     34c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     34e:	2100      	movs	r1, #0
     350:	2088      	movs	r0, #136	; 0x88
     352:	0140      	lsls	r0, r0, #5
     354:	4bc3      	ldr	r3, [pc, #780]	; (664 <sd_mmc_check+0x348>)
     356:	4798      	blx	r3
     358:	2800      	cmp	r0, #0
     35a:	d107      	bne.n	36c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     35c:	4bbf      	ldr	r3, [pc, #764]	; (65c <sd_mmc_check+0x340>)
     35e:	681b      	ldr	r3, [r3, #0]
     360:	2203      	movs	r2, #3
     362:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     364:	4bbc      	ldr	r3, [pc, #752]	; (658 <sd_mmc_check+0x33c>)
     366:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     368:	2403      	movs	r4, #3
     36a:	e7e2      	b.n	332 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     36c:	21d5      	movs	r1, #213	; 0xd5
     36e:	0049      	lsls	r1, r1, #1
     370:	48bd      	ldr	r0, [pc, #756]	; (668 <sd_mmc_check+0x34c>)
     372:	4bbc      	ldr	r3, [pc, #752]	; (664 <sd_mmc_check+0x348>)
     374:	4798      	blx	r3
	*v2 = 0;
     376:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     378:	2800      	cmp	r0, #0
     37a:	d125      	bne.n	3c8 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     37c:	4bb7      	ldr	r3, [pc, #732]	; (65c <sd_mmc_check+0x340>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	7bdb      	ldrb	r3, [r3, #15]
     382:	07db      	lsls	r3, r3, #31
     384:	d500      	bpl.n	388 <sd_mmc_check+0x6c>
     386:	e1eb      	b.n	760 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     388:	4bb4      	ldr	r3, [pc, #720]	; (65c <sd_mmc_check+0x340>)
     38a:	681b      	ldr	r3, [r3, #0]
     38c:	7bda      	ldrb	r2, [r3, #15]
     38e:	2309      	movs	r3, #9
     390:	4013      	ands	r3, r2
     392:	2b01      	cmp	r3, #1
     394:	d10f      	bne.n	3b6 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     396:	2180      	movs	r1, #128	; 0x80
     398:	0089      	lsls	r1, r1, #2
     39a:	48b4      	ldr	r0, [pc, #720]	; (66c <sd_mmc_check+0x350>)
     39c:	4bb1      	ldr	r3, [pc, #708]	; (664 <sd_mmc_check+0x348>)
     39e:	4798      	blx	r3
     3a0:	2800      	cmp	r0, #0
     3a2:	d0db      	beq.n	35c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3a4:	4bad      	ldr	r3, [pc, #692]	; (65c <sd_mmc_check+0x340>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	7bdb      	ldrb	r3, [r3, #15]
     3aa:	07db      	lsls	r3, r3, #31
     3ac:	d503      	bpl.n	3b6 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     3ae:	4bb0      	ldr	r3, [pc, #704]	; (670 <sd_mmc_check+0x354>)
     3b0:	4798      	blx	r3
     3b2:	2800      	cmp	r0, #0
     3b4:	d0d2      	beq.n	35c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     3b6:	4baf      	ldr	r3, [pc, #700]	; (674 <sd_mmc_check+0x358>)
     3b8:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     3ba:	4ba8      	ldr	r3, [pc, #672]	; (65c <sd_mmc_check+0x340>)
     3bc:	681b      	ldr	r3, [r3, #0]
     3be:	2200      	movs	r2, #0
     3c0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     3c2:	4ba5      	ldr	r3, [pc, #660]	; (658 <sd_mmc_check+0x33c>)
     3c4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     3c6:	e7b4      	b.n	332 <sd_mmc_check+0x16>
	resp = driver_get_response();
     3c8:	4bab      	ldr	r3, [pc, #684]	; (678 <sd_mmc_check+0x35c>)
     3ca:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     3cc:	1c43      	adds	r3, r0, #1
     3ce:	d100      	bne.n	3d2 <sd_mmc_check+0xb6>
     3d0:	e1c4      	b.n	75c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     3d2:	0500      	lsls	r0, r0, #20
     3d4:	0d00      	lsrs	r0, r0, #20
     3d6:	23d5      	movs	r3, #213	; 0xd5
     3d8:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     3da:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     3dc:	4298      	cmp	r0, r3
     3de:	d1bd      	bne.n	35c <sd_mmc_check+0x40>
     3e0:	e7cc      	b.n	37c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     3e2:	2100      	movs	r1, #0
     3e4:	48a5      	ldr	r0, [pc, #660]	; (67c <sd_mmc_check+0x360>)
     3e6:	4b9f      	ldr	r3, [pc, #636]	; (664 <sd_mmc_check+0x348>)
     3e8:	4798      	blx	r3
     3ea:	2800      	cmp	r0, #0
     3ec:	d119      	bne.n	422 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     3ee:	4b9b      	ldr	r3, [pc, #620]	; (65c <sd_mmc_check+0x340>)
     3f0:	681b      	ldr	r3, [r3, #0]
     3f2:	2202      	movs	r2, #2
     3f4:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     3f6:	2100      	movs	r1, #0
     3f8:	2088      	movs	r0, #136	; 0x88
     3fa:	0140      	lsls	r0, r0, #5
     3fc:	4b99      	ldr	r3, [pc, #612]	; (664 <sd_mmc_check+0x348>)
     3fe:	4798      	blx	r3
     400:	2800      	cmp	r0, #0
     402:	d0ab      	beq.n	35c <sd_mmc_check+0x40>
     404:	4d9e      	ldr	r5, [pc, #632]	; (680 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     406:	4f97      	ldr	r7, [pc, #604]	; (664 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     408:	4e9b      	ldr	r6, [pc, #620]	; (678 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     40a:	2100      	movs	r1, #0
     40c:	489d      	ldr	r0, [pc, #628]	; (684 <sd_mmc_check+0x368>)
     40e:	47b8      	blx	r7
     410:	2800      	cmp	r0, #0
     412:	d0a3      	beq.n	35c <sd_mmc_check+0x40>
		resp = driver_get_response();
     414:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     416:	07c3      	lsls	r3, r0, #31
     418:	d57d      	bpl.n	516 <sd_mmc_check+0x1fa>
     41a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     41c:	2d00      	cmp	r5, #0
     41e:	d1f4      	bne.n	40a <sd_mmc_check+0xee>
     420:	e79c      	b.n	35c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     422:	4b95      	ldr	r3, [pc, #596]	; (678 <sd_mmc_check+0x35c>)
     424:	4798      	blx	r3
     426:	0043      	lsls	r3, r0, #1
     428:	d505      	bpl.n	436 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     42a:	4b8c      	ldr	r3, [pc, #560]	; (65c <sd_mmc_check+0x340>)
     42c:	681a      	ldr	r2, [r3, #0]
     42e:	7bd3      	ldrb	r3, [r2, #15]
     430:	2108      	movs	r1, #8
     432:	430b      	orrs	r3, r1
     434:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     436:	2100      	movs	r1, #0
     438:	4893      	ldr	r0, [pc, #588]	; (688 <sd_mmc_check+0x36c>)
     43a:	4b8a      	ldr	r3, [pc, #552]	; (664 <sd_mmc_check+0x348>)
     43c:	4798      	blx	r3
     43e:	2800      	cmp	r0, #0
     440:	d08c      	beq.n	35c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     442:	4b86      	ldr	r3, [pc, #536]	; (65c <sd_mmc_check+0x340>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	7bdb      	ldrb	r3, [r3, #15]
     448:	07da      	lsls	r2, r3, #31
     44a:	d400      	bmi.n	44e <sd_mmc_check+0x132>
     44c:	e1a4      	b.n	798 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     44e:	4b8f      	ldr	r3, [pc, #572]	; (68c <sd_mmc_check+0x370>)
     450:	4798      	blx	r3
     452:	2800      	cmp	r0, #0
     454:	d082      	beq.n	35c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     456:	4b81      	ldr	r3, [pc, #516]	; (65c <sd_mmc_check+0x340>)
     458:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     45a:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     45c:	2107      	movs	r1, #7
     45e:	4019      	ands	r1, r3
     460:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     462:	488b      	ldr	r0, [pc, #556]	; (690 <sd_mmc_check+0x374>)
     464:	5808      	ldr	r0, [r1, r0]
     466:	21fa      	movs	r1, #250	; 0xfa
     468:	0089      	lsls	r1, r1, #2
     46a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     46c:	065b      	lsls	r3, r3, #25
     46e:	0f1b      	lsrs	r3, r3, #28
     470:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     472:	4888      	ldr	r0, [pc, #544]	; (694 <sd_mmc_check+0x378>)
     474:	581b      	ldr	r3, [r3, r0]
     476:	434b      	muls	r3, r1
     478:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     47a:	7c93      	ldrb	r3, [r2, #18]
     47c:	099b      	lsrs	r3, r3, #6
     47e:	d000      	beq.n	482 <sd_mmc_check+0x166>
     480:	e13c      	b.n	6fc <sd_mmc_check+0x3e0>
     482:	7e91      	ldrb	r1, [r2, #26]
     484:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     486:	7e53      	ldrb	r3, [r2, #25]
     488:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     48a:	7e10      	ldrb	r0, [r2, #24]
     48c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     48e:	4303      	orrs	r3, r0
     490:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     492:	7f10      	ldrb	r0, [r2, #28]
     494:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     496:	7ed1      	ldrb	r1, [r2, #27]
     498:	0049      	lsls	r1, r1, #1
     49a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     49c:	051b      	lsls	r3, r3, #20
     49e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4a0:	3301      	adds	r3, #1
     4a2:	2107      	movs	r1, #7
     4a4:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     4a6:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4a8:	408b      	lsls	r3, r1
     4aa:	7dd0      	ldrb	r0, [r2, #23]
     4ac:	210f      	movs	r1, #15
     4ae:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     4b0:	408b      	lsls	r3, r1
				/ 1024;
     4b2:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     4b4:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     4b6:	8991      	ldrh	r1, [r2, #12]
     4b8:	0409      	lsls	r1, r1, #16
     4ba:	4877      	ldr	r0, [pc, #476]	; (698 <sd_mmc_check+0x37c>)
     4bc:	4b69      	ldr	r3, [pc, #420]	; (664 <sd_mmc_check+0x348>)
     4be:	4798      	blx	r3
     4c0:	2800      	cmp	r0, #0
     4c2:	d100      	bne.n	4c6 <sd_mmc_check+0x1aa>
     4c4:	e74a      	b.n	35c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     4c6:	2301      	movs	r3, #1
     4c8:	9300      	str	r3, [sp, #0]
     4ca:	2208      	movs	r2, #8
     4cc:	2100      	movs	r1, #0
     4ce:	4873      	ldr	r0, [pc, #460]	; (69c <sd_mmc_check+0x380>)
     4d0:	4d73      	ldr	r5, [pc, #460]	; (6a0 <sd_mmc_check+0x384>)
     4d2:	47a8      	blx	r5
     4d4:	2800      	cmp	r0, #0
     4d6:	d100      	bne.n	4da <sd_mmc_check+0x1be>
     4d8:	e740      	b.n	35c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     4da:	2101      	movs	r1, #1
     4dc:	a806      	add	r0, sp, #24
     4de:	4b71      	ldr	r3, [pc, #452]	; (6a4 <sd_mmc_check+0x388>)
     4e0:	4798      	blx	r3
     4e2:	2800      	cmp	r0, #0
     4e4:	d100      	bne.n	4e8 <sd_mmc_check+0x1cc>
     4e6:	e739      	b.n	35c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     4e8:	4b6f      	ldr	r3, [pc, #444]	; (6a8 <sd_mmc_check+0x38c>)
     4ea:	4798      	blx	r3
     4ec:	2800      	cmp	r0, #0
     4ee:	d100      	bne.n	4f2 <sd_mmc_check+0x1d6>
     4f0:	e734      	b.n	35c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4f2:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	220f      	movs	r2, #15
     4f8:	4013      	ands	r3, r2
     4fa:	2b01      	cmp	r3, #1
     4fc:	d100      	bne.n	500 <sd_mmc_check+0x1e4>
     4fe:	e119      	b.n	734 <sd_mmc_check+0x418>
     500:	2b00      	cmp	r3, #0
     502:	d100      	bne.n	506 <sd_mmc_check+0x1ea>
     504:	e109      	b.n	71a <sd_mmc_check+0x3fe>
     506:	2b02      	cmp	r3, #2
     508:	d100      	bne.n	50c <sd_mmc_check+0x1f0>
     50a:	e118      	b.n	73e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     50c:	4b53      	ldr	r3, [pc, #332]	; (65c <sd_mmc_check+0x340>)
     50e:	681b      	ldr	r3, [r3, #0]
     510:	2210      	movs	r2, #16
     512:	741a      	strb	r2, [r3, #16]
     514:	e105      	b.n	722 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     516:	2100      	movs	r1, #0
     518:	4858      	ldr	r0, [pc, #352]	; (67c <sd_mmc_check+0x360>)
     51a:	4b52      	ldr	r3, [pc, #328]	; (664 <sd_mmc_check+0x348>)
     51c:	4798      	blx	r3
     51e:	2800      	cmp	r0, #0
     520:	d100      	bne.n	524 <sd_mmc_check+0x208>
     522:	e71b      	b.n	35c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     524:	4b54      	ldr	r3, [pc, #336]	; (678 <sd_mmc_check+0x35c>)
     526:	4798      	blx	r3
     528:	23c0      	movs	r3, #192	; 0xc0
     52a:	05db      	lsls	r3, r3, #23
     52c:	4018      	ands	r0, r3
     52e:	2380      	movs	r3, #128	; 0x80
     530:	05db      	lsls	r3, r3, #23
     532:	4298      	cmp	r0, r3
     534:	d105      	bne.n	542 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     536:	4b49      	ldr	r3, [pc, #292]	; (65c <sd_mmc_check+0x340>)
     538:	681a      	ldr	r2, [r3, #0]
     53a:	7bd1      	ldrb	r1, [r2, #15]
     53c:	2308      	movs	r3, #8
     53e:	430b      	orrs	r3, r1
     540:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     542:	2100      	movs	r1, #0
     544:	4850      	ldr	r0, [pc, #320]	; (688 <sd_mmc_check+0x36c>)
     546:	4b47      	ldr	r3, [pc, #284]	; (664 <sd_mmc_check+0x348>)
     548:	4798      	blx	r3
     54a:	2800      	cmp	r0, #0
     54c:	d100      	bne.n	550 <sd_mmc_check+0x234>
     54e:	e705      	b.n	35c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     550:	4b4e      	ldr	r3, [pc, #312]	; (68c <sd_mmc_check+0x370>)
     552:	4798      	blx	r3
     554:	2800      	cmp	r0, #0
     556:	d100      	bne.n	55a <sd_mmc_check+0x23e>
     558:	e700      	b.n	35c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     55a:	4b40      	ldr	r3, [pc, #256]	; (65c <sd_mmc_check+0x340>)
     55c:	681a      	ldr	r2, [r3, #0]
     55e:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     560:	069b      	lsls	r3, r3, #26
     562:	0f1b      	lsrs	r3, r3, #28
     564:	2b02      	cmp	r3, #2
     566:	d100      	bne.n	56a <sd_mmc_check+0x24e>
     568:	e0a8      	b.n	6bc <sd_mmc_check+0x3a0>
     56a:	d907      	bls.n	57c <sd_mmc_check+0x260>
     56c:	2b03      	cmp	r3, #3
     56e:	d100      	bne.n	572 <sd_mmc_check+0x256>
     570:	e0a7      	b.n	6c2 <sd_mmc_check+0x3a6>
     572:	2b04      	cmp	r3, #4
     574:	d104      	bne.n	580 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     576:	2340      	movs	r3, #64	; 0x40
     578:	7413      	strb	r3, [r2, #16]
     57a:	e003      	b.n	584 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     57c:	2b01      	cmp	r3, #1
     57e:	d066      	beq.n	64e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     580:	2312      	movs	r3, #18
     582:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     584:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     586:	0659      	lsls	r1, r3, #25
     588:	0f09      	lsrs	r1, r1, #28
     58a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     58c:	2007      	movs	r0, #7
     58e:	4003      	ands	r3, r0
     590:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     592:	483f      	ldr	r0, [pc, #252]	; (690 <sd_mmc_check+0x374>)
     594:	5818      	ldr	r0, [r3, r0]
     596:	23fa      	movs	r3, #250	; 0xfa
     598:	009b      	lsls	r3, r3, #2
     59a:	4343      	muls	r3, r0
     59c:	4843      	ldr	r0, [pc, #268]	; (6ac <sd_mmc_check+0x390>)
     59e:	5809      	ldr	r1, [r1, r0]
     5a0:	434b      	muls	r3, r1
     5a2:	6013      	str	r3, [r2, #0]
     5a4:	7e91      	ldrb	r1, [r2, #26]
     5a6:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5a8:	7e53      	ldrb	r3, [r2, #25]
     5aa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5ac:	7e10      	ldrb	r0, [r2, #24]
     5ae:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5b0:	4303      	orrs	r3, r0
     5b2:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     5b4:	051b      	lsls	r3, r3, #20
     5b6:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     5b8:	493d      	ldr	r1, [pc, #244]	; (6b0 <sd_mmc_check+0x394>)
     5ba:	428b      	cmp	r3, r1
     5bc:	d00f      	beq.n	5de <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5be:	7f10      	ldrb	r0, [r2, #28]
     5c0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5c2:	7ed1      	ldrb	r1, [r2, #27]
     5c4:	0049      	lsls	r1, r1, #1
     5c6:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5c8:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     5ca:	2007      	movs	r0, #7
     5cc:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     5ce:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5d0:	408b      	lsls	r3, r1
     5d2:	7dd1      	ldrb	r1, [r2, #23]
     5d4:	3008      	adds	r0, #8
     5d6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     5d8:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     5da:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     5dc:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     5de:	7c13      	ldrb	r3, [r2, #16]
     5e0:	2b3f      	cmp	r3, #63	; 0x3f
     5e2:	d97b      	bls.n	6dc <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     5e4:	2100      	movs	r1, #0
     5e6:	9100      	str	r1, [sp, #0]
     5e8:	2301      	movs	r3, #1
     5ea:	2280      	movs	r2, #128	; 0x80
     5ec:	0092      	lsls	r2, r2, #2
     5ee:	4831      	ldr	r0, [pc, #196]	; (6b4 <sd_mmc_check+0x398>)
     5f0:	4d2b      	ldr	r5, [pc, #172]	; (6a0 <sd_mmc_check+0x384>)
     5f2:	47a8      	blx	r5
     5f4:	2800      	cmp	r0, #0
     5f6:	d100      	bne.n	5fa <sd_mmc_check+0x2de>
     5f8:	e6b0      	b.n	35c <sd_mmc_check+0x40>
     5fa:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     5fc:	4e2e      	ldr	r6, [pc, #184]	; (6b8 <sd_mmc_check+0x39c>)
     5fe:	a805      	add	r0, sp, #20
     600:	47b0      	blx	r6
     602:	2800      	cmp	r0, #0
     604:	d100      	bne.n	608 <sd_mmc_check+0x2ec>
     606:	e6a9      	b.n	35c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     608:	3501      	adds	r5, #1
     60a:	b2ad      	uxth	r5, r5
     60c:	2d32      	cmp	r5, #50	; 0x32
     60e:	d1f6      	bne.n	5fe <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     610:	4b12      	ldr	r3, [pc, #72]	; (65c <sd_mmc_check+0x340>)
     612:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     614:	7e8a      	ldrb	r2, [r1, #26]
     616:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     618:	7e4b      	ldrb	r3, [r1, #25]
     61a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     61c:	7e09      	ldrb	r1, [r1, #24]
     61e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     620:	430b      	orrs	r3, r1
     622:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     624:	051b      	lsls	r3, r3, #20
     626:	0d1b      	lsrs	r3, r3, #20
     628:	4a21      	ldr	r2, [pc, #132]	; (6b0 <sd_mmc_check+0x394>)
     62a:	4293      	cmp	r3, r2
     62c:	d154      	bne.n	6d8 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     62e:	4e22      	ldr	r6, [pc, #136]	; (6b8 <sd_mmc_check+0x39c>)
     630:	a806      	add	r0, sp, #24
     632:	47b0      	blx	r6
     634:	2800      	cmp	r0, #0
     636:	d100      	bne.n	63a <sd_mmc_check+0x31e>
     638:	e690      	b.n	35c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     63a:	3501      	adds	r5, #1
     63c:	b2ad      	uxth	r5, r5
     63e:	2d35      	cmp	r5, #53	; 0x35
     640:	d9f6      	bls.n	630 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     642:	4b06      	ldr	r3, [pc, #24]	; (65c <sd_mmc_check+0x340>)
     644:	681a      	ldr	r2, [r3, #0]
     646:	9b06      	ldr	r3, [sp, #24]
     648:	085b      	lsrs	r3, r3, #1
     64a:	6053      	str	r3, [r2, #4]
     64c:	e044      	b.n	6d8 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     64e:	2314      	movs	r3, #20
     650:	7413      	strb	r3, [r2, #16]
     652:	e797      	b.n	584 <sd_mmc_check+0x268>
     654:	00000141 	.word	0x00000141
     658:	000002e1 	.word	0x000002e1
     65c:	200000b8 	.word	0x200000b8
     660:	00000f09 	.word	0x00000f09
     664:	000010d1 	.word	0x000010d1
     668:	00005508 	.word	0x00005508
     66c:	00001110 	.word	0x00001110
     670:	0000025d 	.word	0x0000025d
     674:	00000115 	.word	0x00000115
     678:	000010e9 	.word	0x000010e9
     67c:	0000053a 	.word	0x0000053a
     680:	00001bef 	.word	0x00001bef
     684:	00001101 	.word	0x00001101
     688:	0000113b 	.word	0x0000113b
     68c:	00000295 	.word	0x00000295
     690:	00008738 	.word	0x00008738
     694:	00008754 	.word	0x00008754
     698:	00001137 	.word	0x00001137
     69c:	00081133 	.word	0x00081133
     6a0:	00000f41 	.word	0x00000f41
     6a4:	0000116d 	.word	0x0000116d
     6a8:	000011f9 	.word	0x000011f9
     6ac:	000086f8 	.word	0x000086f8
     6b0:	00000fff 	.word	0x00000fff
     6b4:	00081108 	.word	0x00081108
     6b8:	000010f5 	.word	0x000010f5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6bc:	2322      	movs	r3, #34	; 0x22
     6be:	7413      	strb	r3, [r2, #16]
     6c0:	e760      	b.n	584 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6c2:	2330      	movs	r3, #48	; 0x30
     6c4:	7413      	strb	r3, [r2, #16]
     6c6:	e75d      	b.n	584 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     6c8:	a806      	add	r0, sp, #24
     6ca:	4b36      	ldr	r3, [pc, #216]	; (7a4 <sd_mmc_check+0x488>)
     6cc:	4798      	blx	r3
     6ce:	2800      	cmp	r0, #0
     6d0:	d100      	bne.n	6d4 <sd_mmc_check+0x3b8>
     6d2:	e643      	b.n	35c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     6d4:	3501      	adds	r5, #1
     6d6:	b2ad      	uxth	r5, r5
     6d8:	2d7f      	cmp	r5, #127	; 0x7f
     6da:	d9f5      	bls.n	6c8 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     6dc:	2180      	movs	r1, #128	; 0x80
     6de:	0089      	lsls	r1, r1, #2
     6e0:	4831      	ldr	r0, [pc, #196]	; (7a8 <sd_mmc_check+0x48c>)
     6e2:	4b32      	ldr	r3, [pc, #200]	; (7ac <sd_mmc_check+0x490>)
     6e4:	4798      	blx	r3
     6e6:	2800      	cmp	r0, #0
     6e8:	d100      	bne.n	6ec <sd_mmc_check+0x3d0>
     6ea:	e637      	b.n	35c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     6ec:	4b30      	ldr	r3, [pc, #192]	; (7b0 <sd_mmc_check+0x494>)
     6ee:	4798      	blx	r3
     6f0:	2800      	cmp	r0, #0
     6f2:	d100      	bne.n	6f6 <sd_mmc_check+0x3da>
     6f4:	e632      	b.n	35c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     6f6:	4b2f      	ldr	r3, [pc, #188]	; (7b4 <sd_mmc_check+0x498>)
     6f8:	4798      	blx	r3
     6fa:	e65e      	b.n	3ba <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6fc:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6fe:	7e93      	ldrb	r3, [r2, #26]
     700:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     702:	7e51      	ldrb	r1, [r2, #25]
     704:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     706:	430b      	orrs	r3, r1
     708:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     70a:	029b      	lsls	r3, r3, #10
				* 512;
     70c:	085b      	lsrs	r3, r3, #1
     70e:	2180      	movs	r1, #128	; 0x80
     710:	0089      	lsls	r1, r1, #2
     712:	468c      	mov	ip, r1
     714:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     716:	6053      	str	r3, [r2, #4]
     718:	e6cd      	b.n	4b6 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     71a:	4b27      	ldr	r3, [pc, #156]	; (7b8 <sd_mmc_check+0x49c>)
     71c:	681b      	ldr	r3, [r3, #0]
     71e:	2210      	movs	r2, #16
     720:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     722:	4b25      	ldr	r3, [pc, #148]	; (7b8 <sd_mmc_check+0x49c>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	7bdb      	ldrb	r3, [r3, #15]
     728:	2209      	movs	r2, #9
     72a:	4013      	ands	r3, r2
     72c:	2b01      	cmp	r3, #1
     72e:	d000      	beq.n	732 <sd_mmc_check+0x416>
     730:	e638      	b.n	3a4 <sd_mmc_check+0x88>
     732:	e630      	b.n	396 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     734:	4b20      	ldr	r3, [pc, #128]	; (7b8 <sd_mmc_check+0x49c>)
     736:	681b      	ldr	r3, [r3, #0]
     738:	221a      	movs	r2, #26
     73a:	741a      	strb	r2, [r3, #16]
     73c:	e7f1      	b.n	722 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     73e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     740:	789b      	ldrb	r3, [r3, #2]
     742:	09db      	lsrs	r3, r3, #7
     744:	2b01      	cmp	r3, #1
     746:	d104      	bne.n	752 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     748:	4b1b      	ldr	r3, [pc, #108]	; (7b8 <sd_mmc_check+0x49c>)
     74a:	681b      	ldr	r3, [r3, #0]
     74c:	2230      	movs	r2, #48	; 0x30
     74e:	741a      	strb	r2, [r3, #16]
     750:	e7e7      	b.n	722 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     752:	4b19      	ldr	r3, [pc, #100]	; (7b8 <sd_mmc_check+0x49c>)
     754:	681b      	ldr	r3, [r3, #0]
     756:	2220      	movs	r2, #32
     758:	741a      	strb	r2, [r3, #16]
     75a:	e7e2      	b.n	722 <sd_mmc_check+0x406>
	*v2 = 0;
     75c:	2600      	movs	r6, #0
     75e:	e60d      	b.n	37c <sd_mmc_check+0x60>
     760:	1e73      	subs	r3, r6, #1
     762:	419e      	sbcs	r6, r3
     764:	07b3      	lsls	r3, r6, #30
     766:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     768:	4d14      	ldr	r5, [pc, #80]	; (7bc <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     76a:	4f10      	ldr	r7, [pc, #64]	; (7ac <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     76c:	46b8      	mov	r8, r7
		resp = driver_get_response();
     76e:	4e14      	ldr	r6, [pc, #80]	; (7c0 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     770:	2100      	movs	r1, #0
     772:	4814      	ldr	r0, [pc, #80]	; (7c4 <sd_mmc_check+0x4a8>)
     774:	47b8      	blx	r7
     776:	2800      	cmp	r0, #0
     778:	d100      	bne.n	77c <sd_mmc_check+0x460>
     77a:	e638      	b.n	3ee <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     77c:	9903      	ldr	r1, [sp, #12]
     77e:	4812      	ldr	r0, [pc, #72]	; (7c8 <sd_mmc_check+0x4ac>)
     780:	47c0      	blx	r8
     782:	2800      	cmp	r0, #0
     784:	d100      	bne.n	788 <sd_mmc_check+0x46c>
     786:	e632      	b.n	3ee <sd_mmc_check+0xd2>
		resp = driver_get_response();
     788:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     78a:	07c3      	lsls	r3, r0, #31
     78c:	d400      	bmi.n	790 <sd_mmc_check+0x474>
     78e:	e628      	b.n	3e2 <sd_mmc_check+0xc6>
     790:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     792:	2d00      	cmp	r5, #0
     794:	d1ec      	bne.n	770 <sd_mmc_check+0x454>
     796:	e62a      	b.n	3ee <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     798:	2209      	movs	r2, #9
     79a:	4013      	ands	r3, r2
     79c:	2b01      	cmp	r3, #1
     79e:	d000      	beq.n	7a2 <sd_mmc_check+0x486>
     7a0:	e609      	b.n	3b6 <sd_mmc_check+0x9a>
     7a2:	e5f8      	b.n	396 <sd_mmc_check+0x7a>
     7a4:	000010f5 	.word	0x000010f5
     7a8:	00001110 	.word	0x00001110
     7ac:	000010d1 	.word	0x000010d1
     7b0:	0000025d 	.word	0x0000025d
     7b4:	00000115 	.word	0x00000115
     7b8:	200000b8 	.word	0x200000b8
     7bc:	00001bef 	.word	0x00001bef
     7c0:	000010e9 	.word	0x000010e9
     7c4:	00001137 	.word	0x00001137
     7c8:	00001129 	.word	0x00001129

000007cc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     7cc:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <sd_mmc_get_type+0x1c>)
     7d0:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     7d2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7d4:	2800      	cmp	r0, #0
     7d6:	d001      	beq.n	7dc <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     7d8:	0018      	movs	r0, r3
     7da:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     7dc:	4b03      	ldr	r3, [pc, #12]	; (7ec <sd_mmc_get_type+0x20>)
     7de:	4798      	blx	r3
	return sd_mmc_card->type;
     7e0:	4b03      	ldr	r3, [pc, #12]	; (7f0 <sd_mmc_get_type+0x24>)
     7e2:	681b      	ldr	r3, [r3, #0]
     7e4:	7bdb      	ldrb	r3, [r3, #15]
     7e6:	e7f7      	b.n	7d8 <sd_mmc_get_type+0xc>
     7e8:	00000141 	.word	0x00000141
     7ec:	000002e1 	.word	0x000002e1
     7f0:	200000b8 	.word	0x200000b8

000007f4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     7f4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7f6:	4b06      	ldr	r3, [pc, #24]	; (810 <sd_mmc_get_capacity+0x1c>)
     7f8:	4798      	blx	r3
		return 0;
     7fa:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7fc:	2800      	cmp	r0, #0
     7fe:	d001      	beq.n	804 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     800:	0018      	movs	r0, r3
     802:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     804:	4b03      	ldr	r3, [pc, #12]	; (814 <sd_mmc_get_capacity+0x20>)
     806:	4798      	blx	r3
	return sd_mmc_card->capacity;
     808:	4b03      	ldr	r3, [pc, #12]	; (818 <sd_mmc_get_capacity+0x24>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	685b      	ldr	r3, [r3, #4]
     80e:	e7f7      	b.n	800 <sd_mmc_get_capacity+0xc>
     810:	00000141 	.word	0x00000141
     814:	000002e1 	.word	0x000002e1
     818:	200000b8 	.word	0x200000b8

0000081c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     81c:	2000      	movs	r0, #0
     81e:	4770      	bx	lr

00000820 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     820:	b570      	push	{r4, r5, r6, lr}
     822:	b082      	sub	sp, #8
     824:	000e      	movs	r6, r1
     826:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     828:	4b16      	ldr	r3, [pc, #88]	; (884 <sd_mmc_init_read_blocks+0x64>)
     82a:	4798      	blx	r3
     82c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     82e:	d002      	beq.n	836 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     830:	0020      	movs	r0, r4
     832:	b002      	add	sp, #8
     834:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     836:	4b14      	ldr	r3, [pc, #80]	; (888 <sd_mmc_init_read_blocks+0x68>)
     838:	4798      	blx	r3
     83a:	2800      	cmp	r0, #0
     83c:	d017      	beq.n	86e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     83e:	2d01      	cmp	r5, #1
     840:	d919      	bls.n	876 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     842:	4812      	ldr	r0, [pc, #72]	; (88c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     844:	4b12      	ldr	r3, [pc, #72]	; (890 <sd_mmc_init_read_blocks+0x70>)
     846:	681b      	ldr	r3, [r3, #0]
     848:	7bdb      	ldrb	r3, [r3, #15]
     84a:	071b      	lsls	r3, r3, #28
     84c:	d400      	bmi.n	850 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     84e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     850:	2301      	movs	r3, #1
     852:	9300      	str	r3, [sp, #0]
     854:	002b      	movs	r3, r5
     856:	2280      	movs	r2, #128	; 0x80
     858:	0092      	lsls	r2, r2, #2
     85a:	0031      	movs	r1, r6
     85c:	4e0d      	ldr	r6, [pc, #52]	; (894 <sd_mmc_init_read_blocks+0x74>)
     85e:	47b0      	blx	r6
     860:	2800      	cmp	r0, #0
     862:	d00a      	beq.n	87a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     864:	4b0c      	ldr	r3, [pc, #48]	; (898 <sd_mmc_init_read_blocks+0x78>)
     866:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     868:	4b0c      	ldr	r3, [pc, #48]	; (89c <sd_mmc_init_read_blocks+0x7c>)
     86a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     86c:	e7e0      	b.n	830 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     86e:	4b0c      	ldr	r3, [pc, #48]	; (8a0 <sd_mmc_init_read_blocks+0x80>)
     870:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     872:	3405      	adds	r4, #5
     874:	e7dc      	b.n	830 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     876:	480b      	ldr	r0, [pc, #44]	; (8a4 <sd_mmc_init_read_blocks+0x84>)
     878:	e7e4      	b.n	844 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <sd_mmc_init_read_blocks+0x80>)
     87c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     87e:	2405      	movs	r4, #5
     880:	e7d6      	b.n	830 <sd_mmc_init_read_blocks+0x10>
     882:	46c0      	nop			; (mov r8, r8)
     884:	00000141 	.word	0x00000141
     888:	0000025d 	.word	0x0000025d
     88c:	00101112 	.word	0x00101112
     890:	200000b8 	.word	0x200000b8
     894:	00000f41 	.word	0x00000f41
     898:	200000bc 	.word	0x200000bc
     89c:	200000be 	.word	0x200000be
     8a0:	000002e1 	.word	0x000002e1
     8a4:	00081111 	.word	0x00081111

000008a8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     8a8:	b510      	push	{r4, lr}
     8aa:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     8ac:	4b07      	ldr	r3, [pc, #28]	; (8cc <sd_mmc_start_read_blocks+0x24>)
     8ae:	4798      	blx	r3
     8b0:	2800      	cmp	r0, #0
     8b2:	d104      	bne.n	8be <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8b4:	2200      	movs	r2, #0
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <sd_mmc_start_read_blocks+0x28>)
     8b8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     8ba:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     8bc:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <sd_mmc_start_read_blocks+0x28>)
     8c0:	8813      	ldrh	r3, [r2, #0]
     8c2:	1b1c      	subs	r4, r3, r4
     8c4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     8c6:	2000      	movs	r0, #0
     8c8:	e7f8      	b.n	8bc <sd_mmc_start_read_blocks+0x14>
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	0000116d 	.word	0x0000116d
     8d0:	200000bc 	.word	0x200000bc

000008d4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     8d4:	b510      	push	{r4, lr}
     8d6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     8d8:	4b14      	ldr	r3, [pc, #80]	; (92c <sd_mmc_wait_end_of_read_blocks+0x58>)
     8da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8dc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     8de:	2800      	cmp	r0, #0
     8e0:	d101      	bne.n	8e6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     8e2:	0018      	movs	r0, r3
     8e4:	bd10      	pop	{r4, pc}
	if (abort) {
     8e6:	2c00      	cmp	r4, #0
     8e8:	d010      	beq.n	90c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     8ea:	2200      	movs	r2, #0
     8ec:	4b10      	ldr	r3, [pc, #64]	; (930 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     8ee:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     8f0:	4b10      	ldr	r3, [pc, #64]	; (934 <sd_mmc_wait_end_of_read_blocks+0x60>)
     8f2:	881b      	ldrh	r3, [r3, #0]
     8f4:	2b01      	cmp	r3, #1
     8f6:	d00f      	beq.n	918 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     8f8:	2100      	movs	r1, #0
     8fa:	480f      	ldr	r0, [pc, #60]	; (938 <sd_mmc_wait_end_of_read_blocks+0x64>)
     8fc:	4b0f      	ldr	r3, [pc, #60]	; (93c <sd_mmc_wait_end_of_read_blocks+0x68>)
     8fe:	4798      	blx	r3
     900:	2800      	cmp	r0, #0
     902:	d00d      	beq.n	920 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     904:	4b0e      	ldr	r3, [pc, #56]	; (940 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     906:	4798      	blx	r3
	return SD_MMC_OK;
     908:	2300      	movs	r3, #0
     90a:	e7ea      	b.n	8e2 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     90c:	4b08      	ldr	r3, [pc, #32]	; (930 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     90e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     910:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     912:	2a00      	cmp	r2, #0
     914:	d0ec      	beq.n	8f0 <sd_mmc_wait_end_of_read_blocks+0x1c>
     916:	e7e4      	b.n	8e2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     918:	4b09      	ldr	r3, [pc, #36]	; (940 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     91a:	4798      	blx	r3
		return SD_MMC_OK;
     91c:	2300      	movs	r3, #0
     91e:	e7e0      	b.n	8e2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     920:	2100      	movs	r1, #0
     922:	4805      	ldr	r0, [pc, #20]	; (938 <sd_mmc_wait_end_of_read_blocks+0x64>)
     924:	4b05      	ldr	r3, [pc, #20]	; (93c <sd_mmc_wait_end_of_read_blocks+0x68>)
     926:	4798      	blx	r3
     928:	e7ec      	b.n	904 <sd_mmc_wait_end_of_read_blocks+0x30>
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	000011f9 	.word	0x000011f9
     930:	200000bc 	.word	0x200000bc
     934:	200000be 	.word	0x200000be
     938:	0000310c 	.word	0x0000310c
     93c:	000010d1 	.word	0x000010d1
     940:	000002e1 	.word	0x000002e1

00000944 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     944:	b570      	push	{r4, r5, r6, lr}
     946:	b082      	sub	sp, #8
     948:	000e      	movs	r6, r1
     94a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     94c:	4b11      	ldr	r3, [pc, #68]	; (994 <sd_mmc_init_write_blocks+0x50>)
     94e:	4798      	blx	r3
     950:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     952:	d116      	bne.n	982 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     954:	2d01      	cmp	r5, #1
     956:	d917      	bls.n	988 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     958:	480f      	ldr	r0, [pc, #60]	; (998 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     95a:	4b10      	ldr	r3, [pc, #64]	; (99c <sd_mmc_init_write_blocks+0x58>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	7bdb      	ldrb	r3, [r3, #15]
     960:	071b      	lsls	r3, r3, #28
     962:	d400      	bmi.n	966 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     964:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     966:	2301      	movs	r3, #1
     968:	9300      	str	r3, [sp, #0]
     96a:	002b      	movs	r3, r5
     96c:	2280      	movs	r2, #128	; 0x80
     96e:	0092      	lsls	r2, r2, #2
     970:	0031      	movs	r1, r6
     972:	4e0b      	ldr	r6, [pc, #44]	; (9a0 <sd_mmc_init_write_blocks+0x5c>)
     974:	47b0      	blx	r6
     976:	2800      	cmp	r0, #0
     978:	d008      	beq.n	98c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     97a:	4b0a      	ldr	r3, [pc, #40]	; (9a4 <sd_mmc_init_write_blocks+0x60>)
     97c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <sd_mmc_init_write_blocks+0x64>)
     980:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     982:	0020      	movs	r0, r4
     984:	b002      	add	sp, #8
     986:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     988:	4808      	ldr	r0, [pc, #32]	; (9ac <sd_mmc_init_write_blocks+0x68>)
     98a:	e7e6      	b.n	95a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     98c:	4b08      	ldr	r3, [pc, #32]	; (9b0 <sd_mmc_init_write_blocks+0x6c>)
     98e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     990:	2405      	movs	r4, #5
     992:	e7f6      	b.n	982 <sd_mmc_init_write_blocks+0x3e>
     994:	00000141 	.word	0x00000141
     998:	00109119 	.word	0x00109119
     99c:	200000b8 	.word	0x200000b8
     9a0:	00000f41 	.word	0x00000f41
     9a4:	200000bc 	.word	0x200000bc
     9a8:	200000be 	.word	0x200000be
     9ac:	00089118 	.word	0x00089118
     9b0:	000002e1 	.word	0x000002e1

000009b4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     9b4:	b510      	push	{r4, lr}
     9b6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     9b8:	4b07      	ldr	r3, [pc, #28]	; (9d8 <sd_mmc_start_write_blocks+0x24>)
     9ba:	4798      	blx	r3
     9bc:	2800      	cmp	r0, #0
     9be:	d104      	bne.n	9ca <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     9c0:	2200      	movs	r2, #0
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <sd_mmc_start_write_blocks+0x28>)
     9c4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     9c6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     9c8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     9ca:	4a04      	ldr	r2, [pc, #16]	; (9dc <sd_mmc_start_write_blocks+0x28>)
     9cc:	8813      	ldrh	r3, [r2, #0]
     9ce:	1b1c      	subs	r4, r3, r4
     9d0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     9d2:	2000      	movs	r0, #0
     9d4:	e7f8      	b.n	9c8 <sd_mmc_start_write_blocks+0x14>
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	000011fd 	.word	0x000011fd
     9dc:	200000bc 	.word	0x200000bc

000009e0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     9e0:	b510      	push	{r4, lr}
     9e2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     9e4:	4b0e      	ldr	r3, [pc, #56]	; (a20 <sd_mmc_wait_end_of_write_blocks+0x40>)
     9e6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     9e8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     9ea:	2800      	cmp	r0, #0
     9ec:	d101      	bne.n	9f2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     9ee:	0018      	movs	r0, r3
     9f0:	bd10      	pop	{r4, pc}
	if (abort) {
     9f2:	2c00      	cmp	r4, #0
     9f4:	d00a      	beq.n	a0c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     9f6:	2200      	movs	r2, #0
     9f8:	4b0a      	ldr	r3, [pc, #40]	; (a24 <sd_mmc_wait_end_of_write_blocks+0x44>)
     9fa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     9fc:	4b0a      	ldr	r3, [pc, #40]	; (a28 <sd_mmc_wait_end_of_write_blocks+0x48>)
     9fe:	881b      	ldrh	r3, [r3, #0]
     a00:	2b01      	cmp	r3, #1
     a02:	d009      	beq.n	a18 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     a04:	4b09      	ldr	r3, [pc, #36]	; (a2c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a06:	4798      	blx	r3
	return SD_MMC_OK;
     a08:	2300      	movs	r3, #0
     a0a:	e7f0      	b.n	9ee <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     a0c:	4b05      	ldr	r3, [pc, #20]	; (a24 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a0e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     a10:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     a12:	2a00      	cmp	r2, #0
     a14:	d0f2      	beq.n	9fc <sd_mmc_wait_end_of_write_blocks+0x1c>
     a16:	e7ea      	b.n	9ee <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     a18:	4b04      	ldr	r3, [pc, #16]	; (a2c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a1a:	4798      	blx	r3
		return SD_MMC_OK;
     a1c:	2300      	movs	r3, #0
     a1e:	e7e6      	b.n	9ee <sd_mmc_wait_end_of_write_blocks+0xe>
     a20:	0000127d 	.word	0x0000127d
     a24:	200000bc 	.word	0x200000bc
     a28:	200000be 	.word	0x200000be
     a2c:	000002e1 	.word	0x000002e1

00000a30 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     a30:	b510      	push	{r4, lr}
     a32:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     a34:	4b0f      	ldr	r3, [pc, #60]	; (a74 <sd_mmc_test_unit_ready+0x44>)
     a36:	4798      	blx	r3
     a38:	2801      	cmp	r0, #1
     a3a:	d019      	beq.n	a70 <sd_mmc_test_unit_ready+0x40>
     a3c:	2800      	cmp	r0, #0
     a3e:	d003      	beq.n	a48 <sd_mmc_test_unit_ready+0x18>
     a40:	2802      	cmp	r0, #2
     a42:	d010      	beq.n	a66 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     a44:	2001      	movs	r0, #1
	}
}
     a46:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     a48:	4b0b      	ldr	r3, [pc, #44]	; (a78 <sd_mmc_test_unit_ready+0x48>)
     a4a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     a4c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     a4e:	2b00      	cmp	r3, #0
     a50:	d1f9      	bne.n	a46 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     a52:	0020      	movs	r0, r4
     a54:	4b09      	ldr	r3, [pc, #36]	; (a7c <sd_mmc_test_unit_ready+0x4c>)
     a56:	4798      	blx	r3
     a58:	0003      	movs	r3, r0
     a5a:	2003      	movs	r0, #3
     a5c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     a5e:	4243      	negs	r3, r0
     a60:	4158      	adcs	r0, r3
     a62:	0040      	lsls	r0, r0, #1
     a64:	e7ef      	b.n	a46 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     a66:	2200      	movs	r2, #0
     a68:	4b03      	ldr	r3, [pc, #12]	; (a78 <sd_mmc_test_unit_ready+0x48>)
     a6a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     a6c:	2002      	movs	r0, #2
     a6e:	e7ea      	b.n	a46 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     a70:	2003      	movs	r0, #3
     a72:	e7e8      	b.n	a46 <sd_mmc_test_unit_ready+0x16>
     a74:	0000031d 	.word	0x0000031d
     a78:	200000c4 	.word	0x200000c4
     a7c:	000007cd 	.word	0x000007cd

00000a80 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     a80:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     a82:	2000      	movs	r0, #0
     a84:	4b01      	ldr	r3, [pc, #4]	; (a8c <sd_mmc_test_unit_ready_0+0xc>)
     a86:	4798      	blx	r3
}
     a88:	bd10      	pop	{r4, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00000a31 	.word	0x00000a31

00000a90 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     a90:	b570      	push	{r4, r5, r6, lr}
     a92:	0004      	movs	r4, r0
     a94:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <sd_mmc_read_capacity+0x18>)
     a98:	4798      	blx	r3
     a9a:	0040      	lsls	r0, r0, #1
     a9c:	3801      	subs	r0, #1
     a9e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     aa0:	0020      	movs	r0, r4
     aa2:	4b02      	ldr	r3, [pc, #8]	; (aac <sd_mmc_read_capacity+0x1c>)
     aa4:	4798      	blx	r3
}
     aa6:	bd70      	pop	{r4, r5, r6, pc}
     aa8:	000007f5 	.word	0x000007f5
     aac:	00000a31 	.word	0x00000a31

00000ab0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     ab0:	b510      	push	{r4, lr}
     ab2:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     ab4:	2000      	movs	r0, #0
     ab6:	4b01      	ldr	r3, [pc, #4]	; (abc <sd_mmc_read_capacity_0+0xc>)
     ab8:	4798      	blx	r3
}
     aba:	bd10      	pop	{r4, pc}
     abc:	00000a91 	.word	0x00000a91

00000ac0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     ac0:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     ac2:	2000      	movs	r0, #0
     ac4:	4b01      	ldr	r3, [pc, #4]	; (acc <sd_mmc_wr_protect_0+0xc>)
     ac6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     ac8:	bd10      	pop	{r4, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	0000081d 	.word	0x0000081d

00000ad0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     ad0:	b510      	push	{r4, lr}
     ad2:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     ad4:	2201      	movs	r2, #1
     ad6:	4b0c      	ldr	r3, [pc, #48]	; (b08 <sd_mmc_mem_2_ram+0x38>)
     ad8:	4798      	blx	r3
     ada:	2800      	cmp	r0, #0
     adc:	d004      	beq.n	ae8 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     ade:	3802      	subs	r0, #2
     ae0:	4243      	negs	r3, r0
     ae2:	4158      	adcs	r0, r3
     ae4:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     ae6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     ae8:	2101      	movs	r1, #1
     aea:	0020      	movs	r0, r4
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <sd_mmc_mem_2_ram+0x3c>)
     aee:	4798      	blx	r3
     af0:	0003      	movs	r3, r0
		return CTRL_FAIL;
     af2:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     af4:	2b00      	cmp	r3, #0
     af6:	d1f6      	bne.n	ae6 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     af8:	2000      	movs	r0, #0
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <sd_mmc_mem_2_ram+0x40>)
     afc:	4798      	blx	r3
     afe:	1e43      	subs	r3, r0, #1
     b00:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     b02:	b2c0      	uxtb	r0, r0
     b04:	e7ef      	b.n	ae6 <sd_mmc_mem_2_ram+0x16>
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	00000821 	.word	0x00000821
     b0c:	000008a9 	.word	0x000008a9
     b10:	000008d5 	.word	0x000008d5

00000b14 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     b14:	b510      	push	{r4, lr}
     b16:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     b18:	0001      	movs	r1, r0
     b1a:	2000      	movs	r0, #0
     b1c:	4b01      	ldr	r3, [pc, #4]	; (b24 <sd_mmc_mem_2_ram_0+0x10>)
     b1e:	4798      	blx	r3
}
     b20:	bd10      	pop	{r4, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	00000ad1 	.word	0x00000ad1

00000b28 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     b28:	b510      	push	{r4, lr}
     b2a:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     b2c:	2201      	movs	r2, #1
     b2e:	4b0c      	ldr	r3, [pc, #48]	; (b60 <sd_mmc_ram_2_mem+0x38>)
     b30:	4798      	blx	r3
     b32:	2800      	cmp	r0, #0
     b34:	d004      	beq.n	b40 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     b36:	3802      	subs	r0, #2
     b38:	4243      	negs	r3, r0
     b3a:	4158      	adcs	r0, r3
     b3c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     b3e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     b40:	2101      	movs	r1, #1
     b42:	0020      	movs	r0, r4
     b44:	4b07      	ldr	r3, [pc, #28]	; (b64 <sd_mmc_ram_2_mem+0x3c>)
     b46:	4798      	blx	r3
     b48:	0003      	movs	r3, r0
		return CTRL_FAIL;
     b4a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     b4c:	2b00      	cmp	r3, #0
     b4e:	d1f6      	bne.n	b3e <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     b50:	2000      	movs	r0, #0
     b52:	4b05      	ldr	r3, [pc, #20]	; (b68 <sd_mmc_ram_2_mem+0x40>)
     b54:	4798      	blx	r3
     b56:	1e43      	subs	r3, r0, #1
     b58:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	e7ef      	b.n	b3e <sd_mmc_ram_2_mem+0x16>
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	00000945 	.word	0x00000945
     b64:	000009b5 	.word	0x000009b5
     b68:	000009e1 	.word	0x000009e1

00000b6c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     b6c:	b510      	push	{r4, lr}
     b6e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     b70:	0001      	movs	r1, r0
     b72:	2000      	movs	r0, #0
     b74:	4b01      	ldr	r3, [pc, #4]	; (b7c <sd_mmc_ram_2_mem_0+0x10>)
     b76:	4798      	blx	r3
}
     b78:	bd10      	pop	{r4, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00000b29 	.word	0x00000b29

00000b80 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     b80:	b500      	push	{lr}
     b82:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     b84:	466b      	mov	r3, sp
     b86:	1dd9      	adds	r1, r3, #7
     b88:	23ff      	movs	r3, #255	; 0xff
     b8a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     b8c:	2201      	movs	r2, #1
     b8e:	480b      	ldr	r0, [pc, #44]	; (bbc <sd_mmc_spi_start_write_block+0x3c>)
     b90:	4b0b      	ldr	r3, [pc, #44]	; (bc0 <sd_mmc_spi_start_write_block+0x40>)
     b92:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     b94:	4b0b      	ldr	r3, [pc, #44]	; (bc4 <sd_mmc_spi_start_write_block+0x44>)
     b96:	881b      	ldrh	r3, [r3, #0]
     b98:	2b01      	cmp	r3, #1
     b9a:	d00a      	beq.n	bb2 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     b9c:	22fc      	movs	r2, #252	; 0xfc
     b9e:	466b      	mov	r3, sp
     ba0:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     ba2:	2201      	movs	r2, #1
     ba4:	466b      	mov	r3, sp
     ba6:	1d99      	adds	r1, r3, #6
     ba8:	4804      	ldr	r0, [pc, #16]	; (bbc <sd_mmc_spi_start_write_block+0x3c>)
     baa:	4b05      	ldr	r3, [pc, #20]	; (bc0 <sd_mmc_spi_start_write_block+0x40>)
     bac:	4798      	blx	r3
}
     bae:	b003      	add	sp, #12
     bb0:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     bb2:	22fe      	movs	r2, #254	; 0xfe
     bb4:	466b      	mov	r3, sp
     bb6:	719a      	strb	r2, [r3, #6]
     bb8:	e7f3      	b.n	ba2 <sd_mmc_spi_start_write_block+0x22>
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	200000c8 	.word	0x200000c8
     bc0:	00001a25 	.word	0x00001a25
     bc4:	2000010c 	.word	0x2000010c

00000bc8 <sd_mmc_spi_wait_busy>:
{
     bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bca:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     bcc:	466b      	mov	r3, sp
     bce:	1ddc      	adds	r4, r3, #7
     bd0:	23ff      	movs	r3, #255	; 0xff
     bd2:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bd4:	4e12      	ldr	r6, [pc, #72]	; (c20 <sd_mmc_spi_wait_busy+0x58>)
     bd6:	2201      	movs	r2, #1
     bd8:	0021      	movs	r1, r4
     bda:	0030      	movs	r0, r6
     bdc:	4d11      	ldr	r5, [pc, #68]	; (c24 <sd_mmc_spi_wait_busy+0x5c>)
     bde:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     be0:	23ff      	movs	r3, #255	; 0xff
     be2:	2201      	movs	r2, #1
     be4:	0021      	movs	r1, r4
     be6:	0030      	movs	r0, r6
     be8:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bea:	23ff      	movs	r3, #255	; 0xff
     bec:	2201      	movs	r2, #1
     bee:	0021      	movs	r1, r4
     bf0:	0030      	movs	r0, r6
     bf2:	47a8      	blx	r5
     bf4:	4c0c      	ldr	r4, [pc, #48]	; (c28 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     bf6:	466b      	mov	r3, sp
     bf8:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bfa:	4e09      	ldr	r6, [pc, #36]	; (c20 <sd_mmc_spi_wait_busy+0x58>)
     bfc:	4f09      	ldr	r7, [pc, #36]	; (c24 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     bfe:	782b      	ldrb	r3, [r5, #0]
     c00:	2bff      	cmp	r3, #255	; 0xff
     c02:	d009      	beq.n	c18 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     c04:	23ff      	movs	r3, #255	; 0xff
     c06:	2201      	movs	r2, #1
     c08:	0029      	movs	r1, r5
     c0a:	0030      	movs	r0, r6
     c0c:	47b8      	blx	r7
     c0e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     c10:	2c00      	cmp	r4, #0
     c12:	d1f4      	bne.n	bfe <sd_mmc_spi_wait_busy+0x36>
			return false;
     c14:	2000      	movs	r0, #0
     c16:	e000      	b.n	c1a <sd_mmc_spi_wait_busy+0x52>
	return true;
     c18:	2001      	movs	r0, #1
}
     c1a:	b003      	add	sp, #12
     c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	200000c8 	.word	0x200000c8
     c24:	00001815 	.word	0x00001815
     c28:	00030d40 	.word	0x00030d40

00000c2c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     c30:	4b14      	ldr	r3, [pc, #80]	; (c84 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     c32:	881c      	ldrh	r4, [r3, #0]
     c34:	2c01      	cmp	r4, #1
     c36:	d023      	beq.n	c80 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     c38:	4b13      	ldr	r3, [pc, #76]	; (c88 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     c3a:	8819      	ldrh	r1, [r3, #0]
     c3c:	4b13      	ldr	r3, [pc, #76]	; (c8c <sd_mmc_spi_stop_multiwrite_block+0x60>)
     c3e:	6818      	ldr	r0, [r3, #0]
     c40:	4b13      	ldr	r3, [pc, #76]	; (c90 <sd_mmc_spi_stop_multiwrite_block+0x64>)
     c42:	4798      	blx	r3
		return true; // It is not the End of multi write
     c44:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     c46:	4284      	cmp	r4, r0
     c48:	d902      	bls.n	c50 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     c4a:	0018      	movs	r0, r3
     c4c:	b002      	add	sp, #8
     c4e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     c50:	466b      	mov	r3, sp
     c52:	1ddc      	adds	r4, r3, #7
     c54:	23ff      	movs	r3, #255	; 0xff
     c56:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     c58:	4e0e      	ldr	r6, [pc, #56]	; (c94 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     c5a:	2201      	movs	r2, #1
     c5c:	0021      	movs	r1, r4
     c5e:	0030      	movs	r0, r6
     c60:	4d0d      	ldr	r5, [pc, #52]	; (c98 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     c62:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     c64:	23fd      	movs	r3, #253	; 0xfd
     c66:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     c68:	2201      	movs	r2, #1
     c6a:	0021      	movs	r1, r4
     c6c:	0030      	movs	r0, r6
     c6e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     c70:	4b0a      	ldr	r3, [pc, #40]	; (c9c <sd_mmc_spi_stop_multiwrite_block+0x70>)
     c72:	4798      	blx	r3
     c74:	1e03      	subs	r3, r0, #0
     c76:	d1e8      	bne.n	c4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     c78:	2105      	movs	r1, #5
     c7a:	4a09      	ldr	r2, [pc, #36]	; (ca0 <sd_mmc_spi_stop_multiwrite_block+0x74>)
     c7c:	7011      	strb	r1, [r2, #0]
		return false;
     c7e:	e7e4      	b.n	c4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     c80:	2301      	movs	r3, #1
     c82:	e7e2      	b.n	c4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
     c84:	2000010c 	.word	0x2000010c
     c88:	20000104 	.word	0x20000104
     c8c:	20000114 	.word	0x20000114
     c90:	0000700d 	.word	0x0000700d
     c94:	200000c8 	.word	0x200000c8
     c98:	00001a25 	.word	0x00001a25
     c9c:	00000bc9 	.word	0x00000bc9
     ca0:	2000010b 	.word	0x2000010b

00000ca4 <sd_mmc_spi_start_read_block>:
{
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	b083      	sub	sp, #12
	token = 0;
     ca8:	2200      	movs	r2, #0
     caa:	466b      	mov	r3, sp
     cac:	71da      	strb	r2, [r3, #7]
     cae:	4c14      	ldr	r4, [pc, #80]	; (d00 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     cb0:	466b      	mov	r3, sp
     cb2:	1ddd      	adds	r5, r3, #7
     cb4:	4e13      	ldr	r6, [pc, #76]	; (d04 <sd_mmc_spi_start_read_block+0x60>)
     cb6:	4f14      	ldr	r7, [pc, #80]	; (d08 <sd_mmc_spi_start_read_block+0x64>)
     cb8:	23ff      	movs	r3, #255	; 0xff
     cba:	2201      	movs	r2, #1
     cbc:	0029      	movs	r1, r5
     cbe:	0030      	movs	r0, r6
     cc0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     cc2:	782b      	ldrb	r3, [r5, #0]
     cc4:	220f      	movs	r2, #15
     cc6:	0019      	movs	r1, r3
     cc8:	4391      	bics	r1, r2
     cca:	1e0a      	subs	r2, r1, #0
     ccc:	d009      	beq.n	ce2 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     cce:	2bfe      	cmp	r3, #254	; 0xfe
     cd0:	d013      	beq.n	cfa <sd_mmc_spi_start_read_block+0x56>
     cd2:	3c01      	subs	r4, #1
		if (i-- == 0) {
     cd4:	2c00      	cmp	r4, #0
     cd6:	d1ef      	bne.n	cb8 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     cd8:	2204      	movs	r2, #4
     cda:	4b0c      	ldr	r3, [pc, #48]	; (d0c <sd_mmc_spi_start_read_block+0x68>)
     cdc:	701a      	strb	r2, [r3, #0]
			return false;
     cde:	2000      	movs	r0, #0
     ce0:	e00c      	b.n	cfc <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     ce2:	075b      	lsls	r3, r3, #29
     ce4:	d004      	beq.n	cf0 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     ce6:	3207      	adds	r2, #7
     ce8:	4b08      	ldr	r3, [pc, #32]	; (d0c <sd_mmc_spi_start_read_block+0x68>)
     cea:	701a      	strb	r2, [r3, #0]
			return false;
     cec:	2000      	movs	r0, #0
     cee:	e005      	b.n	cfc <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     cf0:	220b      	movs	r2, #11
     cf2:	4b06      	ldr	r3, [pc, #24]	; (d0c <sd_mmc_spi_start_read_block+0x68>)
     cf4:	701a      	strb	r2, [r3, #0]
			return false;
     cf6:	2000      	movs	r0, #0
     cf8:	e000      	b.n	cfc <sd_mmc_spi_start_read_block+0x58>
	return true;
     cfa:	2001      	movs	r0, #1
}
     cfc:	b003      	add	sp, #12
     cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d00:	0007a120 	.word	0x0007a120
     d04:	200000c8 	.word	0x200000c8
     d08:	00001815 	.word	0x00001815
     d0c:	2000010b 	.word	0x2000010b

00000d10 <sd_mmc_spi_stop_write_block>:
{
     d10:	b530      	push	{r4, r5, lr}
     d12:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     d14:	a901      	add	r1, sp, #4
     d16:	2301      	movs	r3, #1
     d18:	425b      	negs	r3, r3
     d1a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     d1c:	4d14      	ldr	r5, [pc, #80]	; (d70 <sd_mmc_spi_stop_write_block+0x60>)
     d1e:	2202      	movs	r2, #2
     d20:	0028      	movs	r0, r5
     d22:	4b14      	ldr	r3, [pc, #80]	; (d74 <sd_mmc_spi_stop_write_block+0x64>)
     d24:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     d26:	466b      	mov	r3, sp
     d28:	1ddc      	adds	r4, r3, #7
     d2a:	23ff      	movs	r3, #255	; 0xff
     d2c:	2201      	movs	r2, #1
     d2e:	0021      	movs	r1, r4
     d30:	0028      	movs	r0, r5
     d32:	4d11      	ldr	r5, [pc, #68]	; (d78 <sd_mmc_spi_stop_write_block+0x68>)
     d34:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     d36:	7822      	ldrb	r2, [r4, #0]
     d38:	2311      	movs	r3, #17
     d3a:	4013      	ands	r3, r2
     d3c:	2b01      	cmp	r3, #1
     d3e:	d005      	beq.n	d4c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     d40:	2201      	movs	r2, #1
     d42:	4b0e      	ldr	r3, [pc, #56]	; (d7c <sd_mmc_spi_stop_write_block+0x6c>)
     d44:	701a      	strb	r2, [r3, #0]
		return false;
     d46:	2000      	movs	r0, #0
}
     d48:	b003      	add	sp, #12
     d4a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     d4c:	231e      	movs	r3, #30
     d4e:	401a      	ands	r2, r3
     d50:	2a04      	cmp	r2, #4
     d52:	d00b      	beq.n	d6c <sd_mmc_spi_stop_write_block+0x5c>
     d54:	2a0a      	cmp	r2, #10
     d56:	d104      	bne.n	d62 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     d58:	3a02      	subs	r2, #2
     d5a:	4b08      	ldr	r3, [pc, #32]	; (d7c <sd_mmc_spi_stop_write_block+0x6c>)
     d5c:	701a      	strb	r2, [r3, #0]
		return false;
     d5e:	2000      	movs	r0, #0
     d60:	e7f2      	b.n	d48 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     d62:	220a      	movs	r2, #10
     d64:	4b05      	ldr	r3, [pc, #20]	; (d7c <sd_mmc_spi_stop_write_block+0x6c>)
     d66:	701a      	strb	r2, [r3, #0]
		return false;
     d68:	2000      	movs	r0, #0
     d6a:	e7ed      	b.n	d48 <sd_mmc_spi_stop_write_block+0x38>
	return true;
     d6c:	2001      	movs	r0, #1
     d6e:	e7eb      	b.n	d48 <sd_mmc_spi_stop_write_block+0x38>
     d70:	200000c8 	.word	0x200000c8
     d74:	00001a25 	.word	0x00001a25
     d78:	00001815 	.word	0x00001815
     d7c:	2000010b 	.word	0x2000010b

00000d80 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     d80:	b570      	push	{r4, r5, r6, lr}
     d82:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     d84:	2500      	movs	r5, #0
     d86:	4b30      	ldr	r3, [pc, #192]	; (e48 <sd_mmc_spi_init+0xc8>)
     d88:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
     d8a:	a90f      	add	r1, sp, #60	; 0x3c
     d8c:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     d8e:	2601      	movs	r6, #1
     d90:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
     d92:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
     d94:	2025      	movs	r0, #37	; 0x25
     d96:	4b2d      	ldr	r3, [pc, #180]	; (e4c <sd_mmc_spi_init+0xcc>)
     d98:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     d9a:	ac01      	add	r4, sp, #4
     d9c:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     d9e:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     da0:	9503      	str	r5, [sp, #12]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     da2:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     da4:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     da6:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     da8:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     daa:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     dac:	2324      	movs	r3, #36	; 0x24
     dae:	54e5      	strb	r5, [r4, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     db0:	220c      	movs	r2, #12
     db2:	2100      	movs	r1, #0
     db4:	a807      	add	r0, sp, #28
     db6:	4b26      	ldr	r3, [pc, #152]	; (e50 <sd_mmc_spi_init+0xd0>)
     db8:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     dba:	2380      	movs	r3, #128	; 0x80
     dbc:	025b      	lsls	r3, r3, #9
     dbe:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     dc0:	4b24      	ldr	r3, [pc, #144]	; (e54 <sd_mmc_spi_init+0xd4>)
     dc2:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     dc4:	4b24      	ldr	r3, [pc, #144]	; (e58 <sd_mmc_spi_init+0xd8>)
     dc6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     dc8:	4b24      	ldr	r3, [pc, #144]	; (e5c <sd_mmc_spi_init+0xdc>)
     dca:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     dcc:	4b24      	ldr	r3, [pc, #144]	; (e60 <sd_mmc_spi_init+0xe0>)
     dce:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     dd0:	4b24      	ldr	r3, [pc, #144]	; (e64 <sd_mmc_spi_init+0xe4>)
     dd2:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     dd4:	4d24      	ldr	r5, [pc, #144]	; (e68 <sd_mmc_spi_init+0xe8>)
     dd6:	0022      	movs	r2, r4
     dd8:	4924      	ldr	r1, [pc, #144]	; (e6c <sd_mmc_spi_init+0xec>)
     dda:	0028      	movs	r0, r5
     ddc:	4b24      	ldr	r3, [pc, #144]	; (e70 <sd_mmc_spi_init+0xf0>)
     dde:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     de0:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     de2:	0020      	movs	r0, r4
     de4:	4b23      	ldr	r3, [pc, #140]	; (e74 <sd_mmc_spi_init+0xf4>)
     de6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     de8:	231f      	movs	r3, #31
     dea:	4018      	ands	r0, r3
     dec:	4086      	lsls	r6, r0
     dee:	4b22      	ldr	r3, [pc, #136]	; (e78 <sd_mmc_spi_init+0xf8>)
     df0:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     df2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     df4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     df6:	2b00      	cmp	r3, #0
     df8:	d1fc      	bne.n	df4 <sd_mmc_spi_init+0x74>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     dfa:	6823      	ldr	r3, [r4, #0]
     dfc:	2202      	movs	r2, #2
     dfe:	4313      	orrs	r3, r2
     e00:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     e02:	4a1e      	ldr	r2, [pc, #120]	; (e7c <sd_mmc_spi_init+0xfc>)
     e04:	2300      	movs	r3, #0
     e06:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     e08:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
     e0a:	491d      	ldr	r1, [pc, #116]	; (e80 <sd_mmc_spi_init+0x100>)
     e0c:	7808      	ldrb	r0, [r1, #0]
     e0e:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
     e10:	4c1c      	ldr	r4, [pc, #112]	; (e84 <sd_mmc_spi_init+0x104>)
     e12:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
     e14:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     e16:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     e18:	2201      	movs	r2, #1
     e1a:	4669      	mov	r1, sp
     e1c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     e1e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     e20:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     e22:	4b0a      	ldr	r3, [pc, #40]	; (e4c <sd_mmc_spi_init+0xcc>)
     e24:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     e26:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
     e28:	09d1      	lsrs	r1, r2, #7
		return NULL;
     e2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e2c:	2900      	cmp	r1, #0
     e2e:	d104      	bne.n	e3a <sd_mmc_spi_init+0xba>
		return &(ports[port_index]->Group[group_index]);
     e30:	0953      	lsrs	r3, r2, #5
     e32:	01db      	lsls	r3, r3, #7
     e34:	4914      	ldr	r1, [pc, #80]	; (e88 <sd_mmc_spi_init+0x108>)
     e36:	468c      	mov	ip, r1
     e38:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e3a:	211f      	movs	r1, #31
     e3c:	4011      	ands	r1, r2
     e3e:	2201      	movs	r2, #1
     e40:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e42:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
     e44:	b010      	add	sp, #64	; 0x40
     e46:	bd70      	pop	{r4, r5, r6, pc}
     e48:	2000010b 	.word	0x2000010b
     e4c:	00004145 	.word	0x00004145
     e50:	00007689 	.word	0x00007689
     e54:	00040003 	.word	0x00040003
     e58:	00050003 	.word	0x00050003
     e5c:	00060003 	.word	0x00060003
     e60:	00070003 	.word	0x00070003
     e64:	00061a80 	.word	0x00061a80
     e68:	200000c8 	.word	0x200000c8
     e6c:	42000800 	.word	0x42000800
     e70:	00001601 	.word	0x00001601
     e74:	0000451d 	.word	0x0000451d
     e78:	e000e100 	.word	0xe000e100
     e7c:	20000118 	.word	0x20000118
     e80:	20000024 	.word	0x20000024
     e84:	20000108 	.word	0x20000108
     e88:	41004400 	.word	0x41004400

00000e8c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e8e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e90:	2200      	movs	r2, #0
     e92:	4b0d      	ldr	r3, [pc, #52]	; (ec8 <sd_mmc_spi_select_device+0x3c>)
     e94:	701a      	strb	r2, [r3, #0]
     e96:	000c      	movs	r4, r1
     e98:	4b0c      	ldr	r3, [pc, #48]	; (ecc <sd_mmc_spi_select_device+0x40>)
     e9a:	4299      	cmp	r1, r3
     e9c:	d900      	bls.n	ea0 <sd_mmc_spi_select_device+0x14>
     e9e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     ea0:	4d0b      	ldr	r5, [pc, #44]	; (ed0 <sd_mmc_spi_select_device+0x44>)
     ea2:	4e0c      	ldr	r6, [pc, #48]	; (ed4 <sd_mmc_spi_select_device+0x48>)
     ea4:	e001      	b.n	eaa <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     ea6:	08e3      	lsrs	r3, r4, #3
     ea8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     eaa:	0021      	movs	r1, r4
     eac:	0028      	movs	r0, r5
     eae:	47b0      	blx	r6
     eb0:	2817      	cmp	r0, #23
     eb2:	d0f8      	beq.n	ea6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     eb4:	0079      	lsls	r1, r7, #1
     eb6:	19cf      	adds	r7, r1, r7
     eb8:	4907      	ldr	r1, [pc, #28]	; (ed8 <sd_mmc_spi_select_device+0x4c>)
     eba:	19c9      	adds	r1, r1, r7
     ebc:	2201      	movs	r2, #1
     ebe:	4804      	ldr	r0, [pc, #16]	; (ed0 <sd_mmc_spi_select_device+0x44>)
     ec0:	4b06      	ldr	r3, [pc, #24]	; (edc <sd_mmc_spi_select_device+0x50>)
     ec2:	4798      	blx	r3
}
     ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	2000010b 	.word	0x2000010b
     ecc:	00989680 	.word	0x00989680
     ed0:	200000c8 	.word	0x200000c8
     ed4:	00001549 	.word	0x00001549
     ed8:	20000108 	.word	0x20000108
     edc:	00001931 	.word	0x00001931

00000ee0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     ee0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     ee2:	2200      	movs	r2, #0
     ee4:	4b04      	ldr	r3, [pc, #16]	; (ef8 <sd_mmc_spi_deselect_device+0x18>)
     ee6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     ee8:	0041      	lsls	r1, r0, #1
     eea:	1808      	adds	r0, r1, r0
     eec:	4903      	ldr	r1, [pc, #12]	; (efc <sd_mmc_spi_deselect_device+0x1c>)
     eee:	1809      	adds	r1, r1, r0
     ef0:	4803      	ldr	r0, [pc, #12]	; (f00 <sd_mmc_spi_deselect_device+0x20>)
     ef2:	4b04      	ldr	r3, [pc, #16]	; (f04 <sd_mmc_spi_deselect_device+0x24>)
     ef4:	4798      	blx	r3
}
     ef6:	bd10      	pop	{r4, pc}
     ef8:	2000010b 	.word	0x2000010b
     efc:	20000108 	.word	0x20000108
     f00:	200000c8 	.word	0x200000c8
     f04:	00001931 	.word	0x00001931

00000f08 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     f0c:	22ff      	movs	r2, #255	; 0xff
     f0e:	466b      	mov	r3, sp
     f10:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     f12:	2200      	movs	r2, #0
     f14:	4b07      	ldr	r3, [pc, #28]	; (f34 <sd_mmc_spi_send_clock+0x2c>)
     f16:	701a      	strb	r2, [r3, #0]
     f18:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     f1a:	4e07      	ldr	r6, [pc, #28]	; (f38 <sd_mmc_spi_send_clock+0x30>)
     f1c:	4d07      	ldr	r5, [pc, #28]	; (f3c <sd_mmc_spi_send_clock+0x34>)
     f1e:	2201      	movs	r2, #1
     f20:	466b      	mov	r3, sp
     f22:	1dd9      	adds	r1, r3, #7
     f24:	0030      	movs	r0, r6
     f26:	47a8      	blx	r5
     f28:	3c01      	subs	r4, #1
     f2a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     f2c:	2c00      	cmp	r4, #0
     f2e:	d1f6      	bne.n	f1e <sd_mmc_spi_send_clock+0x16>
	}
}
     f30:	b002      	add	sp, #8
     f32:	bd70      	pop	{r4, r5, r6, pc}
     f34:	2000010b 	.word	0x2000010b
     f38:	200000c8 	.word	0x200000c8
     f3c:	00001a25 	.word	0x00001a25

00000f40 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     f40:	b5f0      	push	{r4, r5, r6, r7, lr}
     f42:	46c6      	mov	lr, r8
     f44:	b500      	push	{lr}
     f46:	b086      	sub	sp, #24
     f48:	4680      	mov	r8, r0
     f4a:	9200      	str	r2, [sp, #0]
     f4c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     f4e:	22ff      	movs	r2, #255	; 0xff
     f50:	230f      	movs	r3, #15
     f52:	a802      	add	r0, sp, #8
     f54:	4684      	mov	ip, r0
     f56:	4463      	add	r3, ip
     f58:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     f5a:	2200      	movs	r2, #0
     f5c:	4b53      	ldr	r3, [pc, #332]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
     f5e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     f60:	ab04      	add	r3, sp, #16
     f62:	323f      	adds	r2, #63	; 0x3f
     f64:	4640      	mov	r0, r8
     f66:	4002      	ands	r2, r0
     f68:	2040      	movs	r0, #64	; 0x40
     f6a:	4302      	orrs	r2, r0
     f6c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     f6e:	0e0a      	lsrs	r2, r1, #24
     f70:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     f72:	0c0a      	lsrs	r2, r1, #16
     f74:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     f76:	0a0a      	lsrs	r2, r1, #8
     f78:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     f7a:	7119      	strb	r1, [r3, #4]
     f7c:	2700      	movs	r7, #0
	crc = 0;
     f7e:	2300      	movs	r3, #0
		value = *buf++;
     f80:	a904      	add	r1, sp, #16
     f82:	2208      	movs	r2, #8
				crc ^= 0x09;
     f84:	2409      	movs	r4, #9
     f86:	e011      	b.n	fac <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     f88:	0076      	lsls	r6, r6, #1
     f8a:	b2f6      	uxtb	r6, r6
     f8c:	3801      	subs	r0, #1
     f8e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     f90:	2800      	cmp	r0, #0
     f92:	d008      	beq.n	fa6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     f94:	005b      	lsls	r3, r3, #1
     f96:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     f98:	001d      	movs	r5, r3
     f9a:	4075      	eors	r5, r6
     f9c:	062d      	lsls	r5, r5, #24
     f9e:	d5f3      	bpl.n	f88 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     fa0:	4063      	eors	r3, r4
     fa2:	b2db      	uxtb	r3, r3
     fa4:	e7f0      	b.n	f88 <sd_mmc_spi_adtc_start+0x48>
     fa6:	3701      	adds	r7, #1
	while (size--) {
     fa8:	2f05      	cmp	r7, #5
     faa:	d002      	beq.n	fb2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     fac:	5c7e      	ldrb	r6, [r7, r1]
     fae:	0010      	movs	r0, r2
     fb0:	e7f0      	b.n	f94 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     fb2:	005b      	lsls	r3, r3, #1
     fb4:	2201      	movs	r2, #1
     fb6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     fb8:	ac04      	add	r4, sp, #16
     fba:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     fbc:	4e3c      	ldr	r6, [pc, #240]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
     fbe:	2201      	movs	r2, #1
     fc0:	210f      	movs	r1, #15
     fc2:	ab02      	add	r3, sp, #8
     fc4:	469c      	mov	ip, r3
     fc6:	4461      	add	r1, ip
     fc8:	0030      	movs	r0, r6
     fca:	4f3a      	ldr	r7, [pc, #232]	; (10b4 <sd_mmc_spi_adtc_start+0x174>)
     fcc:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     fce:	2206      	movs	r2, #6
     fd0:	0021      	movs	r1, r4
     fd2:	0030      	movs	r0, r6
     fd4:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     fd6:	ab02      	add	r3, sp, #8
     fd8:	1dd9      	adds	r1, r3, #7
     fda:	23ff      	movs	r3, #255	; 0xff
     fdc:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     fde:	2201      	movs	r2, #1
     fe0:	0030      	movs	r0, r6
     fe2:	4e35      	ldr	r6, [pc, #212]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
     fe4:	47b0      	blx	r6
     fe6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     fe8:	ab02      	add	r3, sp, #8
     fea:	1dde      	adds	r6, r3, #7
     fec:	4f30      	ldr	r7, [pc, #192]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
     fee:	4d32      	ldr	r5, [pc, #200]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
     ff0:	23ff      	movs	r3, #255	; 0xff
     ff2:	2201      	movs	r2, #1
     ff4:	0031      	movs	r1, r6
     ff6:	0038      	movs	r0, r7
     ff8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     ffa:	7833      	ldrb	r3, [r6, #0]
     ffc:	b25a      	sxtb	r2, r3
     ffe:	2a00      	cmp	r2, #0
    1000:	da0b      	bge.n	101a <sd_mmc_spi_adtc_start+0xda>
    1002:	3c01      	subs	r4, #1
    1004:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    1006:	2c00      	cmp	r4, #0
    1008:	d1f2      	bne.n	ff0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    100a:	2202      	movs	r2, #2
    100c:	4b27      	ldr	r3, [pc, #156]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    100e:	701a      	strb	r2, [r3, #0]
			return false;
    1010:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    1012:	b006      	add	sp, #24
    1014:	bc04      	pop	{r2}
    1016:	4690      	mov	r8, r2
    1018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    101a:	4a28      	ldr	r2, [pc, #160]	; (10bc <sd_mmc_spi_adtc_start+0x17c>)
    101c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    101e:	071a      	lsls	r2, r3, #28
    1020:	d41a      	bmi.n	1058 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    1022:	075a      	lsls	r2, r3, #29
    1024:	d41d      	bmi.n	1062 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    1026:	2201      	movs	r2, #1
    1028:	4393      	bics	r3, r2
    102a:	d11f      	bne.n	106c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    102c:	4643      	mov	r3, r8
    102e:	049b      	lsls	r3, r3, #18
    1030:	d420      	bmi.n	1074 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    1032:	4643      	mov	r3, r8
    1034:	059b      	lsls	r3, r3, #22
    1036:	d425      	bmi.n	1084 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    1038:	4643      	mov	r3, r8
    103a:	055b      	lsls	r3, r3, #21
    103c:	d42b      	bmi.n	1096 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    103e:	4b20      	ldr	r3, [pc, #128]	; (10c0 <sd_mmc_spi_adtc_start+0x180>)
    1040:	466a      	mov	r2, sp
    1042:	8812      	ldrh	r2, [r2, #0]
    1044:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    1046:	4b1f      	ldr	r3, [pc, #124]	; (10c4 <sd_mmc_spi_adtc_start+0x184>)
    1048:	466a      	mov	r2, sp
    104a:	8892      	ldrh	r2, [r2, #4]
    104c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    104e:	2200      	movs	r2, #0
    1050:	4b1d      	ldr	r3, [pc, #116]	; (10c8 <sd_mmc_spi_adtc_start+0x188>)
    1052:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    1054:	2001      	movs	r0, #1
    1056:	e7dc      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    1058:	2206      	movs	r2, #6
    105a:	4b14      	ldr	r3, [pc, #80]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    105c:	701a      	strb	r2, [r3, #0]
		return false;
    105e:	2000      	movs	r0, #0
    1060:	e7d7      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    1062:	2209      	movs	r2, #9
    1064:	4b11      	ldr	r3, [pc, #68]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    1066:	701a      	strb	r2, [r3, #0]
		return false;
    1068:	2000      	movs	r0, #0
    106a:	e7d2      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    106c:	4b0f      	ldr	r3, [pc, #60]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    106e:	701a      	strb	r2, [r3, #0]
		return false;
    1070:	2000      	movs	r0, #0
    1072:	e7ce      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    1074:	4b15      	ldr	r3, [pc, #84]	; (10cc <sd_mmc_spi_adtc_start+0x18c>)
    1076:	4798      	blx	r3
    1078:	2800      	cmp	r0, #0
    107a:	d1da      	bne.n	1032 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    107c:	2203      	movs	r2, #3
    107e:	4b0b      	ldr	r3, [pc, #44]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    1080:	701a      	strb	r2, [r3, #0]
			return false;
    1082:	e7c6      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1084:	490d      	ldr	r1, [pc, #52]	; (10bc <sd_mmc_spi_adtc_start+0x17c>)
    1086:	2300      	movs	r3, #0
    1088:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    108a:	33ff      	adds	r3, #255	; 0xff
    108c:	2201      	movs	r2, #1
    108e:	4808      	ldr	r0, [pc, #32]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
    1090:	4e09      	ldr	r6, [pc, #36]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
    1092:	47b0      	blx	r6
    1094:	e7d0      	b.n	1038 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    1096:	4e09      	ldr	r6, [pc, #36]	; (10bc <sd_mmc_spi_adtc_start+0x17c>)
    1098:	23ff      	movs	r3, #255	; 0xff
    109a:	2204      	movs	r2, #4
    109c:	0031      	movs	r1, r6
    109e:	4804      	ldr	r0, [pc, #16]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
    10a0:	4f05      	ldr	r7, [pc, #20]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
    10a2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    10a4:	6833      	ldr	r3, [r6, #0]
    10a6:	ba1b      	rev	r3, r3
    10a8:	6033      	str	r3, [r6, #0]
    10aa:	e7c8      	b.n	103e <sd_mmc_spi_adtc_start+0xfe>
    10ac:	2000010b 	.word	0x2000010b
    10b0:	200000c8 	.word	0x200000c8
    10b4:	00001a25 	.word	0x00001a25
    10b8:	00001815 	.word	0x00001815
    10bc:	20000110 	.word	0x20000110
    10c0:	20000104 	.word	0x20000104
    10c4:	2000010c 	.word	0x2000010c
    10c8:	20000114 	.word	0x20000114
    10cc:	00000bc9 	.word	0x00000bc9

000010d0 <sd_mmc_spi_send_cmd>:
{
    10d0:	b510      	push	{r4, lr}
    10d2:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    10d4:	2300      	movs	r3, #0
    10d6:	9300      	str	r3, [sp, #0]
    10d8:	2200      	movs	r2, #0
    10da:	4c02      	ldr	r4, [pc, #8]	; (10e4 <sd_mmc_spi_send_cmd+0x14>)
    10dc:	47a0      	blx	r4
}
    10de:	b002      	add	sp, #8
    10e0:	bd10      	pop	{r4, pc}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	00000f41 	.word	0x00000f41

000010e8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    10e8:	4b01      	ldr	r3, [pc, #4]	; (10f0 <sd_mmc_spi_get_response+0x8>)
    10ea:	6818      	ldr	r0, [r3, #0]
}
    10ec:	4770      	bx	lr
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	20000110 	.word	0x20000110

000010f4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    10f4:	b510      	push	{r4, lr}
    10f6:	b084      	sub	sp, #16
    10f8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10fa:	2200      	movs	r2, #0
    10fc:	4b14      	ldr	r3, [pc, #80]	; (1150 <sd_mmc_spi_read_word+0x5c>)
    10fe:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1100:	4b14      	ldr	r3, [pc, #80]	; (1154 <sd_mmc_spi_read_word+0x60>)
    1102:	8819      	ldrh	r1, [r3, #0]
    1104:	4b14      	ldr	r3, [pc, #80]	; (1158 <sd_mmc_spi_read_word+0x64>)
    1106:	6818      	ldr	r0, [r3, #0]
    1108:	4b14      	ldr	r3, [pc, #80]	; (115c <sd_mmc_spi_read_word+0x68>)
    110a:	4798      	blx	r3
    110c:	2900      	cmp	r1, #0
    110e:	d103      	bne.n	1118 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1110:	4b13      	ldr	r3, [pc, #76]	; (1160 <sd_mmc_spi_read_word+0x6c>)
    1112:	4798      	blx	r3
    1114:	2800      	cmp	r0, #0
    1116:	d010      	beq.n	113a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    1118:	23ff      	movs	r3, #255	; 0xff
    111a:	2204      	movs	r2, #4
    111c:	a901      	add	r1, sp, #4
    111e:	4811      	ldr	r0, [pc, #68]	; (1164 <sd_mmc_spi_read_word+0x70>)
    1120:	4c11      	ldr	r4, [pc, #68]	; (1168 <sd_mmc_spi_read_word+0x74>)
    1122:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1124:	4b0c      	ldr	r3, [pc, #48]	; (1158 <sd_mmc_spi_read_word+0x64>)
    1126:	681a      	ldr	r2, [r3, #0]
    1128:	1d10      	adds	r0, r2, #4
    112a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    112c:	4b09      	ldr	r3, [pc, #36]	; (1154 <sd_mmc_spi_read_word+0x60>)
    112e:	8819      	ldrh	r1, [r3, #0]
    1130:	4b0a      	ldr	r3, [pc, #40]	; (115c <sd_mmc_spi_read_word+0x68>)
    1132:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1134:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1136:	2900      	cmp	r1, #0
    1138:	d001      	beq.n	113e <sd_mmc_spi_read_word+0x4a>
}
    113a:	b004      	add	sp, #16
    113c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    113e:	23ff      	movs	r3, #255	; 0xff
    1140:	2202      	movs	r2, #2
    1142:	a903      	add	r1, sp, #12
    1144:	4807      	ldr	r0, [pc, #28]	; (1164 <sd_mmc_spi_read_word+0x70>)
    1146:	4c08      	ldr	r4, [pc, #32]	; (1168 <sd_mmc_spi_read_word+0x74>)
    1148:	47a0      	blx	r4
	return true;
    114a:	2001      	movs	r0, #1
    114c:	e7f5      	b.n	113a <sd_mmc_spi_read_word+0x46>
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	2000010b 	.word	0x2000010b
    1154:	20000104 	.word	0x20000104
    1158:	20000114 	.word	0x20000114
    115c:	00007119 	.word	0x00007119
    1160:	00000ca5 	.word	0x00000ca5
    1164:	200000c8 	.word	0x200000c8
    1168:	00001815 	.word	0x00001815

0000116c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    116c:	b5f0      	push	{r4, r5, r6, r7, lr}
    116e:	46de      	mov	lr, fp
    1170:	4657      	mov	r7, sl
    1172:	4646      	mov	r6, r8
    1174:	b5c0      	push	{r6, r7, lr}
    1176:	b082      	sub	sp, #8
    1178:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    117a:	2200      	movs	r2, #0
    117c:	4b17      	ldr	r3, [pc, #92]	; (11dc <sd_mmc_spi_start_read_blocks+0x70>)
    117e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1180:	1e4c      	subs	r4, r1, #1
    1182:	b2a4      	uxth	r4, r4
    1184:	2900      	cmp	r1, #0
    1186:	d026      	beq.n	11d6 <sd_mmc_spi_start_read_blocks+0x6a>
    1188:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    118a:	4b15      	ldr	r3, [pc, #84]	; (11e0 <sd_mmc_spi_start_read_blocks+0x74>)
    118c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    118e:	4f15      	ldr	r7, [pc, #84]	; (11e4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1190:	47d0      	blx	sl
    1192:	4680      	mov	r8, r0
    1194:	2800      	cmp	r0, #0
    1196:	d017      	beq.n	11c8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1198:	883a      	ldrh	r2, [r7, #0]
    119a:	465b      	mov	r3, fp
    119c:	1999      	adds	r1, r3, r6
    119e:	23ff      	movs	r3, #255	; 0xff
    11a0:	4811      	ldr	r0, [pc, #68]	; (11e8 <sd_mmc_spi_start_read_blocks+0x7c>)
    11a2:	4d12      	ldr	r5, [pc, #72]	; (11ec <sd_mmc_spi_start_read_blocks+0x80>)
    11a4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    11a6:	883b      	ldrh	r3, [r7, #0]
    11a8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    11aa:	4a11      	ldr	r2, [pc, #68]	; (11f0 <sd_mmc_spi_start_read_blocks+0x84>)
    11ac:	6811      	ldr	r1, [r2, #0]
    11ae:	468c      	mov	ip, r1
    11b0:	4463      	add	r3, ip
    11b2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    11b4:	23ff      	movs	r3, #255	; 0xff
    11b6:	2202      	movs	r2, #2
    11b8:	a901      	add	r1, sp, #4
    11ba:	480b      	ldr	r0, [pc, #44]	; (11e8 <sd_mmc_spi_start_read_blocks+0x7c>)
    11bc:	47a8      	blx	r5
	while (nb_block--) {
    11be:	3c01      	subs	r4, #1
    11c0:	b2a4      	uxth	r4, r4
    11c2:	4b0c      	ldr	r3, [pc, #48]	; (11f4 <sd_mmc_spi_start_read_blocks+0x88>)
    11c4:	429c      	cmp	r4, r3
    11c6:	d1e3      	bne.n	1190 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    11c8:	4640      	mov	r0, r8
    11ca:	b002      	add	sp, #8
    11cc:	bc1c      	pop	{r2, r3, r4}
    11ce:	4690      	mov	r8, r2
    11d0:	469a      	mov	sl, r3
    11d2:	46a3      	mov	fp, r4
    11d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    11d6:	2301      	movs	r3, #1
    11d8:	4698      	mov	r8, r3
    11da:	e7f5      	b.n	11c8 <sd_mmc_spi_start_read_blocks+0x5c>
    11dc:	2000010b 	.word	0x2000010b
    11e0:	00000ca5 	.word	0x00000ca5
    11e4:	20000104 	.word	0x20000104
    11e8:	200000c8 	.word	0x200000c8
    11ec:	00001815 	.word	0x00001815
    11f0:	20000114 	.word	0x20000114
    11f4:	0000ffff 	.word	0x0000ffff

000011f8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    11f8:	2001      	movs	r0, #1
    11fa:	4770      	bx	lr

000011fc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    11fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fe:	46c6      	mov	lr, r8
    1200:	b500      	push	{lr}
    1202:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1204:	2200      	movs	r2, #0
    1206:	4b15      	ldr	r3, [pc, #84]	; (125c <sd_mmc_spi_start_write_blocks+0x60>)
    1208:	701a      	strb	r2, [r3, #0]
	pos = 0;
    120a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    120c:	4f14      	ldr	r7, [pc, #80]	; (1260 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    120e:	4e15      	ldr	r6, [pc, #84]	; (1264 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1210:	e000      	b.n	1214 <sd_mmc_spi_start_write_blocks+0x18>
{
    1212:	0021      	movs	r1, r4
	while (nb_block--) {
    1214:	1e4c      	subs	r4, r1, #1
    1216:	b2a4      	uxth	r4, r4
    1218:	2900      	cmp	r1, #0
    121a:	d01b      	beq.n	1254 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    121c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    121e:	8832      	ldrh	r2, [r6, #0]
    1220:	4643      	mov	r3, r8
    1222:	1959      	adds	r1, r3, r5
    1224:	4810      	ldr	r0, [pc, #64]	; (1268 <sd_mmc_spi_start_write_blocks+0x6c>)
    1226:	4b11      	ldr	r3, [pc, #68]	; (126c <sd_mmc_spi_start_write_blocks+0x70>)
    1228:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    122a:	8833      	ldrh	r3, [r6, #0]
    122c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    122e:	4a10      	ldr	r2, [pc, #64]	; (1270 <sd_mmc_spi_start_write_blocks+0x74>)
    1230:	6811      	ldr	r1, [r2, #0]
    1232:	468c      	mov	ip, r1
    1234:	4463      	add	r3, ip
    1236:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    1238:	4b0e      	ldr	r3, [pc, #56]	; (1274 <sd_mmc_spi_start_write_blocks+0x78>)
    123a:	4798      	blx	r3
    123c:	2800      	cmp	r0, #0
    123e:	d00a      	beq.n	1256 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1240:	2c00      	cmp	r4, #0
    1242:	d0e6      	beq.n	1212 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1244:	4b0c      	ldr	r3, [pc, #48]	; (1278 <sd_mmc_spi_start_write_blocks+0x7c>)
    1246:	4798      	blx	r3
    1248:	2800      	cmp	r0, #0
    124a:	d1e2      	bne.n	1212 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    124c:	2205      	movs	r2, #5
    124e:	4b03      	ldr	r3, [pc, #12]	; (125c <sd_mmc_spi_start_write_blocks+0x60>)
    1250:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1252:	e000      	b.n	1256 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1254:	2001      	movs	r0, #1
}
    1256:	bc04      	pop	{r2}
    1258:	4690      	mov	r8, r2
    125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125c:	2000010b 	.word	0x2000010b
    1260:	00000b81 	.word	0x00000b81
    1264:	20000104 	.word	0x20000104
    1268:	200000c8 	.word	0x200000c8
    126c:	00001a25 	.word	0x00001a25
    1270:	20000114 	.word	0x20000114
    1274:	00000d11 	.word	0x00000d11
    1278:	00000bc9 	.word	0x00000bc9

0000127c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    127c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    127e:	4b05      	ldr	r3, [pc, #20]	; (1294 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1280:	4798      	blx	r3
    1282:	2800      	cmp	r0, #0
    1284:	d103      	bne.n	128e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1286:	2205      	movs	r2, #5
    1288:	4b03      	ldr	r3, [pc, #12]	; (1298 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    128a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    128c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    128e:	4b03      	ldr	r3, [pc, #12]	; (129c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1290:	4798      	blx	r3
    1292:	e7fb      	b.n	128c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1294:	00000bc9 	.word	0x00000bc9
    1298:	2000010b 	.word	0x2000010b
    129c:	00000c2d 	.word	0x00000c2d

000012a0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    12a0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    12a2:	2000      	movs	r0, #0
    12a4:	4b08      	ldr	r3, [pc, #32]	; (12c8 <delay_init+0x28>)
    12a6:	4798      	blx	r3
    12a8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    12aa:	4c08      	ldr	r4, [pc, #32]	; (12cc <delay_init+0x2c>)
    12ac:	21fa      	movs	r1, #250	; 0xfa
    12ae:	0089      	lsls	r1, r1, #2
    12b0:	47a0      	blx	r4
    12b2:	4b07      	ldr	r3, [pc, #28]	; (12d0 <delay_init+0x30>)
    12b4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    12b6:	4907      	ldr	r1, [pc, #28]	; (12d4 <delay_init+0x34>)
    12b8:	0028      	movs	r0, r5
    12ba:	47a0      	blx	r4
    12bc:	4b06      	ldr	r3, [pc, #24]	; (12d8 <delay_init+0x38>)
    12be:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    12c0:	2205      	movs	r2, #5
    12c2:	4b06      	ldr	r3, [pc, #24]	; (12dc <delay_init+0x3c>)
    12c4:	601a      	str	r2, [r3, #0]
}
    12c6:	bd70      	pop	{r4, r5, r6, pc}
    12c8:	00004e71 	.word	0x00004e71
    12cc:	0000700d 	.word	0x0000700d
    12d0:	20000028 	.word	0x20000028
    12d4:	000f4240 	.word	0x000f4240
    12d8:	2000002c 	.word	0x2000002c
    12dc:	e000e010 	.word	0xe000e010

000012e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    12e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    12e2:	4b08      	ldr	r3, [pc, #32]	; (1304 <delay_cycles_ms+0x24>)
    12e4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    12e6:	4a08      	ldr	r2, [pc, #32]	; (1308 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    12e8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12ea:	2180      	movs	r1, #128	; 0x80
    12ec:	0249      	lsls	r1, r1, #9
	while (n--) {
    12ee:	3801      	subs	r0, #1
    12f0:	d307      	bcc.n	1302 <delay_cycles_ms+0x22>
	if (n > 0) {
    12f2:	2c00      	cmp	r4, #0
    12f4:	d0fb      	beq.n	12ee <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    12f6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    12f8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12fa:	6813      	ldr	r3, [r2, #0]
    12fc:	420b      	tst	r3, r1
    12fe:	d0fc      	beq.n	12fa <delay_cycles_ms+0x1a>
    1300:	e7f5      	b.n	12ee <delay_cycles_ms+0xe>
	}
}
    1302:	bd30      	pop	{r4, r5, pc}
    1304:	20000028 	.word	0x20000028
    1308:	e000e010 	.word	0xe000e010

0000130c <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    130c:	6801      	ldr	r1, [r0, #0]
    130e:	2208      	movs	r2, #8
    1310:	4b05      	ldr	r3, [pc, #20]	; (1328 <rtc_calendar_enable+0x1c>)
    1312:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1314:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1316:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1318:	b25b      	sxtb	r3, r3
    131a:	2b00      	cmp	r3, #0
    131c:	dbfb      	blt.n	1316 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    131e:	880b      	ldrh	r3, [r1, #0]
    1320:	2202      	movs	r2, #2
    1322:	4313      	orrs	r3, r2
    1324:	800b      	strh	r3, [r1, #0]
}
    1326:	4770      	bx	lr
    1328:	e000e100 	.word	0xe000e100

0000132c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    132c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    132e:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1330:	2408      	movs	r4, #8
    1332:	2380      	movs	r3, #128	; 0x80
    1334:	4907      	ldr	r1, [pc, #28]	; (1354 <rtc_calendar_disable+0x28>)
    1336:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    1338:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    133a:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    133c:	b25b      	sxtb	r3, r3
    133e:	2b00      	cmp	r3, #0
    1340:	dbfb      	blt.n	133a <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1342:	23c1      	movs	r3, #193	; 0xc1
    1344:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1346:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1348:	8813      	ldrh	r3, [r2, #0]
    134a:	2102      	movs	r1, #2
    134c:	438b      	bics	r3, r1
    134e:	8013      	strh	r3, [r2, #0]
}
    1350:	bd10      	pop	{r4, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	e000e100 	.word	0xe000e100

00001358 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1358:	b570      	push	{r4, r5, r6, lr}
    135a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    135c:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    135e:	4b07      	ldr	r3, [pc, #28]	; (137c <rtc_calendar_reset+0x24>)
    1360:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    1362:	2300      	movs	r3, #0
    1364:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    1366:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    1368:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    136a:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    136c:	b25b      	sxtb	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	dbfb      	blt.n	136a <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1372:	882b      	ldrh	r3, [r5, #0]
    1374:	2201      	movs	r2, #1
    1376:	4313      	orrs	r3, r2
    1378:	802b      	strh	r3, [r5, #0]
}
    137a:	bd70      	pop	{r4, r5, r6, pc}
    137c:	0000132d 	.word	0x0000132d

00001380 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1380:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1382:	88cb      	ldrh	r3, [r1, #6]
    1384:	88c2      	ldrh	r2, [r0, #6]
    1386:	1a9a      	subs	r2, r3, r2
    1388:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    138a:	794b      	ldrb	r3, [r1, #5]
    138c:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    138e:	790c      	ldrb	r4, [r1, #4]
    1390:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1392:	4323      	orrs	r3, r4
    1394:	788c      	ldrb	r4, [r1, #2]
    1396:	0324      	lsls	r4, r4, #12
    1398:	4323      	orrs	r3, r4
    139a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    139c:	7902      	ldrb	r2, [r0, #4]
    139e:	2a00      	cmp	r2, #0
    13a0:	d105      	bne.n	13ae <rtc_calendar_time_to_register_value+0x2e>
    13a2:	78ca      	ldrb	r2, [r1, #3]
    13a4:	2a00      	cmp	r2, #0
    13a6:	d002      	beq.n	13ae <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    13a8:	2280      	movs	r2, #128	; 0x80
    13aa:	0252      	lsls	r2, r2, #9
    13ac:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    13ae:	7848      	ldrb	r0, [r1, #1]
    13b0:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    13b2:	780a      	ldrb	r2, [r1, #0]
    13b4:	4310      	orrs	r0, r2
    13b6:	4318      	orrs	r0, r3

	return register_value;
}
    13b8:	bd10      	pop	{r4, pc}

000013ba <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    13ba:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    13bc:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    13be:	88c4      	ldrh	r4, [r0, #6]
    13c0:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    13c2:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    13c4:	018b      	lsls	r3, r1, #6
    13c6:	0f1b      	lsrs	r3, r3, #28
    13c8:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    13ca:	028b      	lsls	r3, r1, #10
    13cc:	0edb      	lsrs	r3, r3, #27
    13ce:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    13d0:	7903      	ldrb	r3, [r0, #4]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d10c      	bne.n	13f0 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    13d6:	040b      	lsls	r3, r1, #16
    13d8:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    13da:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    13dc:	03cb      	lsls	r3, r1, #15
    13de:	0fdb      	lsrs	r3, r3, #31
    13e0:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    13e2:	0988      	lsrs	r0, r1, #6
    13e4:	233f      	movs	r3, #63	; 0x3f
    13e6:	4018      	ands	r0, r3
    13e8:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    13ea:	4019      	ands	r1, r3
    13ec:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    13ee:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    13f0:	03cb      	lsls	r3, r1, #15
    13f2:	0edb      	lsrs	r3, r3, #27
    13f4:	7093      	strb	r3, [r2, #2]
    13f6:	e7f4      	b.n	13e2 <rtc_calendar_register_value_to_time+0x28>

000013f8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    13f8:	b510      	push	{r4, lr}
    13fa:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    13fc:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    13fe:	7941      	ldrb	r1, [r0, #5]
    1400:	2900      	cmp	r1, #0
    1402:	d006      	beq.n	1412 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1404:	8859      	ldrh	r1, [r3, #2]
    1406:	0449      	lsls	r1, r1, #17
    1408:	d50b      	bpl.n	1422 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    140a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    140c:	4b0a      	ldr	r3, [pc, #40]	; (1438 <rtc_calendar_get_time+0x40>)
    140e:	4798      	blx	r3
}
    1410:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1412:	490a      	ldr	r1, [pc, #40]	; (143c <rtc_calendar_get_time+0x44>)
    1414:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1416:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1418:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    141a:	b249      	sxtb	r1, r1
    141c:	2900      	cmp	r1, #0
    141e:	dbfb      	blt.n	1418 <rtc_calendar_get_time+0x20>
    1420:	e7f3      	b.n	140a <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1422:	8859      	ldrh	r1, [r3, #2]
    1424:	24c0      	movs	r4, #192	; 0xc0
    1426:	0224      	lsls	r4, r4, #8
    1428:	4321      	orrs	r1, r4
    142a:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    142c:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    142e:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1430:	b249      	sxtb	r1, r1
    1432:	2900      	cmp	r1, #0
    1434:	dbfb      	blt.n	142e <rtc_calendar_get_time+0x36>
    1436:	e7e8      	b.n	140a <rtc_calendar_get_time+0x12>
    1438:	000013bb 	.word	0x000013bb
    143c:	ffff8000 	.word	0xffff8000

00001440 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	000d      	movs	r5, r1
    1444:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1446:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1448:	2a01      	cmp	r2, #1
    144a:	d901      	bls.n	1450 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    144c:	0018      	movs	r0, r3
    144e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1450:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1452:	4b06      	ldr	r3, [pc, #24]	; (146c <rtc_calendar_set_alarm+0x2c>)
    1454:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1456:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1458:	b25b      	sxtb	r3, r3
    145a:	2b00      	cmp	r3, #0
    145c:	dbfb      	blt.n	1456 <rtc_calendar_set_alarm+0x16>
    145e:	00e4      	lsls	r4, r4, #3
    1460:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1462:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1464:	7a2b      	ldrb	r3, [r5, #8]
    1466:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1468:	2300      	movs	r3, #0
    146a:	e7ef      	b.n	144c <rtc_calendar_set_alarm+0xc>
    146c:	00001381 	.word	0x00001381

00001470 <rtc_calendar_init>:
{
    1470:	b530      	push	{r4, r5, lr}
    1472:	b083      	sub	sp, #12
    1474:	0005      	movs	r5, r0
    1476:	0014      	movs	r4, r2
	module->hw = hw;
    1478:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    147a:	4a1c      	ldr	r2, [pc, #112]	; (14ec <rtc_calendar_init+0x7c>)
    147c:	6993      	ldr	r3, [r2, #24]
    147e:	2120      	movs	r1, #32
    1480:	430b      	orrs	r3, r1
    1482:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1484:	a901      	add	r1, sp, #4
    1486:	2302      	movs	r3, #2
    1488:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    148a:	2004      	movs	r0, #4
    148c:	4b18      	ldr	r3, [pc, #96]	; (14f0 <rtc_calendar_init+0x80>)
    148e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1490:	2004      	movs	r0, #4
    1492:	4b18      	ldr	r3, [pc, #96]	; (14f4 <rtc_calendar_init+0x84>)
    1494:	4798      	blx	r3
	rtc_calendar_reset(module);
    1496:	0028      	movs	r0, r5
    1498:	4b17      	ldr	r3, [pc, #92]	; (14f8 <rtc_calendar_init+0x88>)
    149a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    149c:	7923      	ldrb	r3, [r4, #4]
    149e:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    14a0:	78e3      	ldrb	r3, [r4, #3]
    14a2:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    14a4:	88e3      	ldrh	r3, [r4, #6]
    14a6:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    14a8:	4b14      	ldr	r3, [pc, #80]	; (14fc <rtc_calendar_init+0x8c>)
    14aa:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    14ac:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    14ae:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    14b0:	7921      	ldrb	r1, [r4, #4]
    14b2:	2900      	cmp	r1, #0
    14b4:	d017      	beq.n	14e6 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    14b6:	2108      	movs	r1, #8
    14b8:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    14ba:	78a1      	ldrb	r1, [r4, #2]
    14bc:	2900      	cmp	r1, #0
    14be:	d001      	beq.n	14c4 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    14c0:	2180      	movs	r1, #128	; 0x80
    14c2:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    14c4:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    14c6:	78e3      	ldrb	r3, [r4, #3]
    14c8:	2b00      	cmp	r3, #0
    14ca:	d004      	beq.n	14d6 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    14cc:	8853      	ldrh	r3, [r2, #2]
    14ce:	2180      	movs	r1, #128	; 0x80
    14d0:	01c9      	lsls	r1, r1, #7
    14d2:	430b      	orrs	r3, r1
    14d4:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    14d6:	0021      	movs	r1, r4
    14d8:	3108      	adds	r1, #8
    14da:	2200      	movs	r2, #0
    14dc:	0028      	movs	r0, r5
    14de:	4b08      	ldr	r3, [pc, #32]	; (1500 <rtc_calendar_init+0x90>)
    14e0:	4798      	blx	r3
}
    14e2:	b003      	add	sp, #12
    14e4:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    14e6:	2148      	movs	r1, #72	; 0x48
    14e8:	430b      	orrs	r3, r1
    14ea:	e7e6      	b.n	14ba <rtc_calendar_init+0x4a>
    14ec:	40000400 	.word	0x40000400
    14f0:	00004f89 	.word	0x00004f89
    14f4:	00004efd 	.word	0x00004efd
    14f8:	00001359 	.word	0x00001359
    14fc:	20005140 	.word	0x20005140
    1500:	00001441 	.word	0x00001441

00001504 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1504:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    1506:	4b0f      	ldr	r3, [pc, #60]	; (1544 <RTC_Handler+0x40>)
    1508:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    150a:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    150c:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    150e:	8a13      	ldrh	r3, [r2, #16]
    1510:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    1512:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    1514:	79e3      	ldrb	r3, [r4, #7]
    1516:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    1518:	b258      	sxtb	r0, r3
    151a:	2800      	cmp	r0, #0
    151c:	db06      	blt.n	152c <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    151e:	07db      	lsls	r3, r3, #31
    1520:	d503      	bpl.n	152a <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    1522:	07cb      	lsls	r3, r1, #31
    1524:	d40a      	bmi.n	153c <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    1526:	2301      	movs	r3, #1
    1528:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    152a:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    152c:	078b      	lsls	r3, r1, #30
    152e:	d402      	bmi.n	1536 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    1530:	2380      	movs	r3, #128	; 0x80
    1532:	7223      	strb	r3, [r4, #8]
    1534:	e7f9      	b.n	152a <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    1536:	68d3      	ldr	r3, [r2, #12]
    1538:	4798      	blx	r3
    153a:	e7f9      	b.n	1530 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    153c:	6893      	ldr	r3, [r2, #8]
    153e:	4798      	blx	r3
    1540:	e7f1      	b.n	1526 <RTC_Handler+0x22>
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	20005140 	.word	0x20005140

00001548 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1548:	b570      	push	{r4, r5, r6, lr}
    154a:	b082      	sub	sp, #8
    154c:	0005      	movs	r5, r0
    154e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1550:	2200      	movs	r2, #0
    1552:	466b      	mov	r3, sp
    1554:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1556:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1558:	0030      	movs	r0, r6
    155a:	4b24      	ldr	r3, [pc, #144]	; (15ec <spi_set_baudrate+0xa4>)
    155c:	4798      	blx	r3
    155e:	231f      	movs	r3, #31
    1560:	4018      	ands	r0, r3
    1562:	3b1e      	subs	r3, #30
    1564:	4083      	lsls	r3, r0
    1566:	2280      	movs	r2, #128	; 0x80
    1568:	4921      	ldr	r1, [pc, #132]	; (15f0 <spi_set_baudrate+0xa8>)
    156a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    156c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    156e:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1570:	2b00      	cmp	r3, #0
    1572:	d1fc      	bne.n	156e <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1574:	338f      	adds	r3, #143	; 0x8f
    1576:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1578:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    157a:	6833      	ldr	r3, [r6, #0]
    157c:	2202      	movs	r2, #2
    157e:	4393      	bics	r3, r2
    1580:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1582:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1584:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1586:	2b00      	cmp	r3, #0
    1588:	d1fc      	bne.n	1584 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    158a:	4b1a      	ldr	r3, [pc, #104]	; (15f4 <spi_set_baudrate+0xac>)
    158c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    158e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1590:	b2c0      	uxtb	r0, r0
    1592:	4b19      	ldr	r3, [pc, #100]	; (15f8 <spi_set_baudrate+0xb0>)
    1594:	4798      	blx	r3
    1596:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    1598:	466b      	mov	r3, sp
    159a:	1d9a      	adds	r2, r3, #6
    159c:	0020      	movs	r0, r4
    159e:	4b17      	ldr	r3, [pc, #92]	; (15fc <spi_set_baudrate+0xb4>)
    15a0:	4798      	blx	r3
    15a2:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    15a4:	d003      	beq.n	15ae <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    15a6:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    15a8:	0020      	movs	r0, r4
    15aa:	b002      	add	sp, #8
    15ac:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    15ae:	466b      	mov	r3, sp
    15b0:	3306      	adds	r3, #6
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15b6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    15b8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    15ba:	2b00      	cmp	r3, #0
    15bc:	d1fc      	bne.n	15b8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    15be:	0030      	movs	r0, r6
    15c0:	4b0a      	ldr	r3, [pc, #40]	; (15ec <spi_set_baudrate+0xa4>)
    15c2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    15c4:	231f      	movs	r3, #31
    15c6:	4018      	ands	r0, r3
    15c8:	3b1e      	subs	r3, #30
    15ca:	4083      	lsls	r3, r0
    15cc:	4a08      	ldr	r2, [pc, #32]	; (15f0 <spi_set_baudrate+0xa8>)
    15ce:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15d0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    15d2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    15d4:	2b00      	cmp	r3, #0
    15d6:	d1fc      	bne.n	15d2 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    15d8:	6833      	ldr	r3, [r6, #0]
    15da:	2202      	movs	r2, #2
    15dc:	4313      	orrs	r3, r2
    15de:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15e0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    15e2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    15e4:	2b00      	cmp	r3, #0
    15e6:	d1fc      	bne.n	15e2 <spi_set_baudrate+0x9a>
    15e8:	e7de      	b.n	15a8 <spi_set_baudrate+0x60>
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	0000451d 	.word	0x0000451d
    15f0:	e000e100 	.word	0xe000e100
    15f4:	000044a5 	.word	0x000044a5
    15f8:	00004fa5 	.word	0x00004fa5
    15fc:	00004223 	.word	0x00004223

00001600 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1600:	b5f0      	push	{r4, r5, r6, r7, lr}
    1602:	b08b      	sub	sp, #44	; 0x2c
    1604:	0005      	movs	r5, r0
    1606:	000c      	movs	r4, r1
    1608:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    160a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    160c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    160e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1610:	079b      	lsls	r3, r3, #30
    1612:	d501      	bpl.n	1618 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1614:	b00b      	add	sp, #44	; 0x2c
    1616:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1618:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    161a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    161c:	07db      	lsls	r3, r3, #31
    161e:	d4f9      	bmi.n	1614 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1620:	0008      	movs	r0, r1
    1622:	4b6f      	ldr	r3, [pc, #444]	; (17e0 <spi_init+0x1e0>)
    1624:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1626:	4a6f      	ldr	r2, [pc, #444]	; (17e4 <spi_init+0x1e4>)
    1628:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    162a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    162c:	2301      	movs	r3, #1
    162e:	40bb      	lsls	r3, r7
    1630:	430b      	orrs	r3, r1
    1632:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1634:	a909      	add	r1, sp, #36	; 0x24
    1636:	2724      	movs	r7, #36	; 0x24
    1638:	5df3      	ldrb	r3, [r6, r7]
    163a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    163c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    163e:	b2c3      	uxtb	r3, r0
    1640:	9301      	str	r3, [sp, #4]
    1642:	0018      	movs	r0, r3
    1644:	4b68      	ldr	r3, [pc, #416]	; (17e8 <spi_init+0x1e8>)
    1646:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1648:	9801      	ldr	r0, [sp, #4]
    164a:	4b68      	ldr	r3, [pc, #416]	; (17ec <spi_init+0x1ec>)
    164c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    164e:	5df0      	ldrb	r0, [r6, r7]
    1650:	2100      	movs	r1, #0
    1652:	4b67      	ldr	r3, [pc, #412]	; (17f0 <spi_init+0x1f0>)
    1654:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1656:	7833      	ldrb	r3, [r6, #0]
    1658:	2b01      	cmp	r3, #1
    165a:	d03f      	beq.n	16dc <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    165c:	7833      	ldrb	r3, [r6, #0]
    165e:	2b00      	cmp	r3, #0
    1660:	d103      	bne.n	166a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1662:	6823      	ldr	r3, [r4, #0]
    1664:	2208      	movs	r2, #8
    1666:	4313      	orrs	r3, r2
    1668:	6023      	str	r3, [r4, #0]
    166a:	002b      	movs	r3, r5
    166c:	330c      	adds	r3, #12
    166e:	0029      	movs	r1, r5
    1670:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1672:	2200      	movs	r2, #0
    1674:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1676:	428b      	cmp	r3, r1
    1678:	d1fc      	bne.n	1674 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    167a:	2300      	movs	r3, #0
    167c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    167e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1680:	2400      	movs	r4, #0
    1682:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1684:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1686:	3336      	adds	r3, #54	; 0x36
    1688:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    168a:	3301      	adds	r3, #1
    168c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    168e:	3301      	adds	r3, #1
    1690:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1692:	3b35      	subs	r3, #53	; 0x35
    1694:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1696:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1698:	6828      	ldr	r0, [r5, #0]
    169a:	4b51      	ldr	r3, [pc, #324]	; (17e0 <spi_init+0x1e0>)
    169c:	4798      	blx	r3
    169e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    16a0:	4954      	ldr	r1, [pc, #336]	; (17f4 <spi_init+0x1f4>)
    16a2:	4b55      	ldr	r3, [pc, #340]	; (17f8 <spi_init+0x1f8>)
    16a4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16a6:	00bf      	lsls	r7, r7, #2
    16a8:	4b54      	ldr	r3, [pc, #336]	; (17fc <spi_init+0x1fc>)
    16aa:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    16ac:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16ae:	ab04      	add	r3, sp, #16
    16b0:	2280      	movs	r2, #128	; 0x80
    16b2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16b4:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16b6:	3a7f      	subs	r2, #127	; 0x7f
    16b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    16ba:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    16bc:	7833      	ldrb	r3, [r6, #0]
    16be:	2b00      	cmp	r3, #0
    16c0:	d102      	bne.n	16c8 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16c2:	2200      	movs	r2, #0
    16c4:	ab04      	add	r3, sp, #16
    16c6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    16c8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    16ca:	9305      	str	r3, [sp, #20]
    16cc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    16ce:	9306      	str	r3, [sp, #24]
    16d0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    16d2:	9307      	str	r3, [sp, #28]
    16d4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    16d6:	9308      	str	r3, [sp, #32]
    16d8:	2400      	movs	r4, #0
    16da:	e00b      	b.n	16f4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    16dc:	6823      	ldr	r3, [r4, #0]
    16de:	220c      	movs	r2, #12
    16e0:	4313      	orrs	r3, r2
    16e2:	6023      	str	r3, [r4, #0]
    16e4:	e7ba      	b.n	165c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16e6:	0038      	movs	r0, r7
    16e8:	4b45      	ldr	r3, [pc, #276]	; (1800 <spi_init+0x200>)
    16ea:	4798      	blx	r3
    16ec:	e00a      	b.n	1704 <spi_init+0x104>
    16ee:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    16f0:	2c04      	cmp	r4, #4
    16f2:	d010      	beq.n	1716 <spi_init+0x116>
    16f4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16f6:	00a3      	lsls	r3, r4, #2
    16f8:	aa02      	add	r2, sp, #8
    16fa:	200c      	movs	r0, #12
    16fc:	1812      	adds	r2, r2, r0
    16fe:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1700:	2800      	cmp	r0, #0
    1702:	d0f0      	beq.n	16e6 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1704:	1c43      	adds	r3, r0, #1
    1706:	d0f2      	beq.n	16ee <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1708:	a904      	add	r1, sp, #16
    170a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    170c:	0c00      	lsrs	r0, r0, #16
    170e:	b2c0      	uxtb	r0, r0
    1710:	4b3c      	ldr	r3, [pc, #240]	; (1804 <spi_init+0x204>)
    1712:	4798      	blx	r3
    1714:	e7eb      	b.n	16ee <spi_init+0xee>
	module->mode             = config->mode;
    1716:	7833      	ldrb	r3, [r6, #0]
    1718:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    171a:	7c33      	ldrb	r3, [r6, #16]
    171c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    171e:	7cb3      	ldrb	r3, [r6, #18]
    1720:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1722:	7d33      	ldrb	r3, [r6, #20]
    1724:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1726:	2200      	movs	r2, #0
    1728:	ab02      	add	r3, sp, #8
    172a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    172c:	7833      	ldrb	r3, [r6, #0]
    172e:	2b01      	cmp	r3, #1
    1730:	d012      	beq.n	1758 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    1732:	7833      	ldrb	r3, [r6, #0]
    1734:	2b00      	cmp	r3, #0
    1736:	d126      	bne.n	1786 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1738:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    173a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    173e:	7ff1      	ldrb	r1, [r6, #31]
    1740:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1742:	7fb4      	ldrb	r4, [r6, #30]
    1744:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    1746:	4319      	orrs	r1, r3
    1748:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    174a:	2320      	movs	r3, #32
    174c:	5cf3      	ldrb	r3, [r6, r3]
    174e:	2b00      	cmp	r3, #0
    1750:	d01b      	beq.n	178a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1752:	2340      	movs	r3, #64	; 0x40
    1754:	431a      	orrs	r2, r3
    1756:	e018      	b.n	178a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1758:	6828      	ldr	r0, [r5, #0]
    175a:	4b21      	ldr	r3, [pc, #132]	; (17e0 <spi_init+0x1e0>)
    175c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    175e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1760:	b2c0      	uxtb	r0, r0
    1762:	4b29      	ldr	r3, [pc, #164]	; (1808 <spi_init+0x208>)
    1764:	4798      	blx	r3
    1766:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1768:	ab02      	add	r3, sp, #8
    176a:	1d9a      	adds	r2, r3, #6
    176c:	69b0      	ldr	r0, [r6, #24]
    176e:	4b27      	ldr	r3, [pc, #156]	; (180c <spi_init+0x20c>)
    1770:	4798      	blx	r3
    1772:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1774:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1776:	2b00      	cmp	r3, #0
    1778:	d000      	beq.n	177c <spi_init+0x17c>
    177a:	e74b      	b.n	1614 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    177c:	ab02      	add	r3, sp, #8
    177e:	3306      	adds	r3, #6
    1780:	781b      	ldrb	r3, [r3, #0]
    1782:	733b      	strb	r3, [r7, #12]
    1784:	e7d5      	b.n	1732 <spi_init+0x132>
	uint32_t ctrlb = 0;
    1786:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1788:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    178a:	6873      	ldr	r3, [r6, #4]
    178c:	68b1      	ldr	r1, [r6, #8]
    178e:	430b      	orrs	r3, r1
    1790:	68f1      	ldr	r1, [r6, #12]
    1792:	430b      	orrs	r3, r1
    1794:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1796:	7c31      	ldrb	r1, [r6, #16]
    1798:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    179a:	7c71      	ldrb	r1, [r6, #17]
    179c:	2900      	cmp	r1, #0
    179e:	d103      	bne.n	17a8 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    17a0:	491b      	ldr	r1, [pc, #108]	; (1810 <spi_init+0x210>)
    17a2:	7889      	ldrb	r1, [r1, #2]
    17a4:	0789      	lsls	r1, r1, #30
    17a6:	d501      	bpl.n	17ac <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    17a8:	2180      	movs	r1, #128	; 0x80
    17aa:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    17ac:	7cb1      	ldrb	r1, [r6, #18]
    17ae:	2900      	cmp	r1, #0
    17b0:	d002      	beq.n	17b8 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    17b2:	2180      	movs	r1, #128	; 0x80
    17b4:	0289      	lsls	r1, r1, #10
    17b6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    17b8:	7cf1      	ldrb	r1, [r6, #19]
    17ba:	2900      	cmp	r1, #0
    17bc:	d002      	beq.n	17c4 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    17be:	2180      	movs	r1, #128	; 0x80
    17c0:	0089      	lsls	r1, r1, #2
    17c2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    17c4:	7d31      	ldrb	r1, [r6, #20]
    17c6:	2900      	cmp	r1, #0
    17c8:	d002      	beq.n	17d0 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    17ca:	2180      	movs	r1, #128	; 0x80
    17cc:	0189      	lsls	r1, r1, #6
    17ce:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    17d0:	6839      	ldr	r1, [r7, #0]
    17d2:	430b      	orrs	r3, r1
    17d4:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    17d6:	687b      	ldr	r3, [r7, #4]
    17d8:	431a      	orrs	r2, r3
    17da:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    17dc:	2000      	movs	r0, #0
    17de:	e719      	b.n	1614 <spi_init+0x14>
    17e0:	000044a5 	.word	0x000044a5
    17e4:	40000400 	.word	0x40000400
    17e8:	00004f89 	.word	0x00004f89
    17ec:	00004efd 	.word	0x00004efd
    17f0:	000042e1 	.word	0x000042e1
    17f4:	00001c35 	.word	0x00001c35
    17f8:	000044e1 	.word	0x000044e1
    17fc:	20005168 	.word	0x20005168
    1800:	0000432d 	.word	0x0000432d
    1804:	00005081 	.word	0x00005081
    1808:	00004fa5 	.word	0x00004fa5
    180c:	00004223 	.word	0x00004223
    1810:	41002000 	.word	0x41002000

00001814 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1814:	b5f0      	push	{r4, r5, r6, r7, lr}
    1816:	46d6      	mov	lr, sl
    1818:	464f      	mov	r7, r9
    181a:	b580      	push	{r7, lr}
    181c:	b083      	sub	sp, #12
    181e:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1820:	2538      	movs	r5, #56	; 0x38
    1822:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1824:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1826:	2e05      	cmp	r6, #5
    1828:	d075      	beq.n	1916 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    182a:	3512      	adds	r5, #18
	if (length == 0) {
    182c:	2a00      	cmp	r2, #0
    182e:	d072      	beq.n	1916 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    1830:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1832:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    1834:	2c00      	cmp	r4, #0
    1836:	d06e      	beq.n	1916 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1838:	7944      	ldrb	r4, [r0, #5]
    183a:	2c00      	cmp	r4, #0
    183c:	d103      	bne.n	1846 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    183e:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1840:	7e25      	ldrb	r5, [r4, #24]
    1842:	07a9      	lsls	r1, r5, #30
    1844:	d40a      	bmi.n	185c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    1846:	3a01      	subs	r2, #1
    1848:	b294      	uxth	r4, r2
    184a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    184c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    184e:	2102      	movs	r1, #2
    1850:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    1852:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1854:	05db      	lsls	r3, r3, #23
    1856:	0ddb      	lsrs	r3, r3, #23
    1858:	469a      	mov	sl, r3
    185a:	e037      	b.n	18cc <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    185c:	2502      	movs	r5, #2
    185e:	7625      	strb	r5, [r4, #24]
    1860:	e7f1      	b.n	1846 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1862:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1864:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    1866:	423b      	tst	r3, r7
    1868:	d0fc      	beq.n	1864 <spi_read_buffer_wait+0x50>
    186a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    186c:	423b      	tst	r3, r7
    186e:	d009      	beq.n	1884 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1870:	4653      	mov	r3, sl
    1872:	628b      	str	r3, [r1, #40]	; 0x28
    1874:	e02d      	b.n	18d2 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1876:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    1878:	464d      	mov	r5, r9
    187a:	422b      	tst	r3, r5
    187c:	d138      	bne.n	18f0 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    187e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    1880:	4213      	tst	r3, r2
    1882:	d045      	beq.n	1910 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1884:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1886:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1888:	4213      	tst	r3, r2
    188a:	d0fc      	beq.n	1886 <spi_read_buffer_wait+0x72>
    188c:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    188e:	4213      	tst	r3, r2
    1890:	d040      	beq.n	1914 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1892:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    1894:	2500      	movs	r5, #0
    1896:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1898:	4213      	tst	r3, r2
    189a:	d002      	beq.n	18a2 <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    189c:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    189e:	231e      	movs	r3, #30
    18a0:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18a2:	7983      	ldrb	r3, [r0, #6]
    18a4:	2b01      	cmp	r3, #1
    18a6:	d027      	beq.n	18f8 <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    18a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    18aa:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    18ac:	9901      	ldr	r1, [sp, #4]
    18ae:	2900      	cmp	r1, #0
    18b0:	d137      	bne.n	1922 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    18b2:	1c75      	adds	r5, r6, #1
    18b4:	b2ad      	uxth	r5, r5
    18b6:	4661      	mov	r1, ip
    18b8:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18ba:	7981      	ldrb	r1, [r0, #6]
    18bc:	2901      	cmp	r1, #1
    18be:	d01f      	beq.n	1900 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    18c0:	002e      	movs	r6, r5
	while (length--) {
    18c2:	3c01      	subs	r4, #1
    18c4:	b2a4      	uxth	r4, r4
    18c6:	4b18      	ldr	r3, [pc, #96]	; (1928 <spi_read_buffer_wait+0x114>)
    18c8:	429c      	cmp	r4, r3
    18ca:	d01f      	beq.n	190c <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    18cc:	7943      	ldrb	r3, [r0, #5]
    18ce:	2b01      	cmp	r3, #1
    18d0:	d0c7      	beq.n	1862 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    18d2:	7943      	ldrb	r3, [r0, #5]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d1d5      	bne.n	1884 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18d8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    18da:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    18dc:	4213      	tst	r3, r2
    18de:	d1ca      	bne.n	1876 <spi_read_buffer_wait+0x62>
    18e0:	4b12      	ldr	r3, [pc, #72]	; (192c <spi_read_buffer_wait+0x118>)
    18e2:	7e0d      	ldrb	r5, [r1, #24]
    18e4:	4215      	tst	r5, r2
    18e6:	d1c6      	bne.n	1876 <spi_read_buffer_wait+0x62>
    18e8:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    18ea:	2b00      	cmp	r3, #0
    18ec:	d1f9      	bne.n	18e2 <spi_read_buffer_wait+0xce>
    18ee:	e7c2      	b.n	1876 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    18f0:	2302      	movs	r3, #2
    18f2:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    18f4:	2504      	movs	r5, #4
    18f6:	e00e      	b.n	1916 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    18f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    18fa:	05db      	lsls	r3, r3, #23
    18fc:	0ddb      	lsrs	r3, r3, #23
    18fe:	e7d5      	b.n	18ac <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    1900:	3602      	adds	r6, #2
    1902:	b2b6      	uxth	r6, r6
    1904:	0a1b      	lsrs	r3, r3, #8
    1906:	4661      	mov	r1, ip
    1908:	554b      	strb	r3, [r1, r5]
    190a:	e7da      	b.n	18c2 <spi_read_buffer_wait+0xae>
    190c:	9d01      	ldr	r5, [sp, #4]
    190e:	e002      	b.n	1916 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    1910:	2512      	movs	r5, #18
    1912:	e000      	b.n	1916 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    1914:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    1916:	0028      	movs	r0, r5
    1918:	b003      	add	sp, #12
    191a:	bc0c      	pop	{r2, r3}
    191c:	4691      	mov	r9, r2
    191e:	469a      	mov	sl, r3
    1920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1922:	9d01      	ldr	r5, [sp, #4]
    1924:	e7f7      	b.n	1916 <spi_read_buffer_wait+0x102>
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	0000ffff 	.word	0x0000ffff
    192c:	00002710 	.word	0x00002710

00001930 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1930:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1932:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1934:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1936:	2c01      	cmp	r4, #1
    1938:	d001      	beq.n	193e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    193a:	0018      	movs	r0, r3
    193c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    193e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1940:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1942:	2c00      	cmp	r4, #0
    1944:	d1f9      	bne.n	193a <spi_select_slave+0xa>
		if (select) {
    1946:	2a00      	cmp	r2, #0
    1948:	d058      	beq.n	19fc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    194a:	784b      	ldrb	r3, [r1, #1]
    194c:	2b00      	cmp	r3, #0
    194e:	d044      	beq.n	19da <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1950:	6803      	ldr	r3, [r0, #0]
    1952:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1954:	07db      	lsls	r3, r3, #31
    1956:	d410      	bmi.n	197a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1958:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    195a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    195c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    195e:	2900      	cmp	r1, #0
    1960:	d104      	bne.n	196c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1962:	0953      	lsrs	r3, r2, #5
    1964:	01db      	lsls	r3, r3, #7
    1966:	492e      	ldr	r1, [pc, #184]	; (1a20 <spi_select_slave+0xf0>)
    1968:	468c      	mov	ip, r1
    196a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    196c:	211f      	movs	r1, #31
    196e:	4011      	ands	r1, r2
    1970:	2201      	movs	r2, #1
    1972:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1974:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1976:	2305      	movs	r3, #5
    1978:	e7df      	b.n	193a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    197a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    197c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    197e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1980:	2c00      	cmp	r4, #0
    1982:	d104      	bne.n	198e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1984:	0953      	lsrs	r3, r2, #5
    1986:	01db      	lsls	r3, r3, #7
    1988:	4c25      	ldr	r4, [pc, #148]	; (1a20 <spi_select_slave+0xf0>)
    198a:	46a4      	mov	ip, r4
    198c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    198e:	241f      	movs	r4, #31
    1990:	4014      	ands	r4, r2
    1992:	2201      	movs	r2, #1
    1994:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1996:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1998:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    199a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    199c:	07d2      	lsls	r2, r2, #31
    199e:	d501      	bpl.n	19a4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    19a0:	788a      	ldrb	r2, [r1, #2]
    19a2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    19a4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    19a6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    19a8:	2a00      	cmp	r2, #0
    19aa:	d1c6      	bne.n	193a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    19ac:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    19ae:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    19b0:	7e13      	ldrb	r3, [r2, #24]
    19b2:	420b      	tst	r3, r1
    19b4:	d0fc      	beq.n	19b0 <spi_select_slave+0x80>
    19b6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    19b8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    19ba:	0749      	lsls	r1, r1, #29
    19bc:	d5bd      	bpl.n	193a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    19be:	8b53      	ldrh	r3, [r2, #26]
    19c0:	075b      	lsls	r3, r3, #29
    19c2:	d501      	bpl.n	19c8 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    19c4:	2304      	movs	r3, #4
    19c6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    19c8:	7983      	ldrb	r3, [r0, #6]
    19ca:	2b01      	cmp	r3, #1
    19cc:	d002      	beq.n	19d4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    19ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    19d0:	2300      	movs	r3, #0
    19d2:	e7b2      	b.n	193a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    19d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    19d6:	2300      	movs	r3, #0
    19d8:	e7af      	b.n	193a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    19da:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    19dc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    19de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    19e0:	2900      	cmp	r1, #0
    19e2:	d104      	bne.n	19ee <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    19e4:	0953      	lsrs	r3, r2, #5
    19e6:	01db      	lsls	r3, r3, #7
    19e8:	490d      	ldr	r1, [pc, #52]	; (1a20 <spi_select_slave+0xf0>)
    19ea:	468c      	mov	ip, r1
    19ec:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    19ee:	211f      	movs	r1, #31
    19f0:	4011      	ands	r1, r2
    19f2:	2201      	movs	r2, #1
    19f4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    19f6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    19f8:	2300      	movs	r3, #0
    19fa:	e79e      	b.n	193a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    19fc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    19fe:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1a00:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1a02:	2900      	cmp	r1, #0
    1a04:	d104      	bne.n	1a10 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1a06:	0953      	lsrs	r3, r2, #5
    1a08:	01db      	lsls	r3, r3, #7
    1a0a:	4905      	ldr	r1, [pc, #20]	; (1a20 <spi_select_slave+0xf0>)
    1a0c:	468c      	mov	ip, r1
    1a0e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a10:	211f      	movs	r1, #31
    1a12:	4011      	ands	r1, r2
    1a14:	2201      	movs	r2, #1
    1a16:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1a18:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1a1a:	2300      	movs	r3, #0
    1a1c:	e78d      	b.n	193a <spi_select_slave+0xa>
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	41004400 	.word	0x41004400

00001a24 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a26:	46de      	mov	lr, fp
    1a28:	4657      	mov	r7, sl
    1a2a:	464e      	mov	r6, r9
    1a2c:	4645      	mov	r5, r8
    1a2e:	b5e0      	push	{r5, r6, r7, lr}
    1a30:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1a32:	2338      	movs	r3, #56	; 0x38
    1a34:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1a36:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1a38:	2c05      	cmp	r4, #5
    1a3a:	d002      	beq.n	1a42 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1a3c:	3312      	adds	r3, #18
	if (length == 0) {
    1a3e:	2a00      	cmp	r2, #0
    1a40:	d107      	bne.n	1a52 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    1a42:	0018      	movs	r0, r3
    1a44:	b003      	add	sp, #12
    1a46:	bc3c      	pop	{r2, r3, r4, r5}
    1a48:	4690      	mov	r8, r2
    1a4a:	4699      	mov	r9, r3
    1a4c:	46a2      	mov	sl, r4
    1a4e:	46ab      	mov	fp, r5
    1a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1a52:	7943      	ldrb	r3, [r0, #5]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d103      	bne.n	1a60 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a58:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1a5a:	7e1c      	ldrb	r4, [r3, #24]
    1a5c:	07a4      	lsls	r4, r4, #30
    1a5e:	d40a      	bmi.n	1a76 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    1a60:	4693      	mov	fp, r2
    1a62:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    1a64:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    1a66:	2502      	movs	r5, #2
    1a68:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    1a6a:	3502      	adds	r5, #2
    1a6c:	46a8      	mov	r8, r5
    1a6e:	3a01      	subs	r2, #1
    1a70:	b292      	uxth	r2, r2
    1a72:	468a      	mov	sl, r1
    1a74:	e023      	b.n	1abe <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1a76:	2402      	movs	r4, #2
    1a78:	761c      	strb	r4, [r3, #24]
    1a7a:	e7f1      	b.n	1a60 <spi_write_buffer_wait+0x3c>
    1a7c:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    1a7e:	4661      	mov	r1, ip
    1a80:	420d      	tst	r5, r1
    1a82:	d12e      	bne.n	1ae2 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1a84:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    1a86:	421d      	tst	r5, r3
    1a88:	d100      	bne.n	1a8c <spi_write_buffer_wait+0x68>
    1a8a:	e0c2      	b.n	1c12 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a8c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1a8e:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    1a90:	421d      	tst	r5, r3
    1a92:	d0fc      	beq.n	1a8e <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    1a94:	1c67      	adds	r7, r4, #1
    1a96:	b2bf      	uxth	r7, r7
    1a98:	4651      	mov	r1, sl
    1a9a:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1a9c:	7981      	ldrb	r1, [r0, #6]
    1a9e:	2901      	cmp	r1, #1
    1aa0:	d023      	beq.n	1aea <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    1aa2:	b2ad      	uxth	r5, r5
    1aa4:	003c      	movs	r4, r7
    1aa6:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    1aa8:	421f      	tst	r7, r3
    1aaa:	d002      	beq.n	1ab2 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1aac:	05ed      	lsls	r5, r5, #23
    1aae:	0ded      	lsrs	r5, r5, #23
    1ab0:	62b5      	str	r5, [r6, #40]	; 0x28
    1ab2:	1e55      	subs	r5, r2, #1
    1ab4:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    1ab6:	79c6      	ldrb	r6, [r0, #7]
    1ab8:	2e00      	cmp	r6, #0
    1aba:	d11d      	bne.n	1af8 <spi_write_buffer_wait+0xd4>
    1abc:	002a      	movs	r2, r5
	while (length--) {
    1abe:	4d5a      	ldr	r5, [pc, #360]	; (1c28 <spi_write_buffer_wait+0x204>)
    1ac0:	42aa      	cmp	r2, r5
    1ac2:	d070      	beq.n	1ba6 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    1ac4:	7945      	ldrb	r5, [r0, #5]
    1ac6:	2d00      	cmp	r5, #0
    1ac8:	d1e0      	bne.n	1a8c <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1aca:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1acc:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    1ace:	421d      	tst	r5, r3
    1ad0:	d1d4      	bne.n	1a7c <spi_write_buffer_wait+0x58>
    1ad2:	4d56      	ldr	r5, [pc, #344]	; (1c2c <spi_write_buffer_wait+0x208>)
    1ad4:	7e37      	ldrb	r7, [r6, #24]
    1ad6:	421f      	tst	r7, r3
    1ad8:	d1d0      	bne.n	1a7c <spi_write_buffer_wait+0x58>
    1ada:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1adc:	2d00      	cmp	r5, #0
    1ade:	d1f9      	bne.n	1ad4 <spi_write_buffer_wait+0xb0>
    1ae0:	e7cc      	b.n	1a7c <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1ae2:	2302      	movs	r3, #2
    1ae4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    1ae6:	3302      	adds	r3, #2
    1ae8:	e7ab      	b.n	1a42 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1aea:	3402      	adds	r4, #2
    1aec:	b2a4      	uxth	r4, r4
    1aee:	4651      	mov	r1, sl
    1af0:	5dcf      	ldrb	r7, [r1, r7]
    1af2:	023f      	lsls	r7, r7, #8
    1af4:	433d      	orrs	r5, r7
    1af6:	e7d6      	b.n	1aa6 <spi_write_buffer_wait+0x82>
    1af8:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    1afa:	7945      	ldrb	r5, [r0, #5]
    1afc:	2d00      	cmp	r5, #0
    1afe:	d137      	bne.n	1b70 <spi_write_buffer_wait+0x14c>
    1b00:	4d4b      	ldr	r5, [pc, #300]	; (1c30 <spi_write_buffer_wait+0x20c>)
    1b02:	9101      	str	r1, [sp, #4]
    1b04:	e012      	b.n	1b2c <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1b06:	3402      	adds	r4, #2
    1b08:	b2a4      	uxth	r4, r4
    1b0a:	4649      	mov	r1, r9
    1b0c:	9f01      	ldr	r7, [sp, #4]
    1b0e:	5c79      	ldrb	r1, [r7, r1]
    1b10:	0209      	lsls	r1, r1, #8
    1b12:	9f00      	ldr	r7, [sp, #0]
    1b14:	430f      	orrs	r7, r1
    1b16:	e01b      	b.n	1b50 <spi_write_buffer_wait+0x12c>
						length--;
    1b18:	3a01      	subs	r2, #1
    1b1a:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b1c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b1e:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    1b20:	4641      	mov	r1, r8
    1b22:	420f      	tst	r7, r1
    1b24:	d11b      	bne.n	1b5e <spi_write_buffer_wait+0x13a>
    1b26:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1b28:	2d00      	cmp	r5, #0
    1b2a:	d018      	beq.n	1b5e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    1b2c:	2a00      	cmp	r2, #0
    1b2e:	d0f5      	beq.n	1b1c <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b30:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1b32:	7e37      	ldrb	r7, [r6, #24]
    1b34:	421f      	tst	r7, r3
    1b36:	d0f1      	beq.n	1b1c <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    1b38:	1c67      	adds	r7, r4, #1
    1b3a:	b2b9      	uxth	r1, r7
    1b3c:	4689      	mov	r9, r1
    1b3e:	9901      	ldr	r1, [sp, #4]
    1b40:	5d09      	ldrb	r1, [r1, r4]
    1b42:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b44:	7981      	ldrb	r1, [r0, #6]
    1b46:	2901      	cmp	r1, #1
    1b48:	d0dd      	beq.n	1b06 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    1b4a:	4669      	mov	r1, sp
    1b4c:	880f      	ldrh	r7, [r1, #0]
    1b4e:	464c      	mov	r4, r9
    1b50:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    1b52:	4219      	tst	r1, r3
    1b54:	d0e0      	beq.n	1b18 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1b56:	05ff      	lsls	r7, r7, #23
    1b58:	0dff      	lsrs	r7, r7, #23
    1b5a:	62b7      	str	r7, [r6, #40]	; 0x28
    1b5c:	e7dc      	b.n	1b18 <spi_write_buffer_wait+0xf4>
    1b5e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1b60:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    1b62:	4667      	mov	r7, ip
    1b64:	423d      	tst	r5, r7
    1b66:	d118      	bne.n	1b9a <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b68:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    1b6a:	4646      	mov	r6, r8
    1b6c:	4235      	tst	r5, r6
    1b6e:	d052      	beq.n	1c16 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b70:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b72:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    1b74:	4647      	mov	r7, r8
    1b76:	423d      	tst	r5, r7
    1b78:	d0fb      	beq.n	1b72 <spi_write_buffer_wait+0x14e>
    1b7a:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    1b7c:	423d      	tst	r5, r7
    1b7e:	d007      	beq.n	1b90 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b80:	8b75      	ldrh	r5, [r6, #26]
    1b82:	423d      	tst	r5, r7
    1b84:	d000      	beq.n	1b88 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1b86:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b88:	7985      	ldrb	r5, [r0, #6]
    1b8a:	2d01      	cmp	r5, #1
    1b8c:	d009      	beq.n	1ba2 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b8e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    1b90:	465d      	mov	r5, fp
    1b92:	3d01      	subs	r5, #1
    1b94:	b2ad      	uxth	r5, r5
    1b96:	46ab      	mov	fp, r5
    1b98:	e769      	b.n	1a6e <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1b9a:	2302      	movs	r3, #2
    1b9c:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    1b9e:	3302      	adds	r3, #2
    1ba0:	e74f      	b.n	1a42 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1ba2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    1ba4:	e7f4      	b.n	1b90 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    1ba6:	7943      	ldrb	r3, [r0, #5]
    1ba8:	2b01      	cmp	r3, #1
    1baa:	d00b      	beq.n	1bc4 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    1bac:	2b00      	cmp	r3, #0
    1bae:	d134      	bne.n	1c1a <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    1bb0:	79c2      	ldrb	r2, [r0, #7]
    1bb2:	2a00      	cmp	r2, #0
    1bb4:	d100      	bne.n	1bb8 <spi_write_buffer_wait+0x194>
    1bb6:	e744      	b.n	1a42 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    1bb8:	2404      	movs	r4, #4
			while (flush_length) {
    1bba:	465b      	mov	r3, fp
    1bbc:	465d      	mov	r5, fp
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d119      	bne.n	1bf6 <spi_write_buffer_wait+0x1d2>
    1bc2:	e73e      	b.n	1a42 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1bc4:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    1bc6:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1bc8:	7e0b      	ldrb	r3, [r1, #24]
    1bca:	4213      	tst	r3, r2
    1bcc:	d0fc      	beq.n	1bc8 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1bce:	2300      	movs	r3, #0
    1bd0:	e737      	b.n	1a42 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1bd2:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    1bd4:	4223      	tst	r3, r4
    1bd6:	d022      	beq.n	1c1e <spi_write_buffer_wait+0x1fa>
    1bd8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    1bda:	4223      	tst	r3, r4
    1bdc:	d007      	beq.n	1bee <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1bde:	8b4b      	ldrh	r3, [r1, #26]
    1be0:	4223      	tst	r3, r4
    1be2:	d000      	beq.n	1be6 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1be4:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1be6:	7983      	ldrb	r3, [r0, #6]
    1be8:	2b01      	cmp	r3, #1
    1bea:	d010      	beq.n	1c0e <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1bec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    1bee:	3d01      	subs	r5, #1
    1bf0:	b2ad      	uxth	r5, r5
			while (flush_length) {
    1bf2:	2d00      	cmp	r5, #0
    1bf4:	d015      	beq.n	1c22 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1bf6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1bf8:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    1bfa:	4223      	tst	r3, r4
    1bfc:	d1e9      	bne.n	1bd2 <spi_write_buffer_wait+0x1ae>
    1bfe:	4b0b      	ldr	r3, [pc, #44]	; (1c2c <spi_write_buffer_wait+0x208>)
    1c00:	7e0a      	ldrb	r2, [r1, #24]
    1c02:	4222      	tst	r2, r4
    1c04:	d1e5      	bne.n	1bd2 <spi_write_buffer_wait+0x1ae>
    1c06:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d1f9      	bne.n	1c00 <spi_write_buffer_wait+0x1dc>
    1c0c:	e7e1      	b.n	1bd2 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1c0e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1c10:	e7ed      	b.n	1bee <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    1c12:	2312      	movs	r3, #18
    1c14:	e715      	b.n	1a42 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    1c16:	2312      	movs	r3, #18
    1c18:	e713      	b.n	1a42 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    1c1a:	2300      	movs	r3, #0
    1c1c:	e711      	b.n	1a42 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    1c1e:	2312      	movs	r3, #18
    1c20:	e70f      	b.n	1a42 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    1c22:	2300      	movs	r3, #0
    1c24:	e70d      	b.n	1a42 <spi_write_buffer_wait+0x1e>
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	0000ffff 	.word	0x0000ffff
    1c2c:	00002710 	.word	0x00002710
    1c30:	00002711 	.word	0x00002711

00001c34 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1c36:	0080      	lsls	r0, r0, #2
    1c38:	4b85      	ldr	r3, [pc, #532]	; (1e50 <_spi_interrupt_handler+0x21c>)
    1c3a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c3c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1c3e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1c40:	5ce3      	ldrb	r3, [r4, r3]
    1c42:	2236      	movs	r2, #54	; 0x36
    1c44:	5ca7      	ldrb	r7, [r4, r2]
    1c46:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1c48:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1c4a:	7db5      	ldrb	r5, [r6, #22]
    1c4c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1c4e:	07eb      	lsls	r3, r5, #31
    1c50:	d52e      	bpl.n	1cb0 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1c52:	7963      	ldrb	r3, [r4, #5]
    1c54:	2b01      	cmp	r3, #1
    1c56:	d025      	beq.n	1ca4 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d129      	bne.n	1cb0 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    1c5c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d026      	beq.n	1cb0 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c62:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1c66:	7813      	ldrb	r3, [r2, #0]
    1c68:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1c6a:	1c50      	adds	r0, r2, #1
    1c6c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c6e:	79a0      	ldrb	r0, [r4, #6]
    1c70:	2801      	cmp	r0, #1
    1c72:	d100      	bne.n	1c76 <_spi_interrupt_handler+0x42>
    1c74:	e069      	b.n	1d4a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c76:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1c78:	05db      	lsls	r3, r3, #23
    1c7a:	0ddb      	lsrs	r3, r3, #23
    1c7c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    1c7e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1c80:	3b01      	subs	r3, #1
    1c82:	b29b      	uxth	r3, r3
    1c84:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1c86:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1c88:	b29b      	uxth	r3, r3
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d110      	bne.n	1cb0 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1c8e:	3301      	adds	r3, #1
    1c90:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1c92:	7a63      	ldrb	r3, [r4, #9]
    1c94:	2b01      	cmp	r3, #1
    1c96:	d10b      	bne.n	1cb0 <_spi_interrupt_handler+0x7c>
    1c98:	79e3      	ldrb	r3, [r4, #7]
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d108      	bne.n	1cb0 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1c9e:	3302      	adds	r3, #2
    1ca0:	75b3      	strb	r3, [r6, #22]
    1ca2:	e005      	b.n	1cb0 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1ca4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d03e      	beq.n	1d28 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    1caa:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1cac:	2b00      	cmp	r3, #0
    1cae:	d1d8      	bne.n	1c62 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1cb0:	076b      	lsls	r3, r5, #29
    1cb2:	d511      	bpl.n	1cd8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1cb4:	8b73      	ldrh	r3, [r6, #26]
    1cb6:	075b      	lsls	r3, r3, #29
    1cb8:	d551      	bpl.n	1d5e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1cba:	7a63      	ldrb	r3, [r4, #9]
    1cbc:	2b01      	cmp	r3, #1
    1cbe:	d008      	beq.n	1cd2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1cc0:	221e      	movs	r2, #30
    1cc2:	2338      	movs	r3, #56	; 0x38
    1cc4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1cc6:	3b35      	subs	r3, #53	; 0x35
    1cc8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1cca:	3302      	adds	r3, #2
    1ccc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1cce:	073b      	lsls	r3, r7, #28
    1cd0:	d441      	bmi.n	1d56 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1cd2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1cd4:	2304      	movs	r3, #4
    1cd6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1cd8:	07ab      	lsls	r3, r5, #30
    1cda:	d515      	bpl.n	1d08 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1cdc:	7963      	ldrb	r3, [r4, #5]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d10e      	bne.n	1d00 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1ce2:	3307      	adds	r3, #7
    1ce4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1ce6:	3b05      	subs	r3, #5
    1ce8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1cea:	3301      	adds	r3, #1
    1cec:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    1cee:	2300      	movs	r3, #0
    1cf0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1cf2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1cf4:	3338      	adds	r3, #56	; 0x38
    1cf6:	2200      	movs	r2, #0
    1cf8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1cfa:	06fb      	lsls	r3, r7, #27
    1cfc:	d500      	bpl.n	1d00 <_spi_interrupt_handler+0xcc>
    1cfe:	e07f      	b.n	1e00 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1d00:	7963      	ldrb	r3, [r4, #5]
    1d02:	2b01      	cmp	r3, #1
    1d04:	d100      	bne.n	1d08 <_spi_interrupt_handler+0xd4>
    1d06:	e07f      	b.n	1e08 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1d08:	072b      	lsls	r3, r5, #28
    1d0a:	d508      	bpl.n	1d1e <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    1d0c:	7963      	ldrb	r3, [r4, #5]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d105      	bne.n	1d1e <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1d12:	3308      	adds	r3, #8
    1d14:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1d16:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1d18:	06bb      	lsls	r3, r7, #26
    1d1a:	d500      	bpl.n	1d1e <_spi_interrupt_handler+0xea>
    1d1c:	e08a      	b.n	1e34 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1d1e:	b26d      	sxtb	r5, r5
    1d20:	2d00      	cmp	r5, #0
    1d22:	da00      	bge.n	1d26 <_spi_interrupt_handler+0xf2>
    1d24:	e08a      	b.n	1e3c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1d28:	4b4a      	ldr	r3, [pc, #296]	; (1e54 <_spi_interrupt_handler+0x220>)
    1d2a:	881b      	ldrh	r3, [r3, #0]
    1d2c:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1d2e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1d30:	3b01      	subs	r3, #1
    1d32:	b29b      	uxth	r3, r3
    1d34:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1d36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1d38:	b29b      	uxth	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d101      	bne.n	1d42 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1d3e:	3301      	adds	r3, #1
    1d40:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1d42:	7963      	ldrb	r3, [r4, #5]
		if (0
    1d44:	2b01      	cmp	r3, #1
    1d46:	d0b0      	beq.n	1caa <_spi_interrupt_handler+0x76>
    1d48:	e786      	b.n	1c58 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1d4a:	7850      	ldrb	r0, [r2, #1]
    1d4c:	0200      	lsls	r0, r0, #8
    1d4e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1d50:	3202      	adds	r2, #2
    1d52:	62e2      	str	r2, [r4, #44]	; 0x2c
    1d54:	e790      	b.n	1c78 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1d56:	0020      	movs	r0, r4
    1d58:	69a3      	ldr	r3, [r4, #24]
    1d5a:	4798      	blx	r3
    1d5c:	e7b9      	b.n	1cd2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1d5e:	7a63      	ldrb	r3, [r4, #9]
    1d60:	2b01      	cmp	r3, #1
    1d62:	d027      	beq.n	1db4 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1d64:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d68:	05db      	lsls	r3, r3, #23
    1d6a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1d6c:	b2da      	uxtb	r2, r3
    1d6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1d70:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1d72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1d74:	1c51      	adds	r1, r2, #1
    1d76:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d78:	79a1      	ldrb	r1, [r4, #6]
    1d7a:	2901      	cmp	r1, #1
    1d7c:	d033      	beq.n	1de6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    1d7e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1d80:	3b01      	subs	r3, #1
    1d82:	b29b      	uxth	r3, r3
    1d84:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1d86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1d88:	b29b      	uxth	r3, r3
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d1a4      	bne.n	1cd8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    1d8e:	2200      	movs	r2, #0
    1d90:	3338      	adds	r3, #56	; 0x38
    1d92:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1d94:	3b34      	subs	r3, #52	; 0x34
    1d96:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1d98:	7a63      	ldrb	r3, [r4, #9]
    1d9a:	2b02      	cmp	r3, #2
    1d9c:	d029      	beq.n	1df2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1d9e:	7a63      	ldrb	r3, [r4, #9]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d000      	beq.n	1da6 <_spi_interrupt_handler+0x172>
    1da4:	e798      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1da6:	07bb      	lsls	r3, r7, #30
    1da8:	d400      	bmi.n	1dac <_spi_interrupt_handler+0x178>
    1daa:	e795      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1dac:	0020      	movs	r0, r4
    1dae:	6923      	ldr	r3, [r4, #16]
    1db0:	4798      	blx	r3
    1db2:	e791      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1db4:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1db8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1dba:	3b01      	subs	r3, #1
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1dc0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1dc2:	b29b      	uxth	r3, r3
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d000      	beq.n	1dca <_spi_interrupt_handler+0x196>
    1dc8:	e786      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1dca:	3304      	adds	r3, #4
    1dcc:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1dce:	2200      	movs	r2, #0
    1dd0:	3334      	adds	r3, #52	; 0x34
    1dd2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1dd4:	3b35      	subs	r3, #53	; 0x35
    1dd6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1dd8:	07fb      	lsls	r3, r7, #31
    1dda:	d400      	bmi.n	1dde <_spi_interrupt_handler+0x1aa>
    1ddc:	e77c      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1dde:	0020      	movs	r0, r4
    1de0:	68e3      	ldr	r3, [r4, #12]
    1de2:	4798      	blx	r3
    1de4:	e778      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1de6:	0a1b      	lsrs	r3, r3, #8
    1de8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dec:	3301      	adds	r3, #1
    1dee:	62a3      	str	r3, [r4, #40]	; 0x28
    1df0:	e7c5      	b.n	1d7e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1df2:	077b      	lsls	r3, r7, #29
    1df4:	d400      	bmi.n	1df8 <_spi_interrupt_handler+0x1c4>
    1df6:	e76f      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1df8:	0020      	movs	r0, r4
    1dfa:	6963      	ldr	r3, [r4, #20]
    1dfc:	4798      	blx	r3
    1dfe:	e76b      	b.n	1cd8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1e00:	0020      	movs	r0, r4
    1e02:	69e3      	ldr	r3, [r4, #28]
    1e04:	4798      	blx	r3
    1e06:	e77b      	b.n	1d00 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1e08:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1e0a:	2b01      	cmp	r3, #1
    1e0c:	d000      	beq.n	1e10 <_spi_interrupt_handler+0x1dc>
    1e0e:	e786      	b.n	1d1e <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1e10:	79e3      	ldrb	r3, [r4, #7]
    1e12:	2b00      	cmp	r3, #0
    1e14:	d000      	beq.n	1e18 <_spi_interrupt_handler+0x1e4>
    1e16:	e782      	b.n	1d1e <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1e18:	3302      	adds	r3, #2
    1e1a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1e1c:	3301      	adds	r3, #1
    1e1e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1e20:	2200      	movs	r2, #0
    1e22:	3335      	adds	r3, #53	; 0x35
    1e24:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1e26:	07fb      	lsls	r3, r7, #31
    1e28:	d400      	bmi.n	1e2c <_spi_interrupt_handler+0x1f8>
    1e2a:	e76d      	b.n	1d08 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1e2c:	0020      	movs	r0, r4
    1e2e:	68e3      	ldr	r3, [r4, #12]
    1e30:	4798      	blx	r3
    1e32:	e769      	b.n	1d08 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1e34:	0020      	movs	r0, r4
    1e36:	6a23      	ldr	r3, [r4, #32]
    1e38:	4798      	blx	r3
    1e3a:	e770      	b.n	1d1e <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1e3c:	2380      	movs	r3, #128	; 0x80
    1e3e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1e40:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1e42:	067b      	lsls	r3, r7, #25
    1e44:	d400      	bmi.n	1e48 <_spi_interrupt_handler+0x214>
    1e46:	e76e      	b.n	1d26 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e4a:	0020      	movs	r0, r4
    1e4c:	4798      	blx	r3
}
    1e4e:	e76a      	b.n	1d26 <_spi_interrupt_handler+0xf2>
    1e50:	20005168 	.word	0x20005168
    1e54:	20005144 	.word	0x20005144

00001e58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5a:	46c6      	mov	lr, r8
    1e5c:	b500      	push	{lr}
    1e5e:	000c      	movs	r4, r1
    1e60:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1e62:	2800      	cmp	r0, #0
    1e64:	d10f      	bne.n	1e86 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1e66:	2a00      	cmp	r2, #0
    1e68:	dd11      	ble.n	1e8e <_read+0x36>
    1e6a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1e6c:	4e09      	ldr	r6, [pc, #36]	; (1e94 <_read+0x3c>)
    1e6e:	4d0a      	ldr	r5, [pc, #40]	; (1e98 <_read+0x40>)
    1e70:	6830      	ldr	r0, [r6, #0]
    1e72:	0021      	movs	r1, r4
    1e74:	682b      	ldr	r3, [r5, #0]
    1e76:	4798      	blx	r3
		ptr++;
    1e78:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1e7a:	42bc      	cmp	r4, r7
    1e7c:	d1f8      	bne.n	1e70 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1e7e:	4640      	mov	r0, r8
    1e80:	bc04      	pop	{r2}
    1e82:	4690      	mov	r8, r2
    1e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1e86:	2301      	movs	r3, #1
    1e88:	425b      	negs	r3, r3
    1e8a:	4698      	mov	r8, r3
    1e8c:	e7f7      	b.n	1e7e <_read+0x26>
	for (; len > 0; --len) {
    1e8e:	4680      	mov	r8, r0
    1e90:	e7f5      	b.n	1e7e <_read+0x26>
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	20005150 	.word	0x20005150
    1e98:	20005148 	.word	0x20005148

00001e9c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9e:	46c6      	mov	lr, r8
    1ea0:	b500      	push	{lr}
    1ea2:	000e      	movs	r6, r1
    1ea4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1ea6:	3801      	subs	r0, #1
    1ea8:	2802      	cmp	r0, #2
    1eaa:	d810      	bhi.n	1ece <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1eac:	2a00      	cmp	r2, #0
    1eae:	d011      	beq.n	1ed4 <_write+0x38>
    1eb0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1eb2:	4b0c      	ldr	r3, [pc, #48]	; (1ee4 <_write+0x48>)
    1eb4:	4698      	mov	r8, r3
    1eb6:	4f0c      	ldr	r7, [pc, #48]	; (1ee8 <_write+0x4c>)
    1eb8:	4643      	mov	r3, r8
    1eba:	6818      	ldr	r0, [r3, #0]
    1ebc:	5d31      	ldrb	r1, [r6, r4]
    1ebe:	683b      	ldr	r3, [r7, #0]
    1ec0:	4798      	blx	r3
    1ec2:	2800      	cmp	r0, #0
    1ec4:	db08      	blt.n	1ed8 <_write+0x3c>
			return -1;
		}
		++nChars;
    1ec6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1ec8:	42a5      	cmp	r5, r4
    1eca:	d1f5      	bne.n	1eb8 <_write+0x1c>
    1ecc:	e006      	b.n	1edc <_write+0x40>
		return -1;
    1ece:	2401      	movs	r4, #1
    1ed0:	4264      	negs	r4, r4
    1ed2:	e003      	b.n	1edc <_write+0x40>
	for (; len != 0; --len) {
    1ed4:	0014      	movs	r4, r2
    1ed6:	e001      	b.n	1edc <_write+0x40>
			return -1;
    1ed8:	2401      	movs	r4, #1
    1eda:	4264      	negs	r4, r4
	}
	return nChars;
}
    1edc:	0020      	movs	r0, r4
    1ede:	bc04      	pop	{r2}
    1ee0:	4690      	mov	r8, r2
    1ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ee4:	20005150 	.word	0x20005150
    1ee8:	2000514c 	.word	0x2000514c

00001eec <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    1eec:	b530      	push	{r4, r5, lr}
    1eee:	b087      	sub	sp, #28
    1ef0:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1ef2:	aa01      	add	r2, sp, #4
    1ef4:	23a0      	movs	r3, #160	; 0xa0
    1ef6:	011b      	lsls	r3, r3, #4
    1ef8:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    1efa:	2300      	movs	r3, #0
    1efc:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1efe:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    1f00:	21fa      	movs	r1, #250	; 0xfa
    1f02:	00c9      	lsls	r1, r1, #3
    1f04:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    1f06:	2101      	movs	r1, #1
    1f08:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    1f0a:	2004      	movs	r0, #4
    1f0c:	7210      	strb	r0, [r2, #8]
    1f0e:	7253      	strb	r3, [r2, #9]
    1f10:	7293      	strb	r3, [r2, #10]
    1f12:	72d3      	strb	r3, [r2, #11]
    1f14:	7311      	strb	r1, [r2, #12]
    1f16:	7351      	strb	r1, [r2, #13]
    1f18:	4b14      	ldr	r3, [pc, #80]	; (1f6c <disk_initialize+0x80>)
    1f1a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1f1c:	2306      	movs	r3, #6
    1f1e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    1f20:	4d13      	ldr	r5, [pc, #76]	; (1f70 <disk_initialize+0x84>)
    1f22:	4914      	ldr	r1, [pc, #80]	; (1f74 <disk_initialize+0x88>)
    1f24:	0028      	movs	r0, r5
    1f26:	4b14      	ldr	r3, [pc, #80]	; (1f78 <disk_initialize+0x8c>)
    1f28:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    1f2a:	0028      	movs	r0, r5
    1f2c:	4b13      	ldr	r3, [pc, #76]	; (1f7c <disk_initialize+0x90>)
    1f2e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    1f30:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    1f32:	2c01      	cmp	r4, #1
    1f34:	d901      	bls.n	1f3a <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    1f36:	b007      	add	sp, #28
    1f38:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    1f3a:	0020      	movs	r0, r4
    1f3c:	4b10      	ldr	r3, [pc, #64]	; (1f80 <disk_initialize+0x94>)
    1f3e:	4798      	blx	r3
    1f40:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    1f42:	2803      	cmp	r0, #3
    1f44:	d106      	bne.n	1f54 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    1f46:	0020      	movs	r0, r4
    1f48:	4b0d      	ldr	r3, [pc, #52]	; (1f80 <disk_initialize+0x94>)
    1f4a:	4798      	blx	r3
    1f4c:	0003      	movs	r3, r0
		return STA_NOINIT;
    1f4e:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    1f50:	2b03      	cmp	r3, #3
    1f52:	d0f0      	beq.n	1f36 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    1f54:	2b00      	cmp	r3, #0
    1f56:	d106      	bne.n	1f66 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    1f58:	0020      	movs	r0, r4
    1f5a:	4b0a      	ldr	r3, [pc, #40]	; (1f84 <disk_initialize+0x98>)
    1f5c:	4798      	blx	r3
	return 0;
    1f5e:	1e43      	subs	r3, r0, #1
    1f60:	4198      	sbcs	r0, r3
    1f62:	0080      	lsls	r0, r0, #2
    1f64:	e7e7      	b.n	1f36 <disk_initialize+0x4a>
		return STA_NOINIT;
    1f66:	2001      	movs	r0, #1
    1f68:	e7e5      	b.n	1f36 <disk_initialize+0x4a>
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	000007de 	.word	0x000007de
    1f70:	20005154 	.word	0x20005154
    1f74:	40001400 	.word	0x40001400
    1f78:	00001471 	.word	0x00001471
    1f7c:	0000130d 	.word	0x0000130d
    1f80:	000021ed 	.word	0x000021ed
    1f84:	00002229 	.word	0x00002229

00001f88 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    1f88:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    1f8a:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <disk_status+0x18>)
    1f8c:	4798      	blx	r3
    1f8e:	1e03      	subs	r3, r0, #0
    1f90:	d004      	beq.n	1f9c <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    1f92:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    1f94:	2b02      	cmp	r3, #2
    1f96:	d000      	beq.n	1f9a <disk_status+0x12>
	default:
		return STA_NOINIT;
    1f98:	3802      	subs	r0, #2
	}
}
    1f9a:	bd10      	pop	{r4, pc}
		return 0;
    1f9c:	2000      	movs	r0, #0
    1f9e:	e7fc      	b.n	1f9a <disk_status+0x12>
    1fa0:	000021ed 	.word	0x000021ed

00001fa4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    1fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa6:	46de      	mov	lr, fp
    1fa8:	464f      	mov	r7, r9
    1faa:	4646      	mov	r6, r8
    1fac:	b5c0      	push	{r6, r7, lr}
    1fae:	b084      	sub	sp, #16
    1fb0:	9001      	str	r0, [sp, #4]
    1fb2:	000d      	movs	r5, r1
    1fb4:	0014      	movs	r4, r2
    1fb6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    1fb8:	4b18      	ldr	r3, [pc, #96]	; (201c <STACK_SIZE+0x1c>)
    1fba:	4798      	blx	r3
    1fbc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    1fbe:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    1fc0:	2e00      	cmp	r6, #0
    1fc2:	d105      	bne.n	1fd0 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    1fc4:	b004      	add	sp, #16
    1fc6:	bc1c      	pop	{r2, r3, r4}
    1fc8:	4690      	mov	r8, r2
    1fca:	4699      	mov	r9, r3
    1fcc:	46a3      	mov	fp, r4
    1fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    1fd0:	a903      	add	r1, sp, #12
    1fd2:	9801      	ldr	r0, [sp, #4]
    1fd4:	4b12      	ldr	r3, [pc, #72]	; (2020 <STACK_SIZE+0x20>)
    1fd6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    1fd8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    1fda:	0032      	movs	r2, r6
    1fdc:	437a      	muls	r2, r7
    1fde:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    1fe0:	9b03      	ldr	r3, [sp, #12]
    1fe2:	3301      	adds	r3, #1
    1fe4:	4373      	muls	r3, r6
		return RES_PARERR;
    1fe6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    1fe8:	429a      	cmp	r2, r3
    1fea:	d8eb      	bhi.n	1fc4 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    1fec:	2f00      	cmp	r7, #0
    1fee:	d011      	beq.n	2014 <STACK_SIZE+0x14>
    1ff0:	0273      	lsls	r3, r6, #9
    1ff2:	4698      	mov	r8, r3
    1ff4:	1c7b      	adds	r3, r7, #1
    1ff6:	469b      	mov	fp, r3
    1ff8:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    1ffa:	4e0a      	ldr	r6, [pc, #40]	; (2024 <STACK_SIZE+0x24>)
    1ffc:	002a      	movs	r2, r5
    1ffe:	0021      	movs	r1, r4
    2000:	9801      	ldr	r0, [sp, #4]
    2002:	47b0      	blx	r6
    2004:	2800      	cmp	r0, #0
    2006:	d107      	bne.n	2018 <STACK_SIZE+0x18>
    2008:	3701      	adds	r7, #1
    200a:	444c      	add	r4, r9
    200c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    200e:	455f      	cmp	r7, fp
    2010:	d1f4      	bne.n	1ffc <disk_read+0x58>
    2012:	e7d7      	b.n	1fc4 <disk_read+0x20>
	return RES_OK;
    2014:	2000      	movs	r0, #0
    2016:	e7d5      	b.n	1fc4 <disk_read+0x20>
			return RES_ERROR;
    2018:	2001      	movs	r0, #1
    201a:	e7d3      	b.n	1fc4 <disk_read+0x20>
    201c:	00002221 	.word	0x00002221
    2020:	00002205 	.word	0x00002205
    2024:	00002241 	.word	0x00002241

00002028 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
    202a:	46de      	mov	lr, fp
    202c:	464f      	mov	r7, r9
    202e:	4646      	mov	r6, r8
    2030:	b5c0      	push	{r6, r7, lr}
    2032:	b084      	sub	sp, #16
    2034:	9001      	str	r0, [sp, #4]
    2036:	000d      	movs	r5, r1
    2038:	0014      	movs	r4, r2
    203a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    203c:	4b18      	ldr	r3, [pc, #96]	; (20a0 <disk_write+0x78>)
    203e:	4798      	blx	r3
    2040:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    2042:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    2044:	2e00      	cmp	r6, #0
    2046:	d105      	bne.n	2054 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    2048:	b004      	add	sp, #16
    204a:	bc1c      	pop	{r2, r3, r4}
    204c:	4690      	mov	r8, r2
    204e:	4699      	mov	r9, r3
    2050:	46a3      	mov	fp, r4
    2052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    2054:	a903      	add	r1, sp, #12
    2056:	9801      	ldr	r0, [sp, #4]
    2058:	4b12      	ldr	r3, [pc, #72]	; (20a4 <disk_write+0x7c>)
    205a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    205c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    205e:	0032      	movs	r2, r6
    2060:	437a      	muls	r2, r7
    2062:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    2064:	9b03      	ldr	r3, [sp, #12]
    2066:	3301      	adds	r3, #1
    2068:	4373      	muls	r3, r6
		return RES_PARERR;
    206a:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    206c:	429a      	cmp	r2, r3
    206e:	d8eb      	bhi.n	2048 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    2070:	2f00      	cmp	r7, #0
    2072:	d011      	beq.n	2098 <disk_write+0x70>
    2074:	0273      	lsls	r3, r6, #9
    2076:	4698      	mov	r8, r3
    2078:	1c7b      	adds	r3, r7, #1
    207a:	469b      	mov	fp, r3
    207c:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    207e:	4e0a      	ldr	r6, [pc, #40]	; (20a8 <disk_write+0x80>)
    2080:	002a      	movs	r2, r5
    2082:	0021      	movs	r1, r4
    2084:	9801      	ldr	r0, [sp, #4]
    2086:	47b0      	blx	r6
    2088:	2800      	cmp	r0, #0
    208a:	d107      	bne.n	209c <disk_write+0x74>
    208c:	3701      	adds	r7, #1
    208e:	444c      	add	r4, r9
    2090:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    2092:	455f      	cmp	r7, fp
    2094:	d1f4      	bne.n	2080 <disk_write+0x58>
    2096:	e7d7      	b.n	2048 <disk_write+0x20>
	return RES_OK;
    2098:	2000      	movs	r0, #0
    209a:	e7d5      	b.n	2048 <disk_write+0x20>
			return RES_ERROR;
    209c:	2001      	movs	r0, #1
    209e:	e7d3      	b.n	2048 <disk_write+0x20>
    20a0:	00002221 	.word	0x00002221
    20a4:	00002205 	.word	0x00002205
    20a8:	00002261 	.word	0x00002261

000020ac <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    20ac:	b510      	push	{r4, lr}
    20ae:	b082      	sub	sp, #8
    20b0:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    20b2:	2901      	cmp	r1, #1
    20b4:	d00b      	beq.n	20ce <disk_ioctl+0x22>
    20b6:	2900      	cmp	r1, #0
    20b8:	d020      	beq.n	20fc <disk_ioctl+0x50>
    20ba:	2902      	cmp	r1, #2
    20bc:	d00f      	beq.n	20de <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    20be:	2004      	movs	r0, #4
	switch (ctrl) {
    20c0:	2903      	cmp	r1, #3
    20c2:	d102      	bne.n	20ca <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    20c4:	2301      	movs	r3, #1
    20c6:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    20c8:	2000      	movs	r0, #0
	}

	return res;
}
    20ca:	b002      	add	sp, #8
    20cc:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    20ce:	a901      	add	r1, sp, #4
    20d0:	4b0e      	ldr	r3, [pc, #56]	; (210c <disk_ioctl+0x60>)
    20d2:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    20d4:	9b01      	ldr	r3, [sp, #4]
    20d6:	3301      	adds	r3, #1
    20d8:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    20da:	2000      	movs	r0, #0
	break;
    20dc:	e7f5      	b.n	20ca <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    20de:	4b0c      	ldr	r3, [pc, #48]	; (2110 <disk_ioctl+0x64>)
    20e0:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    20e2:	1e43      	subs	r3, r0, #1
    20e4:	b2db      	uxtb	r3, r3
    20e6:	2b01      	cmp	r3, #1
    20e8:	d904      	bls.n	20f4 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    20ea:	1f03      	subs	r3, r0, #4
    20ec:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    20ee:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    20f0:	4213      	tst	r3, r2
    20f2:	d1ea      	bne.n	20ca <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    20f4:	2300      	movs	r3, #0
    20f6:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    20f8:	2000      	movs	r0, #0
	break;
    20fa:	e7e6      	b.n	20ca <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    20fc:	4b05      	ldr	r3, [pc, #20]	; (2114 <disk_ioctl+0x68>)
    20fe:	4798      	blx	r3
    2100:	2800      	cmp	r0, #0
    2102:	d001      	beq.n	2108 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    2104:	2003      	movs	r0, #3
    2106:	e7e0      	b.n	20ca <disk_ioctl+0x1e>
			res = RES_OK;
    2108:	2000      	movs	r0, #0
    210a:	e7de      	b.n	20ca <disk_ioctl+0x1e>
    210c:	00002205 	.word	0x00002205
    2110:	00002221 	.word	0x00002221
    2114:	000021ed 	.word	0x000021ed

00002118 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    2118:	b500      	push	{lr}
    211a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    211c:	4669      	mov	r1, sp
    211e:	480f      	ldr	r0, [pc, #60]	; (215c <get_fattime+0x44>)
    2120:	4b0f      	ldr	r3, [pc, #60]	; (2160 <get_fattime+0x48>)
    2122:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    2124:	466b      	mov	r3, sp
    2126:	7958      	ldrb	r0, [r3, #5]
    2128:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    212a:	791b      	ldrb	r3, [r3, #4]
    212c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    212e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    2130:	466b      	mov	r3, sp
    2132:	789b      	ldrb	r3, [r3, #2]
    2134:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    2136:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    2138:	466b      	mov	r3, sp
    213a:	785b      	ldrb	r3, [r3, #1]
    213c:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    213e:	4318      	orrs	r0, r3
    2140:	466b      	mov	r3, sp
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	085b      	lsrs	r3, r3, #1
    2146:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    2148:	466b      	mov	r3, sp
    214a:	88db      	ldrh	r3, [r3, #6]
    214c:	4a05      	ldr	r2, [pc, #20]	; (2164 <get_fattime+0x4c>)
    214e:	4694      	mov	ip, r2
    2150:	4463      	add	r3, ip
    2152:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    2154:	4318      	orrs	r0, r3

	return ul_time;
}
    2156:	b003      	add	sp, #12
    2158:	bd00      	pop	{pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	20005154 	.word	0x20005154
    2160:	000013f9 	.word	0x000013f9
    2164:	fffff844 	.word	0xfffff844

00002168 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    2168:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    216a:	287f      	cmp	r0, #127	; 0x7f
    216c:	d911      	bls.n	2192 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    216e:	2900      	cmp	r1, #0
    2170:	d111      	bne.n	2196 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    2172:	28c7      	cmp	r0, #199	; 0xc7
    2174:	d017      	beq.n	21a6 <ff_convert+0x3e>
    2176:	4a0d      	ldr	r2, [pc, #52]	; (21ac <ff_convert+0x44>)
    2178:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    217a:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    217c:	8811      	ldrh	r1, [r2, #0]
    217e:	4281      	cmp	r1, r0
    2180:	d004      	beq.n	218c <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    2182:	3301      	adds	r3, #1
    2184:	b29b      	uxth	r3, r3
    2186:	3202      	adds	r2, #2
    2188:	2b80      	cmp	r3, #128	; 0x80
    218a:	d1f7      	bne.n	217c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    218c:	3380      	adds	r3, #128	; 0x80
    218e:	20ff      	movs	r0, #255	; 0xff
    2190:	4003      	ands	r3, r0
		}
	}

	return c;
}
    2192:	0018      	movs	r0, r3
    2194:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    2196:	2300      	movs	r3, #0
    2198:	28ff      	cmp	r0, #255	; 0xff
    219a:	d8fa      	bhi.n	2192 <ff_convert+0x2a>
    219c:	3880      	subs	r0, #128	; 0x80
    219e:	0040      	lsls	r0, r0, #1
    21a0:	4b02      	ldr	r3, [pc, #8]	; (21ac <ff_convert+0x44>)
    21a2:	5ac3      	ldrh	r3, [r0, r3]
    21a4:	e7f5      	b.n	2192 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    21a6:	2300      	movs	r3, #0
    21a8:	e7f0      	b.n	218c <ff_convert+0x24>
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	00008794 	.word	0x00008794

000021b0 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    21b0:	2861      	cmp	r0, #97	; 0x61
    21b2:	d014      	beq.n	21de <ff_wtoupper+0x2e>
    21b4:	4b0b      	ldr	r3, [pc, #44]	; (21e4 <ff_wtoupper+0x34>)
    21b6:	3304      	adds	r3, #4
    21b8:	2101      	movs	r1, #1
    21ba:	2262      	movs	r2, #98	; 0x62
    21bc:	4290      	cmp	r0, r2
    21be:	d007      	beq.n	21d0 <ff_wtoupper+0x20>
    21c0:	3101      	adds	r1, #1
    21c2:	3302      	adds	r3, #2
    21c4:	1e9a      	subs	r2, r3, #2
    21c6:	8812      	ldrh	r2, [r2, #0]
    21c8:	2a00      	cmp	r2, #0
    21ca:	d1f7      	bne.n	21bc <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    21cc:	0003      	movs	r3, r0
    21ce:	e004      	b.n	21da <ff_wtoupper+0x2a>
    21d0:	1e03      	subs	r3, r0, #0
    21d2:	d002      	beq.n	21da <ff_wtoupper+0x2a>
    21d4:	0049      	lsls	r1, r1, #1
    21d6:	4b04      	ldr	r3, [pc, #16]	; (21e8 <ff_wtoupper+0x38>)
    21d8:	5acb      	ldrh	r3, [r1, r3]
}
    21da:	0018      	movs	r0, r3
    21dc:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    21de:	2100      	movs	r1, #0
    21e0:	e7f8      	b.n	21d4 <ff_wtoupper+0x24>
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	00008894 	.word	0x00008894
    21e8:	00008a74 	.word	0x00008a74

000021ec <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    21ec:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    21ee:	2301      	movs	r3, #1
    21f0:	2800      	cmp	r0, #0
    21f2:	d001      	beq.n	21f8 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    21f4:	0018      	movs	r0, r3
    21f6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    21f8:	4b01      	ldr	r3, [pc, #4]	; (2200 <mem_test_unit_ready+0x14>)
    21fa:	4798      	blx	r3
    21fc:	0003      	movs	r3, r0
    21fe:	e7f9      	b.n	21f4 <mem_test_unit_ready+0x8>
    2200:	00000a81 	.word	0x00000a81

00002204 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    2204:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    2206:	2301      	movs	r3, #1
    2208:	2800      	cmp	r0, #0
    220a:	d001      	beq.n	2210 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    220c:	0018      	movs	r0, r3
    220e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    2210:	0008      	movs	r0, r1
    2212:	4b02      	ldr	r3, [pc, #8]	; (221c <mem_read_capacity+0x18>)
    2214:	4798      	blx	r3
    2216:	0003      	movs	r3, r0
    2218:	e7f8      	b.n	220c <mem_read_capacity+0x8>
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	00000ab1 	.word	0x00000ab1

00002220 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    2220:	4243      	negs	r3, r0
    2222:	4158      	adcs	r0, r3
    2224:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    2226:	4770      	bx	lr

00002228 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    2228:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    222a:	2301      	movs	r3, #1
    222c:	2800      	cmp	r0, #0
    222e:	d001      	beq.n	2234 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    2230:	0018      	movs	r0, r3
    2232:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    2234:	4b01      	ldr	r3, [pc, #4]	; (223c <mem_wr_protect+0x14>)
    2236:	4798      	blx	r3
    2238:	0003      	movs	r3, r0
    223a:	e7f9      	b.n	2230 <mem_wr_protect+0x8>
    223c:	00000ac1 	.word	0x00000ac1

00002240 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    2240:	b510      	push	{r4, lr}
    2242:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    2244:	2301      	movs	r3, #1
    2246:	2800      	cmp	r0, #0
    2248:	d001      	beq.n	224e <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    224a:	0018      	movs	r0, r3
    224c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    224e:	0011      	movs	r1, r2
    2250:	0020      	movs	r0, r4
    2252:	4b02      	ldr	r3, [pc, #8]	; (225c <memory_2_ram+0x1c>)
    2254:	4798      	blx	r3
    2256:	0003      	movs	r3, r0
    2258:	e7f7      	b.n	224a <memory_2_ram+0xa>
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	00000b15 	.word	0x00000b15

00002260 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    2260:	b510      	push	{r4, lr}
    2262:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    2264:	2301      	movs	r3, #1
    2266:	2800      	cmp	r0, #0
    2268:	d001      	beq.n	226e <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    226a:	0018      	movs	r0, r3
    226c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    226e:	0011      	movs	r1, r2
    2270:	0020      	movs	r0, r4
    2272:	4b02      	ldr	r3, [pc, #8]	; (227c <ram_2_memory+0x1c>)
    2274:	4798      	blx	r3
    2276:	0003      	movs	r3, r0
    2278:	e7f7      	b.n	226a <ram_2_memory+0xa>
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	00000b6d 	.word	0x00000b6d

00002280 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    2280:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2282:	2a00      	cmp	r2, #0
    2284:	d005      	beq.n	2292 <mem_cpy+0x12>
    2286:	2300      	movs	r3, #0
		*d++ = *s++;
    2288:	5ccc      	ldrb	r4, [r1, r3]
    228a:	54c4      	strb	r4, [r0, r3]
    228c:	3301      	adds	r3, #1
	while (cnt--)
    228e:	4293      	cmp	r3, r2
    2290:	d1fa      	bne.n	2288 <mem_cpy+0x8>
}
    2292:	bd10      	pop	{r4, pc}

00002294 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    2294:	2a00      	cmp	r2, #0
    2296:	d005      	beq.n	22a4 <mem_set+0x10>
    2298:	0003      	movs	r3, r0
    229a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    229c:	7019      	strb	r1, [r3, #0]
    229e:	3301      	adds	r3, #1
	while (cnt--)
    22a0:	4293      	cmp	r3, r2
    22a2:	d1fb      	bne.n	229c <mem_set+0x8>
}
    22a4:	4770      	bx	lr
	...

000022a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dj,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
    22a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22aa:	4b19      	ldr	r3, [pc, #100]	; (2310 <chk_lock+0x68>)
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
    22ac:	2600      	movs	r6, #0
    22ae:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
    22b0:	681c      	ldr	r4, [r3, #0]
    22b2:	2c00      	cmp	r4, #0
    22b4:	d01b      	beq.n	22ee <chk_lock+0x46>
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
    22b6:	6807      	ldr	r7, [r0, #0]
    22b8:	42bc      	cmp	r4, r7
    22ba:	d00a      	beq.n	22d2 <chk_lock+0x2a>
	for (i = be = 0; i < _FS_SHARE; i++) {
    22bc:	3201      	adds	r2, #1
    22be:	330c      	adds	r3, #12
    22c0:	2a02      	cmp	r2, #2
    22c2:	d1f5      	bne.n	22b0 <chk_lock+0x8>
		} else {			/* Blank entry */
			be++;
		}
	}
	if (i == _FS_SHARE)	/* The file is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
    22c4:	2000      	movs	r0, #0
    22c6:	2e00      	cmp	r6, #0
    22c8:	d110      	bne.n	22ec <chk_lock+0x44>
    22ca:	2902      	cmp	r1, #2
    22cc:	d01d      	beq.n	230a <chk_lock+0x62>
    22ce:	3012      	adds	r0, #18
    22d0:	e00c      	b.n	22ec <chk_lock+0x44>
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
    22d2:	685c      	ldr	r4, [r3, #4]
    22d4:	6887      	ldr	r7, [r0, #8]
    22d6:	42bc      	cmp	r4, r7
    22d8:	d1f0      	bne.n	22bc <chk_lock+0x14>
				Files[i].clu == dj->sclust &&
    22da:	891d      	ldrh	r5, [r3, #8]
    22dc:	88c4      	ldrh	r4, [r0, #6]
    22de:	42a5      	cmp	r5, r4
    22e0:	d1ec      	bne.n	22bc <chk_lock+0x14>
	if (i == _FS_SHARE)	/* The file is not opened */
    22e2:	2a02      	cmp	r2, #2
    22e4:	d0ee      	beq.n	22c4 <chk_lock+0x1c>

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
    22e6:	2010      	movs	r0, #16
    22e8:	2900      	cmp	r1, #0
    22ea:	d002      	beq.n	22f2 <chk_lock+0x4a>
}
    22ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be++;
    22ee:	3601      	adds	r6, #1
    22f0:	e7e4      	b.n	22bc <chk_lock+0x14>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
    22f2:	0053      	lsls	r3, r2, #1
    22f4:	189a      	adds	r2, r3, r2
    22f6:	0092      	lsls	r2, r2, #2
    22f8:	4b05      	ldr	r3, [pc, #20]	; (2310 <chk_lock+0x68>)
    22fa:	189a      	adds	r2, r3, r2
    22fc:	8950      	ldrh	r0, [r2, #10]
    22fe:	3801      	subs	r0, #1
    2300:	38ff      	subs	r0, #255	; 0xff
    2302:	4242      	negs	r2, r0
    2304:	4142      	adcs	r2, r0
    2306:	0110      	lsls	r0, r2, #4
    2308:	e7f0      	b.n	22ec <chk_lock+0x44>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
    230a:	2000      	movs	r0, #0
    230c:	e7ee      	b.n	22ec <chk_lock+0x44>
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	2000013c 	.word	0x2000013c

00002314 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    2314:	0002      	movs	r2, r0
	clst -= 2;
    2316:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2318:	6983      	ldr	r3, [r0, #24]
    231a:	3b02      	subs	r3, #2
    231c:	2000      	movs	r0, #0
    231e:	4299      	cmp	r1, r3
    2320:	d203      	bcs.n	232a <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    2322:	7890      	ldrb	r0, [r2, #2]
    2324:	4341      	muls	r1, r0
    2326:	6a90      	ldr	r0, [r2, #40]	; 0x28
    2328:	1808      	adds	r0, r1, r0
}
    232a:	4770      	bx	lr

0000232c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    232c:	0002      	movs	r2, r0
    232e:	0001      	movs	r1, r0
    2330:	310b      	adds	r1, #11
	BYTE sum = 0;
    2332:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    2334:	0843      	lsrs	r3, r0, #1
    2336:	01c0      	lsls	r0, r0, #7
    2338:	4303      	orrs	r3, r0
    233a:	7810      	ldrb	r0, [r2, #0]
    233c:	1818      	adds	r0, r3, r0
    233e:	b2c0      	uxtb	r0, r0
    2340:	3201      	adds	r2, #1
    2342:	428a      	cmp	r2, r1
    2344:	d1f6      	bne.n	2334 <sum_sfn+0x8>
	return sum;
}
    2346:	4770      	bx	lr

00002348 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2348:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    234a:	2800      	cmp	r0, #0
    234c:	d010      	beq.n	2370 <validate+0x28>
    234e:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    2350:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    2352:	2a00      	cmp	r2, #0
    2354:	d101      	bne.n	235a <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    2356:	0018      	movs	r0, r3
    2358:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    235a:	88c2      	ldrh	r2, [r0, #6]
    235c:	428a      	cmp	r2, r1
    235e:	d1fa      	bne.n	2356 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    2360:	7840      	ldrb	r0, [r0, #1]
    2362:	4b04      	ldr	r3, [pc, #16]	; (2374 <validate+0x2c>)
    2364:	4798      	blx	r3
		return FR_NOT_READY;
    2366:	2303      	movs	r3, #3
	return FR_OK;
    2368:	07c0      	lsls	r0, r0, #31
    236a:	17c0      	asrs	r0, r0, #31
    236c:	4003      	ands	r3, r0
    236e:	e7f2      	b.n	2356 <validate+0xe>
		return FR_INVALID_OBJECT;
    2370:	2309      	movs	r3, #9
    2372:	e7f0      	b.n	2356 <validate+0xe>
    2374:	00001f89 	.word	0x00001f89

00002378 <check_fs>:
{
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	0004      	movs	r4, r0
    237c:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    237e:	0001      	movs	r1, r0
    2380:	3130      	adds	r1, #48	; 0x30
    2382:	7840      	ldrb	r0, [r0, #1]
    2384:	2301      	movs	r3, #1
    2386:	4d1f      	ldr	r5, [pc, #124]	; (2404 <check_fs+0x8c>)
    2388:	47a8      	blx	r5
		return 3;
    238a:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    238c:	2800      	cmp	r0, #0
    238e:	d001      	beq.n	2394 <check_fs+0x1c>
}
    2390:	0018      	movs	r0, r3
    2392:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2394:	4b1c      	ldr	r3, [pc, #112]	; (2408 <check_fs+0x90>)
    2396:	5ce3      	ldrb	r3, [r4, r3]
    2398:	021b      	lsls	r3, r3, #8
    239a:	4a1c      	ldr	r2, [pc, #112]	; (240c <check_fs+0x94>)
    239c:	5ca2      	ldrb	r2, [r4, r2]
    239e:	431a      	orrs	r2, r3
    23a0:	491b      	ldr	r1, [pc, #108]	; (2410 <check_fs+0x98>)
    23a2:	b212      	sxth	r2, r2
		return 2;
    23a4:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    23a6:	428a      	cmp	r2, r1
    23a8:	d1f2      	bne.n	2390 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    23aa:	3367      	adds	r3, #103	; 0x67
    23ac:	5ce3      	ldrb	r3, [r4, r3]
    23ae:	061b      	lsls	r3, r3, #24
    23b0:	2268      	movs	r2, #104	; 0x68
    23b2:	5ca2      	ldrb	r2, [r4, r2]
    23b4:	0412      	lsls	r2, r2, #16
    23b6:	4313      	orrs	r3, r2
    23b8:	2266      	movs	r2, #102	; 0x66
    23ba:	5ca2      	ldrb	r2, [r4, r2]
    23bc:	4313      	orrs	r3, r2
    23be:	2267      	movs	r2, #103	; 0x67
    23c0:	5ca2      	ldrb	r2, [r4, r2]
    23c2:	0212      	lsls	r2, r2, #8
    23c4:	4313      	orrs	r3, r2
    23c6:	021b      	lsls	r3, r3, #8
    23c8:	0a1b      	lsrs	r3, r3, #8
    23ca:	4a12      	ldr	r2, [pc, #72]	; (2414 <check_fs+0x9c>)
    23cc:	4293      	cmp	r3, r2
    23ce:	d016      	beq.n	23fe <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    23d0:	2385      	movs	r3, #133	; 0x85
    23d2:	5ce3      	ldrb	r3, [r4, r3]
    23d4:	061b      	lsls	r3, r3, #24
    23d6:	2284      	movs	r2, #132	; 0x84
    23d8:	5ca2      	ldrb	r2, [r4, r2]
    23da:	0412      	lsls	r2, r2, #16
    23dc:	4313      	orrs	r3, r2
    23de:	2282      	movs	r2, #130	; 0x82
    23e0:	5ca2      	ldrb	r2, [r4, r2]
    23e2:	4313      	orrs	r3, r2
    23e4:	2283      	movs	r2, #131	; 0x83
    23e6:	5ca2      	ldrb	r2, [r4, r2]
    23e8:	0212      	lsls	r2, r2, #8
    23ea:	4313      	orrs	r3, r2
    23ec:	021b      	lsls	r3, r3, #8
    23ee:	0a1b      	lsrs	r3, r3, #8
    23f0:	4a09      	ldr	r2, [pc, #36]	; (2418 <check_fs+0xa0>)
    23f2:	4694      	mov	ip, r2
    23f4:	4463      	add	r3, ip
    23f6:	1e58      	subs	r0, r3, #1
    23f8:	4183      	sbcs	r3, r0
		return 3;
    23fa:	b2db      	uxtb	r3, r3
    23fc:	e7c8      	b.n	2390 <check_fs+0x18>
		return 0;
    23fe:	2300      	movs	r3, #0
    2400:	e7c6      	b.n	2390 <check_fs+0x18>
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	00001fa5 	.word	0x00001fa5
    2408:	0000022f 	.word	0x0000022f
    240c:	0000022e 	.word	0x0000022e
    2410:	ffffaa55 	.word	0xffffaa55
    2414:	00544146 	.word	0x00544146
    2418:	ffabbeba 	.word	0xffabbeba

0000241c <chk_mounted>:
{
    241c:	b5f0      	push	{r4, r5, r6, r7, lr}
    241e:	46d6      	mov	lr, sl
    2420:	464f      	mov	r7, r9
    2422:	4646      	mov	r6, r8
    2424:	b5c0      	push	{r6, r7, lr}
    2426:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    2428:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    242a:	781c      	ldrb	r4, [r3, #0]
    242c:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    242e:	2c09      	cmp	r4, #9
    2430:	d80e      	bhi.n	2450 <chk_mounted+0x34>
    2432:	785a      	ldrb	r2, [r3, #1]
    2434:	2a3a      	cmp	r2, #58	; 0x3a
    2436:	d001      	beq.n	243c <chk_mounted+0x20>
    2438:	2400      	movs	r4, #0
    243a:	e00a      	b.n	2452 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    243c:	3302      	adds	r3, #2
    243e:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    2440:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    2442:	2c07      	cmp	r4, #7
    2444:	d905      	bls.n	2452 <chk_mounted+0x36>
}
    2446:	bc1c      	pop	{r2, r3, r4}
    2448:	4690      	mov	r8, r2
    244a:	4699      	mov	r9, r3
    244c:	46a2      	mov	sl, r4
    244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2450:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    2452:	00a3      	lsls	r3, r4, #2
    2454:	4acd      	ldr	r2, [pc, #820]	; (278c <chk_mounted+0x370>)
    2456:	589e      	ldr	r6, [r3, r2]
    2458:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    245a:	2e00      	cmp	r6, #0
    245c:	d100      	bne.n	2460 <chk_mounted+0x44>
    245e:	e0e8      	b.n	2632 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    2460:	7833      	ldrb	r3, [r6, #0]
    2462:	2b00      	cmp	r3, #0
    2464:	d00d      	beq.n	2482 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    2466:	7870      	ldrb	r0, [r6, #1]
    2468:	4bc9      	ldr	r3, [pc, #804]	; (2790 <chk_mounted+0x374>)
    246a:	4798      	blx	r3
    246c:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    246e:	07c2      	lsls	r2, r0, #31
    2470:	d407      	bmi.n	2482 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    2472:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2474:	2d00      	cmp	r5, #0
    2476:	d0e6      	beq.n	2446 <chk_mounted+0x2a>
    2478:	075b      	lsls	r3, r3, #29
    247a:	d400      	bmi.n	247e <chk_mounted+0x62>
    247c:	e0db      	b.n	2636 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    247e:	300a      	adds	r0, #10
    2480:	e7e1      	b.n	2446 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    2482:	2300      	movs	r3, #0
    2484:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    2486:	b2e0      	uxtb	r0, r4
    2488:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    248a:	4bc2      	ldr	r3, [pc, #776]	; (2794 <chk_mounted+0x378>)
    248c:	4798      	blx	r3
    248e:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    2490:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2492:	07da      	lsls	r2, r3, #31
    2494:	d4d7      	bmi.n	2446 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2496:	2d00      	cmp	r5, #0
    2498:	d002      	beq.n	24a0 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    249a:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    249c:	075b      	lsls	r3, r3, #29
    249e:	d4d2      	bmi.n	2446 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    24a0:	2100      	movs	r1, #0
    24a2:	0030      	movs	r0, r6
    24a4:	4bbc      	ldr	r3, [pc, #752]	; (2798 <chk_mounted+0x37c>)
    24a6:	4798      	blx	r3
    24a8:	0003      	movs	r3, r0
    24aa:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    24ac:	2801      	cmp	r0, #1
    24ae:	d100      	bne.n	24b2 <chk_mounted+0x96>
    24b0:	e09a      	b.n	25e8 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    24b2:	2b03      	cmp	r3, #3
    24b4:	d100      	bne.n	24b8 <chk_mounted+0x9c>
    24b6:	e0c0      	b.n	263a <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    24b8:	200d      	movs	r0, #13
    24ba:	2b00      	cmp	r3, #0
    24bc:	d1c3      	bne.n	2446 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    24be:	333c      	adds	r3, #60	; 0x3c
    24c0:	5cf2      	ldrb	r2, [r6, r3]
    24c2:	0212      	lsls	r2, r2, #8
    24c4:	3b01      	subs	r3, #1
    24c6:	5cf3      	ldrb	r3, [r6, r3]
    24c8:	4313      	orrs	r3, r2
    24ca:	2280      	movs	r2, #128	; 0x80
    24cc:	0092      	lsls	r2, r2, #2
    24ce:	b21b      	sxth	r3, r3
    24d0:	4293      	cmp	r3, r2
    24d2:	d1b8      	bne.n	2446 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    24d4:	2347      	movs	r3, #71	; 0x47
    24d6:	5cf3      	ldrb	r3, [r6, r3]
    24d8:	021b      	lsls	r3, r3, #8
    24da:	3abb      	subs	r2, #187	; 0xbb
    24dc:	3aff      	subs	r2, #255	; 0xff
    24de:	5cb5      	ldrb	r5, [r6, r2]
    24e0:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    24e2:	d10d      	bne.n	2500 <chk_mounted+0xe4>
    24e4:	2357      	movs	r3, #87	; 0x57
    24e6:	5cf5      	ldrb	r5, [r6, r3]
    24e8:	062d      	lsls	r5, r5, #24
    24ea:	3b01      	subs	r3, #1
    24ec:	5cf3      	ldrb	r3, [r6, r3]
    24ee:	041b      	lsls	r3, r3, #16
    24f0:	431d      	orrs	r5, r3
    24f2:	2354      	movs	r3, #84	; 0x54
    24f4:	5cf3      	ldrb	r3, [r6, r3]
    24f6:	431d      	orrs	r5, r3
    24f8:	2355      	movs	r3, #85	; 0x55
    24fa:	5cf3      	ldrb	r3, [r6, r3]
    24fc:	021b      	lsls	r3, r3, #8
    24fe:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    2500:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    2502:	2340      	movs	r3, #64	; 0x40
    2504:	5cf2      	ldrb	r2, [r6, r3]
    2506:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2508:	1e53      	subs	r3, r2, #1
    250a:	200d      	movs	r0, #13
    250c:	2b01      	cmp	r3, #1
    250e:	d89a      	bhi.n	2446 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2510:	233d      	movs	r3, #61	; 0x3d
    2512:	5cf1      	ldrb	r1, [r6, r3]
    2514:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    2516:	2900      	cmp	r1, #0
    2518:	d095      	beq.n	2446 <chk_mounted+0x2a>
    251a:	1e4b      	subs	r3, r1, #1
    251c:	4219      	tst	r1, r3
    251e:	d192      	bne.n	2446 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2520:	2342      	movs	r3, #66	; 0x42
    2522:	5cf3      	ldrb	r3, [r6, r3]
    2524:	021b      	lsls	r3, r3, #8
    2526:	3034      	adds	r0, #52	; 0x34
    2528:	5c30      	ldrb	r0, [r6, r0]
    252a:	4318      	orrs	r0, r3
    252c:	4680      	mov	r8, r0
    252e:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2530:	200d      	movs	r0, #13
    2532:	4643      	mov	r3, r8
    2534:	071b      	lsls	r3, r3, #28
    2536:	d000      	beq.n	253a <chk_mounted+0x11e>
    2538:	e785      	b.n	2446 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    253a:	2344      	movs	r3, #68	; 0x44
    253c:	5cf3      	ldrb	r3, [r6, r3]
    253e:	021b      	lsls	r3, r3, #8
    2540:	3036      	adds	r0, #54	; 0x36
    2542:	5c30      	ldrb	r0, [r6, r0]
    2544:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2546:	d10d      	bne.n	2564 <chk_mounted+0x148>
    2548:	3353      	adds	r3, #83	; 0x53
    254a:	5cf3      	ldrb	r3, [r6, r3]
    254c:	061b      	lsls	r3, r3, #24
    254e:	2052      	movs	r0, #82	; 0x52
    2550:	5c30      	ldrb	r0, [r6, r0]
    2552:	0400      	lsls	r0, r0, #16
    2554:	4303      	orrs	r3, r0
    2556:	2050      	movs	r0, #80	; 0x50
    2558:	5c30      	ldrb	r0, [r6, r0]
    255a:	4303      	orrs	r3, r0
    255c:	2051      	movs	r0, #81	; 0x51
    255e:	5c30      	ldrb	r0, [r6, r0]
    2560:	0200      	lsls	r0, r0, #8
    2562:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2564:	203f      	movs	r0, #63	; 0x3f
    2566:	5c30      	ldrb	r0, [r6, r0]
    2568:	0200      	lsls	r0, r0, #8
    256a:	273e      	movs	r7, #62	; 0x3e
    256c:	5df7      	ldrb	r7, [r6, r7]
    256e:	4307      	orrs	r7, r0
    2570:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    2572:	200d      	movs	r0, #13
    2574:	2f00      	cmp	r7, #0
    2576:	d100      	bne.n	257a <chk_mounted+0x15e>
    2578:	e765      	b.n	2446 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    257a:	436a      	muls	r2, r5
    257c:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    257e:	4642      	mov	r2, r8
    2580:	0917      	lsrs	r7, r2, #4
    2582:	4457      	add	r7, sl
    2584:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2586:	42bb      	cmp	r3, r7
    2588:	d200      	bcs.n	258c <chk_mounted+0x170>
    258a:	e75c      	b.n	2446 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    258c:	1bd8      	subs	r0, r3, r7
    258e:	4b83      	ldr	r3, [pc, #524]	; (279c <chk_mounted+0x380>)
    2590:	4798      	blx	r3
    2592:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2594:	200d      	movs	r0, #13
    2596:	2b00      	cmp	r3, #0
    2598:	d100      	bne.n	259c <chk_mounted+0x180>
    259a:	e754      	b.n	2446 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    259c:	4a80      	ldr	r2, [pc, #512]	; (27a0 <chk_mounted+0x384>)
	fmt = FS_FAT12;
    259e:	429a      	cmp	r2, r3
    25a0:	4192      	sbcs	r2, r2
    25a2:	4252      	negs	r2, r2
    25a4:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    25a6:	497f      	ldr	r1, [pc, #508]	; (27a4 <chk_mounted+0x388>)
    25a8:	428b      	cmp	r3, r1
    25aa:	d848      	bhi.n	263e <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    25ac:	3302      	adds	r3, #2
    25ae:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    25b0:	19e7      	adds	r7, r4, r7
    25b2:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    25b4:	4454      	add	r4, sl
    25b6:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    25b8:	200d      	movs	r0, #13
    25ba:	4641      	mov	r1, r8
    25bc:	2900      	cmp	r1, #0
    25be:	d100      	bne.n	25c2 <chk_mounted+0x1a6>
    25c0:	e741      	b.n	2446 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    25c2:	444c      	add	r4, r9
    25c4:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    25c6:	2a02      	cmp	r2, #2
    25c8:	d12c      	bne.n	2624 <chk_mounted+0x208>
    25ca:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    25cc:	4976      	ldr	r1, [pc, #472]	; (27a8 <chk_mounted+0x38c>)
    25ce:	468c      	mov	ip, r1
    25d0:	4463      	add	r3, ip
    25d2:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    25d4:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    25d6:	429d      	cmp	r5, r3
    25d8:	d200      	bcs.n	25dc <chk_mounted+0x1c0>
    25da:	e734      	b.n	2446 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    25dc:	2301      	movs	r3, #1
    25de:	425b      	negs	r3, r3
    25e0:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    25e2:	2300      	movs	r3, #0
    25e4:	60f3      	str	r3, [r6, #12]
    25e6:	e0b6      	b.n	2756 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    25e8:	33f2      	adds	r3, #242	; 0xf2
    25ea:	33ff      	adds	r3, #255	; 0xff
    25ec:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    25ee:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    25f0:	2b00      	cmp	r3, #0
    25f2:	d100      	bne.n	25f6 <chk_mounted+0x1da>
    25f4:	e727      	b.n	2446 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    25f6:	23fa      	movs	r3, #250	; 0xfa
    25f8:	33ff      	adds	r3, #255	; 0xff
    25fa:	5cf4      	ldrb	r4, [r6, r3]
    25fc:	0624      	lsls	r4, r4, #24
    25fe:	3b01      	subs	r3, #1
    2600:	5cf3      	ldrb	r3, [r6, r3]
    2602:	041b      	lsls	r3, r3, #16
    2604:	431c      	orrs	r4, r3
    2606:	23fb      	movs	r3, #251	; 0xfb
    2608:	005b      	lsls	r3, r3, #1
    260a:	5cf3      	ldrb	r3, [r6, r3]
    260c:	431c      	orrs	r4, r3
    260e:	23f8      	movs	r3, #248	; 0xf8
    2610:	33ff      	adds	r3, #255	; 0xff
    2612:	5cf2      	ldrb	r2, [r6, r3]
    2614:	0212      	lsls	r2, r2, #8
    2616:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    2618:	0021      	movs	r1, r4
    261a:	0030      	movs	r0, r6
    261c:	4b5e      	ldr	r3, [pc, #376]	; (2798 <chk_mounted+0x37c>)
    261e:	4798      	blx	r3
    2620:	0003      	movs	r3, r0
    2622:	e746      	b.n	24b2 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    2624:	2103      	movs	r1, #3
    2626:	4359      	muls	r1, r3
    2628:	0849      	lsrs	r1, r1, #1
    262a:	2001      	movs	r0, #1
    262c:	4003      	ands	r3, r0
    262e:	18cb      	adds	r3, r1, r3
    2630:	e7cc      	b.n	25cc <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2632:	200c      	movs	r0, #12
    2634:	e707      	b.n	2446 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    2636:	2000      	movs	r0, #0
    2638:	e705      	b.n	2446 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    263a:	2001      	movs	r0, #1
    263c:	e703      	b.n	2446 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    263e:	3302      	adds	r3, #2
    2640:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    2642:	19e7      	adds	r7, r4, r7
    2644:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2646:	4652      	mov	r2, sl
    2648:	18a2      	adds	r2, r4, r2
    264a:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    264c:	200d      	movs	r0, #13
    264e:	4642      	mov	r2, r8
    2650:	2a00      	cmp	r2, #0
    2652:	d000      	beq.n	2656 <chk_mounted+0x23a>
    2654:	e6f7      	b.n	2446 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2656:	225f      	movs	r2, #95	; 0x5f
    2658:	5cb2      	ldrb	r2, [r6, r2]
    265a:	0612      	lsls	r2, r2, #24
    265c:	215e      	movs	r1, #94	; 0x5e
    265e:	5c71      	ldrb	r1, [r6, r1]
    2660:	0409      	lsls	r1, r1, #16
    2662:	430a      	orrs	r2, r1
    2664:	215c      	movs	r1, #92	; 0x5c
    2666:	5c71      	ldrb	r1, [r6, r1]
    2668:	430a      	orrs	r2, r1
    266a:	215d      	movs	r1, #93	; 0x5d
    266c:	5c71      	ldrb	r1, [r6, r1]
    266e:	0209      	lsls	r1, r1, #8
    2670:	430a      	orrs	r2, r1
    2672:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    2674:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2676:	4a4c      	ldr	r2, [pc, #304]	; (27a8 <chk_mounted+0x38c>)
    2678:	4694      	mov	ip, r2
    267a:	4463      	add	r3, ip
    267c:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    267e:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2680:	429d      	cmp	r5, r3
    2682:	d200      	bcs.n	2686 <chk_mounted+0x26a>
    2684:	e6df      	b.n	2446 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    2686:	2301      	movs	r3, #1
    2688:	425b      	negs	r3, r3
    268a:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    268c:	2300      	movs	r3, #0
    268e:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    2690:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2692:	3361      	adds	r3, #97	; 0x61
    2694:	5cf3      	ldrb	r3, [r6, r3]
    2696:	021b      	lsls	r3, r3, #8
    2698:	2260      	movs	r2, #96	; 0x60
    269a:	5cb2      	ldrb	r2, [r6, r2]
    269c:	431a      	orrs	r2, r3
    269e:	1912      	adds	r2, r2, r4
    26a0:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    26a2:	0031      	movs	r1, r6
    26a4:	3130      	adds	r1, #48	; 0x30
    26a6:	7870      	ldrb	r0, [r6, #1]
    26a8:	2301      	movs	r3, #1
    26aa:	4c40      	ldr	r4, [pc, #256]	; (27ac <chk_mounted+0x390>)
    26ac:	47a0      	blx	r4
    26ae:	2203      	movs	r2, #3
    26b0:	2800      	cmp	r0, #0
    26b2:	d150      	bne.n	2756 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    26b4:	4b3e      	ldr	r3, [pc, #248]	; (27b0 <chk_mounted+0x394>)
    26b6:	5cf2      	ldrb	r2, [r6, r3]
    26b8:	0212      	lsls	r2, r2, #8
    26ba:	4b3e      	ldr	r3, [pc, #248]	; (27b4 <chk_mounted+0x398>)
    26bc:	5cf3      	ldrb	r3, [r6, r3]
    26be:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    26c0:	493d      	ldr	r1, [pc, #244]	; (27b8 <chk_mounted+0x39c>)
    26c2:	b21b      	sxth	r3, r3
    26c4:	2203      	movs	r2, #3
    26c6:	428b      	cmp	r3, r1
    26c8:	d145      	bne.n	2756 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    26ca:	2333      	movs	r3, #51	; 0x33
    26cc:	5cf3      	ldrb	r3, [r6, r3]
    26ce:	061b      	lsls	r3, r3, #24
    26d0:	322f      	adds	r2, #47	; 0x2f
    26d2:	5cb2      	ldrb	r2, [r6, r2]
    26d4:	0412      	lsls	r2, r2, #16
    26d6:	4313      	orrs	r3, r2
    26d8:	2230      	movs	r2, #48	; 0x30
    26da:	5cb2      	ldrb	r2, [r6, r2]
    26dc:	4313      	orrs	r3, r2
    26de:	2231      	movs	r2, #49	; 0x31
    26e0:	5cb2      	ldrb	r2, [r6, r2]
    26e2:	0212      	lsls	r2, r2, #8
    26e4:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    26e6:	4935      	ldr	r1, [pc, #212]	; (27bc <chk_mounted+0x3a0>)
    26e8:	2203      	movs	r2, #3
    26ea:	428b      	cmp	r3, r1
    26ec:	d133      	bne.n	2756 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    26ee:	4b34      	ldr	r3, [pc, #208]	; (27c0 <chk_mounted+0x3a4>)
    26f0:	5cf3      	ldrb	r3, [r6, r3]
    26f2:	061b      	lsls	r3, r3, #24
    26f4:	4a33      	ldr	r2, [pc, #204]	; (27c4 <chk_mounted+0x3a8>)
    26f6:	5cb2      	ldrb	r2, [r6, r2]
    26f8:	0412      	lsls	r2, r2, #16
    26fa:	4313      	orrs	r3, r2
    26fc:	2285      	movs	r2, #133	; 0x85
    26fe:	0092      	lsls	r2, r2, #2
    2700:	5cb2      	ldrb	r2, [r6, r2]
    2702:	4313      	orrs	r3, r2
    2704:	4a30      	ldr	r2, [pc, #192]	; (27c8 <chk_mounted+0x3ac>)
    2706:	5cb2      	ldrb	r2, [r6, r2]
    2708:	0212      	lsls	r2, r2, #8
    270a:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    270c:	492f      	ldr	r1, [pc, #188]	; (27cc <chk_mounted+0x3b0>)
    270e:	2203      	movs	r2, #3
    2710:	428b      	cmp	r3, r1
    2712:	d120      	bne.n	2756 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2714:	4b2e      	ldr	r3, [pc, #184]	; (27d0 <chk_mounted+0x3b4>)
    2716:	5cf3      	ldrb	r3, [r6, r3]
    2718:	061b      	lsls	r3, r3, #24
    271a:	4a2e      	ldr	r2, [pc, #184]	; (27d4 <chk_mounted+0x3b8>)
    271c:	5cb2      	ldrb	r2, [r6, r2]
    271e:	0412      	lsls	r2, r2, #16
    2720:	4313      	orrs	r3, r2
    2722:	2287      	movs	r2, #135	; 0x87
    2724:	0092      	lsls	r2, r2, #2
    2726:	5cb2      	ldrb	r2, [r6, r2]
    2728:	4313      	orrs	r3, r2
    272a:	4a2b      	ldr	r2, [pc, #172]	; (27d8 <chk_mounted+0x3bc>)
    272c:	5cb2      	ldrb	r2, [r6, r2]
    272e:	0212      	lsls	r2, r2, #8
    2730:	4313      	orrs	r3, r2
    2732:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2734:	4b29      	ldr	r3, [pc, #164]	; (27dc <chk_mounted+0x3c0>)
    2736:	5cf3      	ldrb	r3, [r6, r3]
    2738:	061b      	lsls	r3, r3, #24
    273a:	4a29      	ldr	r2, [pc, #164]	; (27e0 <chk_mounted+0x3c4>)
    273c:	5cb2      	ldrb	r2, [r6, r2]
    273e:	0412      	lsls	r2, r2, #16
    2740:	4313      	orrs	r3, r2
    2742:	2286      	movs	r2, #134	; 0x86
    2744:	0092      	lsls	r2, r2, #2
    2746:	5cb2      	ldrb	r2, [r6, r2]
    2748:	4313      	orrs	r3, r2
    274a:	4a26      	ldr	r2, [pc, #152]	; (27e4 <chk_mounted+0x3c8>)
    274c:	5cb2      	ldrb	r2, [r6, r2]
    274e:	0212      	lsls	r2, r2, #8
    2750:	4313      	orrs	r3, r2
    2752:	6133      	str	r3, [r6, #16]
    2754:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    2756:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    2758:	4a23      	ldr	r2, [pc, #140]	; (27e8 <chk_mounted+0x3cc>)
    275a:	8813      	ldrh	r3, [r2, #0]
    275c:	3301      	adds	r3, #1
    275e:	b29b      	uxth	r3, r3
    2760:	8013      	strh	r3, [r2, #0]
    2762:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    2764:	2300      	movs	r3, #0
    2766:	62f3      	str	r3, [r6, #44]	; 0x2c
	fs->wflag = 0;
    2768:	7133      	strb	r3, [r6, #4]
		if (Files[i].fs == fs) Files[i].fs = 0;
    276a:	4b20      	ldr	r3, [pc, #128]	; (27ec <chk_mounted+0x3d0>)
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	429e      	cmp	r6, r3
    2770:	d102      	bne.n	2778 <chk_mounted+0x35c>
    2772:	2200      	movs	r2, #0
    2774:	4b1d      	ldr	r3, [pc, #116]	; (27ec <chk_mounted+0x3d0>)
    2776:	601a      	str	r2, [r3, #0]
    2778:	4b1c      	ldr	r3, [pc, #112]	; (27ec <chk_mounted+0x3d0>)
    277a:	68db      	ldr	r3, [r3, #12]
    277c:	429e      	cmp	r6, r3
    277e:	d102      	bne.n	2786 <chk_mounted+0x36a>
    2780:	2200      	movs	r2, #0
    2782:	4b1a      	ldr	r3, [pc, #104]	; (27ec <chk_mounted+0x3d0>)
    2784:	60da      	str	r2, [r3, #12]
	return FR_OK;
    2786:	2000      	movs	r0, #0
    2788:	e65d      	b.n	2446 <chk_mounted+0x2a>
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	2000011c 	.word	0x2000011c
    2790:	00001f89 	.word	0x00001f89
    2794:	00001eed 	.word	0x00001eed
    2798:	00002379 	.word	0x00002379
    279c:	0000700d 	.word	0x0000700d
    27a0:	00000ff5 	.word	0x00000ff5
    27a4:	0000fff5 	.word	0x0000fff5
    27a8:	000001ff 	.word	0x000001ff
    27ac:	00001fa5 	.word	0x00001fa5
    27b0:	0000022f 	.word	0x0000022f
    27b4:	0000022e 	.word	0x0000022e
    27b8:	ffffaa55 	.word	0xffffaa55
    27bc:	41615252 	.word	0x41615252
    27c0:	00000217 	.word	0x00000217
    27c4:	00000216 	.word	0x00000216
    27c8:	00000215 	.word	0x00000215
    27cc:	61417272 	.word	0x61417272
    27d0:	0000021f 	.word	0x0000021f
    27d4:	0000021e 	.word	0x0000021e
    27d8:	0000021d 	.word	0x0000021d
    27dc:	0000021b 	.word	0x0000021b
    27e0:	0000021a 	.word	0x0000021a
    27e4:	00000219 	.word	0x00000219
    27e8:	20000154 	.word	0x20000154
    27ec:	2000013c 	.word	0x2000013c

000027f0 <move_window>:
{
    27f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f2:	46ce      	mov	lr, r9
    27f4:	b500      	push	{lr}
    27f6:	b082      	sub	sp, #8
    27f8:	0004      	movs	r4, r0
    27fa:	000f      	movs	r7, r1
	wsect = fs->winsect;
    27fc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    27fe:	428d      	cmp	r5, r1
    2800:	d03f      	beq.n	2882 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    2802:	7903      	ldrb	r3, [r0, #4]
    2804:	2b00      	cmp	r3, #0
    2806:	d107      	bne.n	2818 <move_window+0x28>
	return FR_OK;
    2808:	2300      	movs	r3, #0
		if (sector) {
    280a:	2f00      	cmp	r7, #0
    280c:	d12c      	bne.n	2868 <move_window+0x78>
}
    280e:	0018      	movs	r0, r3
    2810:	b002      	add	sp, #8
    2812:	bc04      	pop	{r2}
    2814:	4691      	mov	r9, r2
    2816:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2818:	2330      	movs	r3, #48	; 0x30
    281a:	469c      	mov	ip, r3
    281c:	4484      	add	ip, r0
    281e:	4663      	mov	r3, ip
    2820:	4661      	mov	r1, ip
    2822:	9301      	str	r3, [sp, #4]
    2824:	7840      	ldrb	r0, [r0, #1]
    2826:	2301      	movs	r3, #1
    2828:	002a      	movs	r2, r5
    282a:	4e17      	ldr	r6, [pc, #92]	; (2888 <move_window+0x98>)
    282c:	47b0      	blx	r6
				return FR_DISK_ERR;
    282e:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2830:	2800      	cmp	r0, #0
    2832:	d1ec      	bne.n	280e <move_window+0x1e>
			fs->wflag = 0;
    2834:	2300      	movs	r3, #0
    2836:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    2838:	6a23      	ldr	r3, [r4, #32]
    283a:	69e2      	ldr	r2, [r4, #28]
    283c:	4694      	mov	ip, r2
    283e:	4463      	add	r3, ip
    2840:	429d      	cmp	r5, r3
    2842:	d2e1      	bcs.n	2808 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2844:	78e6      	ldrb	r6, [r4, #3]
    2846:	2e01      	cmp	r6, #1
    2848:	d9de      	bls.n	2808 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    284a:	4b0f      	ldr	r3, [pc, #60]	; (2888 <move_window+0x98>)
    284c:	4699      	mov	r9, r3
					wsect += fs->fsize;
    284e:	69e3      	ldr	r3, [r4, #28]
    2850:	469c      	mov	ip, r3
    2852:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    2854:	7860      	ldrb	r0, [r4, #1]
    2856:	2301      	movs	r3, #1
    2858:	002a      	movs	r2, r5
    285a:	9901      	ldr	r1, [sp, #4]
    285c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    285e:	3e01      	subs	r6, #1
    2860:	b2f6      	uxtb	r6, r6
    2862:	2e01      	cmp	r6, #1
    2864:	d1f3      	bne.n	284e <move_window+0x5e>
    2866:	e7cf      	b.n	2808 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2868:	0021      	movs	r1, r4
    286a:	3130      	adds	r1, #48	; 0x30
    286c:	7860      	ldrb	r0, [r4, #1]
    286e:	3301      	adds	r3, #1
    2870:	003a      	movs	r2, r7
    2872:	4d06      	ldr	r5, [pc, #24]	; (288c <move_window+0x9c>)
    2874:	47a8      	blx	r5
				return FR_DISK_ERR;
    2876:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2878:	2800      	cmp	r0, #0
    287a:	d1c8      	bne.n	280e <move_window+0x1e>
			fs->winsect = sector;
    287c:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    287e:	2300      	movs	r3, #0
    2880:	e7c5      	b.n	280e <move_window+0x1e>
    2882:	2300      	movs	r3, #0
    2884:	e7c3      	b.n	280e <move_window+0x1e>
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	00002029 	.word	0x00002029
    288c:	00001fa5 	.word	0x00001fa5

00002890 <get_fat>:
{
    2890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2892:	0005      	movs	r5, r0
    2894:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    2896:	2901      	cmp	r1, #1
    2898:	d974      	bls.n	2984 <get_fat+0xf4>
		return 1;
    289a:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    289c:	69ab      	ldr	r3, [r5, #24]
    289e:	4299      	cmp	r1, r3
    28a0:	d271      	bcs.n	2986 <get_fat+0xf6>
	switch (fs->fs_type) {
    28a2:	782b      	ldrb	r3, [r5, #0]
    28a4:	2b02      	cmp	r3, #2
    28a6:	d034      	beq.n	2912 <get_fat+0x82>
    28a8:	2b03      	cmp	r3, #3
    28aa:	d049      	beq.n	2940 <get_fat+0xb0>
    28ac:	2b01      	cmp	r3, #1
    28ae:	d002      	beq.n	28b6 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    28b0:	2001      	movs	r0, #1
    28b2:	4240      	negs	r0, r0
    28b4:	e067      	b.n	2986 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    28b6:	084e      	lsrs	r6, r1, #1
    28b8:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    28ba:	0a71      	lsrs	r1, r6, #9
    28bc:	6a2b      	ldr	r3, [r5, #32]
    28be:	469c      	mov	ip, r3
    28c0:	4461      	add	r1, ip
    28c2:	0028      	movs	r0, r5
    28c4:	4b30      	ldr	r3, [pc, #192]	; (2988 <get_fat+0xf8>)
    28c6:	4798      	blx	r3
    28c8:	2800      	cmp	r0, #0
    28ca:	d002      	beq.n	28d2 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    28cc:	2001      	movs	r0, #1
    28ce:	4240      	negs	r0, r0
    28d0:	e059      	b.n	2986 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    28d2:	05f3      	lsls	r3, r6, #23
    28d4:	0ddb      	lsrs	r3, r3, #23
    28d6:	18eb      	adds	r3, r5, r3
    28d8:	3330      	adds	r3, #48	; 0x30
    28da:	781f      	ldrb	r7, [r3, #0]
    28dc:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    28de:	0a71      	lsrs	r1, r6, #9
    28e0:	6a2b      	ldr	r3, [r5, #32]
    28e2:	469c      	mov	ip, r3
    28e4:	4461      	add	r1, ip
    28e6:	0028      	movs	r0, r5
    28e8:	4b27      	ldr	r3, [pc, #156]	; (2988 <get_fat+0xf8>)
    28ea:	4798      	blx	r3
    28ec:	2800      	cmp	r0, #0
    28ee:	d002      	beq.n	28f6 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    28f0:	2001      	movs	r0, #1
    28f2:	4240      	negs	r0, r0
    28f4:	e047      	b.n	2986 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    28f6:	05f6      	lsls	r6, r6, #23
    28f8:	0df6      	lsrs	r6, r6, #23
    28fa:	19ad      	adds	r5, r5, r6
    28fc:	3530      	adds	r5, #48	; 0x30
    28fe:	7828      	ldrb	r0, [r5, #0]
    2900:	0200      	lsls	r0, r0, #8
    2902:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    2904:	07e3      	lsls	r3, r4, #31
    2906:	d501      	bpl.n	290c <get_fat+0x7c>
    2908:	0900      	lsrs	r0, r0, #4
    290a:	e03c      	b.n	2986 <get_fat+0xf6>
    290c:	0500      	lsls	r0, r0, #20
    290e:	0d00      	lsrs	r0, r0, #20
    2910:	e039      	b.n	2986 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    2912:	0a09      	lsrs	r1, r1, #8
    2914:	6a2b      	ldr	r3, [r5, #32]
    2916:	469c      	mov	ip, r3
    2918:	4461      	add	r1, ip
    291a:	0028      	movs	r0, r5
    291c:	4b1a      	ldr	r3, [pc, #104]	; (2988 <get_fat+0xf8>)
    291e:	4798      	blx	r3
    2920:	2800      	cmp	r0, #0
    2922:	d002      	beq.n	292a <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2924:	2001      	movs	r0, #1
    2926:	4240      	negs	r0, r0
    2928:	e02d      	b.n	2986 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    292a:	0064      	lsls	r4, r4, #1
    292c:	23ff      	movs	r3, #255	; 0xff
    292e:	005b      	lsls	r3, r3, #1
    2930:	401c      	ands	r4, r3
		return LD_WORD(p);
    2932:	192d      	adds	r5, r5, r4
    2934:	3530      	adds	r5, #48	; 0x30
    2936:	786b      	ldrb	r3, [r5, #1]
    2938:	021b      	lsls	r3, r3, #8
    293a:	7828      	ldrb	r0, [r5, #0]
    293c:	4318      	orrs	r0, r3
    293e:	e022      	b.n	2986 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    2940:	09c9      	lsrs	r1, r1, #7
    2942:	6a2b      	ldr	r3, [r5, #32]
    2944:	469c      	mov	ip, r3
    2946:	4461      	add	r1, ip
    2948:	0028      	movs	r0, r5
    294a:	4b0f      	ldr	r3, [pc, #60]	; (2988 <get_fat+0xf8>)
    294c:	4798      	blx	r3
    294e:	2800      	cmp	r0, #0
    2950:	d002      	beq.n	2958 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2952:	2001      	movs	r0, #1
    2954:	4240      	negs	r0, r0
    2956:	e016      	b.n	2986 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    2958:	00a4      	lsls	r4, r4, #2
    295a:	23fe      	movs	r3, #254	; 0xfe
    295c:	005b      	lsls	r3, r3, #1
    295e:	401c      	ands	r4, r3
    2960:	0023      	movs	r3, r4
    2962:	3330      	adds	r3, #48	; 0x30
    2964:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    2966:	78d8      	ldrb	r0, [r3, #3]
    2968:	0600      	lsls	r0, r0, #24
    296a:	789a      	ldrb	r2, [r3, #2]
    296c:	0412      	lsls	r2, r2, #16
    296e:	4310      	orrs	r0, r2
    2970:	192c      	adds	r4, r5, r4
    2972:	3430      	adds	r4, #48	; 0x30
    2974:	7822      	ldrb	r2, [r4, #0]
    2976:	4310      	orrs	r0, r2
    2978:	785b      	ldrb	r3, [r3, #1]
    297a:	021b      	lsls	r3, r3, #8
    297c:	4318      	orrs	r0, r3
    297e:	0100      	lsls	r0, r0, #4
    2980:	0900      	lsrs	r0, r0, #4
    2982:	e000      	b.n	2986 <get_fat+0xf6>
		return 1;
    2984:	2001      	movs	r0, #1
}
    2986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2988:	000027f1 	.word	0x000027f1

0000298c <dir_sdi>:
{
    298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    298e:	0004      	movs	r4, r0
    2990:	000d      	movs	r5, r1
	dj->index = idx;
    2992:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    2994:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    2996:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2998:	2901      	cmp	r1, #1
    299a:	d003      	beq.n	29a4 <dir_sdi+0x18>
    299c:	6823      	ldr	r3, [r4, #0]
    299e:	699a      	ldr	r2, [r3, #24]
    29a0:	4291      	cmp	r1, r2
    29a2:	d300      	bcc.n	29a6 <dir_sdi+0x1a>
}
    29a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    29a6:	2900      	cmp	r1, #0
    29a8:	d119      	bne.n	29de <dir_sdi+0x52>
    29aa:	781a      	ldrb	r2, [r3, #0]
    29ac:	2a03      	cmp	r2, #3
    29ae:	d013      	beq.n	29d8 <dir_sdi+0x4c>
		dj->clust = clst;
    29b0:	2200      	movs	r2, #0
    29b2:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    29b4:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    29b6:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    29b8:	42aa      	cmp	r2, r5
    29ba:	d9f3      	bls.n	29a4 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    29bc:	092a      	lsrs	r2, r5, #4
    29be:	b292      	uxth	r2, r2
    29c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29c2:	189b      	adds	r3, r3, r2
    29c4:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    29c6:	6823      	ldr	r3, [r4, #0]
    29c8:	3330      	adds	r3, #48	; 0x30
    29ca:	220f      	movs	r2, #15
    29cc:	4015      	ands	r5, r2
    29ce:	016d      	lsls	r5, r5, #5
    29d0:	195d      	adds	r5, r3, r5
    29d2:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    29d4:	2000      	movs	r0, #0
    29d6:	e7e5      	b.n	29a4 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    29d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    29da:	2900      	cmp	r1, #0
    29dc:	d0e8      	beq.n	29b0 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    29de:	789e      	ldrb	r6, [r3, #2]
    29e0:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    29e2:	42b5      	cmp	r5, r6
    29e4:	d313      	bcc.n	2a0e <dir_sdi+0x82>
    29e6:	1bad      	subs	r5, r5, r6
    29e8:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    29ea:	4f10      	ldr	r7, [pc, #64]	; (2a2c <dir_sdi+0xa0>)
    29ec:	e000      	b.n	29f0 <dir_sdi+0x64>
    29ee:	001d      	movs	r5, r3
    29f0:	6820      	ldr	r0, [r4, #0]
    29f2:	47b8      	blx	r7
    29f4:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    29f6:	1c43      	adds	r3, r0, #1
    29f8:	d012      	beq.n	2a20 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    29fa:	2801      	cmp	r0, #1
    29fc:	d912      	bls.n	2a24 <dir_sdi+0x98>
    29fe:	6823      	ldr	r3, [r4, #0]
    2a00:	699b      	ldr	r3, [r3, #24]
    2a02:	4298      	cmp	r0, r3
    2a04:	d210      	bcs.n	2a28 <dir_sdi+0x9c>
    2a06:	1bab      	subs	r3, r5, r6
    2a08:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    2a0a:	42b5      	cmp	r5, r6
    2a0c:	d2ef      	bcs.n	29ee <dir_sdi+0x62>
		dj->clust = clst;
    2a0e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2a10:	6820      	ldr	r0, [r4, #0]
    2a12:	4b07      	ldr	r3, [pc, #28]	; (2a30 <dir_sdi+0xa4>)
    2a14:	4798      	blx	r3
    2a16:	092b      	lsrs	r3, r5, #4
    2a18:	b29b      	uxth	r3, r3
    2a1a:	1818      	adds	r0, r3, r0
    2a1c:	6120      	str	r0, [r4, #16]
    2a1e:	e7d2      	b.n	29c6 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2a20:	2001      	movs	r0, #1
    2a22:	e7bf      	b.n	29a4 <dir_sdi+0x18>
				return FR_INT_ERR;
    2a24:	2002      	movs	r0, #2
    2a26:	e7bd      	b.n	29a4 <dir_sdi+0x18>
    2a28:	2002      	movs	r0, #2
    2a2a:	e7bb      	b.n	29a4 <dir_sdi+0x18>
    2a2c:	00002891 	.word	0x00002891
    2a30:	00002315 	.word	0x00002315

00002a34 <put_fat>:
{
    2a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a36:	46c6      	mov	lr, r8
    2a38:	b500      	push	{lr}
    2a3a:	0007      	movs	r7, r0
    2a3c:	000c      	movs	r4, r1
    2a3e:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    2a40:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2a42:	2901      	cmp	r1, #1
    2a44:	d902      	bls.n	2a4c <put_fat+0x18>
    2a46:	6983      	ldr	r3, [r0, #24]
    2a48:	4299      	cmp	r1, r3
    2a4a:	d303      	bcc.n	2a54 <put_fat+0x20>
}
    2a4c:	0028      	movs	r0, r5
    2a4e:	bc04      	pop	{r2}
    2a50:	4690      	mov	r8, r2
    2a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    2a54:	7803      	ldrb	r3, [r0, #0]
    2a56:	2b02      	cmp	r3, #2
    2a58:	d053      	beq.n	2b02 <put_fat+0xce>
    2a5a:	2b03      	cmp	r3, #3
    2a5c:	d063      	beq.n	2b26 <put_fat+0xf2>
			res = FR_INT_ERR;
    2a5e:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    2a60:	2b01      	cmp	r3, #1
    2a62:	d002      	beq.n	2a6a <put_fat+0x36>
		fs->wflag = 1;
    2a64:	2301      	movs	r3, #1
    2a66:	713b      	strb	r3, [r7, #4]
    2a68:	e7f0      	b.n	2a4c <put_fat+0x18>
			bc = clst; bc += bc / 2;
    2a6a:	084b      	lsrs	r3, r1, #1
    2a6c:	4698      	mov	r8, r3
    2a6e:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2a70:	4643      	mov	r3, r8
    2a72:	0a59      	lsrs	r1, r3, #9
    2a74:	6a03      	ldr	r3, [r0, #32]
    2a76:	469c      	mov	ip, r3
    2a78:	4461      	add	r1, ip
    2a7a:	4b3b      	ldr	r3, [pc, #236]	; (2b68 <put_fat+0x134>)
    2a7c:	4798      	blx	r3
    2a7e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    2a80:	d1f0      	bne.n	2a64 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    2a82:	4643      	mov	r3, r8
    2a84:	05db      	lsls	r3, r3, #23
    2a86:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2a88:	07e2      	lsls	r2, r4, #31
    2a8a:	d51f      	bpl.n	2acc <put_fat+0x98>
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	3330      	adds	r3, #48	; 0x30
    2a90:	7819      	ldrb	r1, [r3, #0]
    2a92:	220f      	movs	r2, #15
    2a94:	400a      	ands	r2, r1
    2a96:	0131      	lsls	r1, r6, #4
    2a98:	20ff      	movs	r0, #255	; 0xff
    2a9a:	0100      	lsls	r0, r0, #4
    2a9c:	4001      	ands	r1, r0
    2a9e:	430a      	orrs	r2, r1
    2aa0:	701a      	strb	r2, [r3, #0]
			bc++;
    2aa2:	4644      	mov	r4, r8
    2aa4:	3401      	adds	r4, #1
			fs->wflag = 1;
    2aa6:	2301      	movs	r3, #1
    2aa8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2aaa:	0a61      	lsrs	r1, r4, #9
    2aac:	6a3b      	ldr	r3, [r7, #32]
    2aae:	469c      	mov	ip, r3
    2ab0:	4461      	add	r1, ip
    2ab2:	0038      	movs	r0, r7
    2ab4:	4b2c      	ldr	r3, [pc, #176]	; (2b68 <put_fat+0x134>)
    2ab6:	4798      	blx	r3
			if (res != FR_OK) break;
    2ab8:	2800      	cmp	r0, #0
    2aba:	d151      	bne.n	2b60 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    2abc:	05e4      	lsls	r4, r4, #23
    2abe:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2ac0:	0936      	lsrs	r6, r6, #4
    2ac2:	b2f6      	uxtb	r6, r6
    2ac4:	193c      	adds	r4, r7, r4
    2ac6:	3430      	adds	r4, #48	; 0x30
    2ac8:	7026      	strb	r6, [r4, #0]
			break;
    2aca:	e7cb      	b.n	2a64 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2acc:	18fb      	adds	r3, r7, r3
    2ace:	3330      	adds	r3, #48	; 0x30
    2ad0:	701e      	strb	r6, [r3, #0]
			bc++;
    2ad2:	4644      	mov	r4, r8
    2ad4:	3401      	adds	r4, #1
			fs->wflag = 1;
    2ad6:	2301      	movs	r3, #1
    2ad8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2ada:	0a61      	lsrs	r1, r4, #9
    2adc:	6a3b      	ldr	r3, [r7, #32]
    2ade:	469c      	mov	ip, r3
    2ae0:	4461      	add	r1, ip
    2ae2:	0038      	movs	r0, r7
    2ae4:	4b20      	ldr	r3, [pc, #128]	; (2b68 <put_fat+0x134>)
    2ae6:	4798      	blx	r3
			if (res != FR_OK) break;
    2ae8:	2800      	cmp	r0, #0
    2aea:	d13b      	bne.n	2b64 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    2aec:	05e4      	lsls	r4, r4, #23
    2aee:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2af0:	193b      	adds	r3, r7, r4
    2af2:	3330      	adds	r3, #48	; 0x30
    2af4:	781b      	ldrb	r3, [r3, #0]
    2af6:	220f      	movs	r2, #15
    2af8:	4393      	bics	r3, r2
    2afa:	0536      	lsls	r6, r6, #20
    2afc:	0f36      	lsrs	r6, r6, #28
    2afe:	431e      	orrs	r6, r3
    2b00:	e7e0      	b.n	2ac4 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2b02:	0a09      	lsrs	r1, r1, #8
    2b04:	6a03      	ldr	r3, [r0, #32]
    2b06:	469c      	mov	ip, r3
    2b08:	4461      	add	r1, ip
    2b0a:	4b17      	ldr	r3, [pc, #92]	; (2b68 <put_fat+0x134>)
    2b0c:	4798      	blx	r3
    2b0e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    2b10:	d1a8      	bne.n	2a64 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    2b12:	0063      	lsls	r3, r4, #1
    2b14:	24ff      	movs	r4, #255	; 0xff
    2b16:	0064      	lsls	r4, r4, #1
    2b18:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	3330      	adds	r3, #48	; 0x30
    2b1e:	701e      	strb	r6, [r3, #0]
    2b20:	0a36      	lsrs	r6, r6, #8
    2b22:	705e      	strb	r6, [r3, #1]
			break;
    2b24:	e79e      	b.n	2a64 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2b26:	09c9      	lsrs	r1, r1, #7
    2b28:	6a03      	ldr	r3, [r0, #32]
    2b2a:	469c      	mov	ip, r3
    2b2c:	4461      	add	r1, ip
    2b2e:	4b0e      	ldr	r3, [pc, #56]	; (2b68 <put_fat+0x134>)
    2b30:	4798      	blx	r3
    2b32:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    2b34:	d196      	bne.n	2a64 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    2b36:	00a4      	lsls	r4, r4, #2
    2b38:	23fe      	movs	r3, #254	; 0xfe
    2b3a:	005b      	lsls	r3, r3, #1
    2b3c:	401c      	ands	r4, r3
    2b3e:	0022      	movs	r2, r4
    2b40:	3230      	adds	r2, #48	; 0x30
    2b42:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    2b44:	78d3      	ldrb	r3, [r2, #3]
    2b46:	193c      	adds	r4, r7, r4
    2b48:	3430      	adds	r4, #48	; 0x30
    2b4a:	091b      	lsrs	r3, r3, #4
    2b4c:	071b      	lsls	r3, r3, #28
    2b4e:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    2b50:	7026      	strb	r6, [r4, #0]
    2b52:	0a33      	lsrs	r3, r6, #8
    2b54:	7053      	strb	r3, [r2, #1]
    2b56:	0c33      	lsrs	r3, r6, #16
    2b58:	7093      	strb	r3, [r2, #2]
    2b5a:	0e36      	lsrs	r6, r6, #24
    2b5c:	70d6      	strb	r6, [r2, #3]
			break;
    2b5e:	e781      	b.n	2a64 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2b60:	0005      	movs	r5, r0
    2b62:	e77f      	b.n	2a64 <put_fat+0x30>
    2b64:	0005      	movs	r5, r0
    2b66:	e77d      	b.n	2a64 <put_fat+0x30>
    2b68:	000027f1 	.word	0x000027f1

00002b6c <create_chain>:
{
    2b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b6e:	46c6      	mov	lr, r8
    2b70:	b500      	push	{lr}
    2b72:	0005      	movs	r5, r0
    2b74:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    2b76:	2900      	cmp	r1, #0
    2b78:	d107      	bne.n	2b8a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    2b7a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2b7c:	2e00      	cmp	r6, #0
    2b7e:	d00d      	beq.n	2b9c <create_chain+0x30>
    2b80:	6983      	ldr	r3, [r0, #24]
    2b82:	429e      	cmp	r6, r3
    2b84:	d30b      	bcc.n	2b9e <create_chain+0x32>
    2b86:	2601      	movs	r6, #1
    2b88:	e009      	b.n	2b9e <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    2b8a:	4b26      	ldr	r3, [pc, #152]	; (2c24 <create_chain+0xb8>)
    2b8c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2b8e:	2801      	cmp	r0, #1
    2b90:	d93d      	bls.n	2c0e <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2b92:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    2b94:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2b96:	4298      	cmp	r0, r3
    2b98:	d201      	bcs.n	2b9e <create_chain+0x32>
    2b9a:	e03d      	b.n	2c18 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2b9c:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    2b9e:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    2ba0:	4f20      	ldr	r7, [pc, #128]	; (2c24 <create_chain+0xb8>)
    2ba2:	e00a      	b.n	2bba <create_chain+0x4e>
    2ba4:	0021      	movs	r1, r4
    2ba6:	0028      	movs	r0, r5
    2ba8:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    2baa:	2800      	cmp	r0, #0
    2bac:	d00d      	beq.n	2bca <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    2bae:	1c43      	adds	r3, r0, #1
    2bb0:	d032      	beq.n	2c18 <create_chain+0xac>
    2bb2:	2801      	cmp	r0, #1
    2bb4:	d030      	beq.n	2c18 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    2bb6:	42b4      	cmp	r4, r6
    2bb8:	d02d      	beq.n	2c16 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    2bba:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    2bbc:	69ab      	ldr	r3, [r5, #24]
    2bbe:	429c      	cmp	r4, r3
    2bc0:	d3f0      	bcc.n	2ba4 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    2bc2:	2e01      	cmp	r6, #1
    2bc4:	d925      	bls.n	2c12 <create_chain+0xa6>
			ncl = 2;
    2bc6:	2402      	movs	r4, #2
    2bc8:	e7ec      	b.n	2ba4 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    2bca:	4a17      	ldr	r2, [pc, #92]	; (2c28 <create_chain+0xbc>)
    2bcc:	0021      	movs	r1, r4
    2bce:	0028      	movs	r0, r5
    2bd0:	4b16      	ldr	r3, [pc, #88]	; (2c2c <create_chain+0xc0>)
    2bd2:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    2bd4:	2800      	cmp	r0, #0
    2bd6:	d113      	bne.n	2c00 <create_chain+0x94>
    2bd8:	4643      	mov	r3, r8
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d109      	bne.n	2bf2 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    2bde:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    2be0:	692b      	ldr	r3, [r5, #16]
    2be2:	1c5a      	adds	r2, r3, #1
    2be4:	d01b      	beq.n	2c1e <create_chain+0xb2>
			fs->free_clust--;
    2be6:	3b01      	subs	r3, #1
    2be8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    2bea:	2301      	movs	r3, #1
    2bec:	716b      	strb	r3, [r5, #5]
    2bee:	0020      	movs	r0, r4
    2bf0:	e012      	b.n	2c18 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    2bf2:	0022      	movs	r2, r4
    2bf4:	4641      	mov	r1, r8
    2bf6:	0028      	movs	r0, r5
    2bf8:	4b0c      	ldr	r3, [pc, #48]	; (2c2c <create_chain+0xc0>)
    2bfa:	4798      	blx	r3
	if (res == FR_OK) {
    2bfc:	2800      	cmp	r0, #0
    2bfe:	d0ee      	beq.n	2bde <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2c00:	3801      	subs	r0, #1
    2c02:	4242      	negs	r2, r0
    2c04:	4142      	adcs	r2, r0
    2c06:	4250      	negs	r0, r2
    2c08:	2301      	movs	r3, #1
    2c0a:	4318      	orrs	r0, r3
    2c0c:	e004      	b.n	2c18 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2c0e:	2001      	movs	r0, #1
    2c10:	e002      	b.n	2c18 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    2c12:	2000      	movs	r0, #0
    2c14:	e000      	b.n	2c18 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    2c16:	2000      	movs	r0, #0
}
    2c18:	bc04      	pop	{r2}
    2c1a:	4690      	mov	r8, r2
    2c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c1e:	0020      	movs	r0, r4
    2c20:	e7fa      	b.n	2c18 <create_chain+0xac>
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	00002891 	.word	0x00002891
    2c28:	0fffffff 	.word	0x0fffffff
    2c2c:	00002a35 	.word	0x00002a35

00002c30 <remove_chain>:
{
    2c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c32:	46ce      	mov	lr, r9
    2c34:	4647      	mov	r7, r8
    2c36:	b580      	push	{r7, lr}
    2c38:	0004      	movs	r4, r0
    2c3a:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    2c3c:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2c3e:	2901      	cmp	r1, #1
    2c40:	d902      	bls.n	2c48 <remove_chain+0x18>
    2c42:	69a3      	ldr	r3, [r4, #24]
    2c44:	4299      	cmp	r1, r3
    2c46:	d303      	bcc.n	2c50 <remove_chain+0x20>
}
    2c48:	bc0c      	pop	{r2, r3}
    2c4a:	4690      	mov	r8, r2
    2c4c:	4699      	mov	r9, r3
    2c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2c50:	4f13      	ldr	r7, [pc, #76]	; (2ca0 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2c52:	4b14      	ldr	r3, [pc, #80]	; (2ca4 <remove_chain+0x74>)
    2c54:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    2c56:	2301      	movs	r3, #1
    2c58:	4699      	mov	r9, r3
    2c5a:	e003      	b.n	2c64 <remove_chain+0x34>
    2c5c:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2c5e:	69a3      	ldr	r3, [r4, #24]
    2c60:	42b3      	cmp	r3, r6
    2c62:	d9f1      	bls.n	2c48 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2c64:	0029      	movs	r1, r5
    2c66:	0020      	movs	r0, r4
    2c68:	47b8      	blx	r7
    2c6a:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    2c6c:	d011      	beq.n	2c92 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2c6e:	2801      	cmp	r0, #1
    2c70:	d011      	beq.n	2c96 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2c72:	1c43      	adds	r3, r0, #1
    2c74:	d011      	beq.n	2c9a <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2c76:	2200      	movs	r2, #0
    2c78:	0029      	movs	r1, r5
    2c7a:	0020      	movs	r0, r4
    2c7c:	47c0      	blx	r8
			if (res != FR_OK) break;
    2c7e:	2800      	cmp	r0, #0
    2c80:	d1e2      	bne.n	2c48 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2c82:	6923      	ldr	r3, [r4, #16]
    2c84:	1c5a      	adds	r2, r3, #1
    2c86:	d0e9      	beq.n	2c5c <remove_chain+0x2c>
				fs->free_clust++;
    2c88:	3301      	adds	r3, #1
    2c8a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    2c8c:	464b      	mov	r3, r9
    2c8e:	7163      	strb	r3, [r4, #5]
    2c90:	e7e4      	b.n	2c5c <remove_chain+0x2c>
    2c92:	2000      	movs	r0, #0
    2c94:	e7d8      	b.n	2c48 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2c96:	2002      	movs	r0, #2
    2c98:	e7d6      	b.n	2c48 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2c9a:	2001      	movs	r0, #1
    2c9c:	e7d4      	b.n	2c48 <remove_chain+0x18>
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	00002891 	.word	0x00002891
    2ca4:	00002a35 	.word	0x00002a35

00002ca8 <dir_next>:
{
    2ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2caa:	46d6      	mov	lr, sl
    2cac:	4647      	mov	r7, r8
    2cae:	b580      	push	{r7, lr}
    2cb0:	0006      	movs	r6, r0
    2cb2:	000d      	movs	r5, r1
	i = dj->index + 1;
    2cb4:	88c4      	ldrh	r4, [r0, #6]
    2cb6:	3401      	adds	r4, #1
    2cb8:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    2cba:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2cbc:	2c00      	cmp	r4, #0
    2cbe:	d103      	bne.n	2cc8 <dir_next+0x20>
}
    2cc0:	bc0c      	pop	{r2, r3}
    2cc2:	4690      	mov	r8, r2
    2cc4:	469a      	mov	sl, r3
    2cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2cc8:	6933      	ldr	r3, [r6, #16]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d0f8      	beq.n	2cc0 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2cce:	270f      	movs	r7, #15
    2cd0:	4027      	ands	r7, r4
    2cd2:	d10f      	bne.n	2cf4 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    2cd4:	3301      	adds	r3, #1
    2cd6:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    2cd8:	68f1      	ldr	r1, [r6, #12]
    2cda:	2900      	cmp	r1, #0
    2cdc:	d104      	bne.n	2ce8 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2cde:	6833      	ldr	r3, [r6, #0]
    2ce0:	891b      	ldrh	r3, [r3, #8]
    2ce2:	42a3      	cmp	r3, r4
    2ce4:	d9ec      	bls.n	2cc0 <dir_next+0x18>
    2ce6:	e005      	b.n	2cf4 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2ce8:	6830      	ldr	r0, [r6, #0]
    2cea:	7883      	ldrb	r3, [r0, #2]
    2cec:	3b01      	subs	r3, #1
    2cee:	0922      	lsrs	r2, r4, #4
    2cf0:	421a      	tst	r2, r3
    2cf2:	d007      	beq.n	2d04 <dir_next+0x5c>
	dj->index = i;
    2cf4:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2cf6:	6833      	ldr	r3, [r6, #0]
    2cf8:	3330      	adds	r3, #48	; 0x30
    2cfa:	017f      	lsls	r7, r7, #5
    2cfc:	19df      	adds	r7, r3, r7
    2cfe:	6177      	str	r7, [r6, #20]
	return FR_OK;
    2d00:	2000      	movs	r0, #0
    2d02:	e7dd      	b.n	2cc0 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2d04:	4b2c      	ldr	r3, [pc, #176]	; (2db8 <dir_next+0x110>)
    2d06:	4798      	blx	r3
    2d08:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    2d0a:	2002      	movs	r0, #2
    2d0c:	4643      	mov	r3, r8
    2d0e:	2b01      	cmp	r3, #1
    2d10:	d9d6      	bls.n	2cc0 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2d12:	3301      	adds	r3, #1
    2d14:	d04b      	beq.n	2dae <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    2d16:	6833      	ldr	r3, [r6, #0]
    2d18:	699a      	ldr	r2, [r3, #24]
    2d1a:	4590      	cmp	r8, r2
    2d1c:	d33f      	bcc.n	2d9e <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2d1e:	3002      	adds	r0, #2
    2d20:	2d00      	cmp	r5, #0
    2d22:	d0cd      	beq.n	2cc0 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    2d24:	68f1      	ldr	r1, [r6, #12]
    2d26:	0018      	movs	r0, r3
    2d28:	4b24      	ldr	r3, [pc, #144]	; (2dbc <dir_next+0x114>)
    2d2a:	4798      	blx	r3
    2d2c:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2d2e:	2007      	movs	r0, #7
    2d30:	4643      	mov	r3, r8
    2d32:	2b00      	cmp	r3, #0
    2d34:	d0c4      	beq.n	2cc0 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    2d36:	3805      	subs	r0, #5
    2d38:	2b01      	cmp	r3, #1
    2d3a:	d0c1      	beq.n	2cc0 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2d3c:	3801      	subs	r0, #1
    2d3e:	3301      	adds	r3, #1
    2d40:	d0be      	beq.n	2cc0 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2d42:	2100      	movs	r1, #0
    2d44:	6830      	ldr	r0, [r6, #0]
    2d46:	4b1e      	ldr	r3, [pc, #120]	; (2dc0 <dir_next+0x118>)
    2d48:	4798      	blx	r3
    2d4a:	0003      	movs	r3, r0
    2d4c:	2001      	movs	r0, #1
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d1b6      	bne.n	2cc0 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2d52:	6830      	ldr	r0, [r6, #0]
    2d54:	3030      	adds	r0, #48	; 0x30
    2d56:	2280      	movs	r2, #128	; 0x80
    2d58:	0092      	lsls	r2, r2, #2
    2d5a:	2100      	movs	r1, #0
    2d5c:	4b19      	ldr	r3, [pc, #100]	; (2dc4 <dir_next+0x11c>)
    2d5e:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2d60:	6835      	ldr	r5, [r6, #0]
    2d62:	4641      	mov	r1, r8
    2d64:	0028      	movs	r0, r5
    2d66:	4b18      	ldr	r3, [pc, #96]	; (2dc8 <dir_next+0x120>)
    2d68:	4798      	blx	r3
    2d6a:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2d6c:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    2d6e:	2301      	movs	r3, #1
    2d70:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2d72:	6833      	ldr	r3, [r6, #0]
    2d74:	789a      	ldrb	r2, [r3, #2]
    2d76:	42aa      	cmp	r2, r5
    2d78:	d90e      	bls.n	2d98 <dir_next+0xf0>
						dj->fs->wflag = 1;
    2d7a:	4652      	mov	r2, sl
    2d7c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2d7e:	2100      	movs	r1, #0
    2d80:	6830      	ldr	r0, [r6, #0]
    2d82:	4b0f      	ldr	r3, [pc, #60]	; (2dc0 <dir_next+0x118>)
    2d84:	4798      	blx	r3
    2d86:	2800      	cmp	r0, #0
    2d88:	d113      	bne.n	2db2 <dir_next+0x10a>
						dj->fs->winsect++;
    2d8a:	6832      	ldr	r2, [r6, #0]
    2d8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2d8e:	3301      	adds	r3, #1
    2d90:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2d92:	3501      	adds	r5, #1
    2d94:	b2ed      	uxtb	r5, r5
    2d96:	e7ec      	b.n	2d72 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    2d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d9a:	1b52      	subs	r2, r2, r5
    2d9c:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    2d9e:	4643      	mov	r3, r8
    2da0:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    2da2:	4641      	mov	r1, r8
    2da4:	6830      	ldr	r0, [r6, #0]
    2da6:	4b08      	ldr	r3, [pc, #32]	; (2dc8 <dir_next+0x120>)
    2da8:	4798      	blx	r3
    2daa:	6130      	str	r0, [r6, #16]
    2dac:	e7a2      	b.n	2cf4 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2dae:	2001      	movs	r0, #1
    2db0:	e786      	b.n	2cc0 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2db2:	2001      	movs	r0, #1
    2db4:	e784      	b.n	2cc0 <dir_next+0x18>
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	00002891 	.word	0x00002891
    2dbc:	00002b6d 	.word	0x00002b6d
    2dc0:	000027f1 	.word	0x000027f1
    2dc4:	00002295 	.word	0x00002295
    2dc8:	00002315 	.word	0x00002315

00002dcc <dir_find>:
{
    2dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dce:	46de      	mov	lr, fp
    2dd0:	4657      	mov	r7, sl
    2dd2:	464e      	mov	r6, r9
    2dd4:	4645      	mov	r5, r8
    2dd6:	b5e0      	push	{r5, r6, r7, lr}
    2dd8:	b083      	sub	sp, #12
    2dda:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    2ddc:	2100      	movs	r1, #0
    2dde:	4b5a      	ldr	r3, [pc, #360]	; (2f48 <dir_find+0x17c>)
    2de0:	4798      	blx	r3
    2de2:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    2de4:	d000      	beq.n	2de8 <dir_find+0x1c>
    2de6:	e09e      	b.n	2f26 <dir_find+0x15a>
    2de8:	23ff      	movs	r3, #255	; 0xff
    2dea:	4699      	mov	r9, r3
    2dec:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    2dee:	4b57      	ldr	r3, [pc, #348]	; (2f4c <dir_find+0x180>)
    2df0:	469b      	mov	fp, r3
    2df2:	e01b      	b.n	2e2c <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    2df4:	2b0f      	cmp	r3, #15
    2df6:	d030      	beq.n	2e5a <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    2df8:	4653      	mov	r3, sl
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d105      	bne.n	2e0a <dir_find+0x3e>
    2dfe:	0020      	movs	r0, r4
    2e00:	4b53      	ldr	r3, [pc, #332]	; (2f50 <dir_find+0x184>)
    2e02:	4798      	blx	r3
    2e04:	4581      	cmp	r9, r0
    2e06:	d100      	bne.n	2e0a <dir_find+0x3e>
    2e08:	e08d      	b.n	2f26 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2e0a:	2301      	movs	r3, #1
    2e0c:	425b      	negs	r3, r3
    2e0e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    2e10:	69a8      	ldr	r0, [r5, #24]
    2e12:	7ac3      	ldrb	r3, [r0, #11]
    2e14:	07db      	lsls	r3, r3, #31
    2e16:	d400      	bmi.n	2e1a <dir_find+0x4e>
    2e18:	e07d      	b.n	2f16 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2e1a:	23ff      	movs	r3, #255	; 0xff
    2e1c:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    2e1e:	2100      	movs	r1, #0
    2e20:	0028      	movs	r0, r5
    2e22:	4b4c      	ldr	r3, [pc, #304]	; (2f54 <dir_find+0x188>)
    2e24:	4798      	blx	r3
    2e26:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    2e28:	d000      	beq.n	2e2c <dir_find+0x60>
    2e2a:	e07c      	b.n	2f26 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    2e2c:	6929      	ldr	r1, [r5, #16]
    2e2e:	6828      	ldr	r0, [r5, #0]
    2e30:	47d8      	blx	fp
    2e32:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    2e34:	d177      	bne.n	2f26 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2e36:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    2e38:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2e3a:	2e00      	cmp	r6, #0
    2e3c:	d100      	bne.n	2e40 <dir_find+0x74>
    2e3e:	e080      	b.n	2f42 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    2e40:	7ae2      	ldrb	r2, [r4, #11]
    2e42:	233f      	movs	r3, #63	; 0x3f
    2e44:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    2e46:	2ee5      	cmp	r6, #229	; 0xe5
    2e48:	d100      	bne.n	2e4c <dir_find+0x80>
    2e4a:	e077      	b.n	2f3c <dir_find+0x170>
    2e4c:	0712      	lsls	r2, r2, #28
    2e4e:	d5d1      	bpl.n	2df4 <dir_find+0x28>
    2e50:	2b0f      	cmp	r3, #15
    2e52:	d002      	beq.n	2e5a <dir_find+0x8e>
			ord = 0xFF;
    2e54:	23ff      	movs	r3, #255	; 0xff
    2e56:	469a      	mov	sl, r3
    2e58:	e7e1      	b.n	2e1e <dir_find+0x52>
				if (dj->lfn) {
    2e5a:	69ef      	ldr	r7, [r5, #28]
    2e5c:	2f00      	cmp	r7, #0
    2e5e:	d0de      	beq.n	2e1e <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    2e60:	0673      	lsls	r3, r6, #25
    2e62:	d518      	bpl.n	2e96 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    2e64:	7b63      	ldrb	r3, [r4, #13]
    2e66:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    2e68:	2340      	movs	r3, #64	; 0x40
    2e6a:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    2e6c:	88eb      	ldrh	r3, [r5, #6]
    2e6e:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2e70:	7b63      	ldrb	r3, [r4, #13]
    2e72:	9300      	str	r3, [sp, #0]
    2e74:	22ff      	movs	r2, #255	; 0xff
    2e76:	4692      	mov	sl, r2
    2e78:	454b      	cmp	r3, r9
    2e7a:	d1d0      	bne.n	2e1e <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    2e7c:	7823      	ldrb	r3, [r4, #0]
    2e7e:	3abf      	subs	r2, #191	; 0xbf
    2e80:	4393      	bics	r3, r2
    2e82:	3b01      	subs	r3, #1
    2e84:	005a      	lsls	r2, r3, #1
    2e86:	18d2      	adds	r2, r2, r3
    2e88:	0092      	lsls	r2, r2, #2
    2e8a:	4692      	mov	sl, r2
    2e8c:	449a      	add	sl, r3
	s = 0; wc = 1;
    2e8e:	2201      	movs	r2, #1
    2e90:	2300      	movs	r3, #0
    2e92:	4699      	mov	r9, r3
    2e94:	e01d      	b.n	2ed2 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2e96:	45b2      	cmp	sl, r6
    2e98:	d0ea      	beq.n	2e70 <dir_find+0xa4>
    2e9a:	23ff      	movs	r3, #255	; 0xff
    2e9c:	469a      	mov	sl, r3
    2e9e:	e7be      	b.n	2e1e <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    2ea0:	4b2d      	ldr	r3, [pc, #180]	; (2f58 <dir_find+0x18c>)
    2ea2:	4798      	blx	r3
    2ea4:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    2ea6:	4653      	mov	r3, sl
    2ea8:	2bfe      	cmp	r3, #254	; 0xfe
    2eaa:	d81f      	bhi.n	2eec <dir_find+0x120>
    2eac:	2301      	movs	r3, #1
    2eae:	4453      	add	r3, sl
    2eb0:	4698      	mov	r8, r3
    2eb2:	4653      	mov	r3, sl
    2eb4:	005b      	lsls	r3, r3, #1
    2eb6:	5bd8      	ldrh	r0, [r3, r7]
    2eb8:	4b27      	ldr	r3, [pc, #156]	; (2f58 <dir_find+0x18c>)
    2eba:	4798      	blx	r3
    2ebc:	0002      	movs	r2, r0
    2ebe:	9b01      	ldr	r3, [sp, #4]
    2ec0:	4283      	cmp	r3, r0
    2ec2:	d113      	bne.n	2eec <dir_find+0x120>
    2ec4:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    2ec6:	2301      	movs	r3, #1
    2ec8:	469c      	mov	ip, r3
    2eca:	44e1      	add	r9, ip
    2ecc:	464b      	mov	r3, r9
    2ece:	2b0d      	cmp	r3, #13
    2ed0:	d011      	beq.n	2ef6 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    2ed2:	4b22      	ldr	r3, [pc, #136]	; (2f5c <dir_find+0x190>)
    2ed4:	4649      	mov	r1, r9
    2ed6:	5cc9      	ldrb	r1, [r1, r3]
    2ed8:	1863      	adds	r3, r4, r1
    2eda:	785b      	ldrb	r3, [r3, #1]
    2edc:	021b      	lsls	r3, r3, #8
    2ede:	5c60      	ldrb	r0, [r4, r1]
    2ee0:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    2ee2:	2a00      	cmp	r2, #0
    2ee4:	d1dc      	bne.n	2ea0 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    2ee6:	4b1e      	ldr	r3, [pc, #120]	; (2f60 <dir_find+0x194>)
    2ee8:	4298      	cmp	r0, r3
    2eea:	d0ec      	beq.n	2ec6 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2eec:	9b00      	ldr	r3, [sp, #0]
    2eee:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2ef0:	23ff      	movs	r3, #255	; 0xff
    2ef2:	469a      	mov	sl, r3
    2ef4:	e793      	b.n	2e1e <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    2ef6:	7823      	ldrb	r3, [r4, #0]
    2ef8:	065b      	lsls	r3, r3, #25
    2efa:	d506      	bpl.n	2f0a <dir_find+0x13e>
    2efc:	2a00      	cmp	r2, #0
    2efe:	d004      	beq.n	2f0a <dir_find+0x13e>
    2f00:	4653      	mov	r3, sl
    2f02:	005b      	lsls	r3, r3, #1
    2f04:	5bdb      	ldrh	r3, [r3, r7]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d1f0      	bne.n	2eec <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2f0a:	3e01      	subs	r6, #1
    2f0c:	b2f3      	uxtb	r3, r6
    2f0e:	469a      	mov	sl, r3
    2f10:	9b00      	ldr	r3, [sp, #0]
    2f12:	4699      	mov	r9, r3
    2f14:	e783      	b.n	2e1e <dir_find+0x52>
    2f16:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2f18:	5ce1      	ldrb	r1, [r4, r3]
    2f1a:	5cc2      	ldrb	r2, [r0, r3]
    2f1c:	4291      	cmp	r1, r2
    2f1e:	d10a      	bne.n	2f36 <dir_find+0x16a>
    2f20:	3301      	adds	r3, #1
    2f22:	2b0b      	cmp	r3, #11
    2f24:	d1f8      	bne.n	2f18 <dir_find+0x14c>
}
    2f26:	0038      	movs	r0, r7
    2f28:	b003      	add	sp, #12
    2f2a:	bc3c      	pop	{r2, r3, r4, r5}
    2f2c:	4690      	mov	r8, r2
    2f2e:	4699      	mov	r9, r3
    2f30:	46a2      	mov	sl, r4
    2f32:	46ab      	mov	fp, r5
    2f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2f36:	23ff      	movs	r3, #255	; 0xff
    2f38:	469a      	mov	sl, r3
    2f3a:	e770      	b.n	2e1e <dir_find+0x52>
			ord = 0xFF;
    2f3c:	23ff      	movs	r3, #255	; 0xff
    2f3e:	469a      	mov	sl, r3
    2f40:	e76d      	b.n	2e1e <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2f42:	2704      	movs	r7, #4
    2f44:	e7ef      	b.n	2f26 <dir_find+0x15a>
    2f46:	46c0      	nop			; (mov r8, r8)
    2f48:	0000298d 	.word	0x0000298d
    2f4c:	000027f1 	.word	0x000027f1
    2f50:	0000232d 	.word	0x0000232d
    2f54:	00002ca9 	.word	0x00002ca9
    2f58:	000021b1 	.word	0x000021b1
    2f5c:	00008c54 	.word	0x00008c54
    2f60:	0000ffff 	.word	0x0000ffff

00002f64 <dir_register>:
{
    2f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f66:	46de      	mov	lr, fp
    2f68:	4657      	mov	r7, sl
    2f6a:	464e      	mov	r6, r9
    2f6c:	4645      	mov	r5, r8
    2f6e:	b5e0      	push	{r5, r6, r7, lr}
    2f70:	b089      	sub	sp, #36	; 0x24
    2f72:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    2f74:	6987      	ldr	r7, [r0, #24]
    2f76:	69c3      	ldr	r3, [r0, #28]
    2f78:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    2f7a:	ad05      	add	r5, sp, #20
    2f7c:	220c      	movs	r2, #12
    2f7e:	0039      	movs	r1, r7
    2f80:	0028      	movs	r0, r5
    2f82:	4ba7      	ldr	r3, [pc, #668]	; (3220 <dir_register+0x2bc>)
    2f84:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    2f86:	7aeb      	ldrb	r3, [r5, #11]
    2f88:	07db      	lsls	r3, r3, #31
    2f8a:	d400      	bmi.n	2f8e <dir_register+0x2a>
    2f8c:	e070      	b.n	3070 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    2f8e:	2300      	movs	r3, #0
    2f90:	72fb      	strb	r3, [r7, #11]
    2f92:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    2f94:	220b      	movs	r2, #11
    2f96:	a905      	add	r1, sp, #20
    2f98:	0038      	movs	r0, r7
    2f9a:	4ba1      	ldr	r3, [pc, #644]	; (3220 <dir_register+0x2bc>)
    2f9c:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    2f9e:	2301      	movs	r3, #1
		ns[i--] = c;
    2fa0:	ad03      	add	r5, sp, #12
    2fa2:	001e      	movs	r6, r3
    2fa4:	46a0      	mov	r8, r4
    2fa6:	e049      	b.n	303c <dir_register+0xd8>
    2fa8:	3801      	subs	r0, #1
    2faa:	1829      	adds	r1, r5, r0
    2fac:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    2fae:	091b      	lsrs	r3, r3, #4
    2fb0:	b29b      	uxth	r3, r3
	} while (seq);
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d007      	beq.n	2fc6 <dir_register+0x62>
		c = (seq % 16) + '0';
    2fb6:	0021      	movs	r1, r4
    2fb8:	4019      	ands	r1, r3
    2fba:	000a      	movs	r2, r1
    2fbc:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    2fbe:	2a39      	cmp	r2, #57	; 0x39
    2fc0:	d9f2      	bls.n	2fa8 <dir_register+0x44>
    2fc2:	3207      	adds	r2, #7
    2fc4:	e7f0      	b.n	2fa8 <dir_register+0x44>
	ns[i] = '~';
    2fc6:	337e      	adds	r3, #126	; 0x7e
    2fc8:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    2fca:	2800      	cmp	r0, #0
    2fcc:	d00a      	beq.n	2fe4 <dir_register+0x80>
    2fce:	783b      	ldrb	r3, [r7, #0]
    2fd0:	2b20      	cmp	r3, #32
    2fd2:	d009      	beq.n	2fe8 <dir_register+0x84>
    2fd4:	2300      	movs	r3, #0
    2fd6:	3301      	adds	r3, #1
    2fd8:	4298      	cmp	r0, r3
    2fda:	d007      	beq.n	2fec <dir_register+0x88>
    2fdc:	5cfa      	ldrb	r2, [r7, r3]
    2fde:	2a20      	cmp	r2, #32
    2fe0:	d1f9      	bne.n	2fd6 <dir_register+0x72>
    2fe2:	e009      	b.n	2ff8 <dir_register+0x94>
    2fe4:	0003      	movs	r3, r0
    2fe6:	e007      	b.n	2ff8 <dir_register+0x94>
    2fe8:	2300      	movs	r3, #0
    2fea:	e005      	b.n	2ff8 <dir_register+0x94>
    2fec:	0003      	movs	r3, r0
    2fee:	e003      	b.n	2ff8 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    2ff0:	54fa      	strb	r2, [r7, r3]
    2ff2:	3301      	adds	r3, #1
	} while (j < 8);
    2ff4:	2b07      	cmp	r3, #7
    2ff6:	d805      	bhi.n	3004 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    2ff8:	2220      	movs	r2, #32
    2ffa:	2807      	cmp	r0, #7
    2ffc:	d8f8      	bhi.n	2ff0 <dir_register+0x8c>
    2ffe:	5c2a      	ldrb	r2, [r5, r0]
    3000:	3001      	adds	r0, #1
    3002:	e7f5      	b.n	2ff0 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    3004:	4640      	mov	r0, r8
    3006:	4b87      	ldr	r3, [pc, #540]	; (3224 <dir_register+0x2c0>)
    3008:	4798      	blx	r3
			if (res != FR_OK) break;
    300a:	2800      	cmp	r0, #0
    300c:	d11c      	bne.n	3048 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    300e:	3601      	adds	r6, #1
    3010:	b2b6      	uxth	r6, r6
    3012:	2e64      	cmp	r6, #100	; 0x64
    3014:	d015      	beq.n	3042 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    3016:	220b      	movs	r2, #11
    3018:	a905      	add	r1, sp, #20
    301a:	0038      	movs	r0, r7
    301c:	4b80      	ldr	r3, [pc, #512]	; (3220 <dir_register+0x2bc>)
    301e:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    3020:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    3022:	2e05      	cmp	r6, #5
    3024:	d90a      	bls.n	303c <dir_register+0xd8>
    3026:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    3028:	085a      	lsrs	r2, r3, #1
    302a:	03db      	lsls	r3, r3, #15
    302c:	4313      	orrs	r3, r2
    302e:	880a      	ldrh	r2, [r1, #0]
    3030:	189b      	adds	r3, r3, r2
    3032:	b29b      	uxth	r3, r3
    3034:	3102      	adds	r1, #2
    3036:	880a      	ldrh	r2, [r1, #0]
    3038:	2a00      	cmp	r2, #0
    303a:	d1f5      	bne.n	3028 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    303c:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    303e:	240f      	movs	r4, #15
    3040:	e7b9      	b.n	2fb6 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    3042:	2307      	movs	r3, #7
    3044:	4698      	mov	r8, r3
    3046:	e006      	b.n	3056 <dir_register+0xf2>
    3048:	4644      	mov	r4, r8
    304a:	4680      	mov	r8, r0
    304c:	2e64      	cmp	r6, #100	; 0x64
    304e:	d100      	bne.n	3052 <dir_register+0xee>
    3050:	e0a5      	b.n	319e <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    3052:	2804      	cmp	r0, #4
    3054:	d007      	beq.n	3066 <dir_register+0x102>
}
    3056:	4640      	mov	r0, r8
    3058:	b009      	add	sp, #36	; 0x24
    305a:	bc3c      	pop	{r2, r3, r4, r5}
    305c:	4690      	mov	r8, r2
    305e:	4699      	mov	r9, r3
    3060:	46a2      	mov	sl, r4
    3062:	46ab      	mov	fp, r5
    3064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    3066:	ab05      	add	r3, sp, #20
    3068:	7adb      	ldrb	r3, [r3, #11]
    306a:	72fb      	strb	r3, [r7, #11]
    306c:	4653      	mov	r3, sl
    306e:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    3070:	ab05      	add	r3, sp, #20
    3072:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    3074:	2201      	movs	r2, #1
    3076:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    3078:	079b      	lsls	r3, r3, #30
    307a:	d511      	bpl.n	30a0 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    307c:	4653      	mov	r3, sl
    307e:	881b      	ldrh	r3, [r3, #0]
    3080:	2b00      	cmp	r3, #0
    3082:	d01b      	beq.n	30bc <dir_register+0x158>
    3084:	2000      	movs	r0, #0
    3086:	4652      	mov	r2, sl
    3088:	3001      	adds	r0, #1
    308a:	b280      	uxth	r0, r0
    308c:	0043      	lsls	r3, r0, #1
    308e:	5a9b      	ldrh	r3, [r3, r2]
    3090:	2b00      	cmp	r3, #0
    3092:	d1f9      	bne.n	3088 <dir_register+0x124>
		ne = (ne + 25) / 13;
    3094:	3019      	adds	r0, #25
    3096:	210d      	movs	r1, #13
    3098:	4b63      	ldr	r3, [pc, #396]	; (3228 <dir_register+0x2c4>)
    309a:	4798      	blx	r3
    309c:	b283      	uxth	r3, r0
    309e:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    30a0:	2100      	movs	r1, #0
    30a2:	0020      	movs	r0, r4
    30a4:	4b61      	ldr	r3, [pc, #388]	; (322c <dir_register+0x2c8>)
    30a6:	4798      	blx	r3
    30a8:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    30aa:	2800      	cmp	r0, #0
    30ac:	d1d3      	bne.n	3056 <dir_register+0xf2>
    30ae:	4682      	mov	sl, r0
    30b0:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    30b2:	4f5f      	ldr	r7, [pc, #380]	; (3230 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    30b4:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    30b6:	4b5f      	ldr	r3, [pc, #380]	; (3234 <dir_register+0x2d0>)
    30b8:	4699      	mov	r9, r3
    30ba:	e00b      	b.n	30d4 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    30bc:	2000      	movs	r0, #0
    30be:	e7e9      	b.n	3094 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    30c0:	1c6b      	adds	r3, r5, #1
    30c2:	b29b      	uxth	r3, r3
    30c4:	459b      	cmp	fp, r3
    30c6:	d06d      	beq.n	31a4 <dir_register+0x240>
    30c8:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    30ca:	2101      	movs	r1, #1
    30cc:	0020      	movs	r0, r4
    30ce:	47c8      	blx	r9
	} while (res == FR_OK);
    30d0:	2800      	cmp	r0, #0
    30d2:	d112      	bne.n	30fa <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    30d4:	6921      	ldr	r1, [r4, #16]
    30d6:	6820      	ldr	r0, [r4, #0]
    30d8:	47b8      	blx	r7
		if (res != FR_OK) break;
    30da:	2800      	cmp	r0, #0
    30dc:	d000      	beq.n	30e0 <dir_register+0x17c>
    30de:	e098      	b.n	3212 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    30e0:	6963      	ldr	r3, [r4, #20]
    30e2:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    30e4:	2be5      	cmp	r3, #229	; 0xe5
    30e6:	d001      	beq.n	30ec <dir_register+0x188>
    30e8:	2b00      	cmp	r3, #0
    30ea:	d104      	bne.n	30f6 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    30ec:	2d00      	cmp	r5, #0
    30ee:	d1e7      	bne.n	30c0 <dir_register+0x15c>
    30f0:	88e3      	ldrh	r3, [r4, #6]
    30f2:	469a      	mov	sl, r3
    30f4:	e7e4      	b.n	30c0 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    30f6:	0035      	movs	r5, r6
    30f8:	e7e7      	b.n	30ca <dir_register+0x166>
    30fa:	4680      	mov	r8, r0
    30fc:	e7ab      	b.n	3056 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    30fe:	4651      	mov	r1, sl
    3100:	0020      	movs	r0, r4
    3102:	4b4a      	ldr	r3, [pc, #296]	; (322c <dir_register+0x2c8>)
    3104:	4798      	blx	r3
    3106:	4680      	mov	r8, r0
		if (res == FR_OK) {
    3108:	2800      	cmp	r0, #0
    310a:	d1a4      	bne.n	3056 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    310c:	69a0      	ldr	r0, [r4, #24]
    310e:	4b4a      	ldr	r3, [pc, #296]	; (3238 <dir_register+0x2d4>)
    3110:	4798      	blx	r3
    3112:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    3114:	46a8      	mov	r8, r5
    3116:	e01f      	b.n	3158 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    3118:	0022      	movs	r2, r4
    311a:	e067      	b.n	31ec <dir_register+0x288>
    311c:	465e      	mov	r6, fp
    311e:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    3120:	4946      	ldr	r1, [pc, #280]	; (323c <dir_register+0x2d8>)
    3122:	428b      	cmp	r3, r1
    3124:	d003      	beq.n	312e <dir_register+0x1ca>
    3126:	0052      	lsls	r2, r2, #1
    3128:	5b93      	ldrh	r3, [r2, r6]
    312a:	2b00      	cmp	r3, #0
    312c:	d103      	bne.n	3136 <dir_register+0x1d2>
    312e:	2340      	movs	r3, #64	; 0x40
    3130:	464a      	mov	r2, r9
    3132:	431a      	orrs	r2, r3
    3134:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    3136:	464b      	mov	r3, r9
    3138:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    313a:	2301      	movs	r3, #1
    313c:	6822      	ldr	r2, [r4, #0]
    313e:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    3140:	2100      	movs	r1, #0
    3142:	0020      	movs	r0, r4
    3144:	4b3b      	ldr	r3, [pc, #236]	; (3234 <dir_register+0x2d0>)
    3146:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    3148:	2800      	cmp	r0, #0
    314a:	d166      	bne.n	321a <dir_register+0x2b6>
    314c:	4645      	mov	r5, r8
    314e:	3d01      	subs	r5, #1
    3150:	b2ab      	uxth	r3, r5
    3152:	4698      	mov	r8, r3
    3154:	2b00      	cmp	r3, #0
    3156:	d027      	beq.n	31a8 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    3158:	6921      	ldr	r1, [r4, #16]
    315a:	6820      	ldr	r0, [r4, #0]
    315c:	4b34      	ldr	r3, [pc, #208]	; (3230 <dir_register+0x2cc>)
    315e:	4798      	blx	r3
				if (res != FR_OK) break;
    3160:	2800      	cmp	r0, #0
    3162:	d158      	bne.n	3216 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    3164:	69e6      	ldr	r6, [r4, #28]
    3166:	6960      	ldr	r0, [r4, #20]
    3168:	4643      	mov	r3, r8
    316a:	466a      	mov	r2, sp
    316c:	70d3      	strb	r3, [r2, #3]
    316e:	78d3      	ldrb	r3, [r2, #3]
    3170:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    3172:	7913      	ldrb	r3, [r2, #4]
    3174:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    3176:	230f      	movs	r3, #15
    3178:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    317a:	2300      	movs	r3, #0
    317c:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    317e:	7683      	strb	r3, [r0, #26]
    3180:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    3182:	464b      	mov	r3, r9
    3184:	3b01      	subs	r3, #1
    3186:	005a      	lsls	r2, r3, #1
    3188:	18d2      	adds	r2, r2, r3
    318a:	0092      	lsls	r2, r2, #2
    318c:	18d2      	adds	r2, r2, r3
    318e:	492c      	ldr	r1, [pc, #176]	; (3240 <dir_register+0x2dc>)
    3190:	000d      	movs	r5, r1
    3192:	350d      	adds	r5, #13
	s = wc = 0;
    3194:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    3196:	4f29      	ldr	r7, [pc, #164]	; (323c <dir_register+0x2d8>)
    3198:	46b3      	mov	fp, r6
    319a:	46a4      	mov	ip, r4
    319c:	e029      	b.n	31f2 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    319e:	2307      	movs	r3, #7
    31a0:	4698      	mov	r8, r3
    31a2:	e758      	b.n	3056 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    31a4:	2b01      	cmp	r3, #1
    31a6:	d8aa      	bhi.n	30fe <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    31a8:	6921      	ldr	r1, [r4, #16]
    31aa:	6820      	ldr	r0, [r4, #0]
    31ac:	4b20      	ldr	r3, [pc, #128]	; (3230 <dir_register+0x2cc>)
    31ae:	4798      	blx	r3
    31b0:	4680      	mov	r8, r0
		if (res == FR_OK) {
    31b2:	2800      	cmp	r0, #0
    31b4:	d000      	beq.n	31b8 <dir_register+0x254>
    31b6:	e74e      	b.n	3056 <dir_register+0xf2>
			dir = dj->dir;
    31b8:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    31ba:	2220      	movs	r2, #32
    31bc:	2100      	movs	r1, #0
    31be:	0028      	movs	r0, r5
    31c0:	4b20      	ldr	r3, [pc, #128]	; (3244 <dir_register+0x2e0>)
    31c2:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    31c4:	220b      	movs	r2, #11
    31c6:	69a1      	ldr	r1, [r4, #24]
    31c8:	0028      	movs	r0, r5
    31ca:	4b15      	ldr	r3, [pc, #84]	; (3220 <dir_register+0x2bc>)
    31cc:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    31ce:	69a3      	ldr	r3, [r4, #24]
    31d0:	7ada      	ldrb	r2, [r3, #11]
    31d2:	2318      	movs	r3, #24
    31d4:	4013      	ands	r3, r2
    31d6:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    31d8:	6823      	ldr	r3, [r4, #0]
    31da:	2201      	movs	r2, #1
    31dc:	711a      	strb	r2, [r3, #4]
    31de:	e73a      	b.n	3056 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    31e0:	780c      	ldrb	r4, [r1, #0]
    31e2:	26ff      	movs	r6, #255	; 0xff
    31e4:	5506      	strb	r6, [r0, r4]
    31e6:	1904      	adds	r4, r0, r4
    31e8:	26ff      	movs	r6, #255	; 0xff
    31ea:	7066      	strb	r6, [r4, #1]
    31ec:	3101      	adds	r1, #1
	} while (++s < 13);
    31ee:	42a9      	cmp	r1, r5
    31f0:	d094      	beq.n	311c <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    31f2:	42bb      	cmp	r3, r7
    31f4:	d0f4      	beq.n	31e0 <dir_register+0x27c>
    31f6:	1c54      	adds	r4, r2, #1
    31f8:	0052      	lsls	r2, r2, #1
    31fa:	465b      	mov	r3, fp
    31fc:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    31fe:	780a      	ldrb	r2, [r1, #0]
    3200:	5483      	strb	r3, [r0, r2]
    3202:	1882      	adds	r2, r0, r2
    3204:	0a1e      	lsrs	r6, r3, #8
    3206:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    3208:	2b00      	cmp	r3, #0
    320a:	d185      	bne.n	3118 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    320c:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    320e:	003b      	movs	r3, r7
    3210:	e7ec      	b.n	31ec <dir_register+0x288>
    3212:	4680      	mov	r8, r0
    3214:	e71f      	b.n	3056 <dir_register+0xf2>
    3216:	4680      	mov	r8, r0
    3218:	e71d      	b.n	3056 <dir_register+0xf2>
    321a:	4680      	mov	r8, r0
    321c:	e71b      	b.n	3056 <dir_register+0xf2>
    321e:	46c0      	nop			; (mov r8, r8)
    3220:	00002281 	.word	0x00002281
    3224:	00002dcd 	.word	0x00002dcd
    3228:	00007121 	.word	0x00007121
    322c:	0000298d 	.word	0x0000298d
    3230:	000027f1 	.word	0x000027f1
    3234:	00002ca9 	.word	0x00002ca9
    3238:	0000232d 	.word	0x0000232d
    323c:	0000ffff 	.word	0x0000ffff
    3240:	00008c54 	.word	0x00008c54
    3244:	00002295 	.word	0x00002295

00003248 <sync>:
{
    3248:	b570      	push	{r4, r5, r6, lr}
    324a:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    324c:	2100      	movs	r1, #0
    324e:	4b2c      	ldr	r3, [pc, #176]	; (3300 <sync+0xb8>)
    3250:	4798      	blx	r3
	if (res == FR_OK) {
    3252:	2800      	cmp	r0, #0
    3254:	d10a      	bne.n	326c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    3256:	7823      	ldrb	r3, [r4, #0]
    3258:	2b03      	cmp	r3, #3
    325a:	d008      	beq.n	326e <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    325c:	7860      	ldrb	r0, [r4, #1]
    325e:	2200      	movs	r2, #0
    3260:	2100      	movs	r1, #0
    3262:	4b28      	ldr	r3, [pc, #160]	; (3304 <sync+0xbc>)
    3264:	4798      	blx	r3
    3266:	1e43      	subs	r3, r0, #1
    3268:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    326a:	b2c0      	uxtb	r0, r0
}
    326c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    326e:	7963      	ldrb	r3, [r4, #5]
    3270:	2b00      	cmp	r3, #0
    3272:	d0f3      	beq.n	325c <sync+0x14>
			fs->winsect = 0;
    3274:	2600      	movs	r6, #0
    3276:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    3278:	0025      	movs	r5, r4
    327a:	3530      	adds	r5, #48	; 0x30
    327c:	2280      	movs	r2, #128	; 0x80
    327e:	0092      	lsls	r2, r2, #2
    3280:	2100      	movs	r1, #0
    3282:	0028      	movs	r0, r5
    3284:	4b20      	ldr	r3, [pc, #128]	; (3308 <sync+0xc0>)
    3286:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    3288:	2255      	movs	r2, #85	; 0x55
    328a:	4b20      	ldr	r3, [pc, #128]	; (330c <sync+0xc4>)
    328c:	54e2      	strb	r2, [r4, r3]
    328e:	3255      	adds	r2, #85	; 0x55
    3290:	4b1f      	ldr	r3, [pc, #124]	; (3310 <sync+0xc8>)
    3292:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    3294:	3bde      	subs	r3, #222	; 0xde
    3296:	3bff      	subs	r3, #255	; 0xff
    3298:	3a7a      	subs	r2, #122	; 0x7a
    329a:	54a3      	strb	r3, [r4, r2]
    329c:	3201      	adds	r2, #1
    329e:	54a3      	strb	r3, [r4, r2]
    32a0:	330f      	adds	r3, #15
    32a2:	3201      	adds	r2, #1
    32a4:	54a3      	strb	r3, [r4, r2]
    32a6:	320f      	adds	r2, #15
    32a8:	2133      	movs	r1, #51	; 0x33
    32aa:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    32ac:	313f      	adds	r1, #63	; 0x3f
    32ae:	2085      	movs	r0, #133	; 0x85
    32b0:	0080      	lsls	r0, r0, #2
    32b2:	5421      	strb	r1, [r4, r0]
    32b4:	4817      	ldr	r0, [pc, #92]	; (3314 <sync+0xcc>)
    32b6:	5421      	strb	r1, [r4, r0]
    32b8:	4917      	ldr	r1, [pc, #92]	; (3318 <sync+0xd0>)
    32ba:	5462      	strb	r2, [r4, r1]
    32bc:	4a17      	ldr	r2, [pc, #92]	; (331c <sync+0xd4>)
    32be:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    32c0:	6923      	ldr	r3, [r4, #16]
    32c2:	3201      	adds	r2, #1
    32c4:	54a3      	strb	r3, [r4, r2]
    32c6:	0a19      	lsrs	r1, r3, #8
    32c8:	4a15      	ldr	r2, [pc, #84]	; (3320 <sync+0xd8>)
    32ca:	54a1      	strb	r1, [r4, r2]
    32cc:	0c19      	lsrs	r1, r3, #16
    32ce:	4a15      	ldr	r2, [pc, #84]	; (3324 <sync+0xdc>)
    32d0:	54a1      	strb	r1, [r4, r2]
    32d2:	0e1b      	lsrs	r3, r3, #24
    32d4:	4a14      	ldr	r2, [pc, #80]	; (3328 <sync+0xe0>)
    32d6:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    32d8:	68e3      	ldr	r3, [r4, #12]
    32da:	3201      	adds	r2, #1
    32dc:	54a3      	strb	r3, [r4, r2]
    32de:	0a19      	lsrs	r1, r3, #8
    32e0:	4a12      	ldr	r2, [pc, #72]	; (332c <sync+0xe4>)
    32e2:	54a1      	strb	r1, [r4, r2]
    32e4:	0c19      	lsrs	r1, r3, #16
    32e6:	4a12      	ldr	r2, [pc, #72]	; (3330 <sync+0xe8>)
    32e8:	54a1      	strb	r1, [r4, r2]
    32ea:	0e1b      	lsrs	r3, r3, #24
    32ec:	4a11      	ldr	r2, [pc, #68]	; (3334 <sync+0xec>)
    32ee:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    32f0:	7860      	ldrb	r0, [r4, #1]
    32f2:	2301      	movs	r3, #1
    32f4:	6962      	ldr	r2, [r4, #20]
    32f6:	0029      	movs	r1, r5
    32f8:	4d0f      	ldr	r5, [pc, #60]	; (3338 <sync+0xf0>)
    32fa:	47a8      	blx	r5
			fs->fsi_flag = 0;
    32fc:	7166      	strb	r6, [r4, #5]
    32fe:	e7ad      	b.n	325c <sync+0x14>
    3300:	000027f1 	.word	0x000027f1
    3304:	000020ad 	.word	0x000020ad
    3308:	00002295 	.word	0x00002295
    330c:	0000022e 	.word	0x0000022e
    3310:	0000022f 	.word	0x0000022f
    3314:	00000215 	.word	0x00000215
    3318:	00000216 	.word	0x00000216
    331c:	00000217 	.word	0x00000217
    3320:	00000219 	.word	0x00000219
    3324:	0000021a 	.word	0x0000021a
    3328:	0000021b 	.word	0x0000021b
    332c:	0000021d 	.word	0x0000021d
    3330:	0000021e 	.word	0x0000021e
    3334:	0000021f 	.word	0x0000021f
    3338:	00002029 	.word	0x00002029

0000333c <follow_path>:
{
    333c:	b5f0      	push	{r4, r5, r6, r7, lr}
    333e:	46de      	mov	lr, fp
    3340:	4657      	mov	r7, sl
    3342:	464e      	mov	r6, r9
    3344:	4645      	mov	r5, r8
    3346:	b5e0      	push	{r5, r6, r7, lr}
    3348:	b083      	sub	sp, #12
    334a:	4682      	mov	sl, r0
    334c:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    334e:	780b      	ldrb	r3, [r1, #0]
    3350:	2b2f      	cmp	r3, #47	; 0x2f
    3352:	d00f      	beq.n	3374 <follow_path+0x38>
    3354:	2b5c      	cmp	r3, #92	; 0x5c
    3356:	d00d      	beq.n	3374 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    3358:	2300      	movs	r3, #0
    335a:	4652      	mov	r2, sl
    335c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    335e:	782b      	ldrb	r3, [r5, #0]
    3360:	4657      	mov	r7, sl
    3362:	2b1f      	cmp	r3, #31
    3364:	d809      	bhi.n	337a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    3366:	2100      	movs	r1, #0
    3368:	4650      	mov	r0, sl
    336a:	4bb2      	ldr	r3, [pc, #712]	; (3634 <follow_path+0x2f8>)
    336c:	4798      	blx	r3
		dj->dir = 0;
    336e:	2300      	movs	r3, #0
    3370:	617b      	str	r3, [r7, #20]
    3372:	e13a      	b.n	35ea <follow_path+0x2ae>
		path++;
    3374:	3501      	adds	r5, #1
    3376:	e7ef      	b.n	3358 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    3378:	3501      	adds	r5, #1
    337a:	7828      	ldrb	r0, [r5, #0]
    337c:	282f      	cmp	r0, #47	; 0x2f
    337e:	d0fb      	beq.n	3378 <follow_path+0x3c>
    3380:	285c      	cmp	r0, #92	; 0x5c
    3382:	d0f9      	beq.n	3378 <follow_path+0x3c>
	lfn = dj->lfn;
    3384:	69fb      	ldr	r3, [r7, #28]
    3386:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    3388:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    338a:	281f      	cmp	r0, #31
    338c:	d800      	bhi.n	3390 <follow_path+0x54>
    338e:	e13b      	b.n	3608 <follow_path+0x2cc>
    3390:	282f      	cmp	r0, #47	; 0x2f
    3392:	d100      	bne.n	3396 <follow_path+0x5a>
    3394:	e13b      	b.n	360e <follow_path+0x2d2>
    3396:	285c      	cmp	r0, #92	; 0x5c
    3398:	d100      	bne.n	339c <follow_path+0x60>
    339a:	e13b      	b.n	3614 <follow_path+0x2d8>
    339c:	1c6e      	adds	r6, r5, #1
    339e:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    33a0:	2380      	movs	r3, #128	; 0x80
    33a2:	005b      	lsls	r3, r3, #1
    33a4:	4698      	mov	r8, r3
    33a6:	46bb      	mov	fp, r7
    33a8:	002b      	movs	r3, r5
    33aa:	0025      	movs	r5, r4
    33ac:	0034      	movs	r4, r6
    33ae:	4656      	mov	r6, sl
    33b0:	4699      	mov	r9, r3
    33b2:	e011      	b.n	33d8 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    33b4:	2b00      	cmp	r3, #0
    33b6:	d135      	bne.n	3424 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    33b8:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    33ba:	1c6b      	adds	r3, r5, #1
    33bc:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    33be:	281f      	cmp	r0, #31
    33c0:	d91e      	bls.n	3400 <follow_path+0xc4>
    33c2:	282f      	cmp	r0, #47	; 0x2f
    33c4:	d100      	bne.n	33c8 <follow_path+0x8c>
    33c6:	e128      	b.n	361a <follow_path+0x2de>
    33c8:	285c      	cmp	r0, #92	; 0x5c
    33ca:	d100      	bne.n	33ce <follow_path+0x92>
    33cc:	e142      	b.n	3654 <follow_path+0x318>
    33ce:	3602      	adds	r6, #2
    33d0:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    33d2:	4543      	cmp	r3, r8
    33d4:	d026      	beq.n	3424 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    33d6:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    33d8:	2101      	movs	r1, #1
    33da:	4b97      	ldr	r3, [pc, #604]	; (3638 <follow_path+0x2fc>)
    33dc:	4798      	blx	r3
    33de:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    33e0:	d020      	beq.n	3424 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    33e2:	287f      	cmp	r0, #127	; 0x7f
    33e4:	d8e8      	bhi.n	33b8 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    33e6:	2822      	cmp	r0, #34	; 0x22
    33e8:	d100      	bne.n	33ec <follow_path+0xb0>
    33ea:	e0fd      	b.n	35e8 <follow_path+0x2ac>
    33ec:	232a      	movs	r3, #42	; 0x2a
    33ee:	4a93      	ldr	r2, [pc, #588]	; (363c <follow_path+0x300>)
    33f0:	b29f      	uxth	r7, r3
    33f2:	428f      	cmp	r7, r1
    33f4:	d0de      	beq.n	33b4 <follow_path+0x78>
    33f6:	3201      	adds	r2, #1
    33f8:	7813      	ldrb	r3, [r2, #0]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d1f8      	bne.n	33f0 <follow_path+0xb4>
    33fe:	e7db      	b.n	33b8 <follow_path+0x7c>
    3400:	002c      	movs	r4, r5
    3402:	465f      	mov	r7, fp
    3404:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    3406:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    3408:	2604      	movs	r6, #4
    340a:	e10b      	b.n	3624 <follow_path+0x2e8>
		di--;
    340c:	3c01      	subs	r4, #1
    340e:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    3410:	2c00      	cmp	r4, #0
    3412:	d100      	bne.n	3416 <follow_path+0xda>
    3414:	e0e8      	b.n	35e8 <follow_path+0x2ac>
		w = lfn[di-1];
    3416:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    3418:	2a20      	cmp	r2, #32
    341a:	d0f7      	beq.n	340c <follow_path+0xd0>
    341c:	2a2e      	cmp	r2, #46	; 0x2e
    341e:	d0f5      	beq.n	340c <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    3420:	2c00      	cmp	r4, #0
    3422:	d101      	bne.n	3428 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    3424:	2006      	movs	r0, #6
	return res;
    3426:	e0e0      	b.n	35ea <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    3428:	0063      	lsls	r3, r4, #1
    342a:	4698      	mov	r8, r3
    342c:	2300      	movs	r3, #0
    342e:	4652      	mov	r2, sl
    3430:	4641      	mov	r1, r8
    3432:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    3434:	220b      	movs	r2, #11
    3436:	2120      	movs	r1, #32
    3438:	69b8      	ldr	r0, [r7, #24]
    343a:	4b81      	ldr	r3, [pc, #516]	; (3640 <follow_path+0x304>)
    343c:	4798      	blx	r3
    343e:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    3440:	2300      	movs	r3, #0
    3442:	e001      	b.n	3448 <follow_path+0x10c>
    3444:	3301      	adds	r3, #1
    3446:	3202      	adds	r2, #2
    3448:	8811      	ldrh	r1, [r2, #0]
    344a:	2920      	cmp	r1, #32
    344c:	d0fa      	beq.n	3444 <follow_path+0x108>
    344e:	292e      	cmp	r1, #46	; 0x2e
    3450:	d0f8      	beq.n	3444 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    3452:	2b00      	cmp	r3, #0
    3454:	d001      	beq.n	345a <follow_path+0x11e>
    3456:	2203      	movs	r2, #3
    3458:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    345a:	4652      	mov	r2, sl
    345c:	4442      	add	r2, r8
    345e:	3a02      	subs	r2, #2
    3460:	8812      	ldrh	r2, [r2, #0]
    3462:	2a2e      	cmp	r2, #46	; 0x2e
    3464:	d009      	beq.n	347a <follow_path+0x13e>
    3466:	4642      	mov	r2, r8
    3468:	3a04      	subs	r2, #4
    346a:	4452      	add	r2, sl
    346c:	3c01      	subs	r4, #1
    346e:	2c00      	cmp	r4, #0
    3470:	d003      	beq.n	347a <follow_path+0x13e>
    3472:	3a02      	subs	r2, #2
    3474:	8851      	ldrh	r1, [r2, #2]
    3476:	292e      	cmp	r1, #46	; 0x2e
    3478:	d1f8      	bne.n	346c <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    347a:	2208      	movs	r2, #8
    347c:	9201      	str	r2, [sp, #4]
    347e:	2200      	movs	r2, #0
    3480:	4693      	mov	fp, r2
    3482:	4691      	mov	r9, r2
    3484:	46a0      	mov	r8, r4
    3486:	e006      	b.n	3496 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    3488:	4544      	cmp	r4, r8
    348a:	d100      	bne.n	348e <follow_path+0x152>
    348c:	e0e6      	b.n	365c <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    348e:	2303      	movs	r3, #3
    3490:	431e      	orrs	r6, r3
    3492:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    3494:	0023      	movs	r3, r4
    3496:	1c5c      	adds	r4, r3, #1
    3498:	005b      	lsls	r3, r3, #1
    349a:	4652      	mov	r2, sl
    349c:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    349e:	2800      	cmp	r0, #0
    34a0:	d02c      	beq.n	34fc <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    34a2:	2820      	cmp	r0, #32
    34a4:	d0f3      	beq.n	348e <follow_path+0x152>
    34a6:	282e      	cmp	r0, #46	; 0x2e
    34a8:	d0ee      	beq.n	3488 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    34aa:	9b01      	ldr	r3, [sp, #4]
    34ac:	459b      	cmp	fp, r3
    34ae:	d219      	bcs.n	34e4 <follow_path+0x1a8>
    34b0:	4544      	cmp	r4, r8
    34b2:	d100      	bne.n	34b6 <follow_path+0x17a>
    34b4:	e0d2      	b.n	365c <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    34b6:	287f      	cmp	r0, #127	; 0x7f
    34b8:	d85e      	bhi.n	3578 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    34ba:	282b      	cmp	r0, #43	; 0x2b
    34bc:	d06e      	beq.n	359c <follow_path+0x260>
    34be:	232c      	movs	r3, #44	; 0x2c
    34c0:	4a60      	ldr	r2, [pc, #384]	; (3644 <follow_path+0x308>)
    34c2:	b299      	uxth	r1, r3
    34c4:	4281      	cmp	r1, r0
    34c6:	d067      	beq.n	3598 <follow_path+0x25c>
    34c8:	3201      	adds	r2, #1
    34ca:	7813      	ldrb	r3, [r2, #0]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d1f8      	bne.n	34c2 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    34d0:	0003      	movs	r3, r0
    34d2:	3b41      	subs	r3, #65	; 0x41
    34d4:	b29b      	uxth	r3, r3
    34d6:	2b19      	cmp	r3, #25
    34d8:	d86c      	bhi.n	35b4 <follow_path+0x278>
					b |= 2;
    34da:	2302      	movs	r3, #2
    34dc:	464a      	mov	r2, r9
    34de:	431a      	orrs	r2, r3
    34e0:	4691      	mov	r9, r2
    34e2:	e05f      	b.n	35a4 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    34e4:	9b01      	ldr	r3, [sp, #4]
    34e6:	2b0b      	cmp	r3, #11
    34e8:	d03b      	beq.n	3562 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    34ea:	4544      	cmp	r4, r8
    34ec:	d100      	bne.n	34f0 <follow_path+0x1b4>
    34ee:	e0b9      	b.n	3664 <follow_path+0x328>
    34f0:	2303      	movs	r3, #3
    34f2:	431e      	orrs	r6, r3
    34f4:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    34f6:	4544      	cmp	r4, r8
    34f8:	d800      	bhi.n	34fc <follow_path+0x1c0>
    34fa:	e0b3      	b.n	3664 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    34fc:	69bb      	ldr	r3, [r7, #24]
    34fe:	781a      	ldrb	r2, [r3, #0]
    3500:	2ae5      	cmp	r2, #229	; 0xe5
    3502:	d036      	beq.n	3572 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    3504:	9b01      	ldr	r3, [sp, #4]
    3506:	2b08      	cmp	r3, #8
    3508:	d060      	beq.n	35cc <follow_path+0x290>
    350a:	230c      	movs	r3, #12
    350c:	464a      	mov	r2, r9
    350e:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    3510:	2b0c      	cmp	r3, #12
    3512:	d060      	beq.n	35d6 <follow_path+0x29a>
    3514:	43d2      	mvns	r2, r2
    3516:	0792      	lsls	r2, r2, #30
    3518:	d05d      	beq.n	35d6 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    351a:	07b2      	lsls	r2, r6, #30
    351c:	d406      	bmi.n	352c <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    351e:	2203      	movs	r2, #3
    3520:	4649      	mov	r1, r9
    3522:	400a      	ands	r2, r1
    3524:	2a01      	cmp	r2, #1
    3526:	d059      	beq.n	35dc <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    3528:	2b04      	cmp	r3, #4
    352a:	d05a      	beq.n	35e2 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    352c:	69bb      	ldr	r3, [r7, #24]
    352e:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    3530:	0038      	movs	r0, r7
    3532:	4b45      	ldr	r3, [pc, #276]	; (3648 <follow_path+0x30c>)
    3534:	4798      	blx	r3
			ns = *(dj->fn+NS);
    3536:	69bb      	ldr	r3, [r7, #24]
    3538:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    353a:	2800      	cmp	r0, #0
    353c:	d15c      	bne.n	35f8 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    353e:	075b      	lsls	r3, r3, #29
    3540:	d453      	bmi.n	35ea <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    3542:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    3544:	7ad3      	ldrb	r3, [r2, #11]
    3546:	06db      	lsls	r3, r3, #27
    3548:	d55c      	bpl.n	3604 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    354a:	7d51      	ldrb	r1, [r2, #21]
    354c:	0209      	lsls	r1, r1, #8
    354e:	7d13      	ldrb	r3, [r2, #20]
    3550:	430b      	orrs	r3, r1
    3552:	041b      	lsls	r3, r3, #16
    3554:	7ed1      	ldrb	r1, [r2, #27]
    3556:	0209      	lsls	r1, r1, #8
    3558:	7e92      	ldrb	r2, [r2, #26]
    355a:	430a      	orrs	r2, r1
    355c:	4313      	orrs	r3, r2
    355e:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    3560:	e70b      	b.n	337a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    3562:	2303      	movs	r3, #3
    3564:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    3566:	69bb      	ldr	r3, [r7, #24]
    3568:	781a      	ldrb	r2, [r3, #0]
    356a:	2ae5      	cmp	r2, #229	; 0xe5
    356c:	d1cd      	bne.n	350a <follow_path+0x1ce>
    356e:	220b      	movs	r2, #11
    3570:	9201      	str	r2, [sp, #4]
    3572:	2205      	movs	r2, #5
    3574:	701a      	strb	r2, [r3, #0]
    3576:	e7c5      	b.n	3504 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    3578:	2100      	movs	r1, #0
    357a:	4b2f      	ldr	r3, [pc, #188]	; (3638 <follow_path+0x2fc>)
    357c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    357e:	2800      	cmp	r0, #0
    3580:	d100      	bne.n	3584 <follow_path+0x248>
    3582:	e079      	b.n	3678 <follow_path+0x33c>
    3584:	4b31      	ldr	r3, [pc, #196]	; (364c <follow_path+0x310>)
    3586:	469c      	mov	ip, r3
    3588:	4460      	add	r0, ip
    358a:	3880      	subs	r0, #128	; 0x80
    358c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    358e:	2302      	movs	r3, #2
    3590:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    3592:	2800      	cmp	r0, #0
    3594:	d002      	beq.n	359c <follow_path+0x260>
    3596:	e790      	b.n	34ba <follow_path+0x17e>
    3598:	2b00      	cmp	r3, #0
    359a:	d099      	beq.n	34d0 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    359c:	2303      	movs	r3, #3
    359e:	431e      	orrs	r6, r3
    35a0:	b2f6      	uxtb	r6, r6
    35a2:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    35a4:	69bb      	ldr	r3, [r7, #24]
    35a6:	465a      	mov	r2, fp
    35a8:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    35aa:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    35ac:	2201      	movs	r2, #1
    35ae:	4694      	mov	ip, r2
    35b0:	44e3      	add	fp, ip
    35b2:	e770      	b.n	3496 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    35b4:	0003      	movs	r3, r0
    35b6:	3b61      	subs	r3, #97	; 0x61
    35b8:	b29b      	uxth	r3, r3
    35ba:	2b19      	cmp	r3, #25
    35bc:	d8f2      	bhi.n	35a4 <follow_path+0x268>
						b |= 1; w -= 0x20;
    35be:	2301      	movs	r3, #1
    35c0:	464a      	mov	r2, r9
    35c2:	431a      	orrs	r2, r3
    35c4:	4691      	mov	r9, r2
    35c6:	3820      	subs	r0, #32
    35c8:	b280      	uxth	r0, r0
    35ca:	e7eb      	b.n	35a4 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    35cc:	464b      	mov	r3, r9
    35ce:	009b      	lsls	r3, r3, #2
    35d0:	b2db      	uxtb	r3, r3
    35d2:	4699      	mov	r9, r3
    35d4:	e799      	b.n	350a <follow_path+0x1ce>
		cf |= NS_LFN;
    35d6:	2202      	movs	r2, #2
    35d8:	4316      	orrs	r6, r2
    35da:	e79e      	b.n	351a <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    35dc:	320f      	adds	r2, #15
    35de:	4316      	orrs	r6, r2
    35e0:	e7a2      	b.n	3528 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    35e2:	3304      	adds	r3, #4
    35e4:	431e      	orrs	r6, r3
    35e6:	e7a1      	b.n	352c <follow_path+0x1f0>
    35e8:	2006      	movs	r0, #6
}
    35ea:	b003      	add	sp, #12
    35ec:	bc3c      	pop	{r2, r3, r4, r5}
    35ee:	4690      	mov	r8, r2
    35f0:	4699      	mov	r9, r3
    35f2:	46a2      	mov	sl, r4
    35f4:	46ab      	mov	fp, r5
    35f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    35f8:	2804      	cmp	r0, #4
    35fa:	d1f6      	bne.n	35ea <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    35fc:	075b      	lsls	r3, r3, #29
    35fe:	d4f4      	bmi.n	35ea <follow_path+0x2ae>
    3600:	3001      	adds	r0, #1
    3602:	e7f2      	b.n	35ea <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    3604:	2005      	movs	r0, #5
    3606:	e7f0      	b.n	35ea <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    3608:	2301      	movs	r3, #1
	si = di = 0;
    360a:	2400      	movs	r4, #0
    360c:	e6fb      	b.n	3406 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    360e:	2301      	movs	r3, #1
	si = di = 0;
    3610:	2400      	movs	r4, #0
    3612:	e005      	b.n	3620 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    3614:	2301      	movs	r3, #1
	si = di = 0;
    3616:	2400      	movs	r4, #0
    3618:	e002      	b.n	3620 <follow_path+0x2e4>
    361a:	002c      	movs	r4, r5
    361c:	465f      	mov	r7, fp
    361e:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    3620:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    3622:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    3624:	2c00      	cmp	r4, #0
    3626:	d0df      	beq.n	35e8 <follow_path+0x2ac>
    3628:	4b09      	ldr	r3, [pc, #36]	; (3650 <follow_path+0x314>)
    362a:	18e3      	adds	r3, r4, r3
    362c:	005b      	lsls	r3, r3, #1
    362e:	4453      	add	r3, sl
    3630:	e6f1      	b.n	3416 <follow_path+0xda>
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	0000298d 	.word	0x0000298d
    3638:	00002169 	.word	0x00002169
    363c:	00008ce5 	.word	0x00008ce5
    3640:	00002295 	.word	0x00002295
    3644:	00008cf1 	.word	0x00008cf1
    3648:	00002dcd 	.word	0x00002dcd
    364c:	00008c64 	.word	0x00008c64
    3650:	7fffffff 	.word	0x7fffffff
    3654:	002c      	movs	r4, r5
    3656:	465f      	mov	r7, fp
    3658:	464d      	mov	r5, r9
    365a:	e7e1      	b.n	3620 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    365c:	9b01      	ldr	r3, [sp, #4]
    365e:	2b0b      	cmp	r3, #11
    3660:	d100      	bne.n	3664 <follow_path+0x328>
    3662:	e77e      	b.n	3562 <follow_path+0x226>
			b <<= 2; continue;
    3664:	464b      	mov	r3, r9
    3666:	009b      	lsls	r3, r3, #2
    3668:	b2db      	uxtb	r3, r3
    366a:	4699      	mov	r9, r3
    366c:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    366e:	220b      	movs	r2, #11
    3670:	9201      	str	r2, [sp, #4]
    3672:	3a03      	subs	r2, #3
    3674:	4693      	mov	fp, r2
    3676:	e70e      	b.n	3496 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    3678:	2302      	movs	r3, #2
    367a:	431e      	orrs	r6, r3
    367c:	e78e      	b.n	359c <follow_path+0x260>
    367e:	46c0      	nop			; (mov r8, r8)

00003680 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    3680:	b510      	push	{r4, lr}
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    3682:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    3684:	2807      	cmp	r0, #7
    3686:	d901      	bls.n	368c <f_mount+0xc>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    3688:	0018      	movs	r0, r3
    368a:	bd10      	pop	{r4, pc}
	rfs = FatFs[vol];			/* Get current fs object */
    368c:	0083      	lsls	r3, r0, #2
    368e:	4a0f      	ldr	r2, [pc, #60]	; (36cc <f_mount+0x4c>)
    3690:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    3692:	2b00      	cmp	r3, #0
    3694:	d009      	beq.n	36aa <f_mount+0x2a>
		if (Files[i].fs == fs) Files[i].fs = 0;
    3696:	4a0e      	ldr	r2, [pc, #56]	; (36d0 <f_mount+0x50>)
    3698:	6812      	ldr	r2, [r2, #0]
    369a:	4293      	cmp	r3, r2
    369c:	d00e      	beq.n	36bc <f_mount+0x3c>
    369e:	4a0c      	ldr	r2, [pc, #48]	; (36d0 <f_mount+0x50>)
    36a0:	68d2      	ldr	r2, [r2, #12]
    36a2:	4293      	cmp	r3, r2
    36a4:	d00e      	beq.n	36c4 <f_mount+0x44>
		rfs->fs_type = 0;		/* Clear old fs object */
    36a6:	2200      	movs	r2, #0
    36a8:	701a      	strb	r2, [r3, #0]
	if (fs) {
    36aa:	2900      	cmp	r1, #0
    36ac:	d001      	beq.n	36b2 <f_mount+0x32>
		fs->fs_type = 0;		/* Clear new fs object */
    36ae:	2300      	movs	r3, #0
    36b0:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    36b2:	0080      	lsls	r0, r0, #2
    36b4:	4b05      	ldr	r3, [pc, #20]	; (36cc <f_mount+0x4c>)
    36b6:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    36b8:	2300      	movs	r3, #0
    36ba:	e7e5      	b.n	3688 <f_mount+0x8>
		if (Files[i].fs == fs) Files[i].fs = 0;
    36bc:	2400      	movs	r4, #0
    36be:	4a04      	ldr	r2, [pc, #16]	; (36d0 <f_mount+0x50>)
    36c0:	6014      	str	r4, [r2, #0]
    36c2:	e7ec      	b.n	369e <f_mount+0x1e>
    36c4:	2400      	movs	r4, #0
    36c6:	4a02      	ldr	r2, [pc, #8]	; (36d0 <f_mount+0x50>)
    36c8:	60d4      	str	r4, [r2, #12]
    36ca:	e7ec      	b.n	36a6 <f_mount+0x26>
    36cc:	2000011c 	.word	0x2000011c
    36d0:	2000013c 	.word	0x2000013c

000036d4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    36d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d6:	46de      	mov	lr, fp
    36d8:	4657      	mov	r7, sl
    36da:	464e      	mov	r6, r9
    36dc:	4645      	mov	r5, r8
    36de:	b5e0      	push	{r5, r6, r7, lr}
    36e0:	4c9e      	ldr	r4, [pc, #632]	; (395c <f_open+0x288>)
    36e2:	44a5      	add	sp, r4
    36e4:	0005      	movs	r5, r0
    36e6:	9101      	str	r1, [sp, #4]
    36e8:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    36ea:	2300      	movs	r3, #0
    36ec:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    36ee:	261f      	movs	r6, #31
    36f0:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    36f2:	221e      	movs	r2, #30
    36f4:	403a      	ands	r2, r7
    36f6:	a985      	add	r1, sp, #532	; 0x214
    36f8:	a801      	add	r0, sp, #4
    36fa:	4b99      	ldr	r3, [pc, #612]	; (3960 <f_open+0x28c>)
    36fc:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    36fe:	ab82      	add	r3, sp, #520	; 0x208
    3700:	938b      	str	r3, [sp, #556]	; 0x22c
    3702:	ab02      	add	r3, sp, #8
    3704:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    3706:	2800      	cmp	r0, #0
    3708:	d035      	beq.n	3776 <f_open+0xa2>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    370a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    370c:	231c      	movs	r3, #28
    370e:	423b      	tst	r3, r7
    3710:	d151      	bne.n	37b6 <f_open+0xe2>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    3712:	2800      	cmp	r0, #0
    3714:	d175      	bne.n	3802 <f_open+0x12e>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    3716:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    3718:	3004      	adds	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    371a:	06da      	lsls	r2, r3, #27
    371c:	d471      	bmi.n	3802 <f_open+0x12e>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    371e:	07ba      	lsls	r2, r7, #30
    3720:	d502      	bpl.n	3728 <f_open+0x54>
					res = FR_DENIED;
    3722:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    3724:	07db      	lsls	r3, r3, #31
    3726:	d46c      	bmi.n	3802 <f_open+0x12e>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    3728:	073b      	lsls	r3, r7, #28
    372a:	d501      	bpl.n	3730 <f_open+0x5c>
			mode |= FA__WRITTEN;
    372c:	2320      	movs	r3, #32
    372e:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    3730:	ab85      	add	r3, sp, #532	; 0x214
    3732:	9985      	ldr	r1, [sp, #532]	; 0x214
    3734:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    3736:	61ea      	str	r2, [r5, #28]
		fp->dir_ptr = dir;
    3738:	622c      	str	r4, [r5, #32]
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
    373a:	2201      	movs	r2, #1
    373c:	0030      	movs	r0, r6
    373e:	4390      	bics	r0, r2
			Files[i].clu == dj->sclust &&
    3740:	9a87      	ldr	r2, [sp, #540]	; 0x21c
    3742:	4693      	mov	fp, r2
			Files[i].idx == dj->index) break;
    3744:	88db      	ldrh	r3, [r3, #6]
    3746:	469c      	mov	ip, r3
		if (Files[i].fs == dj->fs &&
    3748:	4b86      	ldr	r3, [pc, #536]	; (3964 <f_open+0x290>)
    374a:	681b      	ldr	r3, [r3, #0]
    374c:	4299      	cmp	r1, r3
    374e:	d100      	bne.n	3752 <f_open+0x7e>
    3750:	e0a9      	b.n	38a6 <f_open+0x1d2>
    3752:	4a84      	ldr	r2, [pc, #528]	; (3964 <f_open+0x290>)
    3754:	68d2      	ldr	r2, [r2, #12]
    3756:	4291      	cmp	r1, r2
    3758:	d100      	bne.n	375c <f_open+0x88>
    375a:	e0c6      	b.n	38ea <f_open+0x216>
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    375c:	2b00      	cmp	r3, #0
    375e:	d100      	bne.n	3762 <f_open+0x8e>
    3760:	e0cf      	b.n	3902 <f_open+0x22e>
    3762:	4b80      	ldr	r3, [pc, #512]	; (3964 <f_open+0x290>)
    3764:	68db      	ldr	r3, [r3, #12]
    3766:	2201      	movs	r2, #1
    3768:	2b00      	cmp	r3, #0
    376a:	d100      	bne.n	376e <f_open+0x9a>
    376c:	e0ca      	b.n	3904 <f_open+0x230>
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
    376e:	2300      	movs	r3, #0
    3770:	626b      	str	r3, [r5, #36]	; 0x24
		if (!fp->lockid) res = FR_INT_ERR;
    3772:	2002      	movs	r0, #2
    3774:	e045      	b.n	3802 <f_open+0x12e>
		res = follow_path(&dj, path);	/* Follow the file path */
    3776:	9901      	ldr	r1, [sp, #4]
    3778:	a885      	add	r0, sp, #532	; 0x214
    377a:	4b7b      	ldr	r3, [pc, #492]	; (3968 <f_open+0x294>)
    377c:	4798      	blx	r3
	dir = dj.dir;
    377e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    3780:	2800      	cmp	r0, #0
    3782:	d1c3      	bne.n	370c <f_open+0x38>
		if (!dir)	/* Current dir itself */
    3784:	2c00      	cmp	r4, #0
    3786:	d100      	bne.n	378a <f_open+0xb6>
    3788:	e0e0      	b.n	394c <f_open+0x278>
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
    378a:	2301      	movs	r3, #1
    378c:	0031      	movs	r1, r6
    378e:	4399      	bics	r1, r3
    3790:	1e4b      	subs	r3, r1, #1
    3792:	4199      	sbcs	r1, r3
    3794:	a885      	add	r0, sp, #532	; 0x214
    3796:	4b75      	ldr	r3, [pc, #468]	; (396c <f_open+0x298>)
    3798:	4798      	blx	r3
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    379a:	231c      	movs	r3, #28
    379c:	423b      	tst	r3, r7
    379e:	d0b8      	beq.n	3712 <f_open+0x3e>
		if (res != FR_OK) {					/* No file, create new */
    37a0:	2800      	cmp	r0, #0
    37a2:	d108      	bne.n	37b6 <f_open+0xe2>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    37a4:	7ae3      	ldrb	r3, [r4, #11]
    37a6:	2211      	movs	r2, #17
				res = FR_DENIED;
    37a8:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    37aa:	421a      	tst	r2, r3
    37ac:	d129      	bne.n	3802 <f_open+0x12e>
					res = FR_EXIST;
    37ae:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    37b0:	077b      	lsls	r3, r7, #29
    37b2:	d426      	bmi.n	3802 <f_open+0x12e>
    37b4:	e03c      	b.n	3830 <f_open+0x15c>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    37b6:	2804      	cmp	r0, #4
    37b8:	d02c      	beq.n	3814 <f_open+0x140>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    37ba:	2308      	movs	r3, #8
    37bc:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    37be:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    37c0:	2800      	cmp	r0, #0
    37c2:	d11e      	bne.n	3802 <f_open+0x12e>
		fp->flag = mode;					/* File access mode */
    37c4:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    37c6:	7d62      	ldrb	r2, [r4, #21]
    37c8:	0212      	lsls	r2, r2, #8
    37ca:	7d23      	ldrb	r3, [r4, #20]
    37cc:	4313      	orrs	r3, r2
    37ce:	041b      	lsls	r3, r3, #16
    37d0:	7ee1      	ldrb	r1, [r4, #27]
    37d2:	0209      	lsls	r1, r1, #8
    37d4:	7ea2      	ldrb	r2, [r4, #26]
    37d6:	430a      	orrs	r2, r1
    37d8:	4313      	orrs	r3, r2
    37da:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    37dc:	7fe3      	ldrb	r3, [r4, #31]
    37de:	061b      	lsls	r3, r3, #24
    37e0:	7fa2      	ldrb	r2, [r4, #30]
    37e2:	0412      	lsls	r2, r2, #16
    37e4:	4313      	orrs	r3, r2
    37e6:	7f22      	ldrb	r2, [r4, #28]
    37e8:	4313      	orrs	r3, r2
    37ea:	7f62      	ldrb	r2, [r4, #29]
    37ec:	0212      	lsls	r2, r2, #8
    37ee:	4313      	orrs	r3, r2
    37f0:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    37f2:	2300      	movs	r3, #0
    37f4:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    37f6:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    37f8:	9b85      	ldr	r3, [sp, #532]	; 0x214
    37fa:	602b      	str	r3, [r5, #0]
    37fc:	88db      	ldrh	r3, [r3, #6]
    37fe:	80ab      	strh	r3, [r5, #4]
    3800:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    3802:	238f      	movs	r3, #143	; 0x8f
    3804:	009b      	lsls	r3, r3, #2
    3806:	449d      	add	sp, r3
    3808:	bc3c      	pop	{r2, r3, r4, r5}
    380a:	4690      	mov	r8, r2
    380c:	4699      	mov	r9, r3
    380e:	46a2      	mov	sl, r4
    3810:	46ab      	mov	fp, r5
    3812:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    3814:	4b53      	ldr	r3, [pc, #332]	; (3964 <f_open+0x290>)
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	2b00      	cmp	r3, #0
    381a:	d040      	beq.n	389e <f_open+0x1ca>
    381c:	4b51      	ldr	r3, [pc, #324]	; (3964 <f_open+0x290>)
    381e:	68db      	ldr	r3, [r3, #12]
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
    3820:	300e      	adds	r0, #14
	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    3822:	2b00      	cmp	r3, #0
    3824:	d03b      	beq.n	389e <f_open+0x1ca>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    3826:	2308      	movs	r3, #8
    3828:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    382a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    382c:	2800      	cmp	r0, #0
    382e:	d1e8      	bne.n	3802 <f_open+0x12e>
    3830:	0733      	lsls	r3, r6, #28
    3832:	d400      	bmi.n	3836 <f_open+0x162>
    3834:	e77c      	b.n	3730 <f_open+0x5c>
			dw = get_fattime();					/* Created time */
    3836:	4b4e      	ldr	r3, [pc, #312]	; (3970 <f_open+0x29c>)
    3838:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    383a:	73a0      	strb	r0, [r4, #14]
    383c:	0a03      	lsrs	r3, r0, #8
    383e:	73e3      	strb	r3, [r4, #15]
    3840:	0c03      	lsrs	r3, r0, #16
    3842:	7423      	strb	r3, [r4, #16]
    3844:	0e00      	lsrs	r0, r0, #24
    3846:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    3848:	2300      	movs	r3, #0
    384a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    384c:	7723      	strb	r3, [r4, #28]
    384e:	7763      	strb	r3, [r4, #29]
    3850:	77a3      	strb	r3, [r4, #30]
    3852:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    3854:	7d62      	ldrb	r2, [r4, #21]
    3856:	0212      	lsls	r2, r2, #8
    3858:	7d27      	ldrb	r7, [r4, #20]
    385a:	4317      	orrs	r7, r2
    385c:	043f      	lsls	r7, r7, #16
    385e:	7ee1      	ldrb	r1, [r4, #27]
    3860:	0209      	lsls	r1, r1, #8
    3862:	7ea2      	ldrb	r2, [r4, #26]
    3864:	430a      	orrs	r2, r1
    3866:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    3868:	76a3      	strb	r3, [r4, #26]
    386a:	76e3      	strb	r3, [r4, #27]
    386c:	7523      	strb	r3, [r4, #20]
    386e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    3870:	9885      	ldr	r0, [sp, #532]	; 0x214
    3872:	3301      	adds	r3, #1
    3874:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    3876:	2f00      	cmp	r7, #0
    3878:	d100      	bne.n	387c <f_open+0x1a8>
    387a:	e757      	b.n	372c <f_open+0x58>
				dw = dj.fs->winsect;
    387c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    387e:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    3880:	0039      	movs	r1, r7
    3882:	4b3c      	ldr	r3, [pc, #240]	; (3974 <f_open+0x2a0>)
    3884:	4798      	blx	r3
				if (res == FR_OK) {
    3886:	2800      	cmp	r0, #0
    3888:	d1bb      	bne.n	3802 <f_open+0x12e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    388a:	9885      	ldr	r0, [sp, #532]	; 0x214
    388c:	3f01      	subs	r7, #1
    388e:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    3890:	4641      	mov	r1, r8
    3892:	4b39      	ldr	r3, [pc, #228]	; (3978 <f_open+0x2a4>)
    3894:	4798      	blx	r3
	if (res == FR_OK) {
    3896:	2800      	cmp	r0, #0
    3898:	d100      	bne.n	389c <f_open+0x1c8>
    389a:	e747      	b.n	372c <f_open+0x58>
    389c:	e7b1      	b.n	3802 <f_open+0x12e>
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
    389e:	a885      	add	r0, sp, #532	; 0x214
    38a0:	4b36      	ldr	r3, [pc, #216]	; (397c <f_open+0x2a8>)
    38a2:	4798      	blx	r3
    38a4:	e7bf      	b.n	3826 <f_open+0x152>
			Files[i].clu == dj->sclust &&
    38a6:	4a2f      	ldr	r2, [pc, #188]	; (3964 <f_open+0x290>)
		if (Files[i].fs == dj->fs &&
    38a8:	6852      	ldr	r2, [r2, #4]
    38aa:	455a      	cmp	r2, fp
    38ac:	d000      	beq.n	38b0 <f_open+0x1dc>
    38ae:	e750      	b.n	3752 <f_open+0x7e>
			Files[i].idx == dj->index) break;
    38b0:	4a2c      	ldr	r2, [pc, #176]	; (3964 <f_open+0x290>)
			Files[i].clu == dj->sclust &&
    38b2:	8912      	ldrh	r2, [r2, #8]
    38b4:	4562      	cmp	r2, ip
    38b6:	d000      	beq.n	38ba <f_open+0x1e6>
    38b8:	e74b      	b.n	3752 <f_open+0x7e>
	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
    38ba:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
    38bc:	2800      	cmp	r0, #0
    38be:	d139      	bne.n	3934 <f_open+0x260>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
    38c0:	0053      	lsls	r3, r2, #1
    38c2:	189b      	adds	r3, r3, r2
    38c4:	009b      	lsls	r3, r3, #2
    38c6:	4927      	ldr	r1, [pc, #156]	; (3964 <f_open+0x290>)
    38c8:	18cb      	adds	r3, r1, r3
    38ca:	8958      	ldrh	r0, [r3, #10]
    38cc:	3001      	adds	r0, #1
    38ce:	b280      	uxth	r0, r0
    38d0:	0053      	lsls	r3, r2, #1
    38d2:	189b      	adds	r3, r3, r2
    38d4:	009b      	lsls	r3, r3, #2
    38d6:	4923      	ldr	r1, [pc, #140]	; (3964 <f_open+0x290>)
    38d8:	18cb      	adds	r3, r1, r3
    38da:	8158      	strh	r0, [r3, #10]
	return i + 1;
    38dc:	3201      	adds	r2, #1
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
    38de:	626a      	str	r2, [r5, #36]	; 0x24
		if (!fp->lockid) res = FR_INT_ERR;
    38e0:	2002      	movs	r0, #2
    38e2:	2a00      	cmp	r2, #0
    38e4:	d100      	bne.n	38e8 <f_open+0x214>
    38e6:	e78c      	b.n	3802 <f_open+0x12e>
    38e8:	e76c      	b.n	37c4 <f_open+0xf0>
			Files[i].clu == dj->sclust &&
    38ea:	4a1e      	ldr	r2, [pc, #120]	; (3964 <f_open+0x290>)
		if (Files[i].fs == dj->fs &&
    38ec:	6912      	ldr	r2, [r2, #16]
    38ee:	455a      	cmp	r2, fp
    38f0:	d000      	beq.n	38f4 <f_open+0x220>
    38f2:	e733      	b.n	375c <f_open+0x88>
			Files[i].idx == dj->index) break;
    38f4:	4a1b      	ldr	r2, [pc, #108]	; (3964 <f_open+0x290>)
			Files[i].clu == dj->sclust &&
    38f6:	8a92      	ldrh	r2, [r2, #20]
    38f8:	4562      	cmp	r2, ip
    38fa:	d000      	beq.n	38fe <f_open+0x22a>
    38fc:	e72e      	b.n	375c <f_open+0x88>
	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
    38fe:	2201      	movs	r2, #1
    3900:	e7dc      	b.n	38bc <f_open+0x1e8>
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    3902:	2200      	movs	r2, #0
		Files[i].fs = dj->fs;
    3904:	4b17      	ldr	r3, [pc, #92]	; (3964 <f_open+0x290>)
    3906:	469a      	mov	sl, r3
    3908:	0053      	lsls	r3, r2, #1
    390a:	4698      	mov	r8, r3
    390c:	4691      	mov	r9, r2
    390e:	44c1      	add	r9, r8
    3910:	464b      	mov	r3, r9
    3912:	009b      	lsls	r3, r3, #2
    3914:	4699      	mov	r9, r3
    3916:	4657      	mov	r7, sl
    3918:	51d9      	str	r1, [r3, r7]
		Files[i].clu = dj->sclust;
    391a:	464b      	mov	r3, r9
    391c:	4453      	add	r3, sl
    391e:	4659      	mov	r1, fp
    3920:	6059      	str	r1, [r3, #4]
		Files[i].idx = dj->index;
    3922:	4661      	mov	r1, ip
    3924:	8119      	strh	r1, [r3, #8]
		Files[i].ctr = 0;
    3926:	2100      	movs	r1, #0
    3928:	8159      	strh	r1, [r3, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
    392a:	2800      	cmp	r0, #0
    392c:	d0c8      	beq.n	38c0 <f_open+0x1ec>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
    392e:	2080      	movs	r0, #128	; 0x80
    3930:	0040      	lsls	r0, r0, #1
    3932:	e7cd      	b.n	38d0 <f_open+0x1fc>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
    3934:	0053      	lsls	r3, r2, #1
    3936:	189b      	adds	r3, r3, r2
    3938:	009b      	lsls	r3, r3, #2
    393a:	490a      	ldr	r1, [pc, #40]	; (3964 <f_open+0x290>)
    393c:	18cb      	adds	r3, r1, r3
    393e:	895b      	ldrh	r3, [r3, #10]
    3940:	2b00      	cmp	r3, #0
    3942:	d000      	beq.n	3946 <f_open+0x272>
    3944:	e713      	b.n	376e <f_open+0x9a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
    3946:	2080      	movs	r0, #128	; 0x80
    3948:	0040      	lsls	r0, r0, #1
    394a:	e7c1      	b.n	38d0 <f_open+0x1fc>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    394c:	231c      	movs	r3, #28
    394e:	423b      	tst	r3, r7
    3950:	d101      	bne.n	3956 <f_open+0x282>
			res = FR_INVALID_NAME;
    3952:	2006      	movs	r0, #6
    3954:	e734      	b.n	37c0 <f_open+0xec>
    3956:	2006      	movs	r0, #6
    3958:	e72f      	b.n	37ba <f_open+0xe6>
    395a:	46c0      	nop			; (mov r8, r8)
    395c:	fffffdc4 	.word	0xfffffdc4
    3960:	0000241d 	.word	0x0000241d
    3964:	2000013c 	.word	0x2000013c
    3968:	0000333d 	.word	0x0000333d
    396c:	000022a9 	.word	0x000022a9
    3970:	00002119 	.word	0x00002119
    3974:	00002c31 	.word	0x00002c31
    3978:	000027f1 	.word	0x000027f1
    397c:	00002f65 	.word	0x00002f65

00003980 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    3980:	b5f0      	push	{r4, r5, r6, r7, lr}
    3982:	46de      	mov	lr, fp
    3984:	4657      	mov	r7, sl
    3986:	464e      	mov	r6, r9
    3988:	4645      	mov	r5, r8
    398a:	b5e0      	push	{r5, r6, r7, lr}
    398c:	b083      	sub	sp, #12
    398e:	0004      	movs	r4, r0
    3990:	000f      	movs	r7, r1
    3992:	0015      	movs	r5, r2
    3994:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    3996:	2300      	movs	r3, #0
    3998:	464a      	mov	r2, r9
    399a:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    399c:	8881      	ldrh	r1, [r0, #4]
    399e:	6800      	ldr	r0, [r0, #0]
    39a0:	4b5e      	ldr	r3, [pc, #376]	; (3b1c <f_read+0x19c>)
    39a2:	4798      	blx	r3
    39a4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    39a6:	2800      	cmp	r0, #0
    39a8:	d000      	beq.n	39ac <f_read+0x2c>
    39aa:	e0af      	b.n	3b0c <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    39ac:	79a3      	ldrb	r3, [r4, #6]
    39ae:	b25a      	sxtb	r2, r3
    39b0:	2a00      	cmp	r2, #0
    39b2:	da00      	bge.n	39b6 <f_read+0x36>
    39b4:	e0a8      	b.n	3b08 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    39b6:	07db      	lsls	r3, r3, #31
    39b8:	d402      	bmi.n	39c0 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    39ba:	2307      	movs	r3, #7
    39bc:	9300      	str	r3, [sp, #0]
    39be:	e0a5      	b.n	3b0c <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    39c0:	68e3      	ldr	r3, [r4, #12]
    39c2:	68a2      	ldr	r2, [r4, #8]
    39c4:	1a9e      	subs	r6, r3, r2
    39c6:	42ae      	cmp	r6, r5
    39c8:	d900      	bls.n	39cc <f_read+0x4c>
    39ca:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    39cc:	2e00      	cmp	r6, #0
    39ce:	d153      	bne.n	3a78 <f_read+0xf8>
    39d0:	e09c      	b.n	3b0c <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    39d2:	6961      	ldr	r1, [r4, #20]
    39d4:	4b52      	ldr	r3, [pc, #328]	; (3b20 <f_read+0x1a0>)
    39d6:	4798      	blx	r3
    39d8:	e05c      	b.n	3a94 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    39da:	79a2      	ldrb	r2, [r4, #6]
    39dc:	2380      	movs	r3, #128	; 0x80
    39de:	425b      	negs	r3, r3
    39e0:	4313      	orrs	r3, r2
    39e2:	71a3      	strb	r3, [r4, #6]
    39e4:	2302      	movs	r3, #2
    39e6:	9300      	str	r3, [sp, #0]
    39e8:	e090      	b.n	3b0c <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    39ea:	79a2      	ldrb	r2, [r4, #6]
    39ec:	2380      	movs	r3, #128	; 0x80
    39ee:	425b      	negs	r3, r3
    39f0:	4313      	orrs	r3, r2
    39f2:	71a3      	strb	r3, [r4, #6]
    39f4:	2301      	movs	r3, #1
    39f6:	9300      	str	r3, [sp, #0]
    39f8:	e088      	b.n	3b0c <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    39fa:	79a2      	ldrb	r2, [r4, #6]
    39fc:	2380      	movs	r3, #128	; 0x80
    39fe:	425b      	negs	r3, r3
    3a00:	4313      	orrs	r3, r2
    3a02:	71a3      	strb	r3, [r4, #6]
    3a04:	2302      	movs	r3, #2
    3a06:	9300      	str	r3, [sp, #0]
    3a08:	e080      	b.n	3b0c <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    3a0a:	79a2      	ldrb	r2, [r4, #6]
    3a0c:	2380      	movs	r3, #128	; 0x80
    3a0e:	425b      	negs	r3, r3
    3a10:	4313      	orrs	r3, r2
    3a12:	71a3      	strb	r3, [r4, #6]
    3a14:	2301      	movs	r3, #1
    3a16:	9300      	str	r3, [sp, #0]
    3a18:	e078      	b.n	3b0c <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    3a1a:	3130      	adds	r1, #48	; 0x30
    3a1c:	0240      	lsls	r0, r0, #9
    3a1e:	1838      	adds	r0, r7, r0
    3a20:	2280      	movs	r2, #128	; 0x80
    3a22:	0092      	lsls	r2, r2, #2
    3a24:	4b3f      	ldr	r3, [pc, #252]	; (3b24 <f_read+0x1a4>)
    3a26:	4798      	blx	r3
    3a28:	e063      	b.n	3af2 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    3a2a:	4643      	mov	r3, r8
    3a2c:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3a2e:	68a3      	ldr	r3, [r4, #8]
    3a30:	05dd      	lsls	r5, r3, #23
    3a32:	0ded      	lsrs	r5, r5, #23
    3a34:	2380      	movs	r3, #128	; 0x80
    3a36:	009b      	lsls	r3, r3, #2
    3a38:	1b5d      	subs	r5, r3, r5
    3a3a:	42b5      	cmp	r5, r6
    3a3c:	d900      	bls.n	3a40 <f_read+0xc0>
    3a3e:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    3a40:	69a1      	ldr	r1, [r4, #24]
    3a42:	6820      	ldr	r0, [r4, #0]
    3a44:	4b38      	ldr	r3, [pc, #224]	; (3b28 <f_read+0x1a8>)
    3a46:	4798      	blx	r3
    3a48:	2800      	cmp	r0, #0
    3a4a:	d155      	bne.n	3af8 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    3a4c:	68a3      	ldr	r3, [r4, #8]
    3a4e:	05d9      	lsls	r1, r3, #23
    3a50:	0dc9      	lsrs	r1, r1, #23
    3a52:	3130      	adds	r1, #48	; 0x30
    3a54:	6823      	ldr	r3, [r4, #0]
    3a56:	469c      	mov	ip, r3
    3a58:	4461      	add	r1, ip
    3a5a:	002a      	movs	r2, r5
    3a5c:	0038      	movs	r0, r7
    3a5e:	4b31      	ldr	r3, [pc, #196]	; (3b24 <f_read+0x1a4>)
    3a60:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    3a62:	197f      	adds	r7, r7, r5
    3a64:	68a3      	ldr	r3, [r4, #8]
    3a66:	195b      	adds	r3, r3, r5
    3a68:	60a3      	str	r3, [r4, #8]
    3a6a:	464b      	mov	r3, r9
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	195b      	adds	r3, r3, r5
    3a70:	464a      	mov	r2, r9
    3a72:	6013      	str	r3, [r2, #0]
    3a74:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    3a76:	d049      	beq.n	3b0c <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    3a78:	68a3      	ldr	r3, [r4, #8]
    3a7a:	05da      	lsls	r2, r3, #23
    3a7c:	d1d7      	bne.n	3a2e <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3a7e:	6820      	ldr	r0, [r4, #0]
    3a80:	7882      	ldrb	r2, [r0, #2]
    3a82:	3a01      	subs	r2, #1
    3a84:	0a5d      	lsrs	r5, r3, #9
    3a86:	4015      	ands	r5, r2
    3a88:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    3a8a:	2d00      	cmp	r5, #0
    3a8c:	d107      	bne.n	3a9e <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d19f      	bne.n	39d2 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    3a92:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    3a94:	2801      	cmp	r0, #1
    3a96:	d9a0      	bls.n	39da <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3a98:	1c43      	adds	r3, r0, #1
    3a9a:	d0a6      	beq.n	39ea <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    3a9c:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3a9e:	6823      	ldr	r3, [r4, #0]
    3aa0:	469a      	mov	sl, r3
    3aa2:	6961      	ldr	r1, [r4, #20]
    3aa4:	0018      	movs	r0, r3
    3aa6:	4b21      	ldr	r3, [pc, #132]	; (3b2c <f_read+0x1ac>)
    3aa8:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3aaa:	2800      	cmp	r0, #0
    3aac:	d0a5      	beq.n	39fa <f_read+0x7a>
			sect += csect;
    3aae:	4680      	mov	r8, r0
    3ab0:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    3ab2:	0a73      	lsrs	r3, r6, #9
    3ab4:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    3ab6:	d0b8      	beq.n	3a2a <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3ab8:	4653      	mov	r3, sl
    3aba:	789b      	ldrb	r3, [r3, #2]
    3abc:	465a      	mov	r2, fp
    3abe:	18aa      	adds	r2, r5, r2
    3ac0:	429a      	cmp	r2, r3
    3ac2:	d901      	bls.n	3ac8 <f_read+0x148>
					cc = fp->fs->csize - csect;
    3ac4:	1b5b      	subs	r3, r3, r5
    3ac6:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    3ac8:	465b      	mov	r3, fp
    3aca:	466a      	mov	r2, sp
    3acc:	71d3      	strb	r3, [r2, #7]
    3ace:	79d3      	ldrb	r3, [r2, #7]
    3ad0:	4652      	mov	r2, sl
    3ad2:	7850      	ldrb	r0, [r2, #1]
    3ad4:	4642      	mov	r2, r8
    3ad6:	0039      	movs	r1, r7
    3ad8:	4d15      	ldr	r5, [pc, #84]	; (3b30 <f_read+0x1b0>)
    3ada:	47a8      	blx	r5
    3adc:	2800      	cmp	r0, #0
    3ade:	d194      	bne.n	3a0a <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    3ae0:	6821      	ldr	r1, [r4, #0]
    3ae2:	790b      	ldrb	r3, [r1, #4]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d004      	beq.n	3af2 <f_read+0x172>
    3ae8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    3aea:	4642      	mov	r2, r8
    3aec:	1a98      	subs	r0, r3, r2
    3aee:	4583      	cmp	fp, r0
    3af0:	d893      	bhi.n	3a1a <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    3af2:	465b      	mov	r3, fp
    3af4:	025d      	lsls	r5, r3, #9
				continue;
    3af6:	e7b4      	b.n	3a62 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    3af8:	79a2      	ldrb	r2, [r4, #6]
    3afa:	2380      	movs	r3, #128	; 0x80
    3afc:	425b      	negs	r3, r3
    3afe:	4313      	orrs	r3, r2
    3b00:	71a3      	strb	r3, [r4, #6]
    3b02:	2301      	movs	r3, #1
    3b04:	9300      	str	r3, [sp, #0]
    3b06:	e001      	b.n	3b0c <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3b08:	2302      	movs	r3, #2
    3b0a:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    3b0c:	9800      	ldr	r0, [sp, #0]
    3b0e:	b003      	add	sp, #12
    3b10:	bc3c      	pop	{r2, r3, r4, r5}
    3b12:	4690      	mov	r8, r2
    3b14:	4699      	mov	r9, r3
    3b16:	46a2      	mov	sl, r4
    3b18:	46ab      	mov	fp, r5
    3b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b1c:	00002349 	.word	0x00002349
    3b20:	00002891 	.word	0x00002891
    3b24:	00002281 	.word	0x00002281
    3b28:	000027f1 	.word	0x000027f1
    3b2c:	00002315 	.word	0x00002315
    3b30:	00001fa5 	.word	0x00001fa5

00003b34 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	46de      	mov	lr, fp
    3b38:	4657      	mov	r7, sl
    3b3a:	464e      	mov	r6, r9
    3b3c:	4645      	mov	r5, r8
    3b3e:	b5e0      	push	{r5, r6, r7, lr}
    3b40:	b083      	sub	sp, #12
    3b42:	0004      	movs	r4, r0
    3b44:	000d      	movs	r5, r1
    3b46:	0016      	movs	r6, r2
    3b48:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    3b4a:	2300      	movs	r3, #0
    3b4c:	464a      	mov	r2, r9
    3b4e:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    3b50:	8881      	ldrh	r1, [r0, #4]
    3b52:	6800      	ldr	r0, [r0, #0]
    3b54:	4b7f      	ldr	r3, [pc, #508]	; (3d54 <f_write+0x220>)
    3b56:	4798      	blx	r3
    3b58:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3b5a:	2800      	cmp	r0, #0
    3b5c:	d000      	beq.n	3b60 <f_write+0x2c>
    3b5e:	e0f1      	b.n	3d44 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    3b60:	79a3      	ldrb	r3, [r4, #6]
    3b62:	b25a      	sxtb	r2, r3
    3b64:	2a00      	cmp	r2, #0
    3b66:	da00      	bge.n	3b6a <f_write+0x36>
    3b68:	e0ea      	b.n	3d40 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    3b6a:	079b      	lsls	r3, r3, #30
    3b6c:	d402      	bmi.n	3b74 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    3b6e:	2307      	movs	r3, #7
    3b70:	9300      	str	r3, [sp, #0]
    3b72:	e0e7      	b.n	3d44 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    3b74:	68e3      	ldr	r3, [r4, #12]
    3b76:	199a      	adds	r2, r3, r6
    3b78:	4293      	cmp	r3, r2
    3b7a:	d810      	bhi.n	3b9e <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    3b7c:	2e00      	cmp	r6, #0
    3b7e:	d00e      	beq.n	3b9e <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3b80:	002f      	movs	r7, r5
    3b82:	e07b      	b.n	3c7c <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3b84:	2100      	movs	r1, #0
    3b86:	4b74      	ldr	r3, [pc, #464]	; (3d58 <f_write+0x224>)
    3b88:	4798      	blx	r3
    3b8a:	0003      	movs	r3, r0
    3b8c:	6120      	str	r0, [r4, #16]
    3b8e:	e003      	b.n	3b98 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3b90:	6961      	ldr	r1, [r4, #20]
    3b92:	4b71      	ldr	r3, [pc, #452]	; (3d58 <f_write+0x224>)
    3b94:	4798      	blx	r3
    3b96:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d000      	beq.n	3b9e <f_write+0x6a>
    3b9c:	e080      	b.n	3ca0 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3b9e:	68a3      	ldr	r3, [r4, #8]
    3ba0:	68e2      	ldr	r2, [r4, #12]
    3ba2:	4293      	cmp	r3, r2
    3ba4:	d900      	bls.n	3ba8 <f_write+0x74>
    3ba6:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3ba8:	79a3      	ldrb	r3, [r4, #6]
    3baa:	2220      	movs	r2, #32
    3bac:	4313      	orrs	r3, r2
    3bae:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    3bb0:	e0c8      	b.n	3d44 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3bb2:	79a2      	ldrb	r2, [r4, #6]
    3bb4:	3b81      	subs	r3, #129	; 0x81
    3bb6:	4313      	orrs	r3, r2
    3bb8:	71a3      	strb	r3, [r4, #6]
    3bba:	2302      	movs	r3, #2
    3bbc:	9300      	str	r3, [sp, #0]
    3bbe:	e0c1      	b.n	3d44 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3bc0:	79a2      	ldrb	r2, [r4, #6]
    3bc2:	3b7f      	subs	r3, #127	; 0x7f
    3bc4:	4313      	orrs	r3, r2
    3bc6:	71a3      	strb	r3, [r4, #6]
    3bc8:	2301      	movs	r3, #1
    3bca:	9300      	str	r3, [sp, #0]
    3bcc:	e0ba      	b.n	3d44 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    3bce:	2100      	movs	r1, #0
    3bd0:	4b62      	ldr	r3, [pc, #392]	; (3d5c <f_write+0x228>)
    3bd2:	4798      	blx	r3
    3bd4:	2800      	cmp	r0, #0
    3bd6:	d06d      	beq.n	3cb4 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    3bd8:	79a2      	ldrb	r2, [r4, #6]
    3bda:	2380      	movs	r3, #128	; 0x80
    3bdc:	425b      	negs	r3, r3
    3bde:	4313      	orrs	r3, r2
    3be0:	71a3      	strb	r3, [r4, #6]
    3be2:	2301      	movs	r3, #1
    3be4:	9300      	str	r3, [sp, #0]
    3be6:	e0ad      	b.n	3d44 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3be8:	79a2      	ldrb	r2, [r4, #6]
    3bea:	2380      	movs	r3, #128	; 0x80
    3bec:	425b      	negs	r3, r3
    3bee:	4313      	orrs	r3, r2
    3bf0:	71a3      	strb	r3, [r4, #6]
    3bf2:	2302      	movs	r3, #2
    3bf4:	9300      	str	r3, [sp, #0]
    3bf6:	e0a5      	b.n	3d44 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    3bf8:	79a2      	ldrb	r2, [r4, #6]
    3bfa:	2380      	movs	r3, #128	; 0x80
    3bfc:	425b      	negs	r3, r3
    3bfe:	4313      	orrs	r3, r2
    3c00:	71a3      	strb	r3, [r4, #6]
    3c02:	2301      	movs	r3, #1
    3c04:	9300      	str	r3, [sp, #0]
    3c06:	e09d      	b.n	3d44 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    3c08:	0240      	lsls	r0, r0, #9
    3c0a:	1839      	adds	r1, r7, r0
    3c0c:	3330      	adds	r3, #48	; 0x30
    3c0e:	0018      	movs	r0, r3
    3c10:	2280      	movs	r2, #128	; 0x80
    3c12:	0092      	lsls	r2, r2, #2
    3c14:	4b52      	ldr	r3, [pc, #328]	; (3d60 <f_write+0x22c>)
    3c16:	4798      	blx	r3
					fp->fs->wflag = 0;
    3c18:	2300      	movs	r3, #0
    3c1a:	6822      	ldr	r2, [r4, #0]
    3c1c:	7113      	strb	r3, [r2, #4]
    3c1e:	e072      	b.n	3d06 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    3c20:	68a3      	ldr	r3, [r4, #8]
    3c22:	68e2      	ldr	r2, [r4, #12]
    3c24:	4293      	cmp	r3, r2
    3c26:	d271      	bcs.n	3d0c <f_write+0x1d8>
			fp->dsect = sect;
    3c28:	4643      	mov	r3, r8
    3c2a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3c2c:	68a3      	ldr	r3, [r4, #8]
    3c2e:	05dd      	lsls	r5, r3, #23
    3c30:	0ded      	lsrs	r5, r5, #23
    3c32:	2380      	movs	r3, #128	; 0x80
    3c34:	009b      	lsls	r3, r3, #2
    3c36:	1b5d      	subs	r5, r3, r5
    3c38:	42b5      	cmp	r5, r6
    3c3a:	d900      	bls.n	3c3e <f_write+0x10a>
    3c3c:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    3c3e:	69a1      	ldr	r1, [r4, #24]
    3c40:	6820      	ldr	r0, [r4, #0]
    3c42:	4b46      	ldr	r3, [pc, #280]	; (3d5c <f_write+0x228>)
    3c44:	4798      	blx	r3
    3c46:	2800      	cmp	r0, #0
    3c48:	d172      	bne.n	3d30 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3c4a:	68a3      	ldr	r3, [r4, #8]
    3c4c:	05d8      	lsls	r0, r3, #23
    3c4e:	0dc0      	lsrs	r0, r0, #23
    3c50:	3030      	adds	r0, #48	; 0x30
    3c52:	6823      	ldr	r3, [r4, #0]
    3c54:	469c      	mov	ip, r3
    3c56:	4460      	add	r0, ip
    3c58:	002a      	movs	r2, r5
    3c5a:	0039      	movs	r1, r7
    3c5c:	4b40      	ldr	r3, [pc, #256]	; (3d60 <f_write+0x22c>)
    3c5e:	4798      	blx	r3
		fp->fs->wflag = 1;
    3c60:	2301      	movs	r3, #1
    3c62:	6822      	ldr	r2, [r4, #0]
    3c64:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3c66:	197f      	adds	r7, r7, r5
    3c68:	68a3      	ldr	r3, [r4, #8]
    3c6a:	195b      	adds	r3, r3, r5
    3c6c:	60a3      	str	r3, [r4, #8]
    3c6e:	464b      	mov	r3, r9
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	195b      	adds	r3, r3, r5
    3c74:	464a      	mov	r2, r9
    3c76:	6013      	str	r3, [r2, #0]
    3c78:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    3c7a:	d090      	beq.n	3b9e <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3c7c:	68a3      	ldr	r3, [r4, #8]
    3c7e:	05da      	lsls	r2, r3, #23
    3c80:	d1d4      	bne.n	3c2c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3c82:	6820      	ldr	r0, [r4, #0]
    3c84:	7882      	ldrb	r2, [r0, #2]
    3c86:	3a01      	subs	r2, #1
    3c88:	0a5d      	lsrs	r5, r3, #9
    3c8a:	4015      	ands	r5, r2
    3c8c:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    3c8e:	2d00      	cmp	r5, #0
    3c90:	d10b      	bne.n	3caa <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3c92:	2b00      	cmp	r3, #0
    3c94:	d000      	beq.n	3c98 <f_write+0x164>
    3c96:	e77b      	b.n	3b90 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    3c98:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d100      	bne.n	3ca0 <f_write+0x16c>
    3c9e:	e771      	b.n	3b84 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3ca0:	2b01      	cmp	r3, #1
    3ca2:	d086      	beq.n	3bb2 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3ca4:	1c5a      	adds	r2, r3, #1
    3ca6:	d08b      	beq.n	3bc0 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    3ca8:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    3caa:	6820      	ldr	r0, [r4, #0]
    3cac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3cae:	69a2      	ldr	r2, [r4, #24]
    3cb0:	4293      	cmp	r3, r2
    3cb2:	d08c      	beq.n	3bce <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3cb4:	6823      	ldr	r3, [r4, #0]
    3cb6:	469a      	mov	sl, r3
    3cb8:	6961      	ldr	r1, [r4, #20]
    3cba:	0018      	movs	r0, r3
    3cbc:	4b29      	ldr	r3, [pc, #164]	; (3d64 <f_write+0x230>)
    3cbe:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3cc0:	2800      	cmp	r0, #0
    3cc2:	d091      	beq.n	3be8 <f_write+0xb4>
			sect += csect;
    3cc4:	4680      	mov	r8, r0
    3cc6:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3cc8:	0a73      	lsrs	r3, r6, #9
    3cca:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    3ccc:	d0a8      	beq.n	3c20 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3cce:	4653      	mov	r3, sl
    3cd0:	789b      	ldrb	r3, [r3, #2]
    3cd2:	465a      	mov	r2, fp
    3cd4:	18aa      	adds	r2, r5, r2
    3cd6:	429a      	cmp	r2, r3
    3cd8:	d901      	bls.n	3cde <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    3cda:	1b5b      	subs	r3, r3, r5
    3cdc:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    3cde:	465b      	mov	r3, fp
    3ce0:	466a      	mov	r2, sp
    3ce2:	71d3      	strb	r3, [r2, #7]
    3ce4:	79d3      	ldrb	r3, [r2, #7]
    3ce6:	4652      	mov	r2, sl
    3ce8:	7850      	ldrb	r0, [r2, #1]
    3cea:	4642      	mov	r2, r8
    3cec:	0039      	movs	r1, r7
    3cee:	4d1e      	ldr	r5, [pc, #120]	; (3d68 <f_write+0x234>)
    3cf0:	47a8      	blx	r5
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d000      	beq.n	3cf8 <f_write+0x1c4>
    3cf6:	e77f      	b.n	3bf8 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    3cf8:	6823      	ldr	r3, [r4, #0]
    3cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cfc:	4641      	mov	r1, r8
    3cfe:	1a50      	subs	r0, r2, r1
    3d00:	4583      	cmp	fp, r0
    3d02:	d900      	bls.n	3d06 <f_write+0x1d2>
    3d04:	e780      	b.n	3c08 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    3d06:	465b      	mov	r3, fp
    3d08:	025d      	lsls	r5, r3, #9
				continue;
    3d0a:	e7ac      	b.n	3c66 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    3d0c:	2100      	movs	r1, #0
    3d0e:	4650      	mov	r0, sl
    3d10:	4b12      	ldr	r3, [pc, #72]	; (3d5c <f_write+0x228>)
    3d12:	4798      	blx	r3
    3d14:	2800      	cmp	r0, #0
    3d16:	d103      	bne.n	3d20 <f_write+0x1ec>
				fp->fs->winsect = sect;
    3d18:	6823      	ldr	r3, [r4, #0]
    3d1a:	4642      	mov	r2, r8
    3d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    3d1e:	e783      	b.n	3c28 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    3d20:	79a2      	ldrb	r2, [r4, #6]
    3d22:	2380      	movs	r3, #128	; 0x80
    3d24:	425b      	negs	r3, r3
    3d26:	4313      	orrs	r3, r2
    3d28:	71a3      	strb	r3, [r4, #6]
    3d2a:	2301      	movs	r3, #1
    3d2c:	9300      	str	r3, [sp, #0]
    3d2e:	e009      	b.n	3d44 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    3d30:	79a2      	ldrb	r2, [r4, #6]
    3d32:	2380      	movs	r3, #128	; 0x80
    3d34:	425b      	negs	r3, r3
    3d36:	4313      	orrs	r3, r2
    3d38:	71a3      	strb	r3, [r4, #6]
    3d3a:	2301      	movs	r3, #1
    3d3c:	9300      	str	r3, [sp, #0]
    3d3e:	e001      	b.n	3d44 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3d40:	2302      	movs	r3, #2
    3d42:	9300      	str	r3, [sp, #0]
}
    3d44:	9800      	ldr	r0, [sp, #0]
    3d46:	b003      	add	sp, #12
    3d48:	bc3c      	pop	{r2, r3, r4, r5}
    3d4a:	4690      	mov	r8, r2
    3d4c:	4699      	mov	r9, r3
    3d4e:	46a2      	mov	sl, r4
    3d50:	46ab      	mov	fp, r5
    3d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d54:	00002349 	.word	0x00002349
    3d58:	00002b6d 	.word	0x00002b6d
    3d5c:	000027f1 	.word	0x000027f1
    3d60:	00002281 	.word	0x00002281
    3d64:	00002315 	.word	0x00002315
    3d68:	00002029 	.word	0x00002029

00003d6c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3d6c:	b570      	push	{r4, r5, r6, lr}
    3d6e:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3d70:	8881      	ldrh	r1, [r0, #4]
    3d72:	6800      	ldr	r0, [r0, #0]
    3d74:	4b1c      	ldr	r3, [pc, #112]	; (3de8 <f_sync+0x7c>)
    3d76:	4798      	blx	r3
	if (res == FR_OK) {
    3d78:	2800      	cmp	r0, #0
    3d7a:	d102      	bne.n	3d82 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3d7c:	79a3      	ldrb	r3, [r4, #6]
    3d7e:	069b      	lsls	r3, r3, #26
    3d80:	d400      	bmi.n	3d84 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3d82:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    3d84:	69e1      	ldr	r1, [r4, #28]
    3d86:	6820      	ldr	r0, [r4, #0]
    3d88:	4b18      	ldr	r3, [pc, #96]	; (3dec <f_sync+0x80>)
    3d8a:	4798      	blx	r3
			if (res == FR_OK) {
    3d8c:	2800      	cmp	r0, #0
    3d8e:	d1f8      	bne.n	3d82 <f_sync+0x16>
				dir = fp->dir_ptr;
    3d90:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3d92:	7aeb      	ldrb	r3, [r5, #11]
    3d94:	2220      	movs	r2, #32
    3d96:	4313      	orrs	r3, r2
    3d98:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3d9a:	7b23      	ldrb	r3, [r4, #12]
    3d9c:	772b      	strb	r3, [r5, #28]
    3d9e:	89a3      	ldrh	r3, [r4, #12]
    3da0:	0a1b      	lsrs	r3, r3, #8
    3da2:	776b      	strb	r3, [r5, #29]
    3da4:	89e3      	ldrh	r3, [r4, #14]
    3da6:	77ab      	strb	r3, [r5, #30]
    3da8:	7be3      	ldrb	r3, [r4, #15]
    3daa:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    3dac:	7c23      	ldrb	r3, [r4, #16]
    3dae:	76ab      	strb	r3, [r5, #26]
    3db0:	8a23      	ldrh	r3, [r4, #16]
    3db2:	0a1b      	lsrs	r3, r3, #8
    3db4:	76eb      	strb	r3, [r5, #27]
    3db6:	8a63      	ldrh	r3, [r4, #18]
    3db8:	752b      	strb	r3, [r5, #20]
    3dba:	8a63      	ldrh	r3, [r4, #18]
    3dbc:	0a1b      	lsrs	r3, r3, #8
    3dbe:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    3dc0:	4b0b      	ldr	r3, [pc, #44]	; (3df0 <f_sync+0x84>)
    3dc2:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    3dc4:	75a8      	strb	r0, [r5, #22]
    3dc6:	0a03      	lsrs	r3, r0, #8
    3dc8:	75eb      	strb	r3, [r5, #23]
    3dca:	0c03      	lsrs	r3, r0, #16
    3dcc:	762b      	strb	r3, [r5, #24]
    3dce:	0e00      	lsrs	r0, r0, #24
    3dd0:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    3dd2:	79a3      	ldrb	r3, [r4, #6]
    3dd4:	2220      	movs	r2, #32
    3dd6:	4393      	bics	r3, r2
    3dd8:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    3dda:	2301      	movs	r3, #1
    3ddc:	6822      	ldr	r2, [r4, #0]
    3dde:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    3de0:	6820      	ldr	r0, [r4, #0]
    3de2:	4b04      	ldr	r3, [pc, #16]	; (3df4 <f_sync+0x88>)
    3de4:	4798      	blx	r3
    3de6:	e7cc      	b.n	3d82 <f_sync+0x16>
    3de8:	00002349 	.word	0x00002349
    3dec:	000027f1 	.word	0x000027f1
    3df0:	00002119 	.word	0x00002119
    3df4:	00003249 	.word	0x00003249

00003df8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3df8:	b570      	push	{r4, r5, r6, lr}
    3dfa:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    3dfc:	4b18      	ldr	r3, [pc, #96]	; (3e60 <f_close+0x68>)
    3dfe:	4798      	blx	r3
#if _FS_SHARE
	if (res == FR_OK) {		/* Decrement open counter */
    3e00:	2800      	cmp	r0, #0
    3e02:	d000      	beq.n	3e06 <f_close+0xe>
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    3e04:	bd70      	pop	{r4, r5, r6, pc}
	if (--i < _FS_SHARE) {
    3e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e08:	3b01      	subs	r3, #1
    3e0a:	2b01      	cmp	r3, #1
    3e0c:	d901      	bls.n	3e12 <f_close+0x1a>
		res = FR_INT_ERR;
    3e0e:	2002      	movs	r0, #2
	return res;
    3e10:	e7f8      	b.n	3e04 <f_close+0xc>
		n = Files[i].ctr;
    3e12:	005a      	lsls	r2, r3, #1
    3e14:	18d2      	adds	r2, r2, r3
    3e16:	0092      	lsls	r2, r2, #2
    3e18:	4912      	ldr	r1, [pc, #72]	; (3e64 <f_close+0x6c>)
    3e1a:	188a      	adds	r2, r1, r2
    3e1c:	8952      	ldrh	r2, [r2, #10]
		if (n == 0x100) n = 0;
    3e1e:	2180      	movs	r1, #128	; 0x80
    3e20:	0049      	lsls	r1, r1, #1
    3e22:	428a      	cmp	r2, r1
    3e24:	d00c      	beq.n	3e40 <f_close+0x48>
		if (n) n--;
    3e26:	2a00      	cmp	r2, #0
    3e28:	d011      	beq.n	3e4e <f_close+0x56>
    3e2a:	3a01      	subs	r2, #1
    3e2c:	b292      	uxth	r2, r2
		Files[i].ctr = n;
    3e2e:	0059      	lsls	r1, r3, #1
    3e30:	18c9      	adds	r1, r1, r3
    3e32:	0089      	lsls	r1, r1, #2
    3e34:	4d0b      	ldr	r5, [pc, #44]	; (3e64 <f_close+0x6c>)
    3e36:	1869      	adds	r1, r5, r1
    3e38:	814a      	strh	r2, [r1, #10]
		if (!n) Files[i].fs = 0;
    3e3a:	2a00      	cmp	r2, #0
    3e3c:	d10d      	bne.n	3e5a <f_close+0x62>
    3e3e:	e006      	b.n	3e4e <f_close+0x56>
		Files[i].ctr = n;
    3e40:	005a      	lsls	r2, r3, #1
    3e42:	18d2      	adds	r2, r2, r3
    3e44:	0092      	lsls	r2, r2, #2
    3e46:	4907      	ldr	r1, [pc, #28]	; (3e64 <f_close+0x6c>)
    3e48:	188a      	adds	r2, r1, r2
    3e4a:	2100      	movs	r1, #0
    3e4c:	8151      	strh	r1, [r2, #10]
		if (!n) Files[i].fs = 0;
    3e4e:	005a      	lsls	r2, r3, #1
    3e50:	18d3      	adds	r3, r2, r3
    3e52:	009b      	lsls	r3, r3, #2
    3e54:	2100      	movs	r1, #0
    3e56:	4a03      	ldr	r2, [pc, #12]	; (3e64 <f_close+0x6c>)
    3e58:	5099      	str	r1, [r3, r2]
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    3e5a:	2300      	movs	r3, #0
    3e5c:	6023      	str	r3, [r4, #0]
    3e5e:	e7d1      	b.n	3e04 <f_close+0xc>
    3e60:	00003d6d 	.word	0x00003d6d
    3e64:	2000013c 	.word	0x2000013c

00003e68 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e6a:	46de      	mov	lr, fp
    3e6c:	4657      	mov	r7, sl
    3e6e:	464e      	mov	r6, r9
    3e70:	4645      	mov	r5, r8
    3e72:	b5e0      	push	{r5, r6, r7, lr}
    3e74:	0004      	movs	r4, r0
    3e76:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3e78:	8881      	ldrh	r1, [r0, #4]
    3e7a:	6800      	ldr	r0, [r0, #0]
    3e7c:	4b57      	ldr	r3, [pc, #348]	; (3fdc <f_lseek+0x174>)
    3e7e:	4798      	blx	r3
    3e80:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3e82:	d000      	beq.n	3e86 <f_lseek+0x1e>
    3e84:	e0a2      	b.n	3fcc <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3e86:	79a3      	ldrb	r3, [r4, #6]
    3e88:	b25a      	sxtb	r2, r3
    3e8a:	2a00      	cmp	r2, #0
    3e8c:	da00      	bge.n	3e90 <f_lseek+0x28>
    3e8e:	e09c      	b.n	3fca <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3e90:	68e2      	ldr	r2, [r4, #12]
    3e92:	42b2      	cmp	r2, r6
    3e94:	d202      	bcs.n	3e9c <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    3e96:	079b      	lsls	r3, r3, #30
    3e98:	d400      	bmi.n	3e9c <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    3e9a:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    3e9c:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    3e9e:	2300      	movs	r3, #0
    3ea0:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    3ea2:	2e00      	cmp	r6, #0
    3ea4:	d100      	bne.n	3ea8 <f_lseek+0x40>
    3ea6:	e091      	b.n	3fcc <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3ea8:	6823      	ldr	r3, [r4, #0]
    3eaa:	4699      	mov	r9, r3
    3eac:	789f      	ldrb	r7, [r3, #2]
    3eae:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    3eb0:	2800      	cmp	r0, #0
    3eb2:	d013      	beq.n	3edc <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    3eb4:	1e43      	subs	r3, r0, #1
    3eb6:	4698      	mov	r8, r3
    3eb8:	1e70      	subs	r0, r6, #1
    3eba:	4b49      	ldr	r3, [pc, #292]	; (3fe0 <f_lseek+0x178>)
    3ebc:	469a      	mov	sl, r3
    3ebe:	0039      	movs	r1, r7
    3ec0:	4798      	blx	r3
    3ec2:	4683      	mov	fp, r0
    3ec4:	0039      	movs	r1, r7
    3ec6:	4640      	mov	r0, r8
    3ec8:	47d0      	blx	sl
			if (ifptr > 0 &&
    3eca:	4583      	cmp	fp, r0
    3ecc:	d306      	bcc.n	3edc <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3ece:	4278      	negs	r0, r7
    3ed0:	4643      	mov	r3, r8
    3ed2:	4003      	ands	r3, r0
    3ed4:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    3ed6:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    3ed8:	6960      	ldr	r0, [r4, #20]
    3eda:	e003      	b.n	3ee4 <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    3edc:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3ede:	2800      	cmp	r0, #0
    3ee0:	d00b      	beq.n	3efa <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    3ee2:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    3ee4:	2800      	cmp	r0, #0
    3ee6:	d060      	beq.n	3faa <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    3ee8:	42be      	cmp	r6, r7
    3eea:	d93a      	bls.n	3f62 <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3eec:	2302      	movs	r3, #2
    3eee:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3ef0:	4b3c      	ldr	r3, [pc, #240]	; (3fe4 <f_lseek+0x17c>)
    3ef2:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3ef4:	4b3c      	ldr	r3, [pc, #240]	; (3fe8 <f_lseek+0x180>)
    3ef6:	4699      	mov	r9, r3
    3ef8:	e029      	b.n	3f4e <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    3efa:	2100      	movs	r1, #0
    3efc:	4648      	mov	r0, r9
    3efe:	4b39      	ldr	r3, [pc, #228]	; (3fe4 <f_lseek+0x17c>)
    3f00:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3f02:	2801      	cmp	r0, #1
    3f04:	d003      	beq.n	3f0e <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3f06:	1c43      	adds	r3, r0, #1
    3f08:	d008      	beq.n	3f1c <f_lseek+0xb4>
					fp->sclust = clst;
    3f0a:	6120      	str	r0, [r4, #16]
    3f0c:	e7e9      	b.n	3ee2 <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3f0e:	79a2      	ldrb	r2, [r4, #6]
    3f10:	2380      	movs	r3, #128	; 0x80
    3f12:	425b      	negs	r3, r3
    3f14:	4313      	orrs	r3, r2
    3f16:	71a3      	strb	r3, [r4, #6]
    3f18:	2502      	movs	r5, #2
    3f1a:	e057      	b.n	3fcc <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3f1c:	79a2      	ldrb	r2, [r4, #6]
    3f1e:	2380      	movs	r3, #128	; 0x80
    3f20:	425b      	negs	r3, r3
    3f22:	4313      	orrs	r3, r2
    3f24:	71a3      	strb	r3, [r4, #6]
    3f26:	2501      	movs	r5, #1
    3f28:	e050      	b.n	3fcc <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3f2a:	0001      	movs	r1, r0
    3f2c:	6820      	ldr	r0, [r4, #0]
    3f2e:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3f30:	1c43      	adds	r3, r0, #1
    3f32:	d028      	beq.n	3f86 <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    3f34:	2801      	cmp	r0, #1
    3f36:	d92d      	bls.n	3f94 <f_lseek+0x12c>
    3f38:	6823      	ldr	r3, [r4, #0]
    3f3a:	699b      	ldr	r3, [r3, #24]
    3f3c:	4298      	cmp	r0, r3
    3f3e:	d229      	bcs.n	3f94 <f_lseek+0x12c>
					fp->clust = clst;
    3f40:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    3f42:	68a3      	ldr	r3, [r4, #8]
    3f44:	19db      	adds	r3, r3, r7
    3f46:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    3f48:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    3f4a:	42b7      	cmp	r7, r6
    3f4c:	d209      	bcs.n	3f62 <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3f4e:	79a3      	ldrb	r3, [r4, #6]
    3f50:	4642      	mov	r2, r8
    3f52:	421a      	tst	r2, r3
    3f54:	d0e9      	beq.n	3f2a <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3f56:	0001      	movs	r1, r0
    3f58:	6820      	ldr	r0, [r4, #0]
    3f5a:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    3f5c:	2800      	cmp	r0, #0
    3f5e:	d1e7      	bne.n	3f30 <f_lseek+0xc8>
							ofs = bcs; break;
    3f60:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    3f62:	68a3      	ldr	r3, [r4, #8]
    3f64:	199b      	adds	r3, r3, r6
    3f66:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    3f68:	05f3      	lsls	r3, r6, #23
    3f6a:	d01d      	beq.n	3fa8 <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3f6c:	0001      	movs	r1, r0
    3f6e:	6820      	ldr	r0, [r4, #0]
    3f70:	4b1e      	ldr	r3, [pc, #120]	; (3fec <f_lseek+0x184>)
    3f72:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3f74:	2800      	cmp	r0, #0
    3f76:	d114      	bne.n	3fa2 <f_lseek+0x13a>
    3f78:	79a2      	ldrb	r2, [r4, #6]
    3f7a:	2380      	movs	r3, #128	; 0x80
    3f7c:	425b      	negs	r3, r3
    3f7e:	4313      	orrs	r3, r2
    3f80:	71a3      	strb	r3, [r4, #6]
    3f82:	2502      	movs	r5, #2
    3f84:	e022      	b.n	3fcc <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3f86:	79a2      	ldrb	r2, [r4, #6]
    3f88:	2380      	movs	r3, #128	; 0x80
    3f8a:	425b      	negs	r3, r3
    3f8c:	4313      	orrs	r3, r2
    3f8e:	71a3      	strb	r3, [r4, #6]
    3f90:	2501      	movs	r5, #1
    3f92:	e01b      	b.n	3fcc <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    3f94:	79a2      	ldrb	r2, [r4, #6]
    3f96:	2380      	movs	r3, #128	; 0x80
    3f98:	425b      	negs	r3, r3
    3f9a:	4313      	orrs	r3, r2
    3f9c:	71a3      	strb	r3, [r4, #6]
    3f9e:	2502      	movs	r5, #2
    3fa0:	e014      	b.n	3fcc <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    3fa2:	0a76      	lsrs	r6, r6, #9
    3fa4:	1830      	adds	r0, r6, r0
    3fa6:	e000      	b.n	3faa <f_lseek+0x142>
		fp->fptr = nsect = 0;
    3fa8:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    3faa:	68a3      	ldr	r3, [r4, #8]
    3fac:	05da      	lsls	r2, r3, #23
    3fae:	d003      	beq.n	3fb8 <f_lseek+0x150>
    3fb0:	69a2      	ldr	r2, [r4, #24]
    3fb2:	4290      	cmp	r0, r2
    3fb4:	d000      	beq.n	3fb8 <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    3fb6:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    3fb8:	68e2      	ldr	r2, [r4, #12]
    3fba:	4293      	cmp	r3, r2
    3fbc:	d906      	bls.n	3fcc <f_lseek+0x164>
			fp->fsize = fp->fptr;
    3fbe:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    3fc0:	79a3      	ldrb	r3, [r4, #6]
    3fc2:	2220      	movs	r2, #32
    3fc4:	4313      	orrs	r3, r2
    3fc6:	71a3      	strb	r3, [r4, #6]
    3fc8:	e000      	b.n	3fcc <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3fca:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    3fcc:	0028      	movs	r0, r5
    3fce:	bc3c      	pop	{r2, r3, r4, r5}
    3fd0:	4690      	mov	r8, r2
    3fd2:	4699      	mov	r9, r3
    3fd4:	46a2      	mov	sl, r4
    3fd6:	46ab      	mov	fp, r5
    3fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	00002349 	.word	0x00002349
    3fe0:	0000700d 	.word	0x0000700d
    3fe4:	00002b6d 	.word	0x00002b6d
    3fe8:	00002891 	.word	0x00002891
    3fec:	00002315 	.word	0x00002315

00003ff0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    3ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ff2:	46c6      	mov	lr, r8
    3ff4:	b500      	push	{lr}
    3ff6:	b084      	sub	sp, #16
    3ff8:	0007      	movs	r7, r0
    3ffa:	9201      	str	r2, [sp, #4]
	int n = 0;
	TCHAR c, *p = buff;
    3ffc:	0005      	movs	r5, r0
	int n = 0;
    3ffe:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    4000:	1e4b      	subs	r3, r1, #1
    4002:	4698      	mov	r8, r3
		f_read(fil, s, 1, &rc);
    4004:	4e0e      	ldr	r6, [pc, #56]	; (4040 <f_gets+0x50>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    4006:	4544      	cmp	r4, r8
    4008:	da0e      	bge.n	4028 <f_gets+0x38>
		f_read(fil, s, 1, &rc);
    400a:	ab02      	add	r3, sp, #8
    400c:	2201      	movs	r2, #1
    400e:	a903      	add	r1, sp, #12
    4010:	9801      	ldr	r0, [sp, #4]
    4012:	47b0      	blx	r6
		if (rc != 1) break;			/* Break on EOF or error */
    4014:	9b02      	ldr	r3, [sp, #8]
    4016:	2b01      	cmp	r3, #1
    4018:	d106      	bne.n	4028 <f_gets+0x38>
		c = s[0];
    401a:	ab03      	add	r3, sp, #12
    401c:	781b      	ldrb	r3, [r3, #0]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
    401e:	3501      	adds	r5, #1
    4020:	553b      	strb	r3, [r7, r4]
		n++;
    4022:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
    4024:	2b0a      	cmp	r3, #10
    4026:	d1ee      	bne.n	4006 <f_gets+0x16>
	}
	*p = 0;
    4028:	2300      	movs	r3, #0
    402a:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    402c:	1e63      	subs	r3, r4, #1
    402e:	419c      	sbcs	r4, r3
    4030:	4264      	negs	r4, r4
    4032:	4027      	ands	r7, r4
}
    4034:	0038      	movs	r0, r7
    4036:	b004      	add	sp, #16
    4038:	bc04      	pop	{r2}
    403a:	4690      	mov	r8, r2
    403c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	00003981 	.word	0x00003981

00004044 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    4044:	b510      	push	{r4, lr}
    4046:	b082      	sub	sp, #8
    4048:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    404a:	466b      	mov	r3, sp
    404c:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    404e:	ab01      	add	r3, sp, #4
    4050:	2201      	movs	r2, #1
    4052:	4669      	mov	r1, sp
    4054:	0020      	movs	r0, r4
    4056:	4c05      	ldr	r4, [pc, #20]	; (406c <f_putc+0x28>)
    4058:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    405a:	9b01      	ldr	r3, [sp, #4]
    405c:	1e58      	subs	r0, r3, #1
    405e:	1e43      	subs	r3, r0, #1
    4060:	4198      	sbcs	r0, r3
    4062:	4240      	negs	r0, r0
    4064:	2301      	movs	r3, #1
    4066:	4318      	orrs	r0, r3
}
    4068:	b002      	add	sp, #8
    406a:	bd10      	pop	{r4, pc}
    406c:	00003b35 	.word	0x00003b35

00004070 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    4070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4072:	0006      	movs	r6, r0
    4074:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    4076:	7800      	ldrb	r0, [r0, #0]
    4078:	2800      	cmp	r0, #0
    407a:	d00b      	beq.n	4094 <f_puts+0x24>
    407c:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    407e:	4f06      	ldr	r7, [pc, #24]	; (4098 <f_puts+0x28>)
    4080:	0029      	movs	r1, r5
    4082:	47b8      	blx	r7
    4084:	1c43      	adds	r3, r0, #1
    4086:	d004      	beq.n	4092 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    4088:	3401      	adds	r4, #1
    408a:	5d30      	ldrb	r0, [r6, r4]
    408c:	2800      	cmp	r0, #0
    408e:	d1f7      	bne.n	4080 <f_puts+0x10>
    4090:	0020      	movs	r0, r4
	}
	return n;
}
    4092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    4094:	2000      	movs	r0, #0
    4096:	e7fc      	b.n	4092 <f_puts+0x22>
    4098:	00004045 	.word	0x00004045

0000409c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    409c:	4b0c      	ldr	r3, [pc, #48]	; (40d0 <cpu_irq_enter_critical+0x34>)
    409e:	681b      	ldr	r3, [r3, #0]
    40a0:	2b00      	cmp	r3, #0
    40a2:	d106      	bne.n	40b2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40a4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    40a8:	2b00      	cmp	r3, #0
    40aa:	d007      	beq.n	40bc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    40ac:	2200      	movs	r2, #0
    40ae:	4b09      	ldr	r3, [pc, #36]	; (40d4 <cpu_irq_enter_critical+0x38>)
    40b0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    40b2:	4a07      	ldr	r2, [pc, #28]	; (40d0 <cpu_irq_enter_critical+0x34>)
    40b4:	6813      	ldr	r3, [r2, #0]
    40b6:	3301      	adds	r3, #1
    40b8:	6013      	str	r3, [r2, #0]
}
    40ba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    40bc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    40be:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    40c2:	2200      	movs	r2, #0
    40c4:	4b04      	ldr	r3, [pc, #16]	; (40d8 <cpu_irq_enter_critical+0x3c>)
    40c6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    40c8:	3201      	adds	r2, #1
    40ca:	4b02      	ldr	r3, [pc, #8]	; (40d4 <cpu_irq_enter_critical+0x38>)
    40cc:	701a      	strb	r2, [r3, #0]
    40ce:	e7f0      	b.n	40b2 <cpu_irq_enter_critical+0x16>
    40d0:	20000158 	.word	0x20000158
    40d4:	2000015c 	.word	0x2000015c
    40d8:	20000030 	.word	0x20000030

000040dc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <cpu_irq_leave_critical+0x24>)
    40de:	681a      	ldr	r2, [r3, #0]
    40e0:	3a01      	subs	r2, #1
    40e2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	2b00      	cmp	r3, #0
    40e8:	d109      	bne.n	40fe <cpu_irq_leave_critical+0x22>
    40ea:	4b06      	ldr	r3, [pc, #24]	; (4104 <cpu_irq_leave_critical+0x28>)
    40ec:	781b      	ldrb	r3, [r3, #0]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d005      	beq.n	40fe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    40f2:	2201      	movs	r2, #1
    40f4:	4b04      	ldr	r3, [pc, #16]	; (4108 <cpu_irq_leave_critical+0x2c>)
    40f6:	701a      	strb	r2, [r3, #0]
    40f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    40fc:	b662      	cpsie	i
	}
}
    40fe:	4770      	bx	lr
    4100:	20000158 	.word	0x20000158
    4104:	2000015c 	.word	0x2000015c
    4108:	20000030 	.word	0x20000030

0000410c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    410c:	b5f0      	push	{r4, r5, r6, r7, lr}
    410e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4110:	ac01      	add	r4, sp, #4
    4112:	2501      	movs	r5, #1
    4114:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4116:	2700      	movs	r7, #0
    4118:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    411a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    411c:	0021      	movs	r1, r4
    411e:	203e      	movs	r0, #62	; 0x3e
    4120:	4e06      	ldr	r6, [pc, #24]	; (413c <system_board_init+0x30>)
    4122:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4124:	2280      	movs	r2, #128	; 0x80
    4126:	05d2      	lsls	r2, r2, #23
    4128:	4b05      	ldr	r3, [pc, #20]	; (4140 <system_board_init+0x34>)
    412a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    412c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    412e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4130:	0021      	movs	r1, r4
    4132:	200f      	movs	r0, #15
    4134:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    4136:	b003      	add	sp, #12
    4138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    413a:	46c0      	nop			; (mov r8, r8)
    413c:	00004145 	.word	0x00004145
    4140:	41004480 	.word	0x41004480

00004144 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4144:	b500      	push	{lr}
    4146:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4148:	ab01      	add	r3, sp, #4
    414a:	2280      	movs	r2, #128	; 0x80
    414c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    414e:	780a      	ldrb	r2, [r1, #0]
    4150:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4152:	784a      	ldrb	r2, [r1, #1]
    4154:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4156:	788a      	ldrb	r2, [r1, #2]
    4158:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    415a:	0019      	movs	r1, r3
    415c:	4b01      	ldr	r3, [pc, #4]	; (4164 <port_pin_set_config+0x20>)
    415e:	4798      	blx	r3
}
    4160:	b003      	add	sp, #12
    4162:	bd00      	pop	{pc}
    4164:	00005081 	.word	0x00005081

00004168 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4168:	b5f0      	push	{r4, r5, r6, r7, lr}
    416a:	46de      	mov	lr, fp
    416c:	4657      	mov	r7, sl
    416e:	464e      	mov	r6, r9
    4170:	4645      	mov	r5, r8
    4172:	b5e0      	push	{r5, r6, r7, lr}
    4174:	b087      	sub	sp, #28
    4176:	4680      	mov	r8, r0
    4178:	9104      	str	r1, [sp, #16]
    417a:	0016      	movs	r6, r2
    417c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    417e:	2200      	movs	r2, #0
    4180:	2300      	movs	r3, #0
    4182:	2100      	movs	r1, #0
    4184:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4186:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4188:	2001      	movs	r0, #1
    418a:	0021      	movs	r1, r4
    418c:	9600      	str	r6, [sp, #0]
    418e:	9701      	str	r7, [sp, #4]
    4190:	465c      	mov	r4, fp
    4192:	9403      	str	r4, [sp, #12]
    4194:	4644      	mov	r4, r8
    4196:	9405      	str	r4, [sp, #20]
    4198:	e013      	b.n	41c2 <long_division+0x5a>
    419a:	2420      	movs	r4, #32
    419c:	1a64      	subs	r4, r4, r1
    419e:	0005      	movs	r5, r0
    41a0:	40e5      	lsrs	r5, r4
    41a2:	46a8      	mov	r8, r5
    41a4:	e014      	b.n	41d0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    41a6:	9c00      	ldr	r4, [sp, #0]
    41a8:	9d01      	ldr	r5, [sp, #4]
    41aa:	1b12      	subs	r2, r2, r4
    41ac:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    41ae:	465c      	mov	r4, fp
    41b0:	464d      	mov	r5, r9
    41b2:	432c      	orrs	r4, r5
    41b4:	46a3      	mov	fp, r4
    41b6:	9c03      	ldr	r4, [sp, #12]
    41b8:	4645      	mov	r5, r8
    41ba:	432c      	orrs	r4, r5
    41bc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    41be:	3901      	subs	r1, #1
    41c0:	d325      	bcc.n	420e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    41c2:	2420      	movs	r4, #32
    41c4:	4264      	negs	r4, r4
    41c6:	190c      	adds	r4, r1, r4
    41c8:	d4e7      	bmi.n	419a <long_division+0x32>
    41ca:	0005      	movs	r5, r0
    41cc:	40a5      	lsls	r5, r4
    41ce:	46a8      	mov	r8, r5
    41d0:	0004      	movs	r4, r0
    41d2:	408c      	lsls	r4, r1
    41d4:	46a1      	mov	r9, r4
		r = r << 1;
    41d6:	1892      	adds	r2, r2, r2
    41d8:	415b      	adcs	r3, r3
    41da:	0014      	movs	r4, r2
    41dc:	001d      	movs	r5, r3
		if (n & bit_shift) {
    41de:	9e05      	ldr	r6, [sp, #20]
    41e0:	464f      	mov	r7, r9
    41e2:	403e      	ands	r6, r7
    41e4:	46b4      	mov	ip, r6
    41e6:	9e04      	ldr	r6, [sp, #16]
    41e8:	4647      	mov	r7, r8
    41ea:	403e      	ands	r6, r7
    41ec:	46b2      	mov	sl, r6
    41ee:	4666      	mov	r6, ip
    41f0:	4657      	mov	r7, sl
    41f2:	433e      	orrs	r6, r7
    41f4:	d003      	beq.n	41fe <long_division+0x96>
			r |= 0x01;
    41f6:	0006      	movs	r6, r0
    41f8:	4326      	orrs	r6, r4
    41fa:	0032      	movs	r2, r6
    41fc:	002b      	movs	r3, r5
		if (r >= d) {
    41fe:	9c00      	ldr	r4, [sp, #0]
    4200:	9d01      	ldr	r5, [sp, #4]
    4202:	429d      	cmp	r5, r3
    4204:	d8db      	bhi.n	41be <long_division+0x56>
    4206:	d1ce      	bne.n	41a6 <long_division+0x3e>
    4208:	4294      	cmp	r4, r2
    420a:	d8d8      	bhi.n	41be <long_division+0x56>
    420c:	e7cb      	b.n	41a6 <long_division+0x3e>
    420e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4210:	4658      	mov	r0, fp
    4212:	0019      	movs	r1, r3
    4214:	b007      	add	sp, #28
    4216:	bc3c      	pop	{r2, r3, r4, r5}
    4218:	4690      	mov	r8, r2
    421a:	4699      	mov	r9, r3
    421c:	46a2      	mov	sl, r4
    421e:	46ab      	mov	fp, r5
    4220:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004222 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4222:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4224:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4226:	2340      	movs	r3, #64	; 0x40
    4228:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    422a:	4281      	cmp	r1, r0
    422c:	d202      	bcs.n	4234 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    422e:	0018      	movs	r0, r3
    4230:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4232:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4234:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4236:	1c63      	adds	r3, r4, #1
    4238:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    423a:	4288      	cmp	r0, r1
    423c:	d9f9      	bls.n	4232 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    423e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4240:	2cff      	cmp	r4, #255	; 0xff
    4242:	d8f4      	bhi.n	422e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4244:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4246:	2300      	movs	r3, #0
    4248:	e7f1      	b.n	422e <_sercom_get_sync_baud_val+0xc>
	...

0000424c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    424c:	b5f0      	push	{r4, r5, r6, r7, lr}
    424e:	b083      	sub	sp, #12
    4250:	000f      	movs	r7, r1
    4252:	0016      	movs	r6, r2
    4254:	aa08      	add	r2, sp, #32
    4256:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4258:	0004      	movs	r4, r0
    425a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    425c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    425e:	42bc      	cmp	r4, r7
    4260:	d902      	bls.n	4268 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4262:	0010      	movs	r0, r2
    4264:	b003      	add	sp, #12
    4266:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4268:	2b00      	cmp	r3, #0
    426a:	d114      	bne.n	4296 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    426c:	0002      	movs	r2, r0
    426e:	0008      	movs	r0, r1
    4270:	2100      	movs	r1, #0
    4272:	4c19      	ldr	r4, [pc, #100]	; (42d8 <_sercom_get_async_baud_val+0x8c>)
    4274:	47a0      	blx	r4
    4276:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4278:	003a      	movs	r2, r7
    427a:	2300      	movs	r3, #0
    427c:	2000      	movs	r0, #0
    427e:	4c17      	ldr	r4, [pc, #92]	; (42dc <_sercom_get_async_baud_val+0x90>)
    4280:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4282:	2200      	movs	r2, #0
    4284:	2301      	movs	r3, #1
    4286:	1a12      	subs	r2, r2, r0
    4288:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    428a:	0c12      	lsrs	r2, r2, #16
    428c:	041b      	lsls	r3, r3, #16
    428e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4290:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4292:	2200      	movs	r2, #0
    4294:	e7e5      	b.n	4262 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4296:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4298:	2b01      	cmp	r3, #1
    429a:	d1f9      	bne.n	4290 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    429c:	000a      	movs	r2, r1
    429e:	2300      	movs	r3, #0
    42a0:	2100      	movs	r1, #0
    42a2:	4c0d      	ldr	r4, [pc, #52]	; (42d8 <_sercom_get_async_baud_val+0x8c>)
    42a4:	47a0      	blx	r4
    42a6:	0002      	movs	r2, r0
    42a8:	000b      	movs	r3, r1
    42aa:	9200      	str	r2, [sp, #0]
    42ac:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    42ae:	0038      	movs	r0, r7
    42b0:	2100      	movs	r1, #0
    42b2:	4c0a      	ldr	r4, [pc, #40]	; (42dc <_sercom_get_async_baud_val+0x90>)
    42b4:	47a0      	blx	r4
    42b6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    42b8:	2380      	movs	r3, #128	; 0x80
    42ba:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42bc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    42be:	4298      	cmp	r0, r3
    42c0:	d8cf      	bhi.n	4262 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    42c2:	0f79      	lsrs	r1, r7, #29
    42c4:	00f8      	lsls	r0, r7, #3
    42c6:	9a00      	ldr	r2, [sp, #0]
    42c8:	9b01      	ldr	r3, [sp, #4]
    42ca:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    42cc:	00ea      	lsls	r2, r5, #3
    42ce:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    42d0:	b2d2      	uxtb	r2, r2
    42d2:	0352      	lsls	r2, r2, #13
    42d4:	432a      	orrs	r2, r5
    42d6:	e7db      	b.n	4290 <_sercom_get_async_baud_val+0x44>
    42d8:	000072f9 	.word	0x000072f9
    42dc:	00004169 	.word	0x00004169

000042e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    42e0:	b510      	push	{r4, lr}
    42e2:	b082      	sub	sp, #8
    42e4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    42e6:	4b0e      	ldr	r3, [pc, #56]	; (4320 <sercom_set_gclk_generator+0x40>)
    42e8:	781b      	ldrb	r3, [r3, #0]
    42ea:	2b00      	cmp	r3, #0
    42ec:	d007      	beq.n	42fe <sercom_set_gclk_generator+0x1e>
    42ee:	2900      	cmp	r1, #0
    42f0:	d105      	bne.n	42fe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    42f2:	4b0b      	ldr	r3, [pc, #44]	; (4320 <sercom_set_gclk_generator+0x40>)
    42f4:	785b      	ldrb	r3, [r3, #1]
    42f6:	4283      	cmp	r3, r0
    42f8:	d010      	beq.n	431c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    42fa:	201d      	movs	r0, #29
    42fc:	e00c      	b.n	4318 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    42fe:	a901      	add	r1, sp, #4
    4300:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4302:	2013      	movs	r0, #19
    4304:	4b07      	ldr	r3, [pc, #28]	; (4324 <sercom_set_gclk_generator+0x44>)
    4306:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4308:	2013      	movs	r0, #19
    430a:	4b07      	ldr	r3, [pc, #28]	; (4328 <sercom_set_gclk_generator+0x48>)
    430c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    430e:	4b04      	ldr	r3, [pc, #16]	; (4320 <sercom_set_gclk_generator+0x40>)
    4310:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4312:	2201      	movs	r2, #1
    4314:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4316:	2000      	movs	r0, #0
}
    4318:	b002      	add	sp, #8
    431a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    431c:	2000      	movs	r0, #0
    431e:	e7fb      	b.n	4318 <sercom_set_gclk_generator+0x38>
    4320:	20000160 	.word	0x20000160
    4324:	00004f89 	.word	0x00004f89
    4328:	00004efd 	.word	0x00004efd

0000432c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    432c:	4b40      	ldr	r3, [pc, #256]	; (4430 <_sercom_get_default_pad+0x104>)
    432e:	4298      	cmp	r0, r3
    4330:	d031      	beq.n	4396 <_sercom_get_default_pad+0x6a>
    4332:	d90a      	bls.n	434a <_sercom_get_default_pad+0x1e>
    4334:	4b3f      	ldr	r3, [pc, #252]	; (4434 <_sercom_get_default_pad+0x108>)
    4336:	4298      	cmp	r0, r3
    4338:	d04d      	beq.n	43d6 <_sercom_get_default_pad+0xaa>
    433a:	4b3f      	ldr	r3, [pc, #252]	; (4438 <_sercom_get_default_pad+0x10c>)
    433c:	4298      	cmp	r0, r3
    433e:	d05a      	beq.n	43f6 <_sercom_get_default_pad+0xca>
    4340:	4b3e      	ldr	r3, [pc, #248]	; (443c <_sercom_get_default_pad+0x110>)
    4342:	4298      	cmp	r0, r3
    4344:	d037      	beq.n	43b6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4346:	2000      	movs	r0, #0
}
    4348:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    434a:	4b3d      	ldr	r3, [pc, #244]	; (4440 <_sercom_get_default_pad+0x114>)
    434c:	4298      	cmp	r0, r3
    434e:	d00c      	beq.n	436a <_sercom_get_default_pad+0x3e>
    4350:	4b3c      	ldr	r3, [pc, #240]	; (4444 <_sercom_get_default_pad+0x118>)
    4352:	4298      	cmp	r0, r3
    4354:	d1f7      	bne.n	4346 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4356:	2901      	cmp	r1, #1
    4358:	d017      	beq.n	438a <_sercom_get_default_pad+0x5e>
    435a:	2900      	cmp	r1, #0
    435c:	d05d      	beq.n	441a <_sercom_get_default_pad+0xee>
    435e:	2902      	cmp	r1, #2
    4360:	d015      	beq.n	438e <_sercom_get_default_pad+0x62>
    4362:	2903      	cmp	r1, #3
    4364:	d015      	beq.n	4392 <_sercom_get_default_pad+0x66>
	return 0;
    4366:	2000      	movs	r0, #0
    4368:	e7ee      	b.n	4348 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    436a:	2901      	cmp	r1, #1
    436c:	d007      	beq.n	437e <_sercom_get_default_pad+0x52>
    436e:	2900      	cmp	r1, #0
    4370:	d051      	beq.n	4416 <_sercom_get_default_pad+0xea>
    4372:	2902      	cmp	r1, #2
    4374:	d005      	beq.n	4382 <_sercom_get_default_pad+0x56>
    4376:	2903      	cmp	r1, #3
    4378:	d005      	beq.n	4386 <_sercom_get_default_pad+0x5a>
	return 0;
    437a:	2000      	movs	r0, #0
    437c:	e7e4      	b.n	4348 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    437e:	4832      	ldr	r0, [pc, #200]	; (4448 <_sercom_get_default_pad+0x11c>)
    4380:	e7e2      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4382:	4832      	ldr	r0, [pc, #200]	; (444c <_sercom_get_default_pad+0x120>)
    4384:	e7e0      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4386:	4832      	ldr	r0, [pc, #200]	; (4450 <_sercom_get_default_pad+0x124>)
    4388:	e7de      	b.n	4348 <_sercom_get_default_pad+0x1c>
    438a:	4832      	ldr	r0, [pc, #200]	; (4454 <_sercom_get_default_pad+0x128>)
    438c:	e7dc      	b.n	4348 <_sercom_get_default_pad+0x1c>
    438e:	4832      	ldr	r0, [pc, #200]	; (4458 <_sercom_get_default_pad+0x12c>)
    4390:	e7da      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4392:	4832      	ldr	r0, [pc, #200]	; (445c <_sercom_get_default_pad+0x130>)
    4394:	e7d8      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4396:	2901      	cmp	r1, #1
    4398:	d007      	beq.n	43aa <_sercom_get_default_pad+0x7e>
    439a:	2900      	cmp	r1, #0
    439c:	d03f      	beq.n	441e <_sercom_get_default_pad+0xf2>
    439e:	2902      	cmp	r1, #2
    43a0:	d005      	beq.n	43ae <_sercom_get_default_pad+0x82>
    43a2:	2903      	cmp	r1, #3
    43a4:	d005      	beq.n	43b2 <_sercom_get_default_pad+0x86>
	return 0;
    43a6:	2000      	movs	r0, #0
    43a8:	e7ce      	b.n	4348 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43aa:	482d      	ldr	r0, [pc, #180]	; (4460 <_sercom_get_default_pad+0x134>)
    43ac:	e7cc      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43ae:	482d      	ldr	r0, [pc, #180]	; (4464 <_sercom_get_default_pad+0x138>)
    43b0:	e7ca      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43b2:	482d      	ldr	r0, [pc, #180]	; (4468 <_sercom_get_default_pad+0x13c>)
    43b4:	e7c8      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43b6:	2901      	cmp	r1, #1
    43b8:	d007      	beq.n	43ca <_sercom_get_default_pad+0x9e>
    43ba:	2900      	cmp	r1, #0
    43bc:	d031      	beq.n	4422 <_sercom_get_default_pad+0xf6>
    43be:	2902      	cmp	r1, #2
    43c0:	d005      	beq.n	43ce <_sercom_get_default_pad+0xa2>
    43c2:	2903      	cmp	r1, #3
    43c4:	d005      	beq.n	43d2 <_sercom_get_default_pad+0xa6>
	return 0;
    43c6:	2000      	movs	r0, #0
    43c8:	e7be      	b.n	4348 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43ca:	4828      	ldr	r0, [pc, #160]	; (446c <_sercom_get_default_pad+0x140>)
    43cc:	e7bc      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43ce:	4828      	ldr	r0, [pc, #160]	; (4470 <_sercom_get_default_pad+0x144>)
    43d0:	e7ba      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43d2:	4828      	ldr	r0, [pc, #160]	; (4474 <_sercom_get_default_pad+0x148>)
    43d4:	e7b8      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43d6:	2901      	cmp	r1, #1
    43d8:	d007      	beq.n	43ea <_sercom_get_default_pad+0xbe>
    43da:	2900      	cmp	r1, #0
    43dc:	d023      	beq.n	4426 <_sercom_get_default_pad+0xfa>
    43de:	2902      	cmp	r1, #2
    43e0:	d005      	beq.n	43ee <_sercom_get_default_pad+0xc2>
    43e2:	2903      	cmp	r1, #3
    43e4:	d005      	beq.n	43f2 <_sercom_get_default_pad+0xc6>
	return 0;
    43e6:	2000      	movs	r0, #0
    43e8:	e7ae      	b.n	4348 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43ea:	4823      	ldr	r0, [pc, #140]	; (4478 <_sercom_get_default_pad+0x14c>)
    43ec:	e7ac      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43ee:	4823      	ldr	r0, [pc, #140]	; (447c <_sercom_get_default_pad+0x150>)
    43f0:	e7aa      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43f2:	4823      	ldr	r0, [pc, #140]	; (4480 <_sercom_get_default_pad+0x154>)
    43f4:	e7a8      	b.n	4348 <_sercom_get_default_pad+0x1c>
    43f6:	2901      	cmp	r1, #1
    43f8:	d007      	beq.n	440a <_sercom_get_default_pad+0xde>
    43fa:	2900      	cmp	r1, #0
    43fc:	d015      	beq.n	442a <_sercom_get_default_pad+0xfe>
    43fe:	2902      	cmp	r1, #2
    4400:	d005      	beq.n	440e <_sercom_get_default_pad+0xe2>
    4402:	2903      	cmp	r1, #3
    4404:	d005      	beq.n	4412 <_sercom_get_default_pad+0xe6>
	return 0;
    4406:	2000      	movs	r0, #0
    4408:	e79e      	b.n	4348 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    440a:	481e      	ldr	r0, [pc, #120]	; (4484 <_sercom_get_default_pad+0x158>)
    440c:	e79c      	b.n	4348 <_sercom_get_default_pad+0x1c>
    440e:	481e      	ldr	r0, [pc, #120]	; (4488 <_sercom_get_default_pad+0x15c>)
    4410:	e79a      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4412:	481e      	ldr	r0, [pc, #120]	; (448c <_sercom_get_default_pad+0x160>)
    4414:	e798      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4416:	481e      	ldr	r0, [pc, #120]	; (4490 <_sercom_get_default_pad+0x164>)
    4418:	e796      	b.n	4348 <_sercom_get_default_pad+0x1c>
    441a:	2003      	movs	r0, #3
    441c:	e794      	b.n	4348 <_sercom_get_default_pad+0x1c>
    441e:	481d      	ldr	r0, [pc, #116]	; (4494 <_sercom_get_default_pad+0x168>)
    4420:	e792      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4422:	481d      	ldr	r0, [pc, #116]	; (4498 <_sercom_get_default_pad+0x16c>)
    4424:	e790      	b.n	4348 <_sercom_get_default_pad+0x1c>
    4426:	481d      	ldr	r0, [pc, #116]	; (449c <_sercom_get_default_pad+0x170>)
    4428:	e78e      	b.n	4348 <_sercom_get_default_pad+0x1c>
    442a:	481d      	ldr	r0, [pc, #116]	; (44a0 <_sercom_get_default_pad+0x174>)
    442c:	e78c      	b.n	4348 <_sercom_get_default_pad+0x1c>
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	42001000 	.word	0x42001000
    4434:	42001800 	.word	0x42001800
    4438:	42001c00 	.word	0x42001c00
    443c:	42001400 	.word	0x42001400
    4440:	42000800 	.word	0x42000800
    4444:	42000c00 	.word	0x42000c00
    4448:	00050003 	.word	0x00050003
    444c:	00060003 	.word	0x00060003
    4450:	00070003 	.word	0x00070003
    4454:	00010003 	.word	0x00010003
    4458:	001e0003 	.word	0x001e0003
    445c:	001f0003 	.word	0x001f0003
    4460:	00090003 	.word	0x00090003
    4464:	000a0003 	.word	0x000a0003
    4468:	000b0003 	.word	0x000b0003
    446c:	00110003 	.word	0x00110003
    4470:	00120003 	.word	0x00120003
    4474:	00130003 	.word	0x00130003
    4478:	000d0003 	.word	0x000d0003
    447c:	000e0003 	.word	0x000e0003
    4480:	000f0003 	.word	0x000f0003
    4484:	00170003 	.word	0x00170003
    4488:	00180003 	.word	0x00180003
    448c:	00190003 	.word	0x00190003
    4490:	00040003 	.word	0x00040003
    4494:	00080003 	.word	0x00080003
    4498:	00100003 	.word	0x00100003
    449c:	000c0003 	.word	0x000c0003
    44a0:	00160003 	.word	0x00160003

000044a4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    44a4:	b530      	push	{r4, r5, lr}
    44a6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    44a8:	4b0b      	ldr	r3, [pc, #44]	; (44d8 <_sercom_get_sercom_inst_index+0x34>)
    44aa:	466a      	mov	r2, sp
    44ac:	cb32      	ldmia	r3!, {r1, r4, r5}
    44ae:	c232      	stmia	r2!, {r1, r4, r5}
    44b0:	cb32      	ldmia	r3!, {r1, r4, r5}
    44b2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    44b4:	9b00      	ldr	r3, [sp, #0]
    44b6:	4283      	cmp	r3, r0
    44b8:	d00b      	beq.n	44d2 <_sercom_get_sercom_inst_index+0x2e>
    44ba:	2301      	movs	r3, #1
    44bc:	009a      	lsls	r2, r3, #2
    44be:	4669      	mov	r1, sp
    44c0:	5852      	ldr	r2, [r2, r1]
    44c2:	4282      	cmp	r2, r0
    44c4:	d006      	beq.n	44d4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    44c6:	3301      	adds	r3, #1
    44c8:	2b06      	cmp	r3, #6
    44ca:	d1f7      	bne.n	44bc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    44cc:	2000      	movs	r0, #0
}
    44ce:	b007      	add	sp, #28
    44d0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    44d2:	2300      	movs	r3, #0
			return i;
    44d4:	b2d8      	uxtb	r0, r3
    44d6:	e7fa      	b.n	44ce <_sercom_get_sercom_inst_index+0x2a>
    44d8:	00008cf8 	.word	0x00008cf8

000044dc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    44dc:	4770      	bx	lr
	...

000044e0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    44e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    44e2:	4b0a      	ldr	r3, [pc, #40]	; (450c <_sercom_set_handler+0x2c>)
    44e4:	781b      	ldrb	r3, [r3, #0]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d10c      	bne.n	4504 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    44ea:	4f09      	ldr	r7, [pc, #36]	; (4510 <_sercom_set_handler+0x30>)
    44ec:	4e09      	ldr	r6, [pc, #36]	; (4514 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    44ee:	4d0a      	ldr	r5, [pc, #40]	; (4518 <_sercom_set_handler+0x38>)
    44f0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    44f2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    44f4:	195a      	adds	r2, r3, r5
    44f6:	6014      	str	r4, [r2, #0]
    44f8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    44fa:	2b18      	cmp	r3, #24
    44fc:	d1f9      	bne.n	44f2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    44fe:	2201      	movs	r2, #1
    4500:	4b02      	ldr	r3, [pc, #8]	; (450c <_sercom_set_handler+0x2c>)
    4502:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4504:	0080      	lsls	r0, r0, #2
    4506:	4b02      	ldr	r3, [pc, #8]	; (4510 <_sercom_set_handler+0x30>)
    4508:	50c1      	str	r1, [r0, r3]
}
    450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    450c:	20000162 	.word	0x20000162
    4510:	20000164 	.word	0x20000164
    4514:	000044dd 	.word	0x000044dd
    4518:	20005168 	.word	0x20005168

0000451c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    451c:	b500      	push	{lr}
    451e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4520:	2309      	movs	r3, #9
    4522:	466a      	mov	r2, sp
    4524:	7013      	strb	r3, [r2, #0]
    4526:	3301      	adds	r3, #1
    4528:	7053      	strb	r3, [r2, #1]
    452a:	3301      	adds	r3, #1
    452c:	7093      	strb	r3, [r2, #2]
    452e:	3301      	adds	r3, #1
    4530:	70d3      	strb	r3, [r2, #3]
    4532:	3301      	adds	r3, #1
    4534:	7113      	strb	r3, [r2, #4]
    4536:	3301      	adds	r3, #1
    4538:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    453a:	4b03      	ldr	r3, [pc, #12]	; (4548 <_sercom_get_interrupt_vector+0x2c>)
    453c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    453e:	466b      	mov	r3, sp
    4540:	5618      	ldrsb	r0, [r3, r0]
}
    4542:	b003      	add	sp, #12
    4544:	bd00      	pop	{pc}
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	000044a5 	.word	0x000044a5

0000454c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    454c:	b510      	push	{r4, lr}
    454e:	4b02      	ldr	r3, [pc, #8]	; (4558 <SERCOM0_Handler+0xc>)
    4550:	681b      	ldr	r3, [r3, #0]
    4552:	2000      	movs	r0, #0
    4554:	4798      	blx	r3
    4556:	bd10      	pop	{r4, pc}
    4558:	20000164 	.word	0x20000164

0000455c <SERCOM1_Handler>:
    455c:	b510      	push	{r4, lr}
    455e:	4b02      	ldr	r3, [pc, #8]	; (4568 <SERCOM1_Handler+0xc>)
    4560:	685b      	ldr	r3, [r3, #4]
    4562:	2001      	movs	r0, #1
    4564:	4798      	blx	r3
    4566:	bd10      	pop	{r4, pc}
    4568:	20000164 	.word	0x20000164

0000456c <SERCOM2_Handler>:
    456c:	b510      	push	{r4, lr}
    456e:	4b02      	ldr	r3, [pc, #8]	; (4578 <SERCOM2_Handler+0xc>)
    4570:	689b      	ldr	r3, [r3, #8]
    4572:	2002      	movs	r0, #2
    4574:	4798      	blx	r3
    4576:	bd10      	pop	{r4, pc}
    4578:	20000164 	.word	0x20000164

0000457c <SERCOM3_Handler>:
    457c:	b510      	push	{r4, lr}
    457e:	4b02      	ldr	r3, [pc, #8]	; (4588 <SERCOM3_Handler+0xc>)
    4580:	68db      	ldr	r3, [r3, #12]
    4582:	2003      	movs	r0, #3
    4584:	4798      	blx	r3
    4586:	bd10      	pop	{r4, pc}
    4588:	20000164 	.word	0x20000164

0000458c <SERCOM4_Handler>:
    458c:	b510      	push	{r4, lr}
    458e:	4b02      	ldr	r3, [pc, #8]	; (4598 <SERCOM4_Handler+0xc>)
    4590:	691b      	ldr	r3, [r3, #16]
    4592:	2004      	movs	r0, #4
    4594:	4798      	blx	r3
    4596:	bd10      	pop	{r4, pc}
    4598:	20000164 	.word	0x20000164

0000459c <SERCOM5_Handler>:
    459c:	b510      	push	{r4, lr}
    459e:	4b02      	ldr	r3, [pc, #8]	; (45a8 <SERCOM5_Handler+0xc>)
    45a0:	695b      	ldr	r3, [r3, #20]
    45a2:	2005      	movs	r0, #5
    45a4:	4798      	blx	r3
    45a6:	bd10      	pop	{r4, pc}
    45a8:	20000164 	.word	0x20000164

000045ac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    45ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ae:	46de      	mov	lr, fp
    45b0:	4657      	mov	r7, sl
    45b2:	464e      	mov	r6, r9
    45b4:	4645      	mov	r5, r8
    45b6:	b5e0      	push	{r5, r6, r7, lr}
    45b8:	b091      	sub	sp, #68	; 0x44
    45ba:	0005      	movs	r5, r0
    45bc:	000c      	movs	r4, r1
    45be:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    45c0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45c2:	0008      	movs	r0, r1
    45c4:	4bbc      	ldr	r3, [pc, #752]	; (48b8 <usart_init+0x30c>)
    45c6:	4798      	blx	r3
    45c8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    45ca:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    45cc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    45ce:	07db      	lsls	r3, r3, #31
    45d0:	d506      	bpl.n	45e0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    45d2:	b011      	add	sp, #68	; 0x44
    45d4:	bc3c      	pop	{r2, r3, r4, r5}
    45d6:	4690      	mov	r8, r2
    45d8:	4699      	mov	r9, r3
    45da:	46a2      	mov	sl, r4
    45dc:	46ab      	mov	fp, r5
    45de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    45e0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    45e2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    45e4:	079b      	lsls	r3, r3, #30
    45e6:	d4f4      	bmi.n	45d2 <usart_init+0x26>
    45e8:	49b4      	ldr	r1, [pc, #720]	; (48bc <usart_init+0x310>)
    45ea:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    45ec:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    45ee:	2301      	movs	r3, #1
    45f0:	40bb      	lsls	r3, r7
    45f2:	4303      	orrs	r3, r0
    45f4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    45f6:	a90f      	add	r1, sp, #60	; 0x3c
    45f8:	272d      	movs	r7, #45	; 0x2d
    45fa:	5df3      	ldrb	r3, [r6, r7]
    45fc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45fe:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4600:	b2d3      	uxtb	r3, r2
    4602:	9302      	str	r3, [sp, #8]
    4604:	0018      	movs	r0, r3
    4606:	4bae      	ldr	r3, [pc, #696]	; (48c0 <usart_init+0x314>)
    4608:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    460a:	9802      	ldr	r0, [sp, #8]
    460c:	4bad      	ldr	r3, [pc, #692]	; (48c4 <usart_init+0x318>)
    460e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4610:	5df0      	ldrb	r0, [r6, r7]
    4612:	2100      	movs	r1, #0
    4614:	4bac      	ldr	r3, [pc, #688]	; (48c8 <usart_init+0x31c>)
    4616:	4798      	blx	r3
	module->character_size = config->character_size;
    4618:	7af3      	ldrb	r3, [r6, #11]
    461a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    461c:	2324      	movs	r3, #36	; 0x24
    461e:	5cf3      	ldrb	r3, [r6, r3]
    4620:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4622:	2325      	movs	r3, #37	; 0x25
    4624:	5cf3      	ldrb	r3, [r6, r3]
    4626:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4628:	7ef3      	ldrb	r3, [r6, #27]
    462a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    462c:	7f33      	ldrb	r3, [r6, #28]
    462e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4630:	682b      	ldr	r3, [r5, #0]
    4632:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4634:	0018      	movs	r0, r3
    4636:	4ba0      	ldr	r3, [pc, #640]	; (48b8 <usart_init+0x30c>)
    4638:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    463a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    463c:	2200      	movs	r2, #0
    463e:	230e      	movs	r3, #14
    4640:	a906      	add	r1, sp, #24
    4642:	468c      	mov	ip, r1
    4644:	4463      	add	r3, ip
    4646:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4648:	8a32      	ldrh	r2, [r6, #16]
    464a:	9202      	str	r2, [sp, #8]
    464c:	2380      	movs	r3, #128	; 0x80
    464e:	01db      	lsls	r3, r3, #7
    4650:	429a      	cmp	r2, r3
    4652:	d100      	bne.n	4656 <usart_init+0xaa>
    4654:	e09e      	b.n	4794 <usart_init+0x1e8>
    4656:	d90f      	bls.n	4678 <usart_init+0xcc>
    4658:	23c0      	movs	r3, #192	; 0xc0
    465a:	01db      	lsls	r3, r3, #7
    465c:	9a02      	ldr	r2, [sp, #8]
    465e:	429a      	cmp	r2, r3
    4660:	d100      	bne.n	4664 <usart_init+0xb8>
    4662:	e092      	b.n	478a <usart_init+0x1de>
    4664:	2380      	movs	r3, #128	; 0x80
    4666:	021b      	lsls	r3, r3, #8
    4668:	429a      	cmp	r2, r3
    466a:	d000      	beq.n	466e <usart_init+0xc2>
    466c:	e11f      	b.n	48ae <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    466e:	2303      	movs	r3, #3
    4670:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4672:	2300      	movs	r3, #0
    4674:	9307      	str	r3, [sp, #28]
    4676:	e008      	b.n	468a <usart_init+0xde>
	switch (config->sample_rate) {
    4678:	2380      	movs	r3, #128	; 0x80
    467a:	019b      	lsls	r3, r3, #6
    467c:	429a      	cmp	r2, r3
    467e:	d000      	beq.n	4682 <usart_init+0xd6>
    4680:	e115      	b.n	48ae <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4682:	2310      	movs	r3, #16
    4684:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4686:	3b0f      	subs	r3, #15
    4688:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    468a:	6833      	ldr	r3, [r6, #0]
    468c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    468e:	68f3      	ldr	r3, [r6, #12]
    4690:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4692:	6973      	ldr	r3, [r6, #20]
    4694:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4696:	7e33      	ldrb	r3, [r6, #24]
    4698:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    469a:	2326      	movs	r3, #38	; 0x26
    469c:	5cf3      	ldrb	r3, [r6, r3]
    469e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    46a0:	6873      	ldr	r3, [r6, #4]
    46a2:	4699      	mov	r9, r3
	switch (transfer_mode)
    46a4:	2b00      	cmp	r3, #0
    46a6:	d100      	bne.n	46aa <usart_init+0xfe>
    46a8:	e0a0      	b.n	47ec <usart_init+0x240>
    46aa:	2380      	movs	r3, #128	; 0x80
    46ac:	055b      	lsls	r3, r3, #21
    46ae:	4599      	cmp	r9, r3
    46b0:	d100      	bne.n	46b4 <usart_init+0x108>
    46b2:	e084      	b.n	47be <usart_init+0x212>
	if(config->encoding_format_enable) {
    46b4:	7e73      	ldrb	r3, [r6, #25]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d002      	beq.n	46c0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    46ba:	7eb3      	ldrb	r3, [r6, #26]
    46bc:	4642      	mov	r2, r8
    46be:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    46c0:	682a      	ldr	r2, [r5, #0]
    46c2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    46c4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    46c6:	2b00      	cmp	r3, #0
    46c8:	d1fc      	bne.n	46c4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    46ca:	330e      	adds	r3, #14
    46cc:	aa06      	add	r2, sp, #24
    46ce:	4694      	mov	ip, r2
    46d0:	4463      	add	r3, ip
    46d2:	881b      	ldrh	r3, [r3, #0]
    46d4:	4642      	mov	r2, r8
    46d6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    46d8:	9b05      	ldr	r3, [sp, #20]
    46da:	9a03      	ldr	r2, [sp, #12]
    46dc:	4313      	orrs	r3, r2
    46de:	9a04      	ldr	r2, [sp, #16]
    46e0:	4313      	orrs	r3, r2
    46e2:	464a      	mov	r2, r9
    46e4:	4313      	orrs	r3, r2
    46e6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    46e8:	465b      	mov	r3, fp
    46ea:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    46ec:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    46ee:	4653      	mov	r3, sl
    46f0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    46f2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    46f4:	2327      	movs	r3, #39	; 0x27
    46f6:	5cf3      	ldrb	r3, [r6, r3]
    46f8:	2b00      	cmp	r3, #0
    46fa:	d101      	bne.n	4700 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    46fc:	3304      	adds	r3, #4
    46fe:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4700:	7e73      	ldrb	r3, [r6, #25]
    4702:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4704:	7f32      	ldrb	r2, [r6, #28]
    4706:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4708:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    470a:	7f72      	ldrb	r2, [r6, #29]
    470c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    470e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4710:	2224      	movs	r2, #36	; 0x24
    4712:	5cb2      	ldrb	r2, [r6, r2]
    4714:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4716:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4718:	2225      	movs	r2, #37	; 0x25
    471a:	5cb2      	ldrb	r2, [r6, r2]
    471c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    471e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4720:	7ab1      	ldrb	r1, [r6, #10]
    4722:	7af2      	ldrb	r2, [r6, #11]
    4724:	4311      	orrs	r1, r2
    4726:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4728:	8933      	ldrh	r3, [r6, #8]
    472a:	2bff      	cmp	r3, #255	; 0xff
    472c:	d100      	bne.n	4730 <usart_init+0x184>
    472e:	e081      	b.n	4834 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4730:	2280      	movs	r2, #128	; 0x80
    4732:	0452      	lsls	r2, r2, #17
    4734:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4736:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4738:	232c      	movs	r3, #44	; 0x2c
    473a:	5cf3      	ldrb	r3, [r6, r3]
    473c:	2b00      	cmp	r3, #0
    473e:	d103      	bne.n	4748 <usart_init+0x19c>
    4740:	4b62      	ldr	r3, [pc, #392]	; (48cc <usart_init+0x320>)
    4742:	789b      	ldrb	r3, [r3, #2]
    4744:	079b      	lsls	r3, r3, #30
    4746:	d501      	bpl.n	474c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4748:	2380      	movs	r3, #128	; 0x80
    474a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    474c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    474e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4750:	2b00      	cmp	r3, #0
    4752:	d1fc      	bne.n	474e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4754:	4643      	mov	r3, r8
    4756:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4758:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    475a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    475c:	2b00      	cmp	r3, #0
    475e:	d1fc      	bne.n	475a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4760:	4643      	mov	r3, r8
    4762:	601f      	str	r7, [r3, #0]
    4764:	ab0e      	add	r3, sp, #56	; 0x38
    4766:	2280      	movs	r2, #128	; 0x80
    4768:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    476a:	2200      	movs	r2, #0
    476c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    476e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4770:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4772:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4774:	930a      	str	r3, [sp, #40]	; 0x28
    4776:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4778:	930b      	str	r3, [sp, #44]	; 0x2c
    477a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    477c:	930c      	str	r3, [sp, #48]	; 0x30
    477e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4780:	9302      	str	r3, [sp, #8]
    4782:	930d      	str	r3, [sp, #52]	; 0x34
    4784:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4786:	ae0a      	add	r6, sp, #40	; 0x28
    4788:	e063      	b.n	4852 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    478a:	2308      	movs	r3, #8
    478c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    478e:	3b07      	subs	r3, #7
    4790:	9307      	str	r3, [sp, #28]
    4792:	e77a      	b.n	468a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4794:	6833      	ldr	r3, [r6, #0]
    4796:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4798:	68f3      	ldr	r3, [r6, #12]
    479a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    479c:	6973      	ldr	r3, [r6, #20]
    479e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    47a0:	7e33      	ldrb	r3, [r6, #24]
    47a2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    47a4:	2326      	movs	r3, #38	; 0x26
    47a6:	5cf3      	ldrb	r3, [r6, r3]
    47a8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    47aa:	6873      	ldr	r3, [r6, #4]
    47ac:	4699      	mov	r9, r3
	switch (transfer_mode)
    47ae:	2b00      	cmp	r3, #0
    47b0:	d018      	beq.n	47e4 <usart_init+0x238>
    47b2:	2380      	movs	r3, #128	; 0x80
    47b4:	055b      	lsls	r3, r3, #21
    47b6:	4599      	cmp	r9, r3
    47b8:	d001      	beq.n	47be <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    47ba:	2000      	movs	r0, #0
    47bc:	e025      	b.n	480a <usart_init+0x25e>
			if (!config->use_external_clock) {
    47be:	2327      	movs	r3, #39	; 0x27
    47c0:	5cf3      	ldrb	r3, [r6, r3]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d000      	beq.n	47c8 <usart_init+0x21c>
    47c6:	e775      	b.n	46b4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    47c8:	6a33      	ldr	r3, [r6, #32]
    47ca:	001f      	movs	r7, r3
    47cc:	b2c0      	uxtb	r0, r0
    47ce:	4b40      	ldr	r3, [pc, #256]	; (48d0 <usart_init+0x324>)
    47d0:	4798      	blx	r3
    47d2:	0001      	movs	r1, r0
    47d4:	220e      	movs	r2, #14
    47d6:	ab06      	add	r3, sp, #24
    47d8:	469c      	mov	ip, r3
    47da:	4462      	add	r2, ip
    47dc:	0038      	movs	r0, r7
    47de:	4b3d      	ldr	r3, [pc, #244]	; (48d4 <usart_init+0x328>)
    47e0:	4798      	blx	r3
    47e2:	e012      	b.n	480a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    47e4:	2308      	movs	r3, #8
    47e6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    47e8:	2300      	movs	r3, #0
    47ea:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    47ec:	2327      	movs	r3, #39	; 0x27
    47ee:	5cf3      	ldrb	r3, [r6, r3]
    47f0:	2b00      	cmp	r3, #0
    47f2:	d00e      	beq.n	4812 <usart_init+0x266>
				status_code =
    47f4:	9b06      	ldr	r3, [sp, #24]
    47f6:	9300      	str	r3, [sp, #0]
    47f8:	9b07      	ldr	r3, [sp, #28]
    47fa:	220e      	movs	r2, #14
    47fc:	a906      	add	r1, sp, #24
    47fe:	468c      	mov	ip, r1
    4800:	4462      	add	r2, ip
    4802:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4804:	6a30      	ldr	r0, [r6, #32]
    4806:	4f34      	ldr	r7, [pc, #208]	; (48d8 <usart_init+0x32c>)
    4808:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    480a:	2800      	cmp	r0, #0
    480c:	d000      	beq.n	4810 <usart_init+0x264>
    480e:	e6e0      	b.n	45d2 <usart_init+0x26>
    4810:	e750      	b.n	46b4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    4812:	6a33      	ldr	r3, [r6, #32]
    4814:	001f      	movs	r7, r3
    4816:	b2c0      	uxtb	r0, r0
    4818:	4b2d      	ldr	r3, [pc, #180]	; (48d0 <usart_init+0x324>)
    481a:	4798      	blx	r3
    481c:	0001      	movs	r1, r0
				status_code =
    481e:	9b06      	ldr	r3, [sp, #24]
    4820:	9300      	str	r3, [sp, #0]
    4822:	9b07      	ldr	r3, [sp, #28]
    4824:	220e      	movs	r2, #14
    4826:	a806      	add	r0, sp, #24
    4828:	4684      	mov	ip, r0
    482a:	4462      	add	r2, ip
    482c:	0038      	movs	r0, r7
    482e:	4f2a      	ldr	r7, [pc, #168]	; (48d8 <usart_init+0x32c>)
    4830:	47b8      	blx	r7
    4832:	e7ea      	b.n	480a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4834:	7ef3      	ldrb	r3, [r6, #27]
    4836:	2b00      	cmp	r3, #0
    4838:	d100      	bne.n	483c <usart_init+0x290>
    483a:	e77d      	b.n	4738 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    483c:	2380      	movs	r3, #128	; 0x80
    483e:	04db      	lsls	r3, r3, #19
    4840:	431f      	orrs	r7, r3
    4842:	e779      	b.n	4738 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4844:	0020      	movs	r0, r4
    4846:	4b25      	ldr	r3, [pc, #148]	; (48dc <usart_init+0x330>)
    4848:	4798      	blx	r3
    484a:	e007      	b.n	485c <usart_init+0x2b0>
    484c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    484e:	2f04      	cmp	r7, #4
    4850:	d00d      	beq.n	486e <usart_init+0x2c2>
    4852:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4854:	00bb      	lsls	r3, r7, #2
    4856:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4858:	2800      	cmp	r0, #0
    485a:	d0f3      	beq.n	4844 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    485c:	1c43      	adds	r3, r0, #1
    485e:	d0f5      	beq.n	484c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4860:	a90e      	add	r1, sp, #56	; 0x38
    4862:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4864:	0c00      	lsrs	r0, r0, #16
    4866:	b2c0      	uxtb	r0, r0
    4868:	4b1d      	ldr	r3, [pc, #116]	; (48e0 <usart_init+0x334>)
    486a:	4798      	blx	r3
    486c:	e7ee      	b.n	484c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    486e:	2300      	movs	r3, #0
    4870:	60eb      	str	r3, [r5, #12]
    4872:	612b      	str	r3, [r5, #16]
    4874:	616b      	str	r3, [r5, #20]
    4876:	61ab      	str	r3, [r5, #24]
    4878:	61eb      	str	r3, [r5, #28]
    487a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    487c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    487e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4880:	2200      	movs	r2, #0
    4882:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4884:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4886:	3330      	adds	r3, #48	; 0x30
    4888:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    488a:	3301      	adds	r3, #1
    488c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    488e:	3301      	adds	r3, #1
    4890:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4892:	3301      	adds	r3, #1
    4894:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4896:	6828      	ldr	r0, [r5, #0]
    4898:	4b07      	ldr	r3, [pc, #28]	; (48b8 <usart_init+0x30c>)
    489a:	4798      	blx	r3
    489c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    489e:	4911      	ldr	r1, [pc, #68]	; (48e4 <usart_init+0x338>)
    48a0:	4b11      	ldr	r3, [pc, #68]	; (48e8 <usart_init+0x33c>)
    48a2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    48a4:	00a4      	lsls	r4, r4, #2
    48a6:	4b11      	ldr	r3, [pc, #68]	; (48ec <usart_init+0x340>)
    48a8:	50e5      	str	r5, [r4, r3]
	return status_code;
    48aa:	2000      	movs	r0, #0
    48ac:	e691      	b.n	45d2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48ae:	2310      	movs	r3, #16
    48b0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48b2:	2300      	movs	r3, #0
    48b4:	9307      	str	r3, [sp, #28]
    48b6:	e6e8      	b.n	468a <usart_init+0xde>
    48b8:	000044a5 	.word	0x000044a5
    48bc:	40000400 	.word	0x40000400
    48c0:	00004f89 	.word	0x00004f89
    48c4:	00004efd 	.word	0x00004efd
    48c8:	000042e1 	.word	0x000042e1
    48cc:	41002000 	.word	0x41002000
    48d0:	00004fa5 	.word	0x00004fa5
    48d4:	00004223 	.word	0x00004223
    48d8:	0000424d 	.word	0x0000424d
    48dc:	0000432d 	.word	0x0000432d
    48e0:	00005081 	.word	0x00005081
    48e4:	0000498d 	.word	0x0000498d
    48e8:	000044e1 	.word	0x000044e1
    48ec:	20005168 	.word	0x20005168

000048f0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    48f0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    48f2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    48f4:	2a00      	cmp	r2, #0
    48f6:	d101      	bne.n	48fc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    48f8:	0018      	movs	r0, r3
    48fa:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    48fc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    48fe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4900:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4902:	2a00      	cmp	r2, #0
    4904:	d1f8      	bne.n	48f8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4906:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    4908:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    490a:	2a00      	cmp	r2, #0
    490c:	d1fc      	bne.n	4908 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    490e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4910:	2102      	movs	r1, #2
    4912:	7e1a      	ldrb	r2, [r3, #24]
    4914:	420a      	tst	r2, r1
    4916:	d0fc      	beq.n	4912 <usart_write_wait+0x22>
	return STATUS_OK;
    4918:	2300      	movs	r3, #0
    491a:	e7ed      	b.n	48f8 <usart_write_wait+0x8>

0000491c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    491c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    491e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4920:	2a00      	cmp	r2, #0
    4922:	d101      	bne.n	4928 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4924:	0018      	movs	r0, r3
    4926:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4928:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    492a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    492c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    492e:	2a00      	cmp	r2, #0
    4930:	d1f8      	bne.n	4924 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4932:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4934:	7e10      	ldrb	r0, [r2, #24]
    4936:	0740      	lsls	r0, r0, #29
    4938:	d5f4      	bpl.n	4924 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    493a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    493c:	2b00      	cmp	r3, #0
    493e:	d1fc      	bne.n	493a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4940:	8b53      	ldrh	r3, [r2, #26]
    4942:	b2db      	uxtb	r3, r3
	if (error_code) {
    4944:	0698      	lsls	r0, r3, #26
    4946:	d01d      	beq.n	4984 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4948:	0798      	lsls	r0, r3, #30
    494a:	d503      	bpl.n	4954 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    494c:	2302      	movs	r3, #2
    494e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4950:	3318      	adds	r3, #24
    4952:	e7e7      	b.n	4924 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4954:	0758      	lsls	r0, r3, #29
    4956:	d503      	bpl.n	4960 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4958:	2304      	movs	r3, #4
    495a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    495c:	331a      	adds	r3, #26
    495e:	e7e1      	b.n	4924 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4960:	07d8      	lsls	r0, r3, #31
    4962:	d503      	bpl.n	496c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4964:	2301      	movs	r3, #1
    4966:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4968:	3312      	adds	r3, #18
    496a:	e7db      	b.n	4924 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    496c:	06d8      	lsls	r0, r3, #27
    496e:	d503      	bpl.n	4978 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4970:	2310      	movs	r3, #16
    4972:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4974:	3332      	adds	r3, #50	; 0x32
    4976:	e7d5      	b.n	4924 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4978:	069b      	lsls	r3, r3, #26
    497a:	d503      	bpl.n	4984 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    497c:	2320      	movs	r3, #32
    497e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4980:	3321      	adds	r3, #33	; 0x21
    4982:	e7cf      	b.n	4924 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4984:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4986:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4988:	2300      	movs	r3, #0
    498a:	e7cb      	b.n	4924 <usart_read_wait+0x8>

0000498c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    498e:	0080      	lsls	r0, r0, #2
    4990:	4b62      	ldr	r3, [pc, #392]	; (4b1c <_usart_interrupt_handler+0x190>)
    4992:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4994:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4996:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4998:	2b00      	cmp	r3, #0
    499a:	d1fc      	bne.n	4996 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    499c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    499e:	7da6      	ldrb	r6, [r4, #22]
    49a0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    49a2:	2330      	movs	r3, #48	; 0x30
    49a4:	5ceb      	ldrb	r3, [r5, r3]
    49a6:	2231      	movs	r2, #49	; 0x31
    49a8:	5caf      	ldrb	r7, [r5, r2]
    49aa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    49ac:	07f3      	lsls	r3, r6, #31
    49ae:	d522      	bpl.n	49f6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    49b0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    49b2:	b29b      	uxth	r3, r3
    49b4:	2b00      	cmp	r3, #0
    49b6:	d01c      	beq.n	49f2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    49b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    49ba:	7813      	ldrb	r3, [r2, #0]
    49bc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    49be:	1c51      	adds	r1, r2, #1
    49c0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    49c2:	7969      	ldrb	r1, [r5, #5]
    49c4:	2901      	cmp	r1, #1
    49c6:	d00e      	beq.n	49e6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    49c8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    49ca:	05db      	lsls	r3, r3, #23
    49cc:	0ddb      	lsrs	r3, r3, #23
    49ce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    49d0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    49d2:	3b01      	subs	r3, #1
    49d4:	b29b      	uxth	r3, r3
    49d6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    49d8:	2b00      	cmp	r3, #0
    49da:	d10c      	bne.n	49f6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    49dc:	3301      	adds	r3, #1
    49de:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    49e0:	3301      	adds	r3, #1
    49e2:	75a3      	strb	r3, [r4, #22]
    49e4:	e007      	b.n	49f6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    49e6:	7851      	ldrb	r1, [r2, #1]
    49e8:	0209      	lsls	r1, r1, #8
    49ea:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    49ec:	3202      	adds	r2, #2
    49ee:	62aa      	str	r2, [r5, #40]	; 0x28
    49f0:	e7eb      	b.n	49ca <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    49f2:	2301      	movs	r3, #1
    49f4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    49f6:	07b3      	lsls	r3, r6, #30
    49f8:	d506      	bpl.n	4a08 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    49fa:	2302      	movs	r3, #2
    49fc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    49fe:	2200      	movs	r2, #0
    4a00:	3331      	adds	r3, #49	; 0x31
    4a02:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4a04:	07fb      	lsls	r3, r7, #31
    4a06:	d41a      	bmi.n	4a3e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4a08:	0773      	lsls	r3, r6, #29
    4a0a:	d565      	bpl.n	4ad8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4a0c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4a0e:	b29b      	uxth	r3, r3
    4a10:	2b00      	cmp	r3, #0
    4a12:	d05f      	beq.n	4ad4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4a14:	8b63      	ldrh	r3, [r4, #26]
    4a16:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4a18:	071a      	lsls	r2, r3, #28
    4a1a:	d414      	bmi.n	4a46 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4a1c:	223f      	movs	r2, #63	; 0x3f
    4a1e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4a20:	2b00      	cmp	r3, #0
    4a22:	d034      	beq.n	4a8e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4a24:	079a      	lsls	r2, r3, #30
    4a26:	d511      	bpl.n	4a4c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4a28:	221a      	movs	r2, #26
    4a2a:	2332      	movs	r3, #50	; 0x32
    4a2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4a2e:	3b30      	subs	r3, #48	; 0x30
    4a30:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4a32:	077b      	lsls	r3, r7, #29
    4a34:	d550      	bpl.n	4ad8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4a36:	0028      	movs	r0, r5
    4a38:	696b      	ldr	r3, [r5, #20]
    4a3a:	4798      	blx	r3
    4a3c:	e04c      	b.n	4ad8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4a3e:	0028      	movs	r0, r5
    4a40:	68eb      	ldr	r3, [r5, #12]
    4a42:	4798      	blx	r3
    4a44:	e7e0      	b.n	4a08 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4a46:	2237      	movs	r2, #55	; 0x37
    4a48:	4013      	ands	r3, r2
    4a4a:	e7e9      	b.n	4a20 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4a4c:	075a      	lsls	r2, r3, #29
    4a4e:	d505      	bpl.n	4a5c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4a50:	221e      	movs	r2, #30
    4a52:	2332      	movs	r3, #50	; 0x32
    4a54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4a56:	3b2e      	subs	r3, #46	; 0x2e
    4a58:	8363      	strh	r3, [r4, #26]
    4a5a:	e7ea      	b.n	4a32 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4a5c:	07da      	lsls	r2, r3, #31
    4a5e:	d505      	bpl.n	4a6c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4a60:	2213      	movs	r2, #19
    4a62:	2332      	movs	r3, #50	; 0x32
    4a64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4a66:	3b31      	subs	r3, #49	; 0x31
    4a68:	8363      	strh	r3, [r4, #26]
    4a6a:	e7e2      	b.n	4a32 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4a6c:	06da      	lsls	r2, r3, #27
    4a6e:	d505      	bpl.n	4a7c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4a70:	2242      	movs	r2, #66	; 0x42
    4a72:	2332      	movs	r3, #50	; 0x32
    4a74:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4a76:	3b22      	subs	r3, #34	; 0x22
    4a78:	8363      	strh	r3, [r4, #26]
    4a7a:	e7da      	b.n	4a32 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4a7c:	2220      	movs	r2, #32
    4a7e:	421a      	tst	r2, r3
    4a80:	d0d7      	beq.n	4a32 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4a82:	3221      	adds	r2, #33	; 0x21
    4a84:	2332      	movs	r3, #50	; 0x32
    4a86:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4a88:	3b12      	subs	r3, #18
    4a8a:	8363      	strh	r3, [r4, #26]
    4a8c:	e7d1      	b.n	4a32 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4a8e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4a90:	05db      	lsls	r3, r3, #23
    4a92:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4a94:	b2da      	uxtb	r2, r3
    4a96:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4a98:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4a9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4a9c:	1c51      	adds	r1, r2, #1
    4a9e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4aa0:	7969      	ldrb	r1, [r5, #5]
    4aa2:	2901      	cmp	r1, #1
    4aa4:	d010      	beq.n	4ac8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4aa6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4aa8:	3b01      	subs	r3, #1
    4aaa:	b29b      	uxth	r3, r3
    4aac:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d112      	bne.n	4ad8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4ab2:	3304      	adds	r3, #4
    4ab4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4ab6:	2200      	movs	r2, #0
    4ab8:	332e      	adds	r3, #46	; 0x2e
    4aba:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4abc:	07bb      	lsls	r3, r7, #30
    4abe:	d50b      	bpl.n	4ad8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4ac0:	0028      	movs	r0, r5
    4ac2:	692b      	ldr	r3, [r5, #16]
    4ac4:	4798      	blx	r3
    4ac6:	e007      	b.n	4ad8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4ac8:	0a1b      	lsrs	r3, r3, #8
    4aca:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4acc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4ace:	3301      	adds	r3, #1
    4ad0:	626b      	str	r3, [r5, #36]	; 0x24
    4ad2:	e7e8      	b.n	4aa6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4ad4:	2304      	movs	r3, #4
    4ad6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4ad8:	06f3      	lsls	r3, r6, #27
    4ada:	d504      	bpl.n	4ae6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4adc:	2310      	movs	r3, #16
    4ade:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4ae0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4ae2:	06fb      	lsls	r3, r7, #27
    4ae4:	d40e      	bmi.n	4b04 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4ae6:	06b3      	lsls	r3, r6, #26
    4ae8:	d504      	bpl.n	4af4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4aea:	2320      	movs	r3, #32
    4aec:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4aee:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4af0:	073b      	lsls	r3, r7, #28
    4af2:	d40b      	bmi.n	4b0c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4af4:	0733      	lsls	r3, r6, #28
    4af6:	d504      	bpl.n	4b02 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4af8:	2308      	movs	r3, #8
    4afa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4afc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4afe:	06bb      	lsls	r3, r7, #26
    4b00:	d408      	bmi.n	4b14 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4b04:	0028      	movs	r0, r5
    4b06:	69eb      	ldr	r3, [r5, #28]
    4b08:	4798      	blx	r3
    4b0a:	e7ec      	b.n	4ae6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4b0c:	0028      	movs	r0, r5
    4b0e:	69ab      	ldr	r3, [r5, #24]
    4b10:	4798      	blx	r3
    4b12:	e7ef      	b.n	4af4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4b14:	6a2b      	ldr	r3, [r5, #32]
    4b16:	0028      	movs	r0, r5
    4b18:	4798      	blx	r3
}
    4b1a:	e7f2      	b.n	4b02 <_usart_interrupt_handler+0x176>
    4b1c:	20005168 	.word	0x20005168

00004b20 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4b20:	b510      	push	{r4, lr}
	switch (clock_source) {
    4b22:	2808      	cmp	r0, #8
    4b24:	d803      	bhi.n	4b2e <system_clock_source_get_hz+0xe>
    4b26:	0080      	lsls	r0, r0, #2
    4b28:	4b1c      	ldr	r3, [pc, #112]	; (4b9c <system_clock_source_get_hz+0x7c>)
    4b2a:	581b      	ldr	r3, [r3, r0]
    4b2c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4b2e:	2000      	movs	r0, #0
    4b30:	e032      	b.n	4b98 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    4b32:	4b1b      	ldr	r3, [pc, #108]	; (4ba0 <system_clock_source_get_hz+0x80>)
    4b34:	6918      	ldr	r0, [r3, #16]
    4b36:	e02f      	b.n	4b98 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4b38:	4b1a      	ldr	r3, [pc, #104]	; (4ba4 <system_clock_source_get_hz+0x84>)
    4b3a:	6a1b      	ldr	r3, [r3, #32]
    4b3c:	059b      	lsls	r3, r3, #22
    4b3e:	0f9b      	lsrs	r3, r3, #30
    4b40:	4819      	ldr	r0, [pc, #100]	; (4ba8 <system_clock_source_get_hz+0x88>)
    4b42:	40d8      	lsrs	r0, r3
    4b44:	e028      	b.n	4b98 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    4b46:	4b16      	ldr	r3, [pc, #88]	; (4ba0 <system_clock_source_get_hz+0x80>)
    4b48:	6958      	ldr	r0, [r3, #20]
    4b4a:	e025      	b.n	4b98 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4b4c:	4b14      	ldr	r3, [pc, #80]	; (4ba0 <system_clock_source_get_hz+0x80>)
    4b4e:	681b      	ldr	r3, [r3, #0]
			return 0;
    4b50:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4b52:	079b      	lsls	r3, r3, #30
    4b54:	d520      	bpl.n	4b98 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4b56:	4913      	ldr	r1, [pc, #76]	; (4ba4 <system_clock_source_get_hz+0x84>)
    4b58:	2210      	movs	r2, #16
    4b5a:	68cb      	ldr	r3, [r1, #12]
    4b5c:	421a      	tst	r2, r3
    4b5e:	d0fc      	beq.n	4b5a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    4b60:	4b0f      	ldr	r3, [pc, #60]	; (4ba0 <system_clock_source_get_hz+0x80>)
    4b62:	681a      	ldr	r2, [r3, #0]
    4b64:	2324      	movs	r3, #36	; 0x24
    4b66:	4013      	ands	r3, r2
    4b68:	2b04      	cmp	r3, #4
    4b6a:	d001      	beq.n	4b70 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    4b6c:	480f      	ldr	r0, [pc, #60]	; (4bac <system_clock_source_get_hz+0x8c>)
    4b6e:	e013      	b.n	4b98 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4b70:	2000      	movs	r0, #0
    4b72:	4b0f      	ldr	r3, [pc, #60]	; (4bb0 <system_clock_source_get_hz+0x90>)
    4b74:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4b76:	4b0a      	ldr	r3, [pc, #40]	; (4ba0 <system_clock_source_get_hz+0x80>)
    4b78:	689b      	ldr	r3, [r3, #8]
    4b7a:	041b      	lsls	r3, r3, #16
    4b7c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4b7e:	4358      	muls	r0, r3
    4b80:	e00a      	b.n	4b98 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4b82:	2350      	movs	r3, #80	; 0x50
    4b84:	4a07      	ldr	r2, [pc, #28]	; (4ba4 <system_clock_source_get_hz+0x84>)
    4b86:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4b88:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4b8a:	075b      	lsls	r3, r3, #29
    4b8c:	d504      	bpl.n	4b98 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    4b8e:	4b04      	ldr	r3, [pc, #16]	; (4ba0 <system_clock_source_get_hz+0x80>)
    4b90:	68d8      	ldr	r0, [r3, #12]
    4b92:	e001      	b.n	4b98 <system_clock_source_get_hz+0x78>
		return 32768UL;
    4b94:	2080      	movs	r0, #128	; 0x80
    4b96:	0200      	lsls	r0, r0, #8
	}
}
    4b98:	bd10      	pop	{r4, pc}
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	00008d10 	.word	0x00008d10
    4ba0:	2000017c 	.word	0x2000017c
    4ba4:	40000800 	.word	0x40000800
    4ba8:	007a1200 	.word	0x007a1200
    4bac:	02dc6c00 	.word	0x02dc6c00
    4bb0:	00004fa5 	.word	0x00004fa5

00004bb4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4bb4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4bb6:	490c      	ldr	r1, [pc, #48]	; (4be8 <system_clock_source_osc8m_set_config+0x34>)
    4bb8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4bba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4bbc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4bbe:	7840      	ldrb	r0, [r0, #1]
    4bc0:	2201      	movs	r2, #1
    4bc2:	4010      	ands	r0, r2
    4bc4:	0180      	lsls	r0, r0, #6
    4bc6:	2640      	movs	r6, #64	; 0x40
    4bc8:	43b3      	bics	r3, r6
    4bca:	4303      	orrs	r3, r0
    4bcc:	402a      	ands	r2, r5
    4bce:	01d2      	lsls	r2, r2, #7
    4bd0:	2080      	movs	r0, #128	; 0x80
    4bd2:	4383      	bics	r3, r0
    4bd4:	4313      	orrs	r3, r2
    4bd6:	2203      	movs	r2, #3
    4bd8:	4022      	ands	r2, r4
    4bda:	0212      	lsls	r2, r2, #8
    4bdc:	4803      	ldr	r0, [pc, #12]	; (4bec <system_clock_source_osc8m_set_config+0x38>)
    4bde:	4003      	ands	r3, r0
    4be0:	4313      	orrs	r3, r2
    4be2:	620b      	str	r3, [r1, #32]
}
    4be4:	bd70      	pop	{r4, r5, r6, pc}
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	40000800 	.word	0x40000800
    4bec:	fffffcff 	.word	0xfffffcff

00004bf0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4bf0:	2808      	cmp	r0, #8
    4bf2:	d803      	bhi.n	4bfc <system_clock_source_enable+0xc>
    4bf4:	0080      	lsls	r0, r0, #2
    4bf6:	4b25      	ldr	r3, [pc, #148]	; (4c8c <system_clock_source_enable+0x9c>)
    4bf8:	581b      	ldr	r3, [r3, r0]
    4bfa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4bfc:	2017      	movs	r0, #23
    4bfe:	e044      	b.n	4c8a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4c00:	4a23      	ldr	r2, [pc, #140]	; (4c90 <system_clock_source_enable+0xa0>)
    4c02:	6a13      	ldr	r3, [r2, #32]
    4c04:	2102      	movs	r1, #2
    4c06:	430b      	orrs	r3, r1
    4c08:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4c0a:	2000      	movs	r0, #0
    4c0c:	e03d      	b.n	4c8a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4c0e:	4a20      	ldr	r2, [pc, #128]	; (4c90 <system_clock_source_enable+0xa0>)
    4c10:	6993      	ldr	r3, [r2, #24]
    4c12:	2102      	movs	r1, #2
    4c14:	430b      	orrs	r3, r1
    4c16:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4c18:	2000      	movs	r0, #0
		break;
    4c1a:	e036      	b.n	4c8a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4c1c:	4a1c      	ldr	r2, [pc, #112]	; (4c90 <system_clock_source_enable+0xa0>)
    4c1e:	8a13      	ldrh	r3, [r2, #16]
    4c20:	2102      	movs	r1, #2
    4c22:	430b      	orrs	r3, r1
    4c24:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4c26:	2000      	movs	r0, #0
		break;
    4c28:	e02f      	b.n	4c8a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4c2a:	4a19      	ldr	r2, [pc, #100]	; (4c90 <system_clock_source_enable+0xa0>)
    4c2c:	8a93      	ldrh	r3, [r2, #20]
    4c2e:	2102      	movs	r1, #2
    4c30:	430b      	orrs	r3, r1
    4c32:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4c34:	2000      	movs	r0, #0
		break;
    4c36:	e028      	b.n	4c8a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4c38:	4916      	ldr	r1, [pc, #88]	; (4c94 <system_clock_source_enable+0xa4>)
    4c3a:	680b      	ldr	r3, [r1, #0]
    4c3c:	2202      	movs	r2, #2
    4c3e:	4313      	orrs	r3, r2
    4c40:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4c42:	4b13      	ldr	r3, [pc, #76]	; (4c90 <system_clock_source_enable+0xa0>)
    4c44:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c46:	0019      	movs	r1, r3
    4c48:	320e      	adds	r2, #14
    4c4a:	68cb      	ldr	r3, [r1, #12]
    4c4c:	421a      	tst	r2, r3
    4c4e:	d0fc      	beq.n	4c4a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4c50:	4a10      	ldr	r2, [pc, #64]	; (4c94 <system_clock_source_enable+0xa4>)
    4c52:	6891      	ldr	r1, [r2, #8]
    4c54:	4b0e      	ldr	r3, [pc, #56]	; (4c90 <system_clock_source_enable+0xa0>)
    4c56:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4c58:	6852      	ldr	r2, [r2, #4]
    4c5a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4c5c:	2200      	movs	r2, #0
    4c5e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c60:	0019      	movs	r1, r3
    4c62:	3210      	adds	r2, #16
    4c64:	68cb      	ldr	r3, [r1, #12]
    4c66:	421a      	tst	r2, r3
    4c68:	d0fc      	beq.n	4c64 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4c6a:	4b0a      	ldr	r3, [pc, #40]	; (4c94 <system_clock_source_enable+0xa4>)
    4c6c:	681b      	ldr	r3, [r3, #0]
    4c6e:	b29b      	uxth	r3, r3
    4c70:	4a07      	ldr	r2, [pc, #28]	; (4c90 <system_clock_source_enable+0xa0>)
    4c72:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4c74:	2000      	movs	r0, #0
    4c76:	e008      	b.n	4c8a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4c78:	4905      	ldr	r1, [pc, #20]	; (4c90 <system_clock_source_enable+0xa0>)
    4c7a:	2244      	movs	r2, #68	; 0x44
    4c7c:	5c8b      	ldrb	r3, [r1, r2]
    4c7e:	2002      	movs	r0, #2
    4c80:	4303      	orrs	r3, r0
    4c82:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4c84:	2000      	movs	r0, #0
		break;
    4c86:	e000      	b.n	4c8a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4c88:	2000      	movs	r0, #0
}
    4c8a:	4770      	bx	lr
    4c8c:	00008d34 	.word	0x00008d34
    4c90:	40000800 	.word	0x40000800
    4c94:	2000017c 	.word	0x2000017c

00004c98 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c9a:	46c6      	mov	lr, r8
    4c9c:	b500      	push	{lr}
    4c9e:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4ca0:	22c2      	movs	r2, #194	; 0xc2
    4ca2:	00d2      	lsls	r2, r2, #3
    4ca4:	4b21      	ldr	r3, [pc, #132]	; (4d2c <system_clock_init+0x94>)
    4ca6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4ca8:	4a21      	ldr	r2, [pc, #132]	; (4d30 <system_clock_init+0x98>)
    4caa:	6853      	ldr	r3, [r2, #4]
    4cac:	211e      	movs	r1, #30
    4cae:	438b      	bics	r3, r1
    4cb0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4cb2:	2301      	movs	r3, #1
    4cb4:	466a      	mov	r2, sp
    4cb6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4cb8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4cba:	4d1e      	ldr	r5, [pc, #120]	; (4d34 <system_clock_init+0x9c>)
    4cbc:	b2e0      	uxtb	r0, r4
    4cbe:	4669      	mov	r1, sp
    4cc0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4cc2:	3401      	adds	r4, #1
    4cc4:	2c25      	cmp	r4, #37	; 0x25
    4cc6:	d1f9      	bne.n	4cbc <system_clock_init+0x24>
	config->run_in_standby  = false;
    4cc8:	a803      	add	r0, sp, #12
    4cca:	2400      	movs	r4, #0
    4ccc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    4cce:	2301      	movs	r3, #1
    4cd0:	4698      	mov	r8, r3
    4cd2:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4cd4:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4cd6:	4b18      	ldr	r3, [pc, #96]	; (4d38 <system_clock_init+0xa0>)
    4cd8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4cda:	2006      	movs	r0, #6
    4cdc:	4b17      	ldr	r3, [pc, #92]	; (4d3c <system_clock_init+0xa4>)
    4cde:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4ce0:	4b17      	ldr	r3, [pc, #92]	; (4d40 <system_clock_init+0xa8>)
    4ce2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    4ce4:	466b      	mov	r3, sp
    4ce6:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4ce8:	2706      	movs	r7, #6
    4cea:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    4cec:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4cee:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4cf0:	2310      	movs	r3, #16
    4cf2:	9301      	str	r3, [sp, #4]
    4cf4:	4669      	mov	r1, sp
    4cf6:	2003      	movs	r0, #3
    4cf8:	4e12      	ldr	r6, [pc, #72]	; (4d44 <system_clock_init+0xac>)
    4cfa:	47b0      	blx	r6
    4cfc:	2003      	movs	r0, #3
    4cfe:	4d12      	ldr	r5, [pc, #72]	; (4d48 <system_clock_init+0xb0>)
    4d00:	47a8      	blx	r5
	PM->CPUSEL.reg = (uint32_t)divider;
    4d02:	4b12      	ldr	r3, [pc, #72]	; (4d4c <system_clock_init+0xb4>)
    4d04:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4d06:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4d08:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4d0a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    4d0c:	4643      	mov	r3, r8
    4d0e:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    4d10:	466b      	mov	r3, sp
    4d12:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4d14:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    4d16:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4d18:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4d1a:	4669      	mov	r1, sp
    4d1c:	2000      	movs	r0, #0
    4d1e:	47b0      	blx	r6
    4d20:	2000      	movs	r0, #0
    4d22:	47a8      	blx	r5
#endif
}
    4d24:	b004      	add	sp, #16
    4d26:	bc04      	pop	{r2}
    4d28:	4690      	mov	r8, r2
    4d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d2c:	40000800 	.word	0x40000800
    4d30:	41004000 	.word	0x41004000
    4d34:	00004f89 	.word	0x00004f89
    4d38:	00004bb5 	.word	0x00004bb5
    4d3c:	00004bf1 	.word	0x00004bf1
    4d40:	00004d51 	.word	0x00004d51
    4d44:	00004d75 	.word	0x00004d75
    4d48:	00004e2d 	.word	0x00004e2d
    4d4c:	40000400 	.word	0x40000400

00004d50 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4d50:	4a06      	ldr	r2, [pc, #24]	; (4d6c <system_gclk_init+0x1c>)
    4d52:	6993      	ldr	r3, [r2, #24]
    4d54:	2108      	movs	r1, #8
    4d56:	430b      	orrs	r3, r1
    4d58:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4d5a:	2201      	movs	r2, #1
    4d5c:	4b04      	ldr	r3, [pc, #16]	; (4d70 <system_gclk_init+0x20>)
    4d5e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4d60:	0019      	movs	r1, r3
    4d62:	780b      	ldrb	r3, [r1, #0]
    4d64:	4213      	tst	r3, r2
    4d66:	d1fc      	bne.n	4d62 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	40000400 	.word	0x40000400
    4d70:	40000c00 	.word	0x40000c00

00004d74 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4d74:	b570      	push	{r4, r5, r6, lr}
    4d76:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4d78:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4d7a:	780d      	ldrb	r5, [r1, #0]
    4d7c:	022d      	lsls	r5, r5, #8
    4d7e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4d80:	784b      	ldrb	r3, [r1, #1]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d002      	beq.n	4d8c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4d86:	2380      	movs	r3, #128	; 0x80
    4d88:	02db      	lsls	r3, r3, #11
    4d8a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4d8c:	7a4b      	ldrb	r3, [r1, #9]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d002      	beq.n	4d98 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4d92:	2380      	movs	r3, #128	; 0x80
    4d94:	031b      	lsls	r3, r3, #12
    4d96:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4d98:	6848      	ldr	r0, [r1, #4]
    4d9a:	2801      	cmp	r0, #1
    4d9c:	d910      	bls.n	4dc0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4d9e:	1e43      	subs	r3, r0, #1
    4da0:	4218      	tst	r0, r3
    4da2:	d134      	bne.n	4e0e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4da4:	2802      	cmp	r0, #2
    4da6:	d930      	bls.n	4e0a <system_gclk_gen_set_config+0x96>
    4da8:	2302      	movs	r3, #2
    4daa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4dac:	3201      	adds	r2, #1
						mask <<= 1) {
    4dae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4db0:	4298      	cmp	r0, r3
    4db2:	d8fb      	bhi.n	4dac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4db4:	0212      	lsls	r2, r2, #8
    4db6:	4332      	orrs	r2, r6
    4db8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4dba:	2380      	movs	r3, #128	; 0x80
    4dbc:	035b      	lsls	r3, r3, #13
    4dbe:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4dc0:	7a0b      	ldrb	r3, [r1, #8]
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d002      	beq.n	4dcc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4dc6:	2380      	movs	r3, #128	; 0x80
    4dc8:	039b      	lsls	r3, r3, #14
    4dca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4dcc:	4a13      	ldr	r2, [pc, #76]	; (4e1c <system_gclk_gen_set_config+0xa8>)
    4dce:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4dd0:	b25b      	sxtb	r3, r3
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	dbfb      	blt.n	4dce <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    4dd6:	4b12      	ldr	r3, [pc, #72]	; (4e20 <system_gclk_gen_set_config+0xac>)
    4dd8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4dda:	4b12      	ldr	r3, [pc, #72]	; (4e24 <system_gclk_gen_set_config+0xb0>)
    4ddc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4dde:	4a0f      	ldr	r2, [pc, #60]	; (4e1c <system_gclk_gen_set_config+0xa8>)
    4de0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4de2:	b25b      	sxtb	r3, r3
    4de4:	2b00      	cmp	r3, #0
    4de6:	dbfb      	blt.n	4de0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4de8:	4b0c      	ldr	r3, [pc, #48]	; (4e1c <system_gclk_gen_set_config+0xa8>)
    4dea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4dec:	001a      	movs	r2, r3
    4dee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4df0:	b25b      	sxtb	r3, r3
    4df2:	2b00      	cmp	r3, #0
    4df4:	dbfb      	blt.n	4dee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4df6:	4a09      	ldr	r2, [pc, #36]	; (4e1c <system_gclk_gen_set_config+0xa8>)
    4df8:	6853      	ldr	r3, [r2, #4]
    4dfa:	2180      	movs	r1, #128	; 0x80
    4dfc:	0249      	lsls	r1, r1, #9
    4dfe:	400b      	ands	r3, r1
    4e00:	431d      	orrs	r5, r3
    4e02:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4e04:	4b08      	ldr	r3, [pc, #32]	; (4e28 <system_gclk_gen_set_config+0xb4>)
    4e06:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4e08:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4e0a:	2200      	movs	r2, #0
    4e0c:	e7d2      	b.n	4db4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4e0e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4e10:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4e12:	2380      	movs	r3, #128	; 0x80
    4e14:	029b      	lsls	r3, r3, #10
    4e16:	431d      	orrs	r5, r3
    4e18:	e7d2      	b.n	4dc0 <system_gclk_gen_set_config+0x4c>
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	40000c00 	.word	0x40000c00
    4e20:	0000409d 	.word	0x0000409d
    4e24:	40000c08 	.word	0x40000c08
    4e28:	000040dd 	.word	0x000040dd

00004e2c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4e2c:	b510      	push	{r4, lr}
    4e2e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e30:	4a0b      	ldr	r2, [pc, #44]	; (4e60 <system_gclk_gen_enable+0x34>)
    4e32:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e34:	b25b      	sxtb	r3, r3
    4e36:	2b00      	cmp	r3, #0
    4e38:	dbfb      	blt.n	4e32 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    4e3a:	4b0a      	ldr	r3, [pc, #40]	; (4e64 <system_gclk_gen_enable+0x38>)
    4e3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e3e:	4b0a      	ldr	r3, [pc, #40]	; (4e68 <system_gclk_gen_enable+0x3c>)
    4e40:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e42:	4a07      	ldr	r2, [pc, #28]	; (4e60 <system_gclk_gen_enable+0x34>)
    4e44:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e46:	b25b      	sxtb	r3, r3
    4e48:	2b00      	cmp	r3, #0
    4e4a:	dbfb      	blt.n	4e44 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4e4c:	4a04      	ldr	r2, [pc, #16]	; (4e60 <system_gclk_gen_enable+0x34>)
    4e4e:	6851      	ldr	r1, [r2, #4]
    4e50:	2380      	movs	r3, #128	; 0x80
    4e52:	025b      	lsls	r3, r3, #9
    4e54:	430b      	orrs	r3, r1
    4e56:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    4e58:	4b04      	ldr	r3, [pc, #16]	; (4e6c <system_gclk_gen_enable+0x40>)
    4e5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4e5c:	bd10      	pop	{r4, pc}
    4e5e:	46c0      	nop			; (mov r8, r8)
    4e60:	40000c00 	.word	0x40000c00
    4e64:	0000409d 	.word	0x0000409d
    4e68:	40000c04 	.word	0x40000c04
    4e6c:	000040dd 	.word	0x000040dd

00004e70 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4e70:	b570      	push	{r4, r5, r6, lr}
    4e72:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e74:	4a1a      	ldr	r2, [pc, #104]	; (4ee0 <system_gclk_gen_get_hz+0x70>)
    4e76:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e78:	b25b      	sxtb	r3, r3
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	dbfb      	blt.n	4e76 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    4e7e:	4b19      	ldr	r3, [pc, #100]	; (4ee4 <system_gclk_gen_get_hz+0x74>)
    4e80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e82:	4b19      	ldr	r3, [pc, #100]	; (4ee8 <system_gclk_gen_get_hz+0x78>)
    4e84:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e86:	4a16      	ldr	r2, [pc, #88]	; (4ee0 <system_gclk_gen_get_hz+0x70>)
    4e88:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e8a:	b25b      	sxtb	r3, r3
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	dbfb      	blt.n	4e88 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4e90:	4e13      	ldr	r6, [pc, #76]	; (4ee0 <system_gclk_gen_get_hz+0x70>)
    4e92:	6870      	ldr	r0, [r6, #4]
    4e94:	04c0      	lsls	r0, r0, #19
    4e96:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4e98:	4b14      	ldr	r3, [pc, #80]	; (4eec <system_gclk_gen_get_hz+0x7c>)
    4e9a:	4798      	blx	r3
    4e9c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e9e:	4b12      	ldr	r3, [pc, #72]	; (4ee8 <system_gclk_gen_get_hz+0x78>)
    4ea0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4ea2:	6876      	ldr	r6, [r6, #4]
    4ea4:	02f6      	lsls	r6, r6, #11
    4ea6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4ea8:	4b11      	ldr	r3, [pc, #68]	; (4ef0 <system_gclk_gen_get_hz+0x80>)
    4eaa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4eac:	4a0c      	ldr	r2, [pc, #48]	; (4ee0 <system_gclk_gen_get_hz+0x70>)
    4eae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4eb0:	b25b      	sxtb	r3, r3
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	dbfb      	blt.n	4eae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4eb6:	4b0a      	ldr	r3, [pc, #40]	; (4ee0 <system_gclk_gen_get_hz+0x70>)
    4eb8:	689c      	ldr	r4, [r3, #8]
    4eba:	0224      	lsls	r4, r4, #8
    4ebc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4ebe:	4b0d      	ldr	r3, [pc, #52]	; (4ef4 <system_gclk_gen_get_hz+0x84>)
    4ec0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4ec2:	2e00      	cmp	r6, #0
    4ec4:	d107      	bne.n	4ed6 <system_gclk_gen_get_hz+0x66>
    4ec6:	2c01      	cmp	r4, #1
    4ec8:	d907      	bls.n	4eda <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4eca:	0021      	movs	r1, r4
    4ecc:	0028      	movs	r0, r5
    4ece:	4b0a      	ldr	r3, [pc, #40]	; (4ef8 <system_gclk_gen_get_hz+0x88>)
    4ed0:	4798      	blx	r3
    4ed2:	0005      	movs	r5, r0
    4ed4:	e001      	b.n	4eda <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4ed6:	3401      	adds	r4, #1
    4ed8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4eda:	0028      	movs	r0, r5
    4edc:	bd70      	pop	{r4, r5, r6, pc}
    4ede:	46c0      	nop			; (mov r8, r8)
    4ee0:	40000c00 	.word	0x40000c00
    4ee4:	0000409d 	.word	0x0000409d
    4ee8:	40000c04 	.word	0x40000c04
    4eec:	00004b21 	.word	0x00004b21
    4ef0:	40000c08 	.word	0x40000c08
    4ef4:	000040dd 	.word	0x000040dd
    4ef8:	0000700d 	.word	0x0000700d

00004efc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4efc:	b510      	push	{r4, lr}
    4efe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4f00:	4b06      	ldr	r3, [pc, #24]	; (4f1c <system_gclk_chan_enable+0x20>)
    4f02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f04:	4b06      	ldr	r3, [pc, #24]	; (4f20 <system_gclk_chan_enable+0x24>)
    4f06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4f08:	4a06      	ldr	r2, [pc, #24]	; (4f24 <system_gclk_chan_enable+0x28>)
    4f0a:	8853      	ldrh	r3, [r2, #2]
    4f0c:	2180      	movs	r1, #128	; 0x80
    4f0e:	01c9      	lsls	r1, r1, #7
    4f10:	430b      	orrs	r3, r1
    4f12:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4f14:	4b04      	ldr	r3, [pc, #16]	; (4f28 <system_gclk_chan_enable+0x2c>)
    4f16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f18:	bd10      	pop	{r4, pc}
    4f1a:	46c0      	nop			; (mov r8, r8)
    4f1c:	0000409d 	.word	0x0000409d
    4f20:	40000c02 	.word	0x40000c02
    4f24:	40000c00 	.word	0x40000c00
    4f28:	000040dd 	.word	0x000040dd

00004f2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4f2c:	b510      	push	{r4, lr}
    4f2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4f30:	4b0f      	ldr	r3, [pc, #60]	; (4f70 <system_gclk_chan_disable+0x44>)
    4f32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f34:	4b0f      	ldr	r3, [pc, #60]	; (4f74 <system_gclk_chan_disable+0x48>)
    4f36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4f38:	4a0f      	ldr	r2, [pc, #60]	; (4f78 <system_gclk_chan_disable+0x4c>)
    4f3a:	8853      	ldrh	r3, [r2, #2]
    4f3c:	051b      	lsls	r3, r3, #20
    4f3e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4f40:	8853      	ldrh	r3, [r2, #2]
    4f42:	490e      	ldr	r1, [pc, #56]	; (4f7c <system_gclk_chan_disable+0x50>)
    4f44:	400b      	ands	r3, r1
    4f46:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4f48:	8853      	ldrh	r3, [r2, #2]
    4f4a:	490d      	ldr	r1, [pc, #52]	; (4f80 <system_gclk_chan_disable+0x54>)
    4f4c:	400b      	ands	r3, r1
    4f4e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4f50:	0011      	movs	r1, r2
    4f52:	2280      	movs	r2, #128	; 0x80
    4f54:	01d2      	lsls	r2, r2, #7
    4f56:	884b      	ldrh	r3, [r1, #2]
    4f58:	4213      	tst	r3, r2
    4f5a:	d1fc      	bne.n	4f56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4f5c:	4906      	ldr	r1, [pc, #24]	; (4f78 <system_gclk_chan_disable+0x4c>)
    4f5e:	884a      	ldrh	r2, [r1, #2]
    4f60:	0203      	lsls	r3, r0, #8
    4f62:	4806      	ldr	r0, [pc, #24]	; (4f7c <system_gclk_chan_disable+0x50>)
    4f64:	4002      	ands	r2, r0
    4f66:	4313      	orrs	r3, r2
    4f68:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    4f6a:	4b06      	ldr	r3, [pc, #24]	; (4f84 <system_gclk_chan_disable+0x58>)
    4f6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f6e:	bd10      	pop	{r4, pc}
    4f70:	0000409d 	.word	0x0000409d
    4f74:	40000c02 	.word	0x40000c02
    4f78:	40000c00 	.word	0x40000c00
    4f7c:	fffff0ff 	.word	0xfffff0ff
    4f80:	ffffbfff 	.word	0xffffbfff
    4f84:	000040dd 	.word	0x000040dd

00004f88 <system_gclk_chan_set_config>:
{
    4f88:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4f8a:	780c      	ldrb	r4, [r1, #0]
    4f8c:	0224      	lsls	r4, r4, #8
    4f8e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4f90:	4b02      	ldr	r3, [pc, #8]	; (4f9c <system_gclk_chan_set_config+0x14>)
    4f92:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4f94:	b2a4      	uxth	r4, r4
    4f96:	4b02      	ldr	r3, [pc, #8]	; (4fa0 <system_gclk_chan_set_config+0x18>)
    4f98:	805c      	strh	r4, [r3, #2]
}
    4f9a:	bd10      	pop	{r4, pc}
    4f9c:	00004f2d 	.word	0x00004f2d
    4fa0:	40000c00 	.word	0x40000c00

00004fa4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4fa4:	b510      	push	{r4, lr}
    4fa6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4fa8:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <system_gclk_chan_get_hz+0x20>)
    4faa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4fac:	4b06      	ldr	r3, [pc, #24]	; (4fc8 <system_gclk_chan_get_hz+0x24>)
    4fae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4fb0:	4b06      	ldr	r3, [pc, #24]	; (4fcc <system_gclk_chan_get_hz+0x28>)
    4fb2:	885c      	ldrh	r4, [r3, #2]
    4fb4:	0524      	lsls	r4, r4, #20
    4fb6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4fb8:	4b05      	ldr	r3, [pc, #20]	; (4fd0 <system_gclk_chan_get_hz+0x2c>)
    4fba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4fbc:	0020      	movs	r0, r4
    4fbe:	4b05      	ldr	r3, [pc, #20]	; (4fd4 <system_gclk_chan_get_hz+0x30>)
    4fc0:	4798      	blx	r3
}
    4fc2:	bd10      	pop	{r4, pc}
    4fc4:	0000409d 	.word	0x0000409d
    4fc8:	40000c02 	.word	0x40000c02
    4fcc:	40000c00 	.word	0x40000c00
    4fd0:	000040dd 	.word	0x000040dd
    4fd4:	00004e71 	.word	0x00004e71

00004fd8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4fd8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4fda:	78d3      	ldrb	r3, [r2, #3]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d135      	bne.n	504c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4fe0:	7813      	ldrb	r3, [r2, #0]
    4fe2:	2b80      	cmp	r3, #128	; 0x80
    4fe4:	d029      	beq.n	503a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4fe6:	061b      	lsls	r3, r3, #24
    4fe8:	2480      	movs	r4, #128	; 0x80
    4fea:	0264      	lsls	r4, r4, #9
    4fec:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4fee:	7854      	ldrb	r4, [r2, #1]
    4ff0:	2502      	movs	r5, #2
    4ff2:	43ac      	bics	r4, r5
    4ff4:	d106      	bne.n	5004 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4ff6:	7894      	ldrb	r4, [r2, #2]
    4ff8:	2c00      	cmp	r4, #0
    4ffa:	d120      	bne.n	503e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4ffc:	2480      	movs	r4, #128	; 0x80
    4ffe:	02a4      	lsls	r4, r4, #10
    5000:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5002:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5004:	7854      	ldrb	r4, [r2, #1]
    5006:	3c01      	subs	r4, #1
    5008:	2c01      	cmp	r4, #1
    500a:	d91c      	bls.n	5046 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    500c:	040d      	lsls	r5, r1, #16
    500e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5010:	24a0      	movs	r4, #160	; 0xa0
    5012:	05e4      	lsls	r4, r4, #23
    5014:	432c      	orrs	r4, r5
    5016:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5018:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    501a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    501c:	24d0      	movs	r4, #208	; 0xd0
    501e:	0624      	lsls	r4, r4, #24
    5020:	432c      	orrs	r4, r5
    5022:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5024:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5026:	78d4      	ldrb	r4, [r2, #3]
    5028:	2c00      	cmp	r4, #0
    502a:	d122      	bne.n	5072 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    502c:	035b      	lsls	r3, r3, #13
    502e:	d51c      	bpl.n	506a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5030:	7893      	ldrb	r3, [r2, #2]
    5032:	2b01      	cmp	r3, #1
    5034:	d01e      	beq.n	5074 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5036:	6141      	str	r1, [r0, #20]
    5038:	e017      	b.n	506a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    503a:	2300      	movs	r3, #0
    503c:	e7d7      	b.n	4fee <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    503e:	24c0      	movs	r4, #192	; 0xc0
    5040:	02e4      	lsls	r4, r4, #11
    5042:	4323      	orrs	r3, r4
    5044:	e7dd      	b.n	5002 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5046:	4c0d      	ldr	r4, [pc, #52]	; (507c <_system_pinmux_config+0xa4>)
    5048:	4023      	ands	r3, r4
    504a:	e7df      	b.n	500c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    504c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    504e:	040c      	lsls	r4, r1, #16
    5050:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5052:	23a0      	movs	r3, #160	; 0xa0
    5054:	05db      	lsls	r3, r3, #23
    5056:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5058:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    505a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    505c:	23d0      	movs	r3, #208	; 0xd0
    505e:	061b      	lsls	r3, r3, #24
    5060:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5062:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5064:	78d3      	ldrb	r3, [r2, #3]
    5066:	2b00      	cmp	r3, #0
    5068:	d103      	bne.n	5072 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    506a:	7853      	ldrb	r3, [r2, #1]
    506c:	3b01      	subs	r3, #1
    506e:	2b01      	cmp	r3, #1
    5070:	d902      	bls.n	5078 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5072:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5074:	6181      	str	r1, [r0, #24]
    5076:	e7f8      	b.n	506a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5078:	6081      	str	r1, [r0, #8]
}
    507a:	e7fa      	b.n	5072 <_system_pinmux_config+0x9a>
    507c:	fffbffff 	.word	0xfffbffff

00005080 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5080:	b510      	push	{r4, lr}
    5082:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5084:	09c1      	lsrs	r1, r0, #7
		return NULL;
    5086:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5088:	2900      	cmp	r1, #0
    508a:	d104      	bne.n	5096 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    508c:	0943      	lsrs	r3, r0, #5
    508e:	01db      	lsls	r3, r3, #7
    5090:	4905      	ldr	r1, [pc, #20]	; (50a8 <system_pinmux_pin_set_config+0x28>)
    5092:	468c      	mov	ip, r1
    5094:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5096:	241f      	movs	r4, #31
    5098:	4020      	ands	r0, r4
    509a:	2101      	movs	r1, #1
    509c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    509e:	0018      	movs	r0, r3
    50a0:	4b02      	ldr	r3, [pc, #8]	; (50ac <system_pinmux_pin_set_config+0x2c>)
    50a2:	4798      	blx	r3
}
    50a4:	bd10      	pop	{r4, pc}
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	41004400 	.word	0x41004400
    50ac:	00004fd9 	.word	0x00004fd9

000050b0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    50b0:	4770      	bx	lr
	...

000050b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    50b4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    50b6:	4b05      	ldr	r3, [pc, #20]	; (50cc <system_init+0x18>)
    50b8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    50ba:	4b05      	ldr	r3, [pc, #20]	; (50d0 <system_init+0x1c>)
    50bc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    50be:	4b05      	ldr	r3, [pc, #20]	; (50d4 <system_init+0x20>)
    50c0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    50c2:	4b05      	ldr	r3, [pc, #20]	; (50d8 <system_init+0x24>)
    50c4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    50c6:	4b05      	ldr	r3, [pc, #20]	; (50dc <system_init+0x28>)
    50c8:	4798      	blx	r3
}
    50ca:	bd10      	pop	{r4, pc}
    50cc:	00004c99 	.word	0x00004c99
    50d0:	0000410d 	.word	0x0000410d
    50d4:	000050b1 	.word	0x000050b1
    50d8:	000050b1 	.word	0x000050b1
    50dc:	000050b1 	.word	0x000050b1

000050e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    50e0:	e7fe      	b.n	50e0 <Dummy_Handler>
	...

000050e4 <Reset_Handler>:
{
    50e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    50e6:	4a2a      	ldr	r2, [pc, #168]	; (5190 <Reset_Handler+0xac>)
    50e8:	4b2a      	ldr	r3, [pc, #168]	; (5194 <Reset_Handler+0xb0>)
    50ea:	429a      	cmp	r2, r3
    50ec:	d011      	beq.n	5112 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    50ee:	001a      	movs	r2, r3
    50f0:	4b29      	ldr	r3, [pc, #164]	; (5198 <Reset_Handler+0xb4>)
    50f2:	429a      	cmp	r2, r3
    50f4:	d20d      	bcs.n	5112 <Reset_Handler+0x2e>
    50f6:	4a29      	ldr	r2, [pc, #164]	; (519c <Reset_Handler+0xb8>)
    50f8:	3303      	adds	r3, #3
    50fa:	1a9b      	subs	r3, r3, r2
    50fc:	089b      	lsrs	r3, r3, #2
    50fe:	3301      	adds	r3, #1
    5100:	009b      	lsls	r3, r3, #2
    5102:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5104:	4823      	ldr	r0, [pc, #140]	; (5194 <Reset_Handler+0xb0>)
    5106:	4922      	ldr	r1, [pc, #136]	; (5190 <Reset_Handler+0xac>)
    5108:	588c      	ldr	r4, [r1, r2]
    510a:	5084      	str	r4, [r0, r2]
    510c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    510e:	429a      	cmp	r2, r3
    5110:	d1fa      	bne.n	5108 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5112:	4a23      	ldr	r2, [pc, #140]	; (51a0 <Reset_Handler+0xbc>)
    5114:	4b23      	ldr	r3, [pc, #140]	; (51a4 <Reset_Handler+0xc0>)
    5116:	429a      	cmp	r2, r3
    5118:	d20a      	bcs.n	5130 <Reset_Handler+0x4c>
    511a:	43d3      	mvns	r3, r2
    511c:	4921      	ldr	r1, [pc, #132]	; (51a4 <Reset_Handler+0xc0>)
    511e:	185b      	adds	r3, r3, r1
    5120:	2103      	movs	r1, #3
    5122:	438b      	bics	r3, r1
    5124:	3304      	adds	r3, #4
    5126:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5128:	2100      	movs	r1, #0
    512a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    512c:	4293      	cmp	r3, r2
    512e:	d1fc      	bne.n	512a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5130:	4a1d      	ldr	r2, [pc, #116]	; (51a8 <Reset_Handler+0xc4>)
    5132:	21ff      	movs	r1, #255	; 0xff
    5134:	4b1d      	ldr	r3, [pc, #116]	; (51ac <Reset_Handler+0xc8>)
    5136:	438b      	bics	r3, r1
    5138:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    513a:	39fd      	subs	r1, #253	; 0xfd
    513c:	2390      	movs	r3, #144	; 0x90
    513e:	005b      	lsls	r3, r3, #1
    5140:	4a1b      	ldr	r2, [pc, #108]	; (51b0 <Reset_Handler+0xcc>)
    5142:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5144:	4a1b      	ldr	r2, [pc, #108]	; (51b4 <Reset_Handler+0xd0>)
    5146:	78d3      	ldrb	r3, [r2, #3]
    5148:	2503      	movs	r5, #3
    514a:	43ab      	bics	r3, r5
    514c:	2402      	movs	r4, #2
    514e:	4323      	orrs	r3, r4
    5150:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5152:	78d3      	ldrb	r3, [r2, #3]
    5154:	270c      	movs	r7, #12
    5156:	43bb      	bics	r3, r7
    5158:	2608      	movs	r6, #8
    515a:	4333      	orrs	r3, r6
    515c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    515e:	4b16      	ldr	r3, [pc, #88]	; (51b8 <Reset_Handler+0xd4>)
    5160:	7b98      	ldrb	r0, [r3, #14]
    5162:	2230      	movs	r2, #48	; 0x30
    5164:	4390      	bics	r0, r2
    5166:	2220      	movs	r2, #32
    5168:	4310      	orrs	r0, r2
    516a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    516c:	7b99      	ldrb	r1, [r3, #14]
    516e:	43b9      	bics	r1, r7
    5170:	4331      	orrs	r1, r6
    5172:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5174:	7b9a      	ldrb	r2, [r3, #14]
    5176:	43aa      	bics	r2, r5
    5178:	4322      	orrs	r2, r4
    517a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    517c:	4a0f      	ldr	r2, [pc, #60]	; (51bc <Reset_Handler+0xd8>)
    517e:	6853      	ldr	r3, [r2, #4]
    5180:	2180      	movs	r1, #128	; 0x80
    5182:	430b      	orrs	r3, r1
    5184:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    5186:	4b0e      	ldr	r3, [pc, #56]	; (51c0 <Reset_Handler+0xdc>)
    5188:	4798      	blx	r3
        main();
    518a:	4b0e      	ldr	r3, [pc, #56]	; (51c4 <Reset_Handler+0xe0>)
    518c:	4798      	blx	r3
    518e:	e7fe      	b.n	518e <Reset_Handler+0xaa>
    5190:	00009094 	.word	0x00009094
    5194:	20000000 	.word	0x20000000
    5198:	2000009c 	.word	0x2000009c
    519c:	20000004 	.word	0x20000004
    51a0:	2000009c 	.word	0x2000009c
    51a4:	200051f8 	.word	0x200051f8
    51a8:	e000ed00 	.word	0xe000ed00
    51ac:	00000000 	.word	0x00000000
    51b0:	41007000 	.word	0x41007000
    51b4:	41005000 	.word	0x41005000
    51b8:	41004800 	.word	0x41004800
    51bc:	41004000 	.word	0x41004000
    51c0:	00007619 	.word	0x00007619
    51c4:	00006fcd 	.word	0x00006fcd

000051c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    51c8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    51ca:	4a06      	ldr	r2, [pc, #24]	; (51e4 <_sbrk+0x1c>)
    51cc:	6812      	ldr	r2, [r2, #0]
    51ce:	2a00      	cmp	r2, #0
    51d0:	d004      	beq.n	51dc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    51d2:	4a04      	ldr	r2, [pc, #16]	; (51e4 <_sbrk+0x1c>)
    51d4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    51d6:	18c3      	adds	r3, r0, r3
    51d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    51da:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    51dc:	4902      	ldr	r1, [pc, #8]	; (51e8 <_sbrk+0x20>)
    51de:	4a01      	ldr	r2, [pc, #4]	; (51e4 <_sbrk+0x1c>)
    51e0:	6011      	str	r1, [r2, #0]
    51e2:	e7f6      	b.n	51d2 <_sbrk+0xa>
    51e4:	20000194 	.word	0x20000194
    51e8:	200071f8 	.word	0x200071f8

000051ec <_close>:
}

extern int _close(int file)
{
	return -1;
}
    51ec:	2001      	movs	r0, #1
    51ee:	4240      	negs	r0, r0
    51f0:	4770      	bx	lr

000051f2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    51f2:	2380      	movs	r3, #128	; 0x80
    51f4:	019b      	lsls	r3, r3, #6
    51f6:	604b      	str	r3, [r1, #4]

	return 0;
}
    51f8:	2000      	movs	r0, #0
    51fa:	4770      	bx	lr

000051fc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    51fc:	2001      	movs	r0, #1
    51fe:	4770      	bx	lr

00005200 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5200:	2000      	movs	r0, #0
    5202:	4770      	bx	lr

00005204 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5204:	0003      	movs	r3, r0
    5206:	3308      	adds	r3, #8
    5208:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    520a:	2201      	movs	r2, #1
    520c:	4252      	negs	r2, r2
    520e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5210:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5212:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    5214:	2300      	movs	r3, #0
    5216:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    5218:	4770      	bx	lr

0000521a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    521a:	2300      	movs	r3, #0
    521c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    521e:	4770      	bx	lr

00005220 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    5220:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    5222:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    5224:	689a      	ldr	r2, [r3, #8]
    5226:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    5228:	689a      	ldr	r2, [r3, #8]
    522a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    522c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    522e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    5230:	6803      	ldr	r3, [r0, #0]
    5232:	3301      	adds	r3, #1
    5234:	6003      	str	r3, [r0, #0]
}
    5236:	4770      	bx	lr

00005238 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    5238:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    523a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    523c:	0002      	movs	r2, r0
    523e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    5240:	1c63      	adds	r3, r4, #1
    5242:	d102      	bne.n	524a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    5244:	6902      	ldr	r2, [r0, #16]
    5246:	e004      	b.n	5252 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5248:	001a      	movs	r2, r3
    524a:	6853      	ldr	r3, [r2, #4]
    524c:	681d      	ldr	r5, [r3, #0]
    524e:	42ac      	cmp	r4, r5
    5250:	d2fa      	bcs.n	5248 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    5252:	6853      	ldr	r3, [r2, #4]
    5254:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    5256:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    5258:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    525a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    525c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    525e:	6803      	ldr	r3, [r0, #0]
    5260:	3301      	adds	r3, #1
    5262:	6003      	str	r3, [r0, #0]
}
    5264:	bd30      	pop	{r4, r5, pc}

00005266 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    5266:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    5268:	6842      	ldr	r2, [r0, #4]
    526a:	6881      	ldr	r1, [r0, #8]
    526c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    526e:	6882      	ldr	r2, [r0, #8]
    5270:	6841      	ldr	r1, [r0, #4]
    5272:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    5274:	685a      	ldr	r2, [r3, #4]
    5276:	4290      	cmp	r0, r2
    5278:	d006      	beq.n	5288 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    527a:	2200      	movs	r2, #0
    527c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    527e:	681a      	ldr	r2, [r3, #0]
    5280:	3a01      	subs	r2, #1
    5282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    5284:	6818      	ldr	r0, [r3, #0]
}
    5286:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    5288:	6882      	ldr	r2, [r0, #8]
    528a:	605a      	str	r2, [r3, #4]
    528c:	e7f5      	b.n	527a <uxListRemove+0x14>
	...

00005290 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    5290:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    5292:	2300      	movs	r3, #0
    5294:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    5296:	4b06      	ldr	r3, [pc, #24]	; (52b0 <prvTaskExitError+0x20>)
    5298:	681b      	ldr	r3, [r3, #0]
    529a:	3301      	adds	r3, #1
    529c:	d001      	beq.n	52a2 <prvTaskExitError+0x12>
    529e:	b672      	cpsid	i
    52a0:	e7fe      	b.n	52a0 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    52a2:	b672      	cpsid	i
	while( ulDummy == 0 )
    52a4:	9b01      	ldr	r3, [sp, #4]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d0fc      	beq.n	52a4 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    52aa:	b002      	add	sp, #8
    52ac:	4770      	bx	lr
    52ae:	46c0      	nop			; (mov r8, r8)
    52b0:	20000034 	.word	0x20000034
	...

000052c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    52c0:	4a0b      	ldr	r2, [pc, #44]	; (52f0 <pxCurrentTCBConst2>)
    52c2:	6813      	ldr	r3, [r2, #0]
    52c4:	6818      	ldr	r0, [r3, #0]
    52c6:	3020      	adds	r0, #32
    52c8:	f380 8809 	msr	PSP, r0
    52cc:	2002      	movs	r0, #2
    52ce:	f380 8814 	msr	CONTROL, r0
    52d2:	f3bf 8f6f 	isb	sy
    52d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    52d8:	46ae      	mov	lr, r5
    52da:	bc08      	pop	{r3}
    52dc:	bc04      	pop	{r2}
    52de:	b662      	cpsie	i
    52e0:	4718      	bx	r3
    52e2:	46c0      	nop			; (mov r8, r8)
    52e4:	46c0      	nop			; (mov r8, r8)
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	46c0      	nop			; (mov r8, r8)
    52ea:	46c0      	nop			; (mov r8, r8)
    52ec:	46c0      	nop			; (mov r8, r8)
    52ee:	46c0      	nop			; (mov r8, r8)

000052f0 <pxCurrentTCBConst2>:
    52f0:	20004fc0 	.word	0x20004fc0

000052f4 <pxPortInitialiseStack>:
{
    52f4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    52f6:	1f03      	subs	r3, r0, #4
    52f8:	2480      	movs	r4, #128	; 0x80
    52fa:	0464      	lsls	r4, r4, #17
    52fc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    52fe:	3b04      	subs	r3, #4
    5300:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    5302:	3b04      	subs	r3, #4
    5304:	4902      	ldr	r1, [pc, #8]	; (5310 <pxPortInitialiseStack+0x1c>)
    5306:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    5308:	3b14      	subs	r3, #20
    530a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    530c:	3840      	subs	r0, #64	; 0x40
}
    530e:	bd10      	pop	{r4, pc}
    5310:	00005291 	.word	0x00005291

00005314 <SVC_Handler>:
}
    5314:	4770      	bx	lr
	...

00005318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    5318:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    531a:	4b12      	ldr	r3, [pc, #72]	; (5364 <xPortStartScheduler+0x4c>)
    531c:	6819      	ldr	r1, [r3, #0]
    531e:	22ff      	movs	r2, #255	; 0xff
    5320:	0412      	lsls	r2, r2, #16
    5322:	430a      	orrs	r2, r1
    5324:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5326:	6819      	ldr	r1, [r3, #0]
    5328:	22ff      	movs	r2, #255	; 0xff
    532a:	0612      	lsls	r2, r2, #24
    532c:	430a      	orrs	r2, r1
    532e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    5330:	4d0d      	ldr	r5, [pc, #52]	; (5368 <xPortStartScheduler+0x50>)
    5332:	2400      	movs	r4, #0
    5334:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    5336:	4b0d      	ldr	r3, [pc, #52]	; (536c <xPortStartScheduler+0x54>)
    5338:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    533a:	2000      	movs	r0, #0
    533c:	4b0c      	ldr	r3, [pc, #48]	; (5370 <xPortStartScheduler+0x58>)
    533e:	4798      	blx	r3
    5340:	21c8      	movs	r1, #200	; 0xc8
    5342:	4b0c      	ldr	r3, [pc, #48]	; (5374 <xPortStartScheduler+0x5c>)
    5344:	4798      	blx	r3
    5346:	3801      	subs	r0, #1
    5348:	4b0b      	ldr	r3, [pc, #44]	; (5378 <xPortStartScheduler+0x60>)
    534a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    534c:	2307      	movs	r3, #7
    534e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    5350:	4b0a      	ldr	r3, [pc, #40]	; (537c <xPortStartScheduler+0x64>)
    5352:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    5354:	4b0a      	ldr	r3, [pc, #40]	; (5380 <xPortStartScheduler+0x68>)
    5356:	4798      	blx	r3
	vTaskSwitchContext();
    5358:	4b0a      	ldr	r3, [pc, #40]	; (5384 <xPortStartScheduler+0x6c>)
    535a:	4798      	blx	r3
	prvTaskExitError();
    535c:	4b0a      	ldr	r3, [pc, #40]	; (5388 <xPortStartScheduler+0x70>)
    535e:	4798      	blx	r3
}
    5360:	2000      	movs	r0, #0
    5362:	bd70      	pop	{r4, r5, r6, pc}
    5364:	e000ed20 	.word	0xe000ed20
    5368:	e000e010 	.word	0xe000e010
    536c:	e000e018 	.word	0xe000e018
    5370:	00004e71 	.word	0x00004e71
    5374:	0000700d 	.word	0x0000700d
    5378:	e000e014 	.word	0xe000e014
    537c:	20000034 	.word	0x20000034
    5380:	000052c1 	.word	0x000052c1
    5384:	00006345 	.word	0x00006345
    5388:	00005291 	.word	0x00005291

0000538c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    538c:	2280      	movs	r2, #128	; 0x80
    538e:	0552      	lsls	r2, r2, #21
    5390:	4b03      	ldr	r3, [pc, #12]	; (53a0 <vPortYield+0x14>)
    5392:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    5394:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    5398:	f3bf 8f6f 	isb	sy
}
    539c:	4770      	bx	lr
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	e000ed04 	.word	0xe000ed04

000053a4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    53a4:	b672      	cpsid	i
    uxCriticalNesting++;
    53a6:	4a04      	ldr	r2, [pc, #16]	; (53b8 <vPortEnterCritical+0x14>)
    53a8:	6813      	ldr	r3, [r2, #0]
    53aa:	3301      	adds	r3, #1
    53ac:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    53ae:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    53b2:	f3bf 8f6f 	isb	sy
}
    53b6:	4770      	bx	lr
    53b8:	20000034 	.word	0x20000034

000053bc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    53bc:	4b06      	ldr	r3, [pc, #24]	; (53d8 <vPortExitCritical+0x1c>)
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	2b00      	cmp	r3, #0
    53c2:	d101      	bne.n	53c8 <vPortExitCritical+0xc>
    53c4:	b672      	cpsid	i
    53c6:	e7fe      	b.n	53c6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    53c8:	3b01      	subs	r3, #1
    53ca:	4a03      	ldr	r2, [pc, #12]	; (53d8 <vPortExitCritical+0x1c>)
    53cc:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    53ce:	2b00      	cmp	r3, #0
    53d0:	d100      	bne.n	53d4 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    53d2:	b662      	cpsie	i
}
    53d4:	4770      	bx	lr
    53d6:	46c0      	nop			; (mov r8, r8)
    53d8:	20000034 	.word	0x20000034

000053dc <ulSetInterruptMaskFromISR>:
	__asm volatile(
    53dc:	f3ef 8010 	mrs	r0, PRIMASK
    53e0:	b672      	cpsid	i
    53e2:	4770      	bx	lr

000053e4 <vClearInterruptMaskFromISR>:
	__asm volatile(
    53e4:	f380 8810 	msr	PRIMASK, r0
    53e8:	4770      	bx	lr
    53ea:	0000      	movs	r0, r0
    53ec:	0000      	movs	r0, r0
	...

000053f0 <PendSV_Handler>:
	__asm volatile
    53f0:	f3ef 8009 	mrs	r0, PSP
    53f4:	4b0e      	ldr	r3, [pc, #56]	; (5430 <pxCurrentTCBConst>)
    53f6:	681a      	ldr	r2, [r3, #0]
    53f8:	3820      	subs	r0, #32
    53fa:	6010      	str	r0, [r2, #0]
    53fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    53fe:	4644      	mov	r4, r8
    5400:	464d      	mov	r5, r9
    5402:	4656      	mov	r6, sl
    5404:	465f      	mov	r7, fp
    5406:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    5408:	b508      	push	{r3, lr}
    540a:	b672      	cpsid	i
    540c:	f000 ff9a 	bl	6344 <vTaskSwitchContext>
    5410:	b662      	cpsie	i
    5412:	bc0c      	pop	{r2, r3}
    5414:	6811      	ldr	r1, [r2, #0]
    5416:	6808      	ldr	r0, [r1, #0]
    5418:	3010      	adds	r0, #16
    541a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    541c:	46a0      	mov	r8, r4
    541e:	46a9      	mov	r9, r5
    5420:	46b2      	mov	sl, r6
    5422:	46bb      	mov	fp, r7
    5424:	f380 8809 	msr	PSP, r0
    5428:	3820      	subs	r0, #32
    542a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    542c:	4718      	bx	r3
    542e:	46c0      	nop			; (mov r8, r8)

00005430 <pxCurrentTCBConst>:
    5430:	20004fc0 	.word	0x20004fc0

00005434 <SysTick_Handler>:
{
    5434:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    5436:	4b07      	ldr	r3, [pc, #28]	; (5454 <SysTick_Handler+0x20>)
    5438:	4798      	blx	r3
    543a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    543c:	4b06      	ldr	r3, [pc, #24]	; (5458 <SysTick_Handler+0x24>)
    543e:	4798      	blx	r3
    5440:	2800      	cmp	r0, #0
    5442:	d003      	beq.n	544c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5444:	2280      	movs	r2, #128	; 0x80
    5446:	0552      	lsls	r2, r2, #21
    5448:	4b04      	ldr	r3, [pc, #16]	; (545c <SysTick_Handler+0x28>)
    544a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    544c:	0020      	movs	r0, r4
    544e:	4b04      	ldr	r3, [pc, #16]	; (5460 <SysTick_Handler+0x2c>)
    5450:	4798      	blx	r3
}
    5452:	bd10      	pop	{r4, pc}
    5454:	000053dd 	.word	0x000053dd
    5458:	000060e5 	.word	0x000060e5
    545c:	e000ed04 	.word	0xe000ed04
    5460:	000053e5 	.word	0x000053e5

00005464 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5464:	b570      	push	{r4, r5, r6, lr}
    5466:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5468:	0743      	lsls	r3, r0, #29
    546a:	d002      	beq.n	5472 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    546c:	2307      	movs	r3, #7
    546e:	439c      	bics	r4, r3
    5470:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    5472:	4b11      	ldr	r3, [pc, #68]	; (54b8 <pvPortMalloc+0x54>)
    5474:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    5476:	4b11      	ldr	r3, [pc, #68]	; (54bc <pvPortMalloc+0x58>)
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	2b00      	cmp	r3, #0
    547c:	d010      	beq.n	54a0 <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    547e:	4b10      	ldr	r3, [pc, #64]	; (54c0 <pvPortMalloc+0x5c>)
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	18e4      	adds	r4, r4, r3
    5484:	4a0f      	ldr	r2, [pc, #60]	; (54c4 <pvPortMalloc+0x60>)
    5486:	4294      	cmp	r4, r2
    5488:	d811      	bhi.n	54ae <pvPortMalloc+0x4a>
    548a:	42a3      	cmp	r3, r4
    548c:	d211      	bcs.n	54b2 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    548e:	4a0b      	ldr	r2, [pc, #44]	; (54bc <pvPortMalloc+0x58>)
    5490:	6815      	ldr	r5, [r2, #0]
    5492:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    5494:	4b0a      	ldr	r3, [pc, #40]	; (54c0 <pvPortMalloc+0x5c>)
    5496:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    5498:	4b0b      	ldr	r3, [pc, #44]	; (54c8 <pvPortMalloc+0x64>)
    549a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    549c:	0028      	movs	r0, r5
    549e:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    54a0:	2207      	movs	r2, #7
    54a2:	4b0a      	ldr	r3, [pc, #40]	; (54cc <pvPortMalloc+0x68>)
    54a4:	3308      	adds	r3, #8
    54a6:	4393      	bics	r3, r2
    54a8:	4a04      	ldr	r2, [pc, #16]	; (54bc <pvPortMalloc+0x58>)
    54aa:	6013      	str	r3, [r2, #0]
    54ac:	e7e7      	b.n	547e <pvPortMalloc+0x1a>
void *pvReturn = NULL;
    54ae:	2500      	movs	r5, #0
    54b0:	e7f2      	b.n	5498 <pvPortMalloc+0x34>
    54b2:	2500      	movs	r5, #0
    54b4:	e7f0      	b.n	5498 <pvPortMalloc+0x34>
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	000060c9 	.word	0x000060c9
    54bc:	20000198 	.word	0x20000198
    54c0:	20004fbc 	.word	0x20004fbc
    54c4:	00004e17 	.word	0x00004e17
    54c8:	00006205 	.word	0x00006205
    54cc:	2000019c 	.word	0x2000019c

000054d0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    54d0:	2800      	cmp	r0, #0
    54d2:	d001      	beq.n	54d8 <vPortFree+0x8>
    54d4:	b672      	cpsid	i
    54d6:	e7fe      	b.n	54d6 <vPortFree+0x6>
}
    54d8:	4770      	bx	lr
	...

000054dc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    54dc:	b510      	push	{r4, lr}
    54de:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    54e0:	4b03      	ldr	r3, [pc, #12]	; (54f0 <prvIsQueueEmpty+0x14>)
    54e2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    54e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    54e6:	4b03      	ldr	r3, [pc, #12]	; (54f4 <prvIsQueueEmpty+0x18>)
    54e8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    54ea:	4260      	negs	r0, r4
    54ec:	4160      	adcs	r0, r4

	return xReturn;
}
    54ee:	bd10      	pop	{r4, pc}
    54f0:	000053a5 	.word	0x000053a5
    54f4:	000053bd 	.word	0x000053bd

000054f8 <prvCopyDataToQueue>:
{
    54f8:	b570      	push	{r4, r5, r6, lr}
    54fa:	0004      	movs	r4, r0
    54fc:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    54fe:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    5500:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5502:	2a00      	cmp	r2, #0
    5504:	d10b      	bne.n	551e <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    5506:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    5508:	6823      	ldr	r3, [r4, #0]
    550a:	4283      	cmp	r3, r0
    550c:	d104      	bne.n	5518 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    550e:	6860      	ldr	r0, [r4, #4]
    5510:	4b16      	ldr	r3, [pc, #88]	; (556c <prvCopyDataToQueue+0x74>)
    5512:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    5514:	2300      	movs	r3, #0
    5516:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    5518:	3501      	adds	r5, #1
    551a:	63a5      	str	r5, [r4, #56]	; 0x38
}
    551c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    551e:	2e00      	cmp	r6, #0
    5520:	d10e      	bne.n	5540 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    5522:	6880      	ldr	r0, [r0, #8]
    5524:	4b12      	ldr	r3, [pc, #72]	; (5570 <prvCopyDataToQueue+0x78>)
    5526:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    5528:	68a3      	ldr	r3, [r4, #8]
    552a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    552c:	4694      	mov	ip, r2
    552e:	4463      	add	r3, ip
    5530:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    5532:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    5534:	6862      	ldr	r2, [r4, #4]
    5536:	4293      	cmp	r3, r2
    5538:	d3ee      	bcc.n	5518 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    553a:	6823      	ldr	r3, [r4, #0]
    553c:	60a3      	str	r3, [r4, #8]
    553e:	e7eb      	b.n	5518 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5540:	68c0      	ldr	r0, [r0, #12]
    5542:	4b0b      	ldr	r3, [pc, #44]	; (5570 <prvCopyDataToQueue+0x78>)
    5544:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    5546:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5548:	425b      	negs	r3, r3
    554a:	68e2      	ldr	r2, [r4, #12]
    554c:	18d2      	adds	r2, r2, r3
    554e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    5550:	6821      	ldr	r1, [r4, #0]
    5552:	428a      	cmp	r2, r1
    5554:	d203      	bcs.n	555e <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    5556:	6862      	ldr	r2, [r4, #4]
    5558:	4694      	mov	ip, r2
    555a:	4463      	add	r3, ip
    555c:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    555e:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    5560:	2e02      	cmp	r6, #2
    5562:	d1d9      	bne.n	5518 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    5564:	4285      	cmp	r5, r0
    5566:	d0d7      	beq.n	5518 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    5568:	3d01      	subs	r5, #1
    556a:	e7d5      	b.n	5518 <prvCopyDataToQueue+0x20>
    556c:	00006619 	.word	0x00006619
    5570:	00007677 	.word	0x00007677

00005574 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    5574:	b570      	push	{r4, r5, r6, lr}
    5576:	b082      	sub	sp, #8
    5578:	9001      	str	r0, [sp, #4]
    557a:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    557c:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    557e:	2c00      	cmp	r4, #0
    5580:	d005      	beq.n	558e <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    5582:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    5584:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5586:	4299      	cmp	r1, r3
    5588:	d303      	bcc.n	5592 <prvNotifyQueueSetContainer+0x1e>
    558a:	b672      	cpsid	i
    558c:	e7fe      	b.n	558c <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    558e:	b672      	cpsid	i
    5590:	e7fe      	b.n	5590 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    5592:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    5594:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    5596:	428b      	cmp	r3, r1
    5598:	d802      	bhi.n	55a0 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    559a:	0030      	movs	r0, r6
    559c:	b002      	add	sp, #8
    559e:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    55a0:	2345      	movs	r3, #69	; 0x45
    55a2:	5ce5      	ldrb	r5, [r4, r3]
    55a4:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    55a6:	a901      	add	r1, sp, #4
    55a8:	0020      	movs	r0, r4
    55aa:	4b0a      	ldr	r3, [pc, #40]	; (55d4 <prvNotifyQueueSetContainer+0x60>)
    55ac:	4798      	blx	r3
    55ae:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    55b0:	1c6b      	adds	r3, r5, #1
    55b2:	d10a      	bne.n	55ca <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    55b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    55b6:	2b00      	cmp	r3, #0
    55b8:	d0ef      	beq.n	559a <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    55ba:	0020      	movs	r0, r4
    55bc:	3024      	adds	r0, #36	; 0x24
    55be:	4b06      	ldr	r3, [pc, #24]	; (55d8 <prvNotifyQueueSetContainer+0x64>)
    55c0:	4798      	blx	r3
    55c2:	2800      	cmp	r0, #0
    55c4:	d0e9      	beq.n	559a <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    55c6:	2601      	movs	r6, #1
    55c8:	e7e7      	b.n	559a <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    55ca:	3501      	adds	r5, #1
    55cc:	b26d      	sxtb	r5, r5
    55ce:	2345      	movs	r3, #69	; 0x45
    55d0:	54e5      	strb	r5, [r4, r3]
    55d2:	e7e2      	b.n	559a <prvNotifyQueueSetContainer+0x26>
    55d4:	000054f9 	.word	0x000054f9
    55d8:	00006445 	.word	0x00006445

000055dc <prvCopyDataFromQueue>:
{
    55dc:	b510      	push	{r4, lr}
    55de:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    55e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    55e2:	2a00      	cmp	r2, #0
    55e4:	d00b      	beq.n	55fe <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    55e6:	68c3      	ldr	r3, [r0, #12]
    55e8:	189b      	adds	r3, r3, r2
    55ea:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    55ec:	6841      	ldr	r1, [r0, #4]
    55ee:	428b      	cmp	r3, r1
    55f0:	d301      	bcc.n	55f6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    55f2:	6803      	ldr	r3, [r0, #0]
    55f4:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    55f6:	68c1      	ldr	r1, [r0, #12]
    55f8:	0020      	movs	r0, r4
    55fa:	4b01      	ldr	r3, [pc, #4]	; (5600 <prvCopyDataFromQueue+0x24>)
    55fc:	4798      	blx	r3
}
    55fe:	bd10      	pop	{r4, pc}
    5600:	00007677 	.word	0x00007677

00005604 <prvUnlockQueue>:
{
    5604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5606:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    5608:	4b25      	ldr	r3, [pc, #148]	; (56a0 <prvUnlockQueue+0x9c>)
    560a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    560c:	2345      	movs	r3, #69	; 0x45
    560e:	5cfc      	ldrb	r4, [r7, r3]
    5610:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    5612:	2c00      	cmp	r4, #0
    5614:	dd1c      	ble.n	5650 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    5616:	4e23      	ldr	r6, [pc, #140]	; (56a4 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5618:	4d23      	ldr	r5, [pc, #140]	; (56a8 <prvUnlockQueue+0xa4>)
    561a:	e00b      	b.n	5634 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    561e:	2b00      	cmp	r3, #0
    5620:	d016      	beq.n	5650 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5622:	0038      	movs	r0, r7
    5624:	3024      	adds	r0, #36	; 0x24
    5626:	47a8      	blx	r5
    5628:	2800      	cmp	r0, #0
    562a:	d10e      	bne.n	564a <prvUnlockQueue+0x46>
    562c:	3c01      	subs	r4, #1
    562e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    5630:	2c00      	cmp	r4, #0
    5632:	d00d      	beq.n	5650 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    5634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5636:	2b00      	cmp	r3, #0
    5638:	d0f0      	beq.n	561c <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    563a:	2100      	movs	r1, #0
    563c:	0038      	movs	r0, r7
    563e:	47b0      	blx	r6
    5640:	2800      	cmp	r0, #0
    5642:	d0f3      	beq.n	562c <prvUnlockQueue+0x28>
						vTaskMissedYield();
    5644:	4b19      	ldr	r3, [pc, #100]	; (56ac <prvUnlockQueue+0xa8>)
    5646:	4798      	blx	r3
    5648:	e7f0      	b.n	562c <prvUnlockQueue+0x28>
							vTaskMissedYield();
    564a:	4b18      	ldr	r3, [pc, #96]	; (56ac <prvUnlockQueue+0xa8>)
    564c:	4798      	blx	r3
    564e:	e7ed      	b.n	562c <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    5650:	22ff      	movs	r2, #255	; 0xff
    5652:	2345      	movs	r3, #69	; 0x45
    5654:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    5656:	4b16      	ldr	r3, [pc, #88]	; (56b0 <prvUnlockQueue+0xac>)
    5658:	4798      	blx	r3
	taskENTER_CRITICAL();
    565a:	4b11      	ldr	r3, [pc, #68]	; (56a0 <prvUnlockQueue+0x9c>)
    565c:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    565e:	2344      	movs	r3, #68	; 0x44
    5660:	5cfc      	ldrb	r4, [r7, r3]
    5662:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    5664:	2c00      	cmp	r4, #0
    5666:	dd14      	ble.n	5692 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5668:	693b      	ldr	r3, [r7, #16]
    566a:	2b00      	cmp	r3, #0
    566c:	d011      	beq.n	5692 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    566e:	003d      	movs	r5, r7
    5670:	3510      	adds	r5, #16
    5672:	4e0d      	ldr	r6, [pc, #52]	; (56a8 <prvUnlockQueue+0xa4>)
    5674:	e006      	b.n	5684 <prvUnlockQueue+0x80>
    5676:	3c01      	subs	r4, #1
    5678:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    567a:	2c00      	cmp	r4, #0
    567c:	d009      	beq.n	5692 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    567e:	693b      	ldr	r3, [r7, #16]
    5680:	2b00      	cmp	r3, #0
    5682:	d006      	beq.n	5692 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5684:	0028      	movs	r0, r5
    5686:	47b0      	blx	r6
    5688:	2800      	cmp	r0, #0
    568a:	d0f4      	beq.n	5676 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    568c:	4b07      	ldr	r3, [pc, #28]	; (56ac <prvUnlockQueue+0xa8>)
    568e:	4798      	blx	r3
    5690:	e7f1      	b.n	5676 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    5692:	22ff      	movs	r2, #255	; 0xff
    5694:	2344      	movs	r3, #68	; 0x44
    5696:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    5698:	4b05      	ldr	r3, [pc, #20]	; (56b0 <prvUnlockQueue+0xac>)
    569a:	4798      	blx	r3
}
    569c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    569e:	46c0      	nop			; (mov r8, r8)
    56a0:	000053a5 	.word	0x000053a5
    56a4:	00005575 	.word	0x00005575
    56a8:	00006445 	.word	0x00006445
    56ac:	00006555 	.word	0x00006555
    56b0:	000053bd 	.word	0x000053bd

000056b4 <xQueueGenericReset>:
{
    56b4:	b570      	push	{r4, r5, r6, lr}
    56b6:	0004      	movs	r4, r0
    56b8:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    56ba:	2800      	cmp	r0, #0
    56bc:	d021      	beq.n	5702 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    56be:	4b17      	ldr	r3, [pc, #92]	; (571c <xQueueGenericReset+0x68>)
    56c0:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    56c2:	6822      	ldr	r2, [r4, #0]
    56c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    56c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    56c8:	434b      	muls	r3, r1
    56ca:	18d0      	adds	r0, r2, r3
    56cc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    56ce:	2000      	movs	r0, #0
    56d0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    56d2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    56d4:	1a5b      	subs	r3, r3, r1
    56d6:	18d3      	adds	r3, r2, r3
    56d8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    56da:	23ff      	movs	r3, #255	; 0xff
    56dc:	2244      	movs	r2, #68	; 0x44
    56de:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    56e0:	3201      	adds	r2, #1
    56e2:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    56e4:	2d00      	cmp	r5, #0
    56e6:	d111      	bne.n	570c <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    56e8:	6923      	ldr	r3, [r4, #16]
    56ea:	2b00      	cmp	r3, #0
    56ec:	d005      	beq.n	56fa <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    56ee:	0020      	movs	r0, r4
    56f0:	3010      	adds	r0, #16
    56f2:	4b0b      	ldr	r3, [pc, #44]	; (5720 <xQueueGenericReset+0x6c>)
    56f4:	4798      	blx	r3
    56f6:	2800      	cmp	r0, #0
    56f8:	d105      	bne.n	5706 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    56fa:	4b0a      	ldr	r3, [pc, #40]	; (5724 <xQueueGenericReset+0x70>)
    56fc:	4798      	blx	r3
}
    56fe:	2001      	movs	r0, #1
    5700:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    5702:	b672      	cpsid	i
    5704:	e7fe      	b.n	5704 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    5706:	4b08      	ldr	r3, [pc, #32]	; (5728 <xQueueGenericReset+0x74>)
    5708:	4798      	blx	r3
    570a:	e7f6      	b.n	56fa <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    570c:	0020      	movs	r0, r4
    570e:	3010      	adds	r0, #16
    5710:	4d06      	ldr	r5, [pc, #24]	; (572c <xQueueGenericReset+0x78>)
    5712:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    5714:	0020      	movs	r0, r4
    5716:	3024      	adds	r0, #36	; 0x24
    5718:	47a8      	blx	r5
    571a:	e7ee      	b.n	56fa <xQueueGenericReset+0x46>
    571c:	000053a5 	.word	0x000053a5
    5720:	00006445 	.word	0x00006445
    5724:	000053bd 	.word	0x000053bd
    5728:	0000538d 	.word	0x0000538d
    572c:	00005205 	.word	0x00005205

00005730 <xQueueGenericCreate>:
	{
    5730:	b570      	push	{r4, r5, r6, lr}
    5732:	0006      	movs	r6, r0
    5734:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    5736:	2800      	cmp	r0, #0
    5738:	d101      	bne.n	573e <xQueueGenericCreate+0xe>
    573a:	b672      	cpsid	i
    573c:	e7fe      	b.n	573c <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    573e:	0008      	movs	r0, r1
    5740:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    5742:	304c      	adds	r0, #76	; 0x4c
    5744:	4b0a      	ldr	r3, [pc, #40]	; (5770 <xQueueGenericCreate+0x40>)
    5746:	4798      	blx	r3
    5748:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    574a:	d00e      	beq.n	576a <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
    574c:	2d00      	cmp	r5, #0
    574e:	d003      	beq.n	5758 <xQueueGenericCreate+0x28>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    5750:	0003      	movs	r3, r0
    5752:	334c      	adds	r3, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    5754:	6003      	str	r3, [r0, #0]
    5756:	e000      	b.n	575a <xQueueGenericCreate+0x2a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    5758:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    575a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    575c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    575e:	2101      	movs	r1, #1
    5760:	0020      	movs	r0, r4
    5762:	4b04      	ldr	r3, [pc, #16]	; (5774 <xQueueGenericCreate+0x44>)
    5764:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
    5766:	2300      	movs	r3, #0
    5768:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    576a:	0020      	movs	r0, r4
    576c:	bd70      	pop	{r4, r5, r6, pc}
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	00005465 	.word	0x00005465
    5774:	000056b5 	.word	0x000056b5

00005778 <xQueueGenericSend>:
{
    5778:	b5f0      	push	{r4, r5, r6, r7, lr}
    577a:	46ce      	mov	lr, r9
    577c:	4647      	mov	r7, r8
    577e:	b580      	push	{r7, lr}
    5780:	b085      	sub	sp, #20
    5782:	0004      	movs	r4, r0
    5784:	000f      	movs	r7, r1
    5786:	9201      	str	r2, [sp, #4]
    5788:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    578a:	2800      	cmp	r0, #0
    578c:	d00c      	beq.n	57a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    578e:	2900      	cmp	r1, #0
    5790:	d00c      	beq.n	57ac <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    5792:	2d02      	cmp	r5, #2
    5794:	d00f      	beq.n	57b6 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    5796:	4b4e      	ldr	r3, [pc, #312]	; (58d0 <xQueueGenericSend+0x158>)
    5798:	4798      	blx	r3
    579a:	2800      	cmp	r0, #0
    579c:	d110      	bne.n	57c0 <xQueueGenericSend+0x48>
    579e:	9b01      	ldr	r3, [sp, #4]
    57a0:	2b00      	cmp	r3, #0
    57a2:	d011      	beq.n	57c8 <xQueueGenericSend+0x50>
    57a4:	b672      	cpsid	i
    57a6:	e7fe      	b.n	57a6 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    57a8:	b672      	cpsid	i
    57aa:	e7fe      	b.n	57aa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    57ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
    57ae:	2b00      	cmp	r3, #0
    57b0:	d0ef      	beq.n	5792 <xQueueGenericSend+0x1a>
    57b2:	b672      	cpsid	i
    57b4:	e7fe      	b.n	57b4 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    57b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    57b8:	2b01      	cmp	r3, #1
    57ba:	d0ec      	beq.n	5796 <xQueueGenericSend+0x1e>
    57bc:	b672      	cpsid	i
    57be:	e7fe      	b.n	57be <xQueueGenericSend+0x46>
    57c0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    57c2:	4b44      	ldr	r3, [pc, #272]	; (58d4 <xQueueGenericSend+0x15c>)
    57c4:	4698      	mov	r8, r3
    57c6:	e04c      	b.n	5862 <xQueueGenericSend+0xea>
    57c8:	2600      	movs	r6, #0
    57ca:	e7fa      	b.n	57c2 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    57cc:	002a      	movs	r2, r5
    57ce:	0039      	movs	r1, r7
    57d0:	0020      	movs	r0, r4
    57d2:	4b41      	ldr	r3, [pc, #260]	; (58d8 <xQueueGenericSend+0x160>)
    57d4:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    57d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    57d8:	2b00      	cmp	r3, #0
    57da:	d00f      	beq.n	57fc <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    57dc:	0029      	movs	r1, r5
    57de:	0020      	movs	r0, r4
    57e0:	4b3e      	ldr	r3, [pc, #248]	; (58dc <xQueueGenericSend+0x164>)
    57e2:	4798      	blx	r3
    57e4:	2800      	cmp	r0, #0
    57e6:	d001      	beq.n	57ec <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    57e8:	4b3d      	ldr	r3, [pc, #244]	; (58e0 <xQueueGenericSend+0x168>)
    57ea:	4798      	blx	r3
				taskEXIT_CRITICAL();
    57ec:	4b3d      	ldr	r3, [pc, #244]	; (58e4 <xQueueGenericSend+0x16c>)
    57ee:	4798      	blx	r3
				return pdPASS;
    57f0:	2001      	movs	r0, #1
}
    57f2:	b005      	add	sp, #20
    57f4:	bc0c      	pop	{r2, r3}
    57f6:	4690      	mov	r8, r2
    57f8:	4699      	mov	r9, r3
    57fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    57fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57fe:	2b00      	cmp	r3, #0
    5800:	d008      	beq.n	5814 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5802:	0020      	movs	r0, r4
    5804:	3024      	adds	r0, #36	; 0x24
    5806:	4b38      	ldr	r3, [pc, #224]	; (58e8 <xQueueGenericSend+0x170>)
    5808:	4798      	blx	r3
    580a:	2800      	cmp	r0, #0
    580c:	d0ee      	beq.n	57ec <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    580e:	4b34      	ldr	r3, [pc, #208]	; (58e0 <xQueueGenericSend+0x168>)
    5810:	4798      	blx	r3
    5812:	e7eb      	b.n	57ec <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    5814:	2800      	cmp	r0, #0
    5816:	d0e9      	beq.n	57ec <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    5818:	4b31      	ldr	r3, [pc, #196]	; (58e0 <xQueueGenericSend+0x168>)
    581a:	4798      	blx	r3
    581c:	e7e6      	b.n	57ec <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    581e:	4b31      	ldr	r3, [pc, #196]	; (58e4 <xQueueGenericSend+0x16c>)
    5820:	4798      	blx	r3
					return errQUEUE_FULL;
    5822:	2000      	movs	r0, #0
    5824:	e7e5      	b.n	57f2 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    5826:	4b2f      	ldr	r3, [pc, #188]	; (58e4 <xQueueGenericSend+0x16c>)
    5828:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    582a:	a901      	add	r1, sp, #4
    582c:	a802      	add	r0, sp, #8
    582e:	4b2f      	ldr	r3, [pc, #188]	; (58ec <xQueueGenericSend+0x174>)
    5830:	4798      	blx	r3
    5832:	2800      	cmp	r0, #0
    5834:	d144      	bne.n	58c0 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    5836:	4b27      	ldr	r3, [pc, #156]	; (58d4 <xQueueGenericSend+0x15c>)
    5838:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    583a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    583c:	4699      	mov	r9, r3
    583e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    5840:	4b28      	ldr	r3, [pc, #160]	; (58e4 <xQueueGenericSend+0x16c>)
    5842:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    5844:	45b1      	cmp	r9, r6
    5846:	d135      	bne.n	58b4 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    5848:	0020      	movs	r0, r4
    584a:	3010      	adds	r0, #16
    584c:	9901      	ldr	r1, [sp, #4]
    584e:	4b28      	ldr	r3, [pc, #160]	; (58f0 <xQueueGenericSend+0x178>)
    5850:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    5852:	0020      	movs	r0, r4
    5854:	4b27      	ldr	r3, [pc, #156]	; (58f4 <xQueueGenericSend+0x17c>)
    5856:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    5858:	4b27      	ldr	r3, [pc, #156]	; (58f8 <xQueueGenericSend+0x180>)
    585a:	4798      	blx	r3
    585c:	2800      	cmp	r0, #0
    585e:	d026      	beq.n	58ae <xQueueGenericSend+0x136>
    5860:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    5862:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5866:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5868:	4293      	cmp	r3, r2
    586a:	d3af      	bcc.n	57cc <xQueueGenericSend+0x54>
    586c:	2d02      	cmp	r5, #2
    586e:	d0ad      	beq.n	57cc <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    5870:	9b01      	ldr	r3, [sp, #4]
    5872:	2b00      	cmp	r3, #0
    5874:	d0d3      	beq.n	581e <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    5876:	2e00      	cmp	r6, #0
    5878:	d102      	bne.n	5880 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    587a:	a802      	add	r0, sp, #8
    587c:	4b1f      	ldr	r3, [pc, #124]	; (58fc <xQueueGenericSend+0x184>)
    587e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    5880:	4b18      	ldr	r3, [pc, #96]	; (58e4 <xQueueGenericSend+0x16c>)
    5882:	4798      	blx	r3
		vTaskSuspendAll();
    5884:	4b1e      	ldr	r3, [pc, #120]	; (5900 <xQueueGenericSend+0x188>)
    5886:	4798      	blx	r3
		prvLockQueue( pxQueue );
    5888:	4b12      	ldr	r3, [pc, #72]	; (58d4 <xQueueGenericSend+0x15c>)
    588a:	4798      	blx	r3
    588c:	2344      	movs	r3, #68	; 0x44
    588e:	5ce3      	ldrb	r3, [r4, r3]
    5890:	b25b      	sxtb	r3, r3
    5892:	3301      	adds	r3, #1
    5894:	d102      	bne.n	589c <xQueueGenericSend+0x124>
    5896:	2200      	movs	r2, #0
    5898:	2344      	movs	r3, #68	; 0x44
    589a:	54e2      	strb	r2, [r4, r3]
    589c:	2345      	movs	r3, #69	; 0x45
    589e:	5ce3      	ldrb	r3, [r4, r3]
    58a0:	b25b      	sxtb	r3, r3
    58a2:	3301      	adds	r3, #1
    58a4:	d1bf      	bne.n	5826 <xQueueGenericSend+0xae>
    58a6:	2200      	movs	r2, #0
    58a8:	2345      	movs	r3, #69	; 0x45
    58aa:	54e2      	strb	r2, [r4, r3]
    58ac:	e7bb      	b.n	5826 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    58ae:	4b0c      	ldr	r3, [pc, #48]	; (58e0 <xQueueGenericSend+0x168>)
    58b0:	4798      	blx	r3
    58b2:	e7d5      	b.n	5860 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    58b4:	0020      	movs	r0, r4
    58b6:	4b0f      	ldr	r3, [pc, #60]	; (58f4 <xQueueGenericSend+0x17c>)
    58b8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    58ba:	4b0f      	ldr	r3, [pc, #60]	; (58f8 <xQueueGenericSend+0x180>)
    58bc:	4798      	blx	r3
    58be:	e7cf      	b.n	5860 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    58c0:	0020      	movs	r0, r4
    58c2:	4b0c      	ldr	r3, [pc, #48]	; (58f4 <xQueueGenericSend+0x17c>)
    58c4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    58c6:	4b0c      	ldr	r3, [pc, #48]	; (58f8 <xQueueGenericSend+0x180>)
    58c8:	4798      	blx	r3
			return errQUEUE_FULL;
    58ca:	2000      	movs	r0, #0
    58cc:	e791      	b.n	57f2 <xQueueGenericSend+0x7a>
    58ce:	46c0      	nop			; (mov r8, r8)
    58d0:	00006561 	.word	0x00006561
    58d4:	000053a5 	.word	0x000053a5
    58d8:	000054f9 	.word	0x000054f9
    58dc:	00005575 	.word	0x00005575
    58e0:	0000538d 	.word	0x0000538d
    58e4:	000053bd 	.word	0x000053bd
    58e8:	00006445 	.word	0x00006445
    58ec:	000064e5 	.word	0x000064e5
    58f0:	000063e1 	.word	0x000063e1
    58f4:	00005605 	.word	0x00005605
    58f8:	00006205 	.word	0x00006205
    58fc:	000064cd 	.word	0x000064cd
    5900:	000060c9 	.word	0x000060c9

00005904 <xQueueCreateMutex>:
	{
    5904:	b570      	push	{r4, r5, r6, lr}
    5906:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    5908:	2100      	movs	r1, #0
    590a:	2001      	movs	r0, #1
    590c:	4b06      	ldr	r3, [pc, #24]	; (5928 <xQueueCreateMutex+0x24>)
    590e:	4798      	blx	r3
    5910:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    5912:	d007      	beq.n	5924 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    5914:	2300      	movs	r3, #0
    5916:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    5918:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    591a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    591c:	2200      	movs	r2, #0
    591e:	2100      	movs	r1, #0
    5920:	4d02      	ldr	r5, [pc, #8]	; (592c <xQueueCreateMutex+0x28>)
    5922:	47a8      	blx	r5
	}
    5924:	0020      	movs	r0, r4
    5926:	bd70      	pop	{r4, r5, r6, pc}
    5928:	00005731 	.word	0x00005731
    592c:	00005779 	.word	0x00005779

00005930 <xQueueGenericSendFromISR>:
{
    5930:	b5f0      	push	{r4, r5, r6, r7, lr}
    5932:	b083      	sub	sp, #12
    5934:	0004      	movs	r4, r0
    5936:	9101      	str	r1, [sp, #4]
    5938:	0016      	movs	r6, r2
    593a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    593c:	2800      	cmp	r0, #0
    593e:	d012      	beq.n	5966 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    5940:	9b01      	ldr	r3, [sp, #4]
    5942:	2b00      	cmp	r3, #0
    5944:	d011      	beq.n	596a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    5946:	2d02      	cmp	r5, #2
    5948:	d014      	beq.n	5974 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    594a:	4b28      	ldr	r3, [pc, #160]	; (59ec <xQueueGenericSendFromISR+0xbc>)
    594c:	4798      	blx	r3
    594e:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5952:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5954:	429a      	cmp	r2, r3
    5956:	d82f      	bhi.n	59b8 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    5958:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    595a:	9800      	ldr	r0, [sp, #0]
    595c:	4b24      	ldr	r3, [pc, #144]	; (59f0 <xQueueGenericSendFromISR+0xc0>)
    595e:	4798      	blx	r3
}
    5960:	0028      	movs	r0, r5
    5962:	b003      	add	sp, #12
    5964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    5966:	b672      	cpsid	i
    5968:	e7fe      	b.n	5968 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    596a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    596c:	2b00      	cmp	r3, #0
    596e:	d0ea      	beq.n	5946 <xQueueGenericSendFromISR+0x16>
    5970:	b672      	cpsid	i
    5972:	e7fe      	b.n	5972 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    5974:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5976:	2b01      	cmp	r3, #1
    5978:	d01a      	beq.n	59b0 <xQueueGenericSendFromISR+0x80>
    597a:	b672      	cpsid	i
    597c:	e7fe      	b.n	597c <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    597e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    5980:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5982:	2b00      	cmp	r3, #0
    5984:	d0e9      	beq.n	595a <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5986:	0020      	movs	r0, r4
    5988:	3024      	adds	r0, #36	; 0x24
    598a:	4b1a      	ldr	r3, [pc, #104]	; (59f4 <xQueueGenericSendFromISR+0xc4>)
    598c:	4798      	blx	r3
    598e:	2800      	cmp	r0, #0
    5990:	d0e3      	beq.n	595a <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    5992:	2e00      	cmp	r6, #0
    5994:	d00a      	beq.n	59ac <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    5996:	2301      	movs	r3, #1
    5998:	6033      	str	r3, [r6, #0]
    599a:	e7de      	b.n	595a <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    599c:	1c7b      	adds	r3, r7, #1
    599e:	b25b      	sxtb	r3, r3
    59a0:	2245      	movs	r2, #69	; 0x45
    59a2:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    59a4:	2501      	movs	r5, #1
    59a6:	e7d8      	b.n	595a <xQueueGenericSendFromISR+0x2a>
    59a8:	2501      	movs	r5, #1
    59aa:	e7d6      	b.n	595a <xQueueGenericSendFromISR+0x2a>
    59ac:	2501      	movs	r5, #1
    59ae:	e7d4      	b.n	595a <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    59b0:	4b0e      	ldr	r3, [pc, #56]	; (59ec <xQueueGenericSendFromISR+0xbc>)
    59b2:	4798      	blx	r3
    59b4:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    59b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    59b8:	2345      	movs	r3, #69	; 0x45
    59ba:	5ce7      	ldrb	r7, [r4, r3]
    59bc:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    59be:	002a      	movs	r2, r5
    59c0:	9901      	ldr	r1, [sp, #4]
    59c2:	0020      	movs	r0, r4
    59c4:	4b0c      	ldr	r3, [pc, #48]	; (59f8 <xQueueGenericSendFromISR+0xc8>)
    59c6:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    59c8:	1c7b      	adds	r3, r7, #1
    59ca:	d1e7      	bne.n	599c <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    59cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    59ce:	2b00      	cmp	r3, #0
    59d0:	d0d5      	beq.n	597e <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    59d2:	0029      	movs	r1, r5
    59d4:	0020      	movs	r0, r4
    59d6:	4b09      	ldr	r3, [pc, #36]	; (59fc <xQueueGenericSendFromISR+0xcc>)
    59d8:	4798      	blx	r3
			xReturn = pdPASS;
    59da:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    59dc:	2800      	cmp	r0, #0
    59de:	d0bc      	beq.n	595a <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    59e0:	2e00      	cmp	r6, #0
    59e2:	d0e1      	beq.n	59a8 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    59e4:	2301      	movs	r3, #1
    59e6:	6033      	str	r3, [r6, #0]
    59e8:	e7b7      	b.n	595a <xQueueGenericSendFromISR+0x2a>
    59ea:	46c0      	nop			; (mov r8, r8)
    59ec:	000053dd 	.word	0x000053dd
    59f0:	000053e5 	.word	0x000053e5
    59f4:	00006445 	.word	0x00006445
    59f8:	000054f9 	.word	0x000054f9
    59fc:	00005575 	.word	0x00005575

00005a00 <xQueueReceive>:
{
    5a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a02:	46c6      	mov	lr, r8
    5a04:	b500      	push	{lr}
    5a06:	b084      	sub	sp, #16
    5a08:	0004      	movs	r4, r0
    5a0a:	000f      	movs	r7, r1
    5a0c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    5a0e:	2800      	cmp	r0, #0
    5a10:	d00a      	beq.n	5a28 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    5a12:	2900      	cmp	r1, #0
    5a14:	d00a      	beq.n	5a2c <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    5a16:	4b42      	ldr	r3, [pc, #264]	; (5b20 <xQueueReceive+0x120>)
    5a18:	4798      	blx	r3
    5a1a:	2800      	cmp	r0, #0
    5a1c:	d10b      	bne.n	5a36 <xQueueReceive+0x36>
    5a1e:	9b01      	ldr	r3, [sp, #4]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d00c      	beq.n	5a3e <xQueueReceive+0x3e>
    5a24:	b672      	cpsid	i
    5a26:	e7fe      	b.n	5a26 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    5a28:	b672      	cpsid	i
    5a2a:	e7fe      	b.n	5a2a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    5a2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d0f1      	beq.n	5a16 <xQueueReceive+0x16>
    5a32:	b672      	cpsid	i
    5a34:	e7fe      	b.n	5a34 <xQueueReceive+0x34>
    5a36:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    5a38:	4b3a      	ldr	r3, [pc, #232]	; (5b24 <xQueueReceive+0x124>)
    5a3a:	4698      	mov	r8, r3
    5a3c:	e02f      	b.n	5a9e <xQueueReceive+0x9e>
    5a3e:	2600      	movs	r6, #0
    5a40:	e7fa      	b.n	5a38 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    5a42:	0039      	movs	r1, r7
    5a44:	0020      	movs	r0, r4
    5a46:	4b38      	ldr	r3, [pc, #224]	; (5b28 <xQueueReceive+0x128>)
    5a48:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    5a4a:	3d01      	subs	r5, #1
    5a4c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5a4e:	6923      	ldr	r3, [r4, #16]
    5a50:	2b00      	cmp	r3, #0
    5a52:	d007      	beq.n	5a64 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5a54:	0020      	movs	r0, r4
    5a56:	3010      	adds	r0, #16
    5a58:	4b34      	ldr	r3, [pc, #208]	; (5b2c <xQueueReceive+0x12c>)
    5a5a:	4798      	blx	r3
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d001      	beq.n	5a64 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    5a60:	4b33      	ldr	r3, [pc, #204]	; (5b30 <xQueueReceive+0x130>)
    5a62:	4798      	blx	r3
				taskEXIT_CRITICAL();
    5a64:	4b33      	ldr	r3, [pc, #204]	; (5b34 <xQueueReceive+0x134>)
    5a66:	4798      	blx	r3
				return pdPASS;
    5a68:	2001      	movs	r0, #1
}
    5a6a:	b004      	add	sp, #16
    5a6c:	bc04      	pop	{r2}
    5a6e:	4690      	mov	r8, r2
    5a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    5a72:	4b30      	ldr	r3, [pc, #192]	; (5b34 <xQueueReceive+0x134>)
    5a74:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5a76:	2000      	movs	r0, #0
    5a78:	e7f7      	b.n	5a6a <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    5a7a:	a802      	add	r0, sp, #8
    5a7c:	4b2e      	ldr	r3, [pc, #184]	; (5b38 <xQueueReceive+0x138>)
    5a7e:	4798      	blx	r3
    5a80:	e016      	b.n	5ab0 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    5a82:	2200      	movs	r2, #0
    5a84:	2344      	movs	r3, #68	; 0x44
    5a86:	54e2      	strb	r2, [r4, r3]
    5a88:	e01d      	b.n	5ac6 <xQueueReceive+0xc6>
    5a8a:	2200      	movs	r2, #0
    5a8c:	2345      	movs	r3, #69	; 0x45
    5a8e:	54e2      	strb	r2, [r4, r3]
    5a90:	e01e      	b.n	5ad0 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    5a92:	0020      	movs	r0, r4
    5a94:	4b29      	ldr	r3, [pc, #164]	; (5b3c <xQueueReceive+0x13c>)
    5a96:	4798      	blx	r3
				( void ) xTaskResumeAll();
    5a98:	4b29      	ldr	r3, [pc, #164]	; (5b40 <xQueueReceive+0x140>)
    5a9a:	4798      	blx	r3
    5a9c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    5a9e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5aa0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    5aa2:	2d00      	cmp	r5, #0
    5aa4:	d1cd      	bne.n	5a42 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    5aa6:	9b01      	ldr	r3, [sp, #4]
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d0e2      	beq.n	5a72 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    5aac:	2e00      	cmp	r6, #0
    5aae:	d0e4      	beq.n	5a7a <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    5ab0:	4b20      	ldr	r3, [pc, #128]	; (5b34 <xQueueReceive+0x134>)
    5ab2:	4798      	blx	r3
		vTaskSuspendAll();
    5ab4:	4b23      	ldr	r3, [pc, #140]	; (5b44 <xQueueReceive+0x144>)
    5ab6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    5ab8:	4b1a      	ldr	r3, [pc, #104]	; (5b24 <xQueueReceive+0x124>)
    5aba:	4798      	blx	r3
    5abc:	2344      	movs	r3, #68	; 0x44
    5abe:	5ce3      	ldrb	r3, [r4, r3]
    5ac0:	b25b      	sxtb	r3, r3
    5ac2:	3301      	adds	r3, #1
    5ac4:	d0dd      	beq.n	5a82 <xQueueReceive+0x82>
    5ac6:	2345      	movs	r3, #69	; 0x45
    5ac8:	5ce3      	ldrb	r3, [r4, r3]
    5aca:	b25b      	sxtb	r3, r3
    5acc:	3301      	adds	r3, #1
    5ace:	d0dc      	beq.n	5a8a <xQueueReceive+0x8a>
    5ad0:	4b18      	ldr	r3, [pc, #96]	; (5b34 <xQueueReceive+0x134>)
    5ad2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5ad4:	a901      	add	r1, sp, #4
    5ad6:	a802      	add	r0, sp, #8
    5ad8:	4b1b      	ldr	r3, [pc, #108]	; (5b48 <xQueueReceive+0x148>)
    5ada:	4798      	blx	r3
    5adc:	2800      	cmp	r0, #0
    5ade:	d113      	bne.n	5b08 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5ae0:	0020      	movs	r0, r4
    5ae2:	4b1a      	ldr	r3, [pc, #104]	; (5b4c <xQueueReceive+0x14c>)
    5ae4:	4798      	blx	r3
    5ae6:	2800      	cmp	r0, #0
    5ae8:	d0d3      	beq.n	5a92 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5aea:	0020      	movs	r0, r4
    5aec:	3024      	adds	r0, #36	; 0x24
    5aee:	9901      	ldr	r1, [sp, #4]
    5af0:	4b17      	ldr	r3, [pc, #92]	; (5b50 <xQueueReceive+0x150>)
    5af2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    5af4:	0020      	movs	r0, r4
    5af6:	4b11      	ldr	r3, [pc, #68]	; (5b3c <xQueueReceive+0x13c>)
    5af8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    5afa:	4b11      	ldr	r3, [pc, #68]	; (5b40 <xQueueReceive+0x140>)
    5afc:	4798      	blx	r3
    5afe:	2800      	cmp	r0, #0
    5b00:	d1cc      	bne.n	5a9c <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    5b02:	4b0b      	ldr	r3, [pc, #44]	; (5b30 <xQueueReceive+0x130>)
    5b04:	4798      	blx	r3
    5b06:	e7c9      	b.n	5a9c <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    5b08:	0020      	movs	r0, r4
    5b0a:	4b0c      	ldr	r3, [pc, #48]	; (5b3c <xQueueReceive+0x13c>)
    5b0c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    5b0e:	4b0c      	ldr	r3, [pc, #48]	; (5b40 <xQueueReceive+0x140>)
    5b10:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5b12:	0020      	movs	r0, r4
    5b14:	4b0d      	ldr	r3, [pc, #52]	; (5b4c <xQueueReceive+0x14c>)
    5b16:	4798      	blx	r3
    5b18:	2800      	cmp	r0, #0
    5b1a:	d0bf      	beq.n	5a9c <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    5b1c:	2000      	movs	r0, #0
    5b1e:	e7a4      	b.n	5a6a <xQueueReceive+0x6a>
    5b20:	00006561 	.word	0x00006561
    5b24:	000053a5 	.word	0x000053a5
    5b28:	000055dd 	.word	0x000055dd
    5b2c:	00006445 	.word	0x00006445
    5b30:	0000538d 	.word	0x0000538d
    5b34:	000053bd 	.word	0x000053bd
    5b38:	000064cd 	.word	0x000064cd
    5b3c:	00005605 	.word	0x00005605
    5b40:	00006205 	.word	0x00006205
    5b44:	000060c9 	.word	0x000060c9
    5b48:	000064e5 	.word	0x000064e5
    5b4c:	000054dd 	.word	0x000054dd
    5b50:	000063e1 	.word	0x000063e1

00005b54 <xQueueSemaphoreTake>:
{
    5b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b56:	b085      	sub	sp, #20
    5b58:	1e04      	subs	r4, r0, #0
    5b5a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    5b5c:	d004      	beq.n	5b68 <xQueueSemaphoreTake+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
    5b5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5b60:	2b00      	cmp	r3, #0
    5b62:	d003      	beq.n	5b6c <xQueueSemaphoreTake+0x18>
    5b64:	b672      	cpsid	i
    5b66:	e7fe      	b.n	5b66 <xQueueSemaphoreTake+0x12>
	configASSERT( ( pxQueue ) );
    5b68:	b672      	cpsid	i
    5b6a:	e7fe      	b.n	5b6a <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    5b6c:	4b50      	ldr	r3, [pc, #320]	; (5cb0 <xQueueSemaphoreTake+0x15c>)
    5b6e:	4798      	blx	r3
    5b70:	2800      	cmp	r0, #0
    5b72:	d104      	bne.n	5b7e <xQueueSemaphoreTake+0x2a>
    5b74:	9b01      	ldr	r3, [sp, #4]
    5b76:	2b00      	cmp	r3, #0
    5b78:	d005      	beq.n	5b86 <xQueueSemaphoreTake+0x32>
    5b7a:	b672      	cpsid	i
    5b7c:	e7fe      	b.n	5b7c <xQueueSemaphoreTake+0x28>
    5b7e:	2500      	movs	r5, #0
    5b80:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    5b82:	4f4c      	ldr	r7, [pc, #304]	; (5cb4 <xQueueSemaphoreTake+0x160>)
    5b84:	e048      	b.n	5c18 <xQueueSemaphoreTake+0xc4>
    5b86:	2500      	movs	r5, #0
    5b88:	2600      	movs	r6, #0
    5b8a:	e7fa      	b.n	5b82 <xQueueSemaphoreTake+0x2e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    5b8c:	3b01      	subs	r3, #1
    5b8e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    5b90:	6823      	ldr	r3, [r4, #0]
    5b92:	2b00      	cmp	r3, #0
    5b94:	d102      	bne.n	5b9c <xQueueSemaphoreTake+0x48>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    5b96:	4b48      	ldr	r3, [pc, #288]	; (5cb8 <xQueueSemaphoreTake+0x164>)
    5b98:	4798      	blx	r3
    5b9a:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5b9c:	6923      	ldr	r3, [r4, #16]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d007      	beq.n	5bb2 <xQueueSemaphoreTake+0x5e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5ba2:	0020      	movs	r0, r4
    5ba4:	3010      	adds	r0, #16
    5ba6:	4b45      	ldr	r3, [pc, #276]	; (5cbc <xQueueSemaphoreTake+0x168>)
    5ba8:	4798      	blx	r3
    5baa:	2800      	cmp	r0, #0
    5bac:	d001      	beq.n	5bb2 <xQueueSemaphoreTake+0x5e>
						queueYIELD_IF_USING_PREEMPTION();
    5bae:	4b44      	ldr	r3, [pc, #272]	; (5cc0 <xQueueSemaphoreTake+0x16c>)
    5bb0:	4798      	blx	r3
				taskEXIT_CRITICAL();
    5bb2:	4b44      	ldr	r3, [pc, #272]	; (5cc4 <xQueueSemaphoreTake+0x170>)
    5bb4:	4798      	blx	r3
				return pdPASS;
    5bb6:	2501      	movs	r5, #1
}
    5bb8:	0028      	movs	r0, r5
    5bba:	b005      	add	sp, #20
    5bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
    5bbe:	2d00      	cmp	r5, #0
    5bc0:	d001      	beq.n	5bc6 <xQueueSemaphoreTake+0x72>
    5bc2:	b672      	cpsid	i
    5bc4:	e7fe      	b.n	5bc4 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
    5bc6:	4b3f      	ldr	r3, [pc, #252]	; (5cc4 <xQueueSemaphoreTake+0x170>)
    5bc8:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5bca:	e7f5      	b.n	5bb8 <xQueueSemaphoreTake+0x64>
					vTaskInternalSetTimeOutState( &xTimeOut );
    5bcc:	a802      	add	r0, sp, #8
    5bce:	4b3e      	ldr	r3, [pc, #248]	; (5cc8 <xQueueSemaphoreTake+0x174>)
    5bd0:	4798      	blx	r3
    5bd2:	e02a      	b.n	5c2a <xQueueSemaphoreTake+0xd6>
		prvLockQueue( pxQueue );
    5bd4:	2200      	movs	r2, #0
    5bd6:	2344      	movs	r3, #68	; 0x44
    5bd8:	54e2      	strb	r2, [r4, r3]
    5bda:	e031      	b.n	5c40 <xQueueSemaphoreTake+0xec>
    5bdc:	2200      	movs	r2, #0
    5bde:	2345      	movs	r3, #69	; 0x45
    5be0:	54e2      	strb	r2, [r4, r3]
    5be2:	e032      	b.n	5c4a <xQueueSemaphoreTake+0xf6>
						taskENTER_CRITICAL();
    5be4:	4b33      	ldr	r3, [pc, #204]	; (5cb4 <xQueueSemaphoreTake+0x160>)
    5be6:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    5be8:	6860      	ldr	r0, [r4, #4]
    5bea:	4b38      	ldr	r3, [pc, #224]	; (5ccc <xQueueSemaphoreTake+0x178>)
    5bec:	4798      	blx	r3
    5bee:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    5bf0:	4b34      	ldr	r3, [pc, #208]	; (5cc4 <xQueueSemaphoreTake+0x170>)
    5bf2:	4798      	blx	r3
    5bf4:	e039      	b.n	5c6a <xQueueSemaphoreTake+0x116>
				prvUnlockQueue( pxQueue );
    5bf6:	0020      	movs	r0, r4
    5bf8:	4b35      	ldr	r3, [pc, #212]	; (5cd0 <xQueueSemaphoreTake+0x17c>)
    5bfa:	4798      	blx	r3
				( void ) xTaskResumeAll();
    5bfc:	4b35      	ldr	r3, [pc, #212]	; (5cd4 <xQueueSemaphoreTake+0x180>)
    5bfe:	4798      	blx	r3
    5c00:	e009      	b.n	5c16 <xQueueSemaphoreTake+0xc2>
			prvUnlockQueue( pxQueue );
    5c02:	0020      	movs	r0, r4
    5c04:	4b32      	ldr	r3, [pc, #200]	; (5cd0 <xQueueSemaphoreTake+0x17c>)
    5c06:	4798      	blx	r3
			( void ) xTaskResumeAll();
    5c08:	4b32      	ldr	r3, [pc, #200]	; (5cd4 <xQueueSemaphoreTake+0x180>)
    5c0a:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5c0c:	0020      	movs	r0, r4
    5c0e:	4b32      	ldr	r3, [pc, #200]	; (5cd8 <xQueueSemaphoreTake+0x184>)
    5c10:	4798      	blx	r3
    5c12:	2800      	cmp	r0, #0
    5c14:	d138      	bne.n	5c88 <xQueueSemaphoreTake+0x134>
    5c16:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    5c18:	47b8      	blx	r7
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    5c1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    5c1c:	2b00      	cmp	r3, #0
    5c1e:	d1b5      	bne.n	5b8c <xQueueSemaphoreTake+0x38>
				if( xTicksToWait == ( TickType_t ) 0 )
    5c20:	9b01      	ldr	r3, [sp, #4]
    5c22:	2b00      	cmp	r3, #0
    5c24:	d0cb      	beq.n	5bbe <xQueueSemaphoreTake+0x6a>
				else if( xEntryTimeSet == pdFALSE )
    5c26:	2e00      	cmp	r6, #0
    5c28:	d0d0      	beq.n	5bcc <xQueueSemaphoreTake+0x78>
		taskEXIT_CRITICAL();
    5c2a:	4b26      	ldr	r3, [pc, #152]	; (5cc4 <xQueueSemaphoreTake+0x170>)
    5c2c:	4798      	blx	r3
		vTaskSuspendAll();
    5c2e:	4b2b      	ldr	r3, [pc, #172]	; (5cdc <xQueueSemaphoreTake+0x188>)
    5c30:	4798      	blx	r3
		prvLockQueue( pxQueue );
    5c32:	4b20      	ldr	r3, [pc, #128]	; (5cb4 <xQueueSemaphoreTake+0x160>)
    5c34:	4798      	blx	r3
    5c36:	2344      	movs	r3, #68	; 0x44
    5c38:	5ce3      	ldrb	r3, [r4, r3]
    5c3a:	b25b      	sxtb	r3, r3
    5c3c:	3301      	adds	r3, #1
    5c3e:	d0c9      	beq.n	5bd4 <xQueueSemaphoreTake+0x80>
    5c40:	2345      	movs	r3, #69	; 0x45
    5c42:	5ce3      	ldrb	r3, [r4, r3]
    5c44:	b25b      	sxtb	r3, r3
    5c46:	3301      	adds	r3, #1
    5c48:	d0c8      	beq.n	5bdc <xQueueSemaphoreTake+0x88>
    5c4a:	4b1e      	ldr	r3, [pc, #120]	; (5cc4 <xQueueSemaphoreTake+0x170>)
    5c4c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5c4e:	a901      	add	r1, sp, #4
    5c50:	a802      	add	r0, sp, #8
    5c52:	4b23      	ldr	r3, [pc, #140]	; (5ce0 <xQueueSemaphoreTake+0x18c>)
    5c54:	4798      	blx	r3
    5c56:	2800      	cmp	r0, #0
    5c58:	d1d3      	bne.n	5c02 <xQueueSemaphoreTake+0xae>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5c5a:	0020      	movs	r0, r4
    5c5c:	4b1e      	ldr	r3, [pc, #120]	; (5cd8 <xQueueSemaphoreTake+0x184>)
    5c5e:	4798      	blx	r3
    5c60:	2800      	cmp	r0, #0
    5c62:	d0c8      	beq.n	5bf6 <xQueueSemaphoreTake+0xa2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    5c64:	6823      	ldr	r3, [r4, #0]
    5c66:	2b00      	cmp	r3, #0
    5c68:	d0bc      	beq.n	5be4 <xQueueSemaphoreTake+0x90>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5c6a:	0020      	movs	r0, r4
    5c6c:	3024      	adds	r0, #36	; 0x24
    5c6e:	9901      	ldr	r1, [sp, #4]
    5c70:	4b1c      	ldr	r3, [pc, #112]	; (5ce4 <xQueueSemaphoreTake+0x190>)
    5c72:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    5c74:	0020      	movs	r0, r4
    5c76:	4b16      	ldr	r3, [pc, #88]	; (5cd0 <xQueueSemaphoreTake+0x17c>)
    5c78:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    5c7a:	4b16      	ldr	r3, [pc, #88]	; (5cd4 <xQueueSemaphoreTake+0x180>)
    5c7c:	4798      	blx	r3
    5c7e:	2800      	cmp	r0, #0
    5c80:	d1c9      	bne.n	5c16 <xQueueSemaphoreTake+0xc2>
					portYIELD_WITHIN_API();
    5c82:	4b0f      	ldr	r3, [pc, #60]	; (5cc0 <xQueueSemaphoreTake+0x16c>)
    5c84:	4798      	blx	r3
    5c86:	e7c6      	b.n	5c16 <xQueueSemaphoreTake+0xc2>
					if( xInheritanceOccurred != pdFALSE )
    5c88:	2d00      	cmp	r5, #0
    5c8a:	d100      	bne.n	5c8e <xQueueSemaphoreTake+0x13a>
    5c8c:	e794      	b.n	5bb8 <xQueueSemaphoreTake+0x64>
						taskENTER_CRITICAL();
    5c8e:	4b09      	ldr	r3, [pc, #36]	; (5cb4 <xQueueSemaphoreTake+0x160>)
    5c90:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    5c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5c94:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    5c96:	2b00      	cmp	r3, #0
    5c98:	d003      	beq.n	5ca2 <xQueueSemaphoreTake+0x14e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    5c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	3105      	adds	r1, #5
    5ca0:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    5ca2:	6860      	ldr	r0, [r4, #4]
    5ca4:	4b10      	ldr	r3, [pc, #64]	; (5ce8 <xQueueSemaphoreTake+0x194>)
    5ca6:	4798      	blx	r3
						taskEXIT_CRITICAL();
    5ca8:	4b06      	ldr	r3, [pc, #24]	; (5cc4 <xQueueSemaphoreTake+0x170>)
    5caa:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5cac:	2500      	movs	r5, #0
    5cae:	e783      	b.n	5bb8 <xQueueSemaphoreTake+0x64>
    5cb0:	00006561 	.word	0x00006561
    5cb4:	000053a5 	.word	0x000053a5
    5cb8:	00006721 	.word	0x00006721
    5cbc:	00006445 	.word	0x00006445
    5cc0:	0000538d 	.word	0x0000538d
    5cc4:	000053bd 	.word	0x000053bd
    5cc8:	000064cd 	.word	0x000064cd
    5ccc:	00006581 	.word	0x00006581
    5cd0:	00005605 	.word	0x00005605
    5cd4:	00006205 	.word	0x00006205
    5cd8:	000054dd 	.word	0x000054dd
    5cdc:	000060c9 	.word	0x000060c9
    5ce0:	000064e5 	.word	0x000064e5
    5ce4:	000063e1 	.word	0x000063e1
    5ce8:	00006695 	.word	0x00006695

00005cec <vQueueWaitForMessageRestricted>:
	{
    5cec:	b570      	push	{r4, r5, r6, lr}
    5cee:	0004      	movs	r4, r0
    5cf0:	000d      	movs	r5, r1
    5cf2:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    5cf4:	4b11      	ldr	r3, [pc, #68]	; (5d3c <vQueueWaitForMessageRestricted+0x50>)
    5cf6:	4798      	blx	r3
    5cf8:	2344      	movs	r3, #68	; 0x44
    5cfa:	5ce3      	ldrb	r3, [r4, r3]
    5cfc:	b25b      	sxtb	r3, r3
    5cfe:	3301      	adds	r3, #1
    5d00:	d00d      	beq.n	5d1e <vQueueWaitForMessageRestricted+0x32>
    5d02:	2345      	movs	r3, #69	; 0x45
    5d04:	5ce3      	ldrb	r3, [r4, r3]
    5d06:	b25b      	sxtb	r3, r3
    5d08:	3301      	adds	r3, #1
    5d0a:	d00c      	beq.n	5d26 <vQueueWaitForMessageRestricted+0x3a>
    5d0c:	4b0c      	ldr	r3, [pc, #48]	; (5d40 <vQueueWaitForMessageRestricted+0x54>)
    5d0e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    5d10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5d12:	2b00      	cmp	r3, #0
    5d14:	d00b      	beq.n	5d2e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    5d16:	0020      	movs	r0, r4
    5d18:	4b0a      	ldr	r3, [pc, #40]	; (5d44 <vQueueWaitForMessageRestricted+0x58>)
    5d1a:	4798      	blx	r3
	}
    5d1c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    5d1e:	2200      	movs	r2, #0
    5d20:	2344      	movs	r3, #68	; 0x44
    5d22:	54e2      	strb	r2, [r4, r3]
    5d24:	e7ed      	b.n	5d02 <vQueueWaitForMessageRestricted+0x16>
    5d26:	2200      	movs	r2, #0
    5d28:	2345      	movs	r3, #69	; 0x45
    5d2a:	54e2      	strb	r2, [r4, r3]
    5d2c:	e7ee      	b.n	5d0c <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    5d2e:	0020      	movs	r0, r4
    5d30:	3024      	adds	r0, #36	; 0x24
    5d32:	0032      	movs	r2, r6
    5d34:	0029      	movs	r1, r5
    5d36:	4b04      	ldr	r3, [pc, #16]	; (5d48 <vQueueWaitForMessageRestricted+0x5c>)
    5d38:	4798      	blx	r3
    5d3a:	e7ec      	b.n	5d16 <vQueueWaitForMessageRestricted+0x2a>
    5d3c:	000053a5 	.word	0x000053a5
    5d40:	000053bd 	.word	0x000053bd
    5d44:	00005605 	.word	0x00005605
    5d48:	0000640d 	.word	0x0000640d

00005d4c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5d4c:	4b08      	ldr	r3, [pc, #32]	; (5d70 <prvResetNextTaskUnblockTime+0x24>)
    5d4e:	681b      	ldr	r3, [r3, #0]
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	2b00      	cmp	r3, #0
    5d54:	d007      	beq.n	5d66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5d56:	4b06      	ldr	r3, [pc, #24]	; (5d70 <prvResetNextTaskUnblockTime+0x24>)
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    5d5c:	68db      	ldr	r3, [r3, #12]
    5d5e:	685a      	ldr	r2, [r3, #4]
    5d60:	4b04      	ldr	r3, [pc, #16]	; (5d74 <prvResetNextTaskUnblockTime+0x28>)
    5d62:	601a      	str	r2, [r3, #0]
	}
}
    5d64:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5d66:	2201      	movs	r2, #1
    5d68:	4252      	negs	r2, r2
    5d6a:	4b02      	ldr	r3, [pc, #8]	; (5d74 <prvResetNextTaskUnblockTime+0x28>)
    5d6c:	601a      	str	r2, [r3, #0]
    5d6e:	e7f9      	b.n	5d64 <prvResetNextTaskUnblockTime+0x18>
    5d70:	20004fc4 	.word	0x20004fc4
    5d74:	20005074 	.word	0x20005074

00005d78 <prvIdleTask>:
{
    5d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d7a:	46d6      	mov	lr, sl
    5d7c:	464f      	mov	r7, r9
    5d7e:	4646      	mov	r6, r8
    5d80:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5d82:	4b14      	ldr	r3, [pc, #80]	; (5dd4 <prvIdleTask+0x5c>)
    5d84:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    5d86:	4b14      	ldr	r3, [pc, #80]	; (5dd8 <prvIdleTask+0x60>)
    5d88:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    5d8a:	4f14      	ldr	r7, [pc, #80]	; (5ddc <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5d8c:	4b14      	ldr	r3, [pc, #80]	; (5de0 <prvIdleTask+0x68>)
    5d8e:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5d90:	464b      	mov	r3, r9
    5d92:	681b      	ldr	r3, [r3, #0]
    5d94:	2b00      	cmp	r3, #0
    5d96:	d016      	beq.n	5dc6 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    5d98:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    5d9a:	68fb      	ldr	r3, [r7, #12]
    5d9c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5d9e:	1d28      	adds	r0, r5, #4
    5da0:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    5da2:	4a10      	ldr	r2, [pc, #64]	; (5de4 <prvIdleTask+0x6c>)
    5da4:	6813      	ldr	r3, [r2, #0]
    5da6:	3b01      	subs	r3, #1
    5da8:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    5daa:	4c0a      	ldr	r4, [pc, #40]	; (5dd4 <prvIdleTask+0x5c>)
    5dac:	6823      	ldr	r3, [r4, #0]
    5dae:	3b01      	subs	r3, #1
    5db0:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    5db2:	4b0d      	ldr	r3, [pc, #52]	; (5de8 <prvIdleTask+0x70>)
    5db4:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    5db6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5db8:	4e0c      	ldr	r6, [pc, #48]	; (5dec <prvIdleTask+0x74>)
    5dba:	47b0      	blx	r6
			vPortFree( pxTCB );
    5dbc:	0028      	movs	r0, r5
    5dbe:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5dc0:	6823      	ldr	r3, [r4, #0]
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d1e8      	bne.n	5d98 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    5dc6:	4b0a      	ldr	r3, [pc, #40]	; (5df0 <prvIdleTask+0x78>)
    5dc8:	681b      	ldr	r3, [r3, #0]
    5dca:	2b01      	cmp	r3, #1
    5dcc:	d9e0      	bls.n	5d90 <prvIdleTask+0x18>
				taskYIELD();
    5dce:	4b09      	ldr	r3, [pc, #36]	; (5df4 <prvIdleTask+0x7c>)
    5dd0:	4798      	blx	r3
    5dd2:	e7dd      	b.n	5d90 <prvIdleTask+0x18>
    5dd4:	20005034 	.word	0x20005034
    5dd8:	000053a5 	.word	0x000053a5
    5ddc:	200050a8 	.word	0x200050a8
    5de0:	00005267 	.word	0x00005267
    5de4:	20005030 	.word	0x20005030
    5de8:	000053bd 	.word	0x000053bd
    5dec:	000054d1 	.word	0x000054d1
    5df0:	20004fcc 	.word	0x20004fcc
    5df4:	0000538d 	.word	0x0000538d

00005df8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    5df8:	b570      	push	{r4, r5, r6, lr}
    5dfa:	0004      	movs	r4, r0
    5dfc:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    5dfe:	4b17      	ldr	r3, [pc, #92]	; (5e5c <prvAddCurrentTaskToDelayedList+0x64>)
    5e00:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5e02:	4b17      	ldr	r3, [pc, #92]	; (5e60 <prvAddCurrentTaskToDelayedList+0x68>)
    5e04:	6818      	ldr	r0, [r3, #0]
    5e06:	3004      	adds	r0, #4
    5e08:	4b16      	ldr	r3, [pc, #88]	; (5e64 <prvAddCurrentTaskToDelayedList+0x6c>)
    5e0a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5e0c:	1c63      	adds	r3, r4, #1
    5e0e:	d013      	beq.n	5e38 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5e10:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5e12:	4b13      	ldr	r3, [pc, #76]	; (5e60 <prvAddCurrentTaskToDelayedList+0x68>)
    5e14:	681b      	ldr	r3, [r3, #0]
    5e16:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    5e18:	42a6      	cmp	r6, r4
    5e1a:	d816      	bhi.n	5e4a <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5e1c:	4b12      	ldr	r3, [pc, #72]	; (5e68 <prvAddCurrentTaskToDelayedList+0x70>)
    5e1e:	6818      	ldr	r0, [r3, #0]
    5e20:	4b0f      	ldr	r3, [pc, #60]	; (5e60 <prvAddCurrentTaskToDelayedList+0x68>)
    5e22:	6819      	ldr	r1, [r3, #0]
    5e24:	3104      	adds	r1, #4
    5e26:	4b11      	ldr	r3, [pc, #68]	; (5e6c <prvAddCurrentTaskToDelayedList+0x74>)
    5e28:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    5e2a:	4b11      	ldr	r3, [pc, #68]	; (5e70 <prvAddCurrentTaskToDelayedList+0x78>)
    5e2c:	681b      	ldr	r3, [r3, #0]
    5e2e:	429c      	cmp	r4, r3
    5e30:	d212      	bcs.n	5e58 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    5e32:	4b0f      	ldr	r3, [pc, #60]	; (5e70 <prvAddCurrentTaskToDelayedList+0x78>)
    5e34:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    5e36:	e00f      	b.n	5e58 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5e38:	2d00      	cmp	r5, #0
    5e3a:	d0e9      	beq.n	5e10 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5e3c:	4b08      	ldr	r3, [pc, #32]	; (5e60 <prvAddCurrentTaskToDelayedList+0x68>)
    5e3e:	6819      	ldr	r1, [r3, #0]
    5e40:	3104      	adds	r1, #4
    5e42:	480c      	ldr	r0, [pc, #48]	; (5e74 <prvAddCurrentTaskToDelayedList+0x7c>)
    5e44:	4b0c      	ldr	r3, [pc, #48]	; (5e78 <prvAddCurrentTaskToDelayedList+0x80>)
    5e46:	4798      	blx	r3
    5e48:	e006      	b.n	5e58 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5e4a:	4b0c      	ldr	r3, [pc, #48]	; (5e7c <prvAddCurrentTaskToDelayedList+0x84>)
    5e4c:	6818      	ldr	r0, [r3, #0]
    5e4e:	4b04      	ldr	r3, [pc, #16]	; (5e60 <prvAddCurrentTaskToDelayedList+0x68>)
    5e50:	6819      	ldr	r1, [r3, #0]
    5e52:	3104      	adds	r1, #4
    5e54:	4b05      	ldr	r3, [pc, #20]	; (5e6c <prvAddCurrentTaskToDelayedList+0x74>)
    5e56:	4798      	blx	r3
}
    5e58:	bd70      	pop	{r4, r5, r6, pc}
    5e5a:	46c0      	nop			; (mov r8, r8)
    5e5c:	200050bc 	.word	0x200050bc
    5e60:	20004fc0 	.word	0x20004fc0
    5e64:	00005267 	.word	0x00005267
    5e68:	20004fc4 	.word	0x20004fc4
    5e6c:	00005239 	.word	0x00005239
    5e70:	20005074 	.word	0x20005074
    5e74:	20005094 	.word	0x20005094
    5e78:	00005221 	.word	0x00005221
    5e7c:	20004fc8 	.word	0x20004fc8

00005e80 <xTaskCreate>:
	{
    5e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e82:	46c6      	mov	lr, r8
    5e84:	b500      	push	{lr}
    5e86:	b084      	sub	sp, #16
    5e88:	9001      	str	r0, [sp, #4]
    5e8a:	000d      	movs	r5, r1
    5e8c:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5e8e:	0097      	lsls	r7, r2, #2
    5e90:	0038      	movs	r0, r7
    5e92:	4b5b      	ldr	r3, [pc, #364]	; (6000 <xTaskCreate+0x180>)
    5e94:	4798      	blx	r3
    5e96:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    5e98:	d100      	bne.n	5e9c <xTaskCreate+0x1c>
    5e9a:	e081      	b.n	5fa0 <xTaskCreate+0x120>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    5e9c:	204c      	movs	r0, #76	; 0x4c
    5e9e:	4b58      	ldr	r3, [pc, #352]	; (6000 <xTaskCreate+0x180>)
    5ea0:	4798      	blx	r3
    5ea2:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    5ea4:	d100      	bne.n	5ea8 <xTaskCreate+0x28>
    5ea6:	e078      	b.n	5f9a <xTaskCreate+0x11a>
					pxNewTCB->pxStack = pxStack;
    5ea8:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    5eaa:	1f38      	subs	r0, r7, #4
    5eac:	1830      	adds	r0, r6, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    5eae:	2307      	movs	r3, #7
    5eb0:	4398      	bics	r0, r3
    5eb2:	4680      	mov	r8, r0
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    5eb4:	782a      	ldrb	r2, [r5, #0]
    5eb6:	332d      	adds	r3, #45	; 0x2d
    5eb8:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    5eba:	782b      	ldrb	r3, [r5, #0]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d00d      	beq.n	5edc <xTaskCreate+0x5c>
    5ec0:	3501      	adds	r5, #1
    5ec2:	0023      	movs	r3, r4
    5ec4:	3335      	adds	r3, #53	; 0x35
    5ec6:	0020      	movs	r0, r4
    5ec8:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    5eca:	782a      	ldrb	r2, [r5, #0]
    5ecc:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    5ece:	782a      	ldrb	r2, [r5, #0]
    5ed0:	2a00      	cmp	r2, #0
    5ed2:	d003      	beq.n	5edc <xTaskCreate+0x5c>
    5ed4:	3501      	adds	r5, #1
    5ed6:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    5ed8:	4283      	cmp	r3, r0
    5eda:	d1f6      	bne.n	5eca <xTaskCreate+0x4a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    5edc:	2200      	movs	r2, #0
    5ede:	233b      	movs	r3, #59	; 0x3b
    5ee0:	54e2      	strb	r2, [r4, r3]
    5ee2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5ee4:	2f04      	cmp	r7, #4
    5ee6:	d900      	bls.n	5eea <xTaskCreate+0x6a>
    5ee8:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    5eea:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    5eec:	63e7      	str	r7, [r4, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
    5eee:	2600      	movs	r6, #0
    5ef0:	6426      	str	r6, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    5ef2:	1d23      	adds	r3, r4, #4
    5ef4:	9303      	str	r3, [sp, #12]
    5ef6:	0018      	movs	r0, r3
    5ef8:	4d42      	ldr	r5, [pc, #264]	; (6004 <xTaskCreate+0x184>)
    5efa:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    5efc:	0020      	movs	r0, r4
    5efe:	3018      	adds	r0, #24
    5f00:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    5f02:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5f04:	2305      	movs	r3, #5
    5f06:	1bdb      	subs	r3, r3, r7
    5f08:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    5f0a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    5f0c:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5f0e:	2348      	movs	r3, #72	; 0x48
    5f10:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    5f12:	9a02      	ldr	r2, [sp, #8]
    5f14:	9901      	ldr	r1, [sp, #4]
    5f16:	4640      	mov	r0, r8
    5f18:	4b3b      	ldr	r3, [pc, #236]	; (6008 <xTaskCreate+0x188>)
    5f1a:	4798      	blx	r3
    5f1c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    5f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5f20:	2b00      	cmp	r3, #0
    5f22:	d000      	beq.n	5f26 <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    5f24:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    5f26:	4b39      	ldr	r3, [pc, #228]	; (600c <xTaskCreate+0x18c>)
    5f28:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    5f2a:	4a39      	ldr	r2, [pc, #228]	; (6010 <xTaskCreate+0x190>)
    5f2c:	6813      	ldr	r3, [r2, #0]
    5f2e:	3301      	adds	r3, #1
    5f30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    5f32:	4b38      	ldr	r3, [pc, #224]	; (6014 <xTaskCreate+0x194>)
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	2b00      	cmp	r3, #0
    5f38:	d035      	beq.n	5fa6 <xTaskCreate+0x126>
			if( xSchedulerRunning == pdFALSE )
    5f3a:	4b37      	ldr	r3, [pc, #220]	; (6018 <xTaskCreate+0x198>)
    5f3c:	681b      	ldr	r3, [r3, #0]
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d107      	bne.n	5f52 <xTaskCreate+0xd2>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    5f42:	4b34      	ldr	r3, [pc, #208]	; (6014 <xTaskCreate+0x194>)
    5f44:	681b      	ldr	r3, [r3, #0]
    5f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5f48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5f4a:	4293      	cmp	r3, r2
    5f4c:	d801      	bhi.n	5f52 <xTaskCreate+0xd2>
					pxCurrentTCB = pxNewTCB;
    5f4e:	4b31      	ldr	r3, [pc, #196]	; (6014 <xTaskCreate+0x194>)
    5f50:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    5f52:	4a32      	ldr	r2, [pc, #200]	; (601c <xTaskCreate+0x19c>)
    5f54:	6813      	ldr	r3, [r2, #0]
    5f56:	3301      	adds	r3, #1
    5f58:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
    5f5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5f5c:	4a30      	ldr	r2, [pc, #192]	; (6020 <xTaskCreate+0x1a0>)
    5f5e:	6812      	ldr	r2, [r2, #0]
    5f60:	4293      	cmp	r3, r2
    5f62:	d901      	bls.n	5f68 <xTaskCreate+0xe8>
    5f64:	4a2e      	ldr	r2, [pc, #184]	; (6020 <xTaskCreate+0x1a0>)
    5f66:	6013      	str	r3, [r2, #0]
    5f68:	0098      	lsls	r0, r3, #2
    5f6a:	18c0      	adds	r0, r0, r3
    5f6c:	0080      	lsls	r0, r0, #2
    5f6e:	4b2d      	ldr	r3, [pc, #180]	; (6024 <xTaskCreate+0x1a4>)
    5f70:	1818      	adds	r0, r3, r0
    5f72:	9903      	ldr	r1, [sp, #12]
    5f74:	4b2c      	ldr	r3, [pc, #176]	; (6028 <xTaskCreate+0x1a8>)
    5f76:	4798      	blx	r3
	taskEXIT_CRITICAL();
    5f78:	4b2c      	ldr	r3, [pc, #176]	; (602c <xTaskCreate+0x1ac>)
    5f7a:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    5f7c:	4b26      	ldr	r3, [pc, #152]	; (6018 <xTaskCreate+0x198>)
    5f7e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    5f80:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    5f82:	2b00      	cmp	r3, #0
    5f84:	d005      	beq.n	5f92 <xTaskCreate+0x112>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    5f86:	4b23      	ldr	r3, [pc, #140]	; (6014 <xTaskCreate+0x194>)
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5f8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5f8e:	429a      	cmp	r2, r3
    5f90:	d331      	bcc.n	5ff6 <xTaskCreate+0x176>
	}
    5f92:	b004      	add	sp, #16
    5f94:	bc04      	pop	{r2}
    5f96:	4690      	mov	r8, r2
    5f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    5f9a:	0030      	movs	r0, r6
    5f9c:	4b24      	ldr	r3, [pc, #144]	; (6030 <xTaskCreate+0x1b0>)
    5f9e:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5fa0:	2001      	movs	r0, #1
    5fa2:	4240      	negs	r0, r0
    5fa4:	e7f5      	b.n	5f92 <xTaskCreate+0x112>
			pxCurrentTCB = pxNewTCB;
    5fa6:	4b1b      	ldr	r3, [pc, #108]	; (6014 <xTaskCreate+0x194>)
    5fa8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    5faa:	6813      	ldr	r3, [r2, #0]
    5fac:	2b01      	cmp	r3, #1
    5fae:	d1d0      	bne.n	5f52 <xTaskCreate+0xd2>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    5fb0:	4f1c      	ldr	r7, [pc, #112]	; (6024 <xTaskCreate+0x1a4>)
    5fb2:	0038      	movs	r0, r7
    5fb4:	4e1f      	ldr	r6, [pc, #124]	; (6034 <xTaskCreate+0x1b4>)
    5fb6:	47b0      	blx	r6
    5fb8:	0038      	movs	r0, r7
    5fba:	3014      	adds	r0, #20
    5fbc:	47b0      	blx	r6
    5fbe:	0038      	movs	r0, r7
    5fc0:	3028      	adds	r0, #40	; 0x28
    5fc2:	47b0      	blx	r6
    5fc4:	0038      	movs	r0, r7
    5fc6:	303c      	adds	r0, #60	; 0x3c
    5fc8:	47b0      	blx	r6
    5fca:	0038      	movs	r0, r7
    5fcc:	3050      	adds	r0, #80	; 0x50
    5fce:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    5fd0:	4b19      	ldr	r3, [pc, #100]	; (6038 <xTaskCreate+0x1b8>)
    5fd2:	4698      	mov	r8, r3
    5fd4:	0018      	movs	r0, r3
    5fd6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    5fd8:	4f18      	ldr	r7, [pc, #96]	; (603c <xTaskCreate+0x1bc>)
    5fda:	0038      	movs	r0, r7
    5fdc:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    5fde:	4818      	ldr	r0, [pc, #96]	; (6040 <xTaskCreate+0x1c0>)
    5fe0:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    5fe2:	4818      	ldr	r0, [pc, #96]	; (6044 <xTaskCreate+0x1c4>)
    5fe4:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    5fe6:	4818      	ldr	r0, [pc, #96]	; (6048 <xTaskCreate+0x1c8>)
    5fe8:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    5fea:	4b18      	ldr	r3, [pc, #96]	; (604c <xTaskCreate+0x1cc>)
    5fec:	4642      	mov	r2, r8
    5fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5ff0:	4b17      	ldr	r3, [pc, #92]	; (6050 <xTaskCreate+0x1d0>)
    5ff2:	601f      	str	r7, [r3, #0]
    5ff4:	e7ad      	b.n	5f52 <xTaskCreate+0xd2>
			taskYIELD_IF_USING_PREEMPTION();
    5ff6:	4b17      	ldr	r3, [pc, #92]	; (6054 <xTaskCreate+0x1d4>)
    5ff8:	4798      	blx	r3
			xReturn = pdPASS;
    5ffa:	2001      	movs	r0, #1
    5ffc:	e7c9      	b.n	5f92 <xTaskCreate+0x112>
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	00005465 	.word	0x00005465
    6004:	0000521b 	.word	0x0000521b
    6008:	000052f5 	.word	0x000052f5
    600c:	000053a5 	.word	0x000053a5
    6010:	20005030 	.word	0x20005030
    6014:	20004fc0 	.word	0x20004fc0
    6018:	20005090 	.word	0x20005090
    601c:	20005040 	.word	0x20005040
    6020:	20005044 	.word	0x20005044
    6024:	20004fcc 	.word	0x20004fcc
    6028:	00005221 	.word	0x00005221
    602c:	000053bd 	.word	0x000053bd
    6030:	000054d1 	.word	0x000054d1
    6034:	00005205 	.word	0x00005205
    6038:	20005048 	.word	0x20005048
    603c:	2000505c 	.word	0x2000505c
    6040:	2000507c 	.word	0x2000507c
    6044:	200050a8 	.word	0x200050a8
    6048:	20005094 	.word	0x20005094
    604c:	20004fc4 	.word	0x20004fc4
    6050:	20004fc8 	.word	0x20004fc8
    6054:	0000538d 	.word	0x0000538d

00006058 <vTaskStartScheduler>:
{
    6058:	b510      	push	{r4, lr}
    605a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    605c:	4b11      	ldr	r3, [pc, #68]	; (60a4 <vTaskStartScheduler+0x4c>)
    605e:	9301      	str	r3, [sp, #4]
    6060:	2300      	movs	r3, #0
    6062:	9300      	str	r3, [sp, #0]
    6064:	2264      	movs	r2, #100	; 0x64
    6066:	4910      	ldr	r1, [pc, #64]	; (60a8 <vTaskStartScheduler+0x50>)
    6068:	4810      	ldr	r0, [pc, #64]	; (60ac <vTaskStartScheduler+0x54>)
    606a:	4c11      	ldr	r4, [pc, #68]	; (60b0 <vTaskStartScheduler+0x58>)
    606c:	47a0      	blx	r4
		if( xReturn == pdPASS )
    606e:	2801      	cmp	r0, #1
    6070:	d003      	beq.n	607a <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    6072:	1c43      	adds	r3, r0, #1
    6074:	d013      	beq.n	609e <vTaskStartScheduler+0x46>
}
    6076:	b002      	add	sp, #8
    6078:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    607a:	4b0e      	ldr	r3, [pc, #56]	; (60b4 <vTaskStartScheduler+0x5c>)
    607c:	4798      	blx	r3
	if( xReturn == pdPASS )
    607e:	2801      	cmp	r0, #1
    6080:	d1f7      	bne.n	6072 <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    6082:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    6084:	2201      	movs	r2, #1
    6086:	4252      	negs	r2, r2
    6088:	4b0b      	ldr	r3, [pc, #44]	; (60b8 <vTaskStartScheduler+0x60>)
    608a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    608c:	3202      	adds	r2, #2
    608e:	4b0b      	ldr	r3, [pc, #44]	; (60bc <vTaskStartScheduler+0x64>)
    6090:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    6092:	2200      	movs	r2, #0
    6094:	4b0a      	ldr	r3, [pc, #40]	; (60c0 <vTaskStartScheduler+0x68>)
    6096:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    6098:	4b0a      	ldr	r3, [pc, #40]	; (60c4 <vTaskStartScheduler+0x6c>)
    609a:	4798      	blx	r3
    609c:	e7eb      	b.n	6076 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    609e:	b672      	cpsid	i
    60a0:	e7fe      	b.n	60a0 <vTaskStartScheduler+0x48>
    60a2:	46c0      	nop			; (mov r8, r8)
    60a4:	20005070 	.word	0x20005070
    60a8:	00008d58 	.word	0x00008d58
    60ac:	00005d79 	.word	0x00005d79
    60b0:	00005e81 	.word	0x00005e81
    60b4:	000067e5 	.word	0x000067e5
    60b8:	20005074 	.word	0x20005074
    60bc:	20005090 	.word	0x20005090
    60c0:	200050bc 	.word	0x200050bc
    60c4:	00005319 	.word	0x00005319

000060c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    60c8:	4a02      	ldr	r2, [pc, #8]	; (60d4 <vTaskSuspendAll+0xc>)
    60ca:	6813      	ldr	r3, [r2, #0]
    60cc:	3301      	adds	r3, #1
    60ce:	6013      	str	r3, [r2, #0]
}
    60d0:	4770      	bx	lr
    60d2:	46c0      	nop			; (mov r8, r8)
    60d4:	2000503c 	.word	0x2000503c

000060d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
    60d8:	4b01      	ldr	r3, [pc, #4]	; (60e0 <xTaskGetTickCount+0x8>)
    60da:	6818      	ldr	r0, [r3, #0]
}
    60dc:	4770      	bx	lr
    60de:	46c0      	nop			; (mov r8, r8)
    60e0:	200050bc 	.word	0x200050bc

000060e4 <xTaskIncrementTick>:
{
    60e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60e6:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    60e8:	4b38      	ldr	r3, [pc, #224]	; (61cc <xTaskIncrementTick+0xe8>)
    60ea:	681b      	ldr	r3, [r3, #0]
    60ec:	2b00      	cmp	r3, #0
    60ee:	d160      	bne.n	61b2 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    60f0:	4b37      	ldr	r3, [pc, #220]	; (61d0 <xTaskIncrementTick+0xec>)
    60f2:	681d      	ldr	r5, [r3, #0]
    60f4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    60f6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    60f8:	2d00      	cmp	r5, #0
    60fa:	d112      	bne.n	6122 <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
    60fc:	4b35      	ldr	r3, [pc, #212]	; (61d4 <xTaskIncrementTick+0xf0>)
    60fe:	681b      	ldr	r3, [r3, #0]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	2b00      	cmp	r3, #0
    6104:	d001      	beq.n	610a <xTaskIncrementTick+0x26>
    6106:	b672      	cpsid	i
    6108:	e7fe      	b.n	6108 <xTaskIncrementTick+0x24>
    610a:	4a32      	ldr	r2, [pc, #200]	; (61d4 <xTaskIncrementTick+0xf0>)
    610c:	6811      	ldr	r1, [r2, #0]
    610e:	4b32      	ldr	r3, [pc, #200]	; (61d8 <xTaskIncrementTick+0xf4>)
    6110:	6818      	ldr	r0, [r3, #0]
    6112:	6010      	str	r0, [r2, #0]
    6114:	6019      	str	r1, [r3, #0]
    6116:	4a31      	ldr	r2, [pc, #196]	; (61dc <xTaskIncrementTick+0xf8>)
    6118:	6813      	ldr	r3, [r2, #0]
    611a:	3301      	adds	r3, #1
    611c:	6013      	str	r3, [r2, #0]
    611e:	4b30      	ldr	r3, [pc, #192]	; (61e0 <xTaskIncrementTick+0xfc>)
    6120:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    6122:	4b30      	ldr	r3, [pc, #192]	; (61e4 <xTaskIncrementTick+0x100>)
    6124:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    6126:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    6128:	429d      	cmp	r5, r3
    612a:	d333      	bcc.n	6194 <xTaskIncrementTick+0xb0>
    612c:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    612e:	4f29      	ldr	r7, [pc, #164]	; (61d4 <xTaskIncrementTick+0xf0>)
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	681b      	ldr	r3, [r3, #0]
    6134:	2b00      	cmp	r3, #0
    6136:	d029      	beq.n	618c <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    6138:	4b26      	ldr	r3, [pc, #152]	; (61d4 <xTaskIncrementTick+0xf0>)
    613a:	681b      	ldr	r3, [r3, #0]
    613c:	68db      	ldr	r3, [r3, #12]
    613e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    6140:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    6142:	429d      	cmp	r5, r3
    6144:	d332      	bcc.n	61ac <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6146:	1d33      	adds	r3, r6, #4
    6148:	9301      	str	r3, [sp, #4]
    614a:	0018      	movs	r0, r3
    614c:	4b26      	ldr	r3, [pc, #152]	; (61e8 <xTaskIncrementTick+0x104>)
    614e:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    6150:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6152:	2b00      	cmp	r3, #0
    6154:	d003      	beq.n	615e <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    6156:	0030      	movs	r0, r6
    6158:	3018      	adds	r0, #24
    615a:	4b23      	ldr	r3, [pc, #140]	; (61e8 <xTaskIncrementTick+0x104>)
    615c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    615e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6160:	4a22      	ldr	r2, [pc, #136]	; (61ec <xTaskIncrementTick+0x108>)
    6162:	6812      	ldr	r2, [r2, #0]
    6164:	4293      	cmp	r3, r2
    6166:	d901      	bls.n	616c <xTaskIncrementTick+0x88>
    6168:	4a20      	ldr	r2, [pc, #128]	; (61ec <xTaskIncrementTick+0x108>)
    616a:	6013      	str	r3, [r2, #0]
    616c:	0098      	lsls	r0, r3, #2
    616e:	18c0      	adds	r0, r0, r3
    6170:	0080      	lsls	r0, r0, #2
    6172:	4b1f      	ldr	r3, [pc, #124]	; (61f0 <xTaskIncrementTick+0x10c>)
    6174:	1818      	adds	r0, r3, r0
    6176:	9901      	ldr	r1, [sp, #4]
    6178:	4b1e      	ldr	r3, [pc, #120]	; (61f4 <xTaskIncrementTick+0x110>)
    617a:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    617c:	4b1e      	ldr	r3, [pc, #120]	; (61f8 <xTaskIncrementTick+0x114>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    6182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6184:	429a      	cmp	r2, r3
    6186:	d3d3      	bcc.n	6130 <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
    6188:	2401      	movs	r4, #1
    618a:	e7d1      	b.n	6130 <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    618c:	2201      	movs	r2, #1
    618e:	4252      	negs	r2, r2
    6190:	4b14      	ldr	r3, [pc, #80]	; (61e4 <xTaskIncrementTick+0x100>)
    6192:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    6194:	4b18      	ldr	r3, [pc, #96]	; (61f8 <xTaskIncrementTick+0x114>)
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    619a:	0093      	lsls	r3, r2, #2
    619c:	189b      	adds	r3, r3, r2
    619e:	009b      	lsls	r3, r3, #2
    61a0:	4a13      	ldr	r2, [pc, #76]	; (61f0 <xTaskIncrementTick+0x10c>)
    61a2:	589b      	ldr	r3, [r3, r2]
    61a4:	2b01      	cmp	r3, #1
    61a6:	d909      	bls.n	61bc <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
    61a8:	2401      	movs	r4, #1
    61aa:	e007      	b.n	61bc <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
    61ac:	4a0d      	ldr	r2, [pc, #52]	; (61e4 <xTaskIncrementTick+0x100>)
    61ae:	6013      	str	r3, [r2, #0]
						break;
    61b0:	e7f0      	b.n	6194 <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
    61b2:	4a12      	ldr	r2, [pc, #72]	; (61fc <xTaskIncrementTick+0x118>)
    61b4:	6813      	ldr	r3, [r2, #0]
    61b6:	3301      	adds	r3, #1
    61b8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    61ba:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    61bc:	4b10      	ldr	r3, [pc, #64]	; (6200 <xTaskIncrementTick+0x11c>)
    61be:	681b      	ldr	r3, [r3, #0]
    61c0:	2b00      	cmp	r3, #0
    61c2:	d000      	beq.n	61c6 <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
    61c4:	2401      	movs	r4, #1
}
    61c6:	0020      	movs	r0, r4
    61c8:	b003      	add	sp, #12
    61ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61cc:	2000503c 	.word	0x2000503c
    61d0:	200050bc 	.word	0x200050bc
    61d4:	20004fc4 	.word	0x20004fc4
    61d8:	20004fc8 	.word	0x20004fc8
    61dc:	20005078 	.word	0x20005078
    61e0:	00005d4d 	.word	0x00005d4d
    61e4:	20005074 	.word	0x20005074
    61e8:	00005267 	.word	0x00005267
    61ec:	20005044 	.word	0x20005044
    61f0:	20004fcc 	.word	0x20004fcc
    61f4:	00005221 	.word	0x00005221
    61f8:	20004fc0 	.word	0x20004fc0
    61fc:	20005038 	.word	0x20005038
    6200:	200050c0 	.word	0x200050c0

00006204 <xTaskResumeAll>:
{
    6204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    6206:	4b30      	ldr	r3, [pc, #192]	; (62c8 <xTaskResumeAll+0xc4>)
    6208:	681b      	ldr	r3, [r3, #0]
    620a:	2b00      	cmp	r3, #0
    620c:	d101      	bne.n	6212 <xTaskResumeAll+0xe>
    620e:	b672      	cpsid	i
    6210:	e7fe      	b.n	6210 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    6212:	4b2e      	ldr	r3, [pc, #184]	; (62cc <xTaskResumeAll+0xc8>)
    6214:	4798      	blx	r3
		--uxSchedulerSuspended;
    6216:	4b2c      	ldr	r3, [pc, #176]	; (62c8 <xTaskResumeAll+0xc4>)
    6218:	681a      	ldr	r2, [r3, #0]
    621a:	3a01      	subs	r2, #1
    621c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    621e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    6220:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6222:	2b00      	cmp	r3, #0
    6224:	d103      	bne.n	622e <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    6226:	4b2a      	ldr	r3, [pc, #168]	; (62d0 <xTaskResumeAll+0xcc>)
    6228:	681b      	ldr	r3, [r3, #0]
    622a:	2b00      	cmp	r3, #0
    622c:	d103      	bne.n	6236 <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    622e:	4b29      	ldr	r3, [pc, #164]	; (62d4 <xTaskResumeAll+0xd0>)
    6230:	4798      	blx	r3
}
    6232:	0020      	movs	r0, r4
    6234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    6236:	4d28      	ldr	r5, [pc, #160]	; (62d8 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    6238:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    623a:	682b      	ldr	r3, [r5, #0]
    623c:	2b00      	cmp	r3, #0
    623e:	d022      	beq.n	6286 <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    6240:	68fb      	ldr	r3, [r7, #12]
    6242:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    6244:	0020      	movs	r0, r4
    6246:	3018      	adds	r0, #24
    6248:	4b24      	ldr	r3, [pc, #144]	; (62dc <xTaskResumeAll+0xd8>)
    624a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    624c:	1d26      	adds	r6, r4, #4
    624e:	0030      	movs	r0, r6
    6250:	4b22      	ldr	r3, [pc, #136]	; (62dc <xTaskResumeAll+0xd8>)
    6252:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    6254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6256:	4a22      	ldr	r2, [pc, #136]	; (62e0 <xTaskResumeAll+0xdc>)
    6258:	6812      	ldr	r2, [r2, #0]
    625a:	4293      	cmp	r3, r2
    625c:	d901      	bls.n	6262 <xTaskResumeAll+0x5e>
    625e:	4a20      	ldr	r2, [pc, #128]	; (62e0 <xTaskResumeAll+0xdc>)
    6260:	6013      	str	r3, [r2, #0]
    6262:	0098      	lsls	r0, r3, #2
    6264:	18c0      	adds	r0, r0, r3
    6266:	0080      	lsls	r0, r0, #2
    6268:	4b1e      	ldr	r3, [pc, #120]	; (62e4 <xTaskResumeAll+0xe0>)
    626a:	1818      	adds	r0, r3, r0
    626c:	0031      	movs	r1, r6
    626e:	4b1e      	ldr	r3, [pc, #120]	; (62e8 <xTaskResumeAll+0xe4>)
    6270:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6272:	4b1e      	ldr	r3, [pc, #120]	; (62ec <xTaskResumeAll+0xe8>)
    6274:	681b      	ldr	r3, [r3, #0]
    6276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6278:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    627a:	429a      	cmp	r2, r3
    627c:	d3dd      	bcc.n	623a <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    627e:	2201      	movs	r2, #1
    6280:	4b1b      	ldr	r3, [pc, #108]	; (62f0 <xTaskResumeAll+0xec>)
    6282:	601a      	str	r2, [r3, #0]
    6284:	e7d9      	b.n	623a <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    6286:	2c00      	cmp	r4, #0
    6288:	d001      	beq.n	628e <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    628a:	4b1a      	ldr	r3, [pc, #104]	; (62f4 <xTaskResumeAll+0xf0>)
    628c:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    628e:	4b1a      	ldr	r3, [pc, #104]	; (62f8 <xTaskResumeAll+0xf4>)
    6290:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    6292:	2c00      	cmp	r4, #0
    6294:	d00e      	beq.n	62b4 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    6296:	4f19      	ldr	r7, [pc, #100]	; (62fc <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    6298:	4e15      	ldr	r6, [pc, #84]	; (62f0 <xTaskResumeAll+0xec>)
    629a:	2501      	movs	r5, #1
    629c:	e002      	b.n	62a4 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    629e:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    62a0:	2c00      	cmp	r4, #0
    62a2:	d004      	beq.n	62ae <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    62a4:	47b8      	blx	r7
    62a6:	2800      	cmp	r0, #0
    62a8:	d0f9      	beq.n	629e <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    62aa:	6035      	str	r5, [r6, #0]
    62ac:	e7f7      	b.n	629e <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    62ae:	2200      	movs	r2, #0
    62b0:	4b11      	ldr	r3, [pc, #68]	; (62f8 <xTaskResumeAll+0xf4>)
    62b2:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    62b4:	4b0e      	ldr	r3, [pc, #56]	; (62f0 <xTaskResumeAll+0xec>)
    62b6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    62b8:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    62ba:	2b00      	cmp	r3, #0
    62bc:	d0b7      	beq.n	622e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    62be:	4b10      	ldr	r3, [pc, #64]	; (6300 <xTaskResumeAll+0xfc>)
    62c0:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    62c2:	3401      	adds	r4, #1
    62c4:	e7b3      	b.n	622e <xTaskResumeAll+0x2a>
    62c6:	46c0      	nop			; (mov r8, r8)
    62c8:	2000503c 	.word	0x2000503c
    62cc:	000053a5 	.word	0x000053a5
    62d0:	20005030 	.word	0x20005030
    62d4:	000053bd 	.word	0x000053bd
    62d8:	2000507c 	.word	0x2000507c
    62dc:	00005267 	.word	0x00005267
    62e0:	20005044 	.word	0x20005044
    62e4:	20004fcc 	.word	0x20004fcc
    62e8:	00005221 	.word	0x00005221
    62ec:	20004fc0 	.word	0x20004fc0
    62f0:	200050c0 	.word	0x200050c0
    62f4:	00005d4d 	.word	0x00005d4d
    62f8:	20005038 	.word	0x20005038
    62fc:	000060e5 	.word	0x000060e5
    6300:	0000538d 	.word	0x0000538d

00006304 <vTaskDelay>:
	{
    6304:	b510      	push	{r4, lr}
    6306:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    6308:	d00f      	beq.n	632a <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    630a:	4b09      	ldr	r3, [pc, #36]	; (6330 <vTaskDelay+0x2c>)
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	2b00      	cmp	r3, #0
    6310:	d001      	beq.n	6316 <vTaskDelay+0x12>
    6312:	b672      	cpsid	i
    6314:	e7fe      	b.n	6314 <vTaskDelay+0x10>
			vTaskSuspendAll();
    6316:	4b07      	ldr	r3, [pc, #28]	; (6334 <vTaskDelay+0x30>)
    6318:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    631a:	2100      	movs	r1, #0
    631c:	0020      	movs	r0, r4
    631e:	4b06      	ldr	r3, [pc, #24]	; (6338 <vTaskDelay+0x34>)
    6320:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    6322:	4b06      	ldr	r3, [pc, #24]	; (633c <vTaskDelay+0x38>)
    6324:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    6326:	2800      	cmp	r0, #0
    6328:	d101      	bne.n	632e <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    632a:	4b05      	ldr	r3, [pc, #20]	; (6340 <vTaskDelay+0x3c>)
    632c:	4798      	blx	r3
	}
    632e:	bd10      	pop	{r4, pc}
    6330:	2000503c 	.word	0x2000503c
    6334:	000060c9 	.word	0x000060c9
    6338:	00005df9 	.word	0x00005df9
    633c:	00006205 	.word	0x00006205
    6340:	0000538d 	.word	0x0000538d

00006344 <vTaskSwitchContext>:
{
    6344:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    6346:	4b21      	ldr	r3, [pc, #132]	; (63cc <vTaskSwitchContext+0x88>)
    6348:	681b      	ldr	r3, [r3, #0]
    634a:	2b00      	cmp	r3, #0
    634c:	d118      	bne.n	6380 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
    634e:	2200      	movs	r2, #0
    6350:	4b1f      	ldr	r3, [pc, #124]	; (63d0 <vTaskSwitchContext+0x8c>)
    6352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    6354:	4b1f      	ldr	r3, [pc, #124]	; (63d4 <vTaskSwitchContext+0x90>)
    6356:	681b      	ldr	r3, [r3, #0]
    6358:	009a      	lsls	r2, r3, #2
    635a:	18d2      	adds	r2, r2, r3
    635c:	0092      	lsls	r2, r2, #2
    635e:	491e      	ldr	r1, [pc, #120]	; (63d8 <vTaskSwitchContext+0x94>)
    6360:	5852      	ldr	r2, [r2, r1]
    6362:	2a00      	cmp	r2, #0
    6364:	d110      	bne.n	6388 <vTaskSwitchContext+0x44>
    6366:	2b00      	cmp	r3, #0
    6368:	d008      	beq.n	637c <vTaskSwitchContext+0x38>
    636a:	3b01      	subs	r3, #1
    636c:	009a      	lsls	r2, r3, #2
    636e:	18d2      	adds	r2, r2, r3
    6370:	0092      	lsls	r2, r2, #2
    6372:	5852      	ldr	r2, [r2, r1]
    6374:	2a00      	cmp	r2, #0
    6376:	d107      	bne.n	6388 <vTaskSwitchContext+0x44>
    6378:	2b00      	cmp	r3, #0
    637a:	d1f6      	bne.n	636a <vTaskSwitchContext+0x26>
    637c:	b672      	cpsid	i
    637e:	e7fe      	b.n	637e <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
    6380:	2201      	movs	r2, #1
    6382:	4b13      	ldr	r3, [pc, #76]	; (63d0 <vTaskSwitchContext+0x8c>)
    6384:	601a      	str	r2, [r3, #0]
}
    6386:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    6388:	4813      	ldr	r0, [pc, #76]	; (63d8 <vTaskSwitchContext+0x94>)
    638a:	009a      	lsls	r2, r3, #2
    638c:	18d1      	adds	r1, r2, r3
    638e:	0089      	lsls	r1, r1, #2
    6390:	1841      	adds	r1, r0, r1
    6392:	684c      	ldr	r4, [r1, #4]
    6394:	6864      	ldr	r4, [r4, #4]
    6396:	604c      	str	r4, [r1, #4]
    6398:	18d2      	adds	r2, r2, r3
    639a:	0092      	lsls	r2, r2, #2
    639c:	3208      	adds	r2, #8
    639e:	1882      	adds	r2, r0, r2
    63a0:	4294      	cmp	r4, r2
    63a2:	d00b      	beq.n	63bc <vTaskSwitchContext+0x78>
    63a4:	009a      	lsls	r2, r3, #2
    63a6:	18d2      	adds	r2, r2, r3
    63a8:	0092      	lsls	r2, r2, #2
    63aa:	490b      	ldr	r1, [pc, #44]	; (63d8 <vTaskSwitchContext+0x94>)
    63ac:	188a      	adds	r2, r1, r2
    63ae:	6852      	ldr	r2, [r2, #4]
    63b0:	68d1      	ldr	r1, [r2, #12]
    63b2:	4a0a      	ldr	r2, [pc, #40]	; (63dc <vTaskSwitchContext+0x98>)
    63b4:	6011      	str	r1, [r2, #0]
    63b6:	4a07      	ldr	r2, [pc, #28]	; (63d4 <vTaskSwitchContext+0x90>)
    63b8:	6013      	str	r3, [r2, #0]
}
    63ba:	e7e4      	b.n	6386 <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    63bc:	6860      	ldr	r0, [r4, #4]
    63be:	009a      	lsls	r2, r3, #2
    63c0:	18d2      	adds	r2, r2, r3
    63c2:	0092      	lsls	r2, r2, #2
    63c4:	4904      	ldr	r1, [pc, #16]	; (63d8 <vTaskSwitchContext+0x94>)
    63c6:	188a      	adds	r2, r1, r2
    63c8:	6050      	str	r0, [r2, #4]
    63ca:	e7eb      	b.n	63a4 <vTaskSwitchContext+0x60>
    63cc:	2000503c 	.word	0x2000503c
    63d0:	200050c0 	.word	0x200050c0
    63d4:	20005044 	.word	0x20005044
    63d8:	20004fcc 	.word	0x20004fcc
    63dc:	20004fc0 	.word	0x20004fc0

000063e0 <vTaskPlaceOnEventList>:
{
    63e0:	b510      	push	{r4, lr}
    63e2:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    63e4:	2800      	cmp	r0, #0
    63e6:	d101      	bne.n	63ec <vTaskPlaceOnEventList+0xc>
    63e8:	b672      	cpsid	i
    63ea:	e7fe      	b.n	63ea <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    63ec:	4b04      	ldr	r3, [pc, #16]	; (6400 <vTaskPlaceOnEventList+0x20>)
    63ee:	6819      	ldr	r1, [r3, #0]
    63f0:	3118      	adds	r1, #24
    63f2:	4b04      	ldr	r3, [pc, #16]	; (6404 <vTaskPlaceOnEventList+0x24>)
    63f4:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    63f6:	2101      	movs	r1, #1
    63f8:	0020      	movs	r0, r4
    63fa:	4b03      	ldr	r3, [pc, #12]	; (6408 <vTaskPlaceOnEventList+0x28>)
    63fc:	4798      	blx	r3
}
    63fe:	bd10      	pop	{r4, pc}
    6400:	20004fc0 	.word	0x20004fc0
    6404:	00005239 	.word	0x00005239
    6408:	00005df9 	.word	0x00005df9

0000640c <vTaskPlaceOnEventListRestricted>:
	{
    640c:	b570      	push	{r4, r5, r6, lr}
    640e:	000c      	movs	r4, r1
    6410:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    6412:	2800      	cmp	r0, #0
    6414:	d00d      	beq.n	6432 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    6416:	4b08      	ldr	r3, [pc, #32]	; (6438 <vTaskPlaceOnEventListRestricted+0x2c>)
    6418:	6819      	ldr	r1, [r3, #0]
    641a:	3118      	adds	r1, #24
    641c:	4b07      	ldr	r3, [pc, #28]	; (643c <vTaskPlaceOnEventListRestricted+0x30>)
    641e:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    6420:	2d00      	cmp	r5, #0
    6422:	d001      	beq.n	6428 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    6424:	2401      	movs	r4, #1
    6426:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    6428:	0029      	movs	r1, r5
    642a:	0020      	movs	r0, r4
    642c:	4b04      	ldr	r3, [pc, #16]	; (6440 <vTaskPlaceOnEventListRestricted+0x34>)
    642e:	4798      	blx	r3
	}
    6430:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    6432:	b672      	cpsid	i
    6434:	e7fe      	b.n	6434 <vTaskPlaceOnEventListRestricted+0x28>
    6436:	46c0      	nop			; (mov r8, r8)
    6438:	20004fc0 	.word	0x20004fc0
    643c:	00005221 	.word	0x00005221
    6440:	00005df9 	.word	0x00005df9

00006444 <xTaskRemoveFromEventList>:
{
    6444:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    6446:	68c3      	ldr	r3, [r0, #12]
    6448:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    644a:	2c00      	cmp	r4, #0
    644c:	d027      	beq.n	649e <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    644e:	0025      	movs	r5, r4
    6450:	3518      	adds	r5, #24
    6452:	0028      	movs	r0, r5
    6454:	4b15      	ldr	r3, [pc, #84]	; (64ac <xTaskRemoveFromEventList+0x68>)
    6456:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6458:	4b15      	ldr	r3, [pc, #84]	; (64b0 <xTaskRemoveFromEventList+0x6c>)
    645a:	681b      	ldr	r3, [r3, #0]
    645c:	2b00      	cmp	r3, #0
    645e:	d120      	bne.n	64a2 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    6460:	1d25      	adds	r5, r4, #4
    6462:	0028      	movs	r0, r5
    6464:	4b11      	ldr	r3, [pc, #68]	; (64ac <xTaskRemoveFromEventList+0x68>)
    6466:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    6468:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    646a:	4a12      	ldr	r2, [pc, #72]	; (64b4 <xTaskRemoveFromEventList+0x70>)
    646c:	6812      	ldr	r2, [r2, #0]
    646e:	4293      	cmp	r3, r2
    6470:	d901      	bls.n	6476 <xTaskRemoveFromEventList+0x32>
    6472:	4a10      	ldr	r2, [pc, #64]	; (64b4 <xTaskRemoveFromEventList+0x70>)
    6474:	6013      	str	r3, [r2, #0]
    6476:	0098      	lsls	r0, r3, #2
    6478:	18c0      	adds	r0, r0, r3
    647a:	0080      	lsls	r0, r0, #2
    647c:	4b0e      	ldr	r3, [pc, #56]	; (64b8 <xTaskRemoveFromEventList+0x74>)
    647e:	1818      	adds	r0, r3, r0
    6480:	0029      	movs	r1, r5
    6482:	4b0e      	ldr	r3, [pc, #56]	; (64bc <xTaskRemoveFromEventList+0x78>)
    6484:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    6486:	4b0e      	ldr	r3, [pc, #56]	; (64c0 <xTaskRemoveFromEventList+0x7c>)
    6488:	681b      	ldr	r3, [r3, #0]
    648a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    648e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    6490:	429a      	cmp	r2, r3
    6492:	d903      	bls.n	649c <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    6494:	2201      	movs	r2, #1
    6496:	4b0b      	ldr	r3, [pc, #44]	; (64c4 <xTaskRemoveFromEventList+0x80>)
    6498:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    649a:	3001      	adds	r0, #1
}
    649c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    649e:	b672      	cpsid	i
    64a0:	e7fe      	b.n	64a0 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    64a2:	0029      	movs	r1, r5
    64a4:	4808      	ldr	r0, [pc, #32]	; (64c8 <xTaskRemoveFromEventList+0x84>)
    64a6:	4b05      	ldr	r3, [pc, #20]	; (64bc <xTaskRemoveFromEventList+0x78>)
    64a8:	4798      	blx	r3
    64aa:	e7ec      	b.n	6486 <xTaskRemoveFromEventList+0x42>
    64ac:	00005267 	.word	0x00005267
    64b0:	2000503c 	.word	0x2000503c
    64b4:	20005044 	.word	0x20005044
    64b8:	20004fcc 	.word	0x20004fcc
    64bc:	00005221 	.word	0x00005221
    64c0:	20004fc0 	.word	0x20004fc0
    64c4:	200050c0 	.word	0x200050c0
    64c8:	2000507c 	.word	0x2000507c

000064cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    64cc:	4b03      	ldr	r3, [pc, #12]	; (64dc <vTaskInternalSetTimeOutState+0x10>)
    64ce:	681b      	ldr	r3, [r3, #0]
    64d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    64d2:	4b03      	ldr	r3, [pc, #12]	; (64e0 <vTaskInternalSetTimeOutState+0x14>)
    64d4:	681b      	ldr	r3, [r3, #0]
    64d6:	6043      	str	r3, [r0, #4]
}
    64d8:	4770      	bx	lr
    64da:	46c0      	nop			; (mov r8, r8)
    64dc:	20005078 	.word	0x20005078
    64e0:	200050bc 	.word	0x200050bc

000064e4 <xTaskCheckForTimeOut>:
{
    64e4:	b570      	push	{r4, r5, r6, lr}
    64e6:	0006      	movs	r6, r0
    64e8:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    64ea:	2800      	cmp	r0, #0
    64ec:	d01b      	beq.n	6526 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    64ee:	2900      	cmp	r1, #0
    64f0:	d01b      	beq.n	652a <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    64f2:	4b13      	ldr	r3, [pc, #76]	; (6540 <xTaskCheckForTimeOut+0x5c>)
    64f4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    64f6:	4b13      	ldr	r3, [pc, #76]	; (6544 <xTaskCheckForTimeOut+0x60>)
    64f8:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    64fa:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    64fc:	682b      	ldr	r3, [r5, #0]
    64fe:	1c58      	adds	r0, r3, #1
    6500:	d01c      	beq.n	653c <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    6502:	4811      	ldr	r0, [pc, #68]	; (6548 <xTaskCheckForTimeOut+0x64>)
    6504:	6800      	ldr	r0, [r0, #0]
    6506:	6834      	ldr	r4, [r6, #0]
    6508:	4284      	cmp	r4, r0
    650a:	d002      	beq.n	6512 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    650c:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    650e:	428a      	cmp	r2, r1
    6510:	d205      	bcs.n	651e <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    6512:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    6514:	429a      	cmp	r2, r3
    6516:	d30a      	bcc.n	652e <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    6518:	2300      	movs	r3, #0
    651a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    651c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    651e:	4b0b      	ldr	r3, [pc, #44]	; (654c <xTaskCheckForTimeOut+0x68>)
    6520:	4798      	blx	r3
}
    6522:	0020      	movs	r0, r4
    6524:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    6526:	b672      	cpsid	i
    6528:	e7fe      	b.n	6528 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    652a:	b672      	cpsid	i
    652c:	e7fe      	b.n	652c <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    652e:	1a9b      	subs	r3, r3, r2
    6530:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    6532:	0030      	movs	r0, r6
    6534:	4b06      	ldr	r3, [pc, #24]	; (6550 <xTaskCheckForTimeOut+0x6c>)
    6536:	4798      	blx	r3
			xReturn = pdFALSE;
    6538:	2400      	movs	r4, #0
    653a:	e7f0      	b.n	651e <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    653c:	2400      	movs	r4, #0
    653e:	e7ee      	b.n	651e <xTaskCheckForTimeOut+0x3a>
    6540:	000053a5 	.word	0x000053a5
    6544:	200050bc 	.word	0x200050bc
    6548:	20005078 	.word	0x20005078
    654c:	000053bd 	.word	0x000053bd
    6550:	000064cd 	.word	0x000064cd

00006554 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    6554:	2201      	movs	r2, #1
    6556:	4b01      	ldr	r3, [pc, #4]	; (655c <vTaskMissedYield+0x8>)
    6558:	601a      	str	r2, [r3, #0]
}
    655a:	4770      	bx	lr
    655c:	200050c0 	.word	0x200050c0

00006560 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    6560:	4b05      	ldr	r3, [pc, #20]	; (6578 <xTaskGetSchedulerState+0x18>)
    6562:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    6564:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    6566:	2b00      	cmp	r3, #0
    6568:	d004      	beq.n	6574 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    656a:	4b04      	ldr	r3, [pc, #16]	; (657c <xTaskGetSchedulerState+0x1c>)
    656c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    656e:	4243      	negs	r3, r0
    6570:	4158      	adcs	r0, r3
    6572:	0040      	lsls	r0, r0, #1
	}
    6574:	4770      	bx	lr
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	20005090 	.word	0x20005090
    657c:	2000503c 	.word	0x2000503c

00006580 <xTaskPriorityInherit>:
	{
    6580:	b570      	push	{r4, r5, r6, lr}
    6582:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6584:	d03c      	beq.n	6600 <xTaskPriorityInherit+0x80>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    6586:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    6588:	4b1e      	ldr	r3, [pc, #120]	; (6604 <xTaskPriorityInherit+0x84>)
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    658e:	429a      	cmp	r2, r3
    6590:	d22e      	bcs.n	65f0 <xTaskPriorityInherit+0x70>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    6592:	6983      	ldr	r3, [r0, #24]
    6594:	2b00      	cmp	r3, #0
    6596:	db05      	blt.n	65a4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6598:	4b1a      	ldr	r3, [pc, #104]	; (6604 <xTaskPriorityInherit+0x84>)
    659a:	681b      	ldr	r3, [r3, #0]
    659c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    659e:	2305      	movs	r3, #5
    65a0:	1a5b      	subs	r3, r3, r1
    65a2:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    65a4:	0093      	lsls	r3, r2, #2
    65a6:	189b      	adds	r3, r3, r2
    65a8:	009b      	lsls	r3, r3, #2
    65aa:	4a17      	ldr	r2, [pc, #92]	; (6608 <xTaskPriorityInherit+0x88>)
    65ac:	18d3      	adds	r3, r2, r3
    65ae:	6962      	ldr	r2, [r4, #20]
    65b0:	429a      	cmp	r2, r3
    65b2:	d005      	beq.n	65c0 <xTaskPriorityInherit+0x40>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    65b4:	4b13      	ldr	r3, [pc, #76]	; (6604 <xTaskPriorityInherit+0x84>)
    65b6:	681b      	ldr	r3, [r3, #0]
    65b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    65ba:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
    65bc:	2001      	movs	r0, #1
    65be:	e01e      	b.n	65fe <xTaskPriorityInherit+0x7e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    65c0:	1d25      	adds	r5, r4, #4
    65c2:	0028      	movs	r0, r5
    65c4:	4b11      	ldr	r3, [pc, #68]	; (660c <xTaskPriorityInherit+0x8c>)
    65c6:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    65c8:	4b0e      	ldr	r3, [pc, #56]	; (6604 <xTaskPriorityInherit+0x84>)
    65ca:	681b      	ldr	r3, [r3, #0]
    65cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    65ce:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    65d0:	4a0f      	ldr	r2, [pc, #60]	; (6610 <xTaskPriorityInherit+0x90>)
    65d2:	6812      	ldr	r2, [r2, #0]
    65d4:	4293      	cmp	r3, r2
    65d6:	d901      	bls.n	65dc <xTaskPriorityInherit+0x5c>
    65d8:	4a0d      	ldr	r2, [pc, #52]	; (6610 <xTaskPriorityInherit+0x90>)
    65da:	6013      	str	r3, [r2, #0]
    65dc:	0098      	lsls	r0, r3, #2
    65de:	18c0      	adds	r0, r0, r3
    65e0:	0080      	lsls	r0, r0, #2
    65e2:	4b09      	ldr	r3, [pc, #36]	; (6608 <xTaskPriorityInherit+0x88>)
    65e4:	1818      	adds	r0, r3, r0
    65e6:	0029      	movs	r1, r5
    65e8:	4b0a      	ldr	r3, [pc, #40]	; (6614 <xTaskPriorityInherit+0x94>)
    65ea:	4798      	blx	r3
				xReturn = pdTRUE;
    65ec:	2001      	movs	r0, #1
    65ee:	e006      	b.n	65fe <xTaskPriorityInherit+0x7e>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    65f0:	4b04      	ldr	r3, [pc, #16]	; (6604 <xTaskPriorityInherit+0x84>)
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    65f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    65f8:	4298      	cmp	r0, r3
    65fa:	4180      	sbcs	r0, r0
    65fc:	4240      	negs	r0, r0
	}
    65fe:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    6600:	2000      	movs	r0, #0
		return xReturn;
    6602:	e7fc      	b.n	65fe <xTaskPriorityInherit+0x7e>
    6604:	20004fc0 	.word	0x20004fc0
    6608:	20004fcc 	.word	0x20004fcc
    660c:	00005267 	.word	0x00005267
    6610:	20005044 	.word	0x20005044
    6614:	00005221 	.word	0x00005221

00006618 <xTaskPriorityDisinherit>:
	{
    6618:	b570      	push	{r4, r5, r6, lr}
    661a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    661c:	d02c      	beq.n	6678 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    661e:	4b18      	ldr	r3, [pc, #96]	; (6680 <xTaskPriorityDisinherit+0x68>)
    6620:	681b      	ldr	r3, [r3, #0]
    6622:	4298      	cmp	r0, r3
    6624:	d001      	beq.n	662a <xTaskPriorityDisinherit+0x12>
    6626:	b672      	cpsid	i
    6628:	e7fe      	b.n	6628 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    662a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    662c:	2b00      	cmp	r3, #0
    662e:	d101      	bne.n	6634 <xTaskPriorityDisinherit+0x1c>
    6630:	b672      	cpsid	i
    6632:	e7fe      	b.n	6632 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    6634:	3b01      	subs	r3, #1
    6636:	6403      	str	r3, [r0, #64]	; 0x40
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    6638:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    663a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    663c:	428a      	cmp	r2, r1
    663e:	d01d      	beq.n	667c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    6640:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    6642:	2b00      	cmp	r3, #0
    6644:	d117      	bne.n	6676 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6646:	1d25      	adds	r5, r4, #4
    6648:	0028      	movs	r0, r5
    664a:	4b0e      	ldr	r3, [pc, #56]	; (6684 <xTaskPriorityDisinherit+0x6c>)
    664c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    664e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6650:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6652:	2205      	movs	r2, #5
    6654:	1ad2      	subs	r2, r2, r3
    6656:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    6658:	4a0b      	ldr	r2, [pc, #44]	; (6688 <xTaskPriorityDisinherit+0x70>)
    665a:	6812      	ldr	r2, [r2, #0]
    665c:	4293      	cmp	r3, r2
    665e:	d901      	bls.n	6664 <xTaskPriorityDisinherit+0x4c>
    6660:	4a09      	ldr	r2, [pc, #36]	; (6688 <xTaskPriorityDisinherit+0x70>)
    6662:	6013      	str	r3, [r2, #0]
    6664:	009a      	lsls	r2, r3, #2
    6666:	18d3      	adds	r3, r2, r3
    6668:	009b      	lsls	r3, r3, #2
    666a:	4808      	ldr	r0, [pc, #32]	; (668c <xTaskPriorityDisinherit+0x74>)
    666c:	18c0      	adds	r0, r0, r3
    666e:	0029      	movs	r1, r5
    6670:	4b07      	ldr	r3, [pc, #28]	; (6690 <xTaskPriorityDisinherit+0x78>)
    6672:	4798      	blx	r3
					xReturn = pdTRUE;
    6674:	2001      	movs	r0, #1
	}
    6676:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    6678:	2000      	movs	r0, #0
    667a:	e7fc      	b.n	6676 <xTaskPriorityDisinherit+0x5e>
    667c:	2000      	movs	r0, #0
    667e:	e7fa      	b.n	6676 <xTaskPriorityDisinherit+0x5e>
    6680:	20004fc0 	.word	0x20004fc0
    6684:	00005267 	.word	0x00005267
    6688:	20005044 	.word	0x20005044
    668c:	20004fcc 	.word	0x20004fcc
    6690:	00005221 	.word	0x00005221

00006694 <vTaskPriorityDisinheritAfterTimeout>:
	{
    6694:	b570      	push	{r4, r5, r6, lr}
    6696:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    6698:	d00d      	beq.n	66b6 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    669a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    669c:	2b00      	cmp	r3, #0
    669e:	d101      	bne.n	66a4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    66a0:	b672      	cpsid	i
    66a2:	e7fe      	b.n	66a2 <vTaskPriorityDisinheritAfterTimeout+0xe>
    66a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    66a6:	428a      	cmp	r2, r1
    66a8:	d200      	bcs.n	66ac <vTaskPriorityDisinheritAfterTimeout+0x18>
    66aa:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    66ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    66ae:	4291      	cmp	r1, r2
    66b0:	d001      	beq.n	66b6 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    66b2:	2b01      	cmp	r3, #1
    66b4:	d000      	beq.n	66b8 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    66b6:	bd70      	pop	{r4, r5, r6, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    66b8:	4b14      	ldr	r3, [pc, #80]	; (670c <vTaskPriorityDisinheritAfterTimeout+0x78>)
    66ba:	681b      	ldr	r3, [r3, #0]
    66bc:	429c      	cmp	r4, r3
    66be:	d101      	bne.n	66c4 <vTaskPriorityDisinheritAfterTimeout+0x30>
    66c0:	b672      	cpsid	i
    66c2:	e7fe      	b.n	66c2 <vTaskPriorityDisinheritAfterTimeout+0x2e>
					pxTCB->uxPriority = uxPriorityToUse;
    66c4:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    66c6:	69a3      	ldr	r3, [r4, #24]
    66c8:	2b00      	cmp	r3, #0
    66ca:	db02      	blt.n	66d2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    66cc:	2305      	movs	r3, #5
    66ce:	1a9a      	subs	r2, r3, r2
    66d0:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    66d2:	008b      	lsls	r3, r1, #2
    66d4:	185b      	adds	r3, r3, r1
    66d6:	009b      	lsls	r3, r3, #2
    66d8:	4a0d      	ldr	r2, [pc, #52]	; (6710 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    66da:	18d3      	adds	r3, r2, r3
    66dc:	6962      	ldr	r2, [r4, #20]
    66de:	429a      	cmp	r2, r3
    66e0:	d1e9      	bne.n	66b6 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    66e2:	1d25      	adds	r5, r4, #4
    66e4:	0028      	movs	r0, r5
    66e6:	4b0b      	ldr	r3, [pc, #44]	; (6714 <vTaskPriorityDisinheritAfterTimeout+0x80>)
    66e8:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    66ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    66ec:	4a0a      	ldr	r2, [pc, #40]	; (6718 <vTaskPriorityDisinheritAfterTimeout+0x84>)
    66ee:	6812      	ldr	r2, [r2, #0]
    66f0:	4293      	cmp	r3, r2
    66f2:	d901      	bls.n	66f8 <vTaskPriorityDisinheritAfterTimeout+0x64>
    66f4:	4a08      	ldr	r2, [pc, #32]	; (6718 <vTaskPriorityDisinheritAfterTimeout+0x84>)
    66f6:	6013      	str	r3, [r2, #0]
    66f8:	0098      	lsls	r0, r3, #2
    66fa:	18c0      	adds	r0, r0, r3
    66fc:	0080      	lsls	r0, r0, #2
    66fe:	4b04      	ldr	r3, [pc, #16]	; (6710 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    6700:	1818      	adds	r0, r3, r0
    6702:	0029      	movs	r1, r5
    6704:	4b05      	ldr	r3, [pc, #20]	; (671c <vTaskPriorityDisinheritAfterTimeout+0x88>)
    6706:	4798      	blx	r3
	}
    6708:	e7d5      	b.n	66b6 <vTaskPriorityDisinheritAfterTimeout+0x22>
    670a:	46c0      	nop			; (mov r8, r8)
    670c:	20004fc0 	.word	0x20004fc0
    6710:	20004fcc 	.word	0x20004fcc
    6714:	00005267 	.word	0x00005267
    6718:	20005044 	.word	0x20005044
    671c:	00005221 	.word	0x00005221

00006720 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    6720:	4b05      	ldr	r3, [pc, #20]	; (6738 <pvTaskIncrementMutexHeldCount+0x18>)
    6722:	681b      	ldr	r3, [r3, #0]
    6724:	2b00      	cmp	r3, #0
    6726:	d004      	beq.n	6732 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    6728:	4b03      	ldr	r3, [pc, #12]	; (6738 <pvTaskIncrementMutexHeldCount+0x18>)
    672a:	681a      	ldr	r2, [r3, #0]
    672c:	6c13      	ldr	r3, [r2, #64]	; 0x40
    672e:	3301      	adds	r3, #1
    6730:	6413      	str	r3, [r2, #64]	; 0x40
		return pxCurrentTCB;
    6732:	4b01      	ldr	r3, [pc, #4]	; (6738 <pvTaskIncrementMutexHeldCount+0x18>)
    6734:	6818      	ldr	r0, [r3, #0]
	}
    6736:	4770      	bx	lr
    6738:	20004fc0 	.word	0x20004fc0

0000673c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    673c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    673e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6740:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    6742:	4291      	cmp	r1, r2
    6744:	d80b      	bhi.n	675e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6746:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6748:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    674a:	6983      	ldr	r3, [r0, #24]
    674c:	429a      	cmp	r2, r3
    674e:	d211      	bcs.n	6774 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    6750:	1d01      	adds	r1, r0, #4
    6752:	4b09      	ldr	r3, [pc, #36]	; (6778 <prvInsertTimerInActiveList+0x3c>)
    6754:	6818      	ldr	r0, [r3, #0]
    6756:	4b09      	ldr	r3, [pc, #36]	; (677c <prvInsertTimerInActiveList+0x40>)
    6758:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    675a:	2400      	movs	r4, #0
    675c:	e00a      	b.n	6774 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    675e:	429a      	cmp	r2, r3
    6760:	d202      	bcs.n	6768 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    6762:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    6764:	4299      	cmp	r1, r3
    6766:	d205      	bcs.n	6774 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6768:	1d01      	adds	r1, r0, #4
    676a:	4b05      	ldr	r3, [pc, #20]	; (6780 <prvInsertTimerInActiveList+0x44>)
    676c:	6818      	ldr	r0, [r3, #0]
    676e:	4b03      	ldr	r3, [pc, #12]	; (677c <prvInsertTimerInActiveList+0x40>)
    6770:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    6772:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    6774:	0020      	movs	r0, r4
    6776:	bd10      	pop	{r4, pc}
    6778:	200050c8 	.word	0x200050c8
    677c:	00005239 	.word	0x00005239
    6780:	200050c4 	.word	0x200050c4

00006784 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    6784:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    6786:	4b0e      	ldr	r3, [pc, #56]	; (67c0 <prvCheckForValidListAndQueue+0x3c>)
    6788:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    678a:	4b0e      	ldr	r3, [pc, #56]	; (67c4 <prvCheckForValidListAndQueue+0x40>)
    678c:	681b      	ldr	r3, [r3, #0]
    678e:	2b00      	cmp	r3, #0
    6790:	d002      	beq.n	6798 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6792:	4b0d      	ldr	r3, [pc, #52]	; (67c8 <prvCheckForValidListAndQueue+0x44>)
    6794:	4798      	blx	r3
}
    6796:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    6798:	4d0c      	ldr	r5, [pc, #48]	; (67cc <prvCheckForValidListAndQueue+0x48>)
    679a:	0028      	movs	r0, r5
    679c:	4e0c      	ldr	r6, [pc, #48]	; (67d0 <prvCheckForValidListAndQueue+0x4c>)
    679e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    67a0:	4c0c      	ldr	r4, [pc, #48]	; (67d4 <prvCheckForValidListAndQueue+0x50>)
    67a2:	0020      	movs	r0, r4
    67a4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    67a6:	4b0c      	ldr	r3, [pc, #48]	; (67d8 <prvCheckForValidListAndQueue+0x54>)
    67a8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    67aa:	4b0c      	ldr	r3, [pc, #48]	; (67dc <prvCheckForValidListAndQueue+0x58>)
    67ac:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    67ae:	2200      	movs	r2, #0
    67b0:	210c      	movs	r1, #12
    67b2:	2002      	movs	r0, #2
    67b4:	4b0a      	ldr	r3, [pc, #40]	; (67e0 <prvCheckForValidListAndQueue+0x5c>)
    67b6:	4798      	blx	r3
    67b8:	4b02      	ldr	r3, [pc, #8]	; (67c4 <prvCheckForValidListAndQueue+0x40>)
    67ba:	6018      	str	r0, [r3, #0]
    67bc:	e7e9      	b.n	6792 <prvCheckForValidListAndQueue+0xe>
    67be:	46c0      	nop			; (mov r8, r8)
    67c0:	000053a5 	.word	0x000053a5
    67c4:	200050f8 	.word	0x200050f8
    67c8:	000053bd 	.word	0x000053bd
    67cc:	200050cc 	.word	0x200050cc
    67d0:	00005205 	.word	0x00005205
    67d4:	200050e0 	.word	0x200050e0
    67d8:	200050c4 	.word	0x200050c4
    67dc:	200050c8 	.word	0x200050c8
    67e0:	00005731 	.word	0x00005731

000067e4 <xTimerCreateTimerTask>:
{
    67e4:	b510      	push	{r4, lr}
    67e6:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    67e8:	4b0a      	ldr	r3, [pc, #40]	; (6814 <xTimerCreateTimerTask+0x30>)
    67ea:	4798      	blx	r3
	if( xTimerQueue != NULL )
    67ec:	4b0a      	ldr	r3, [pc, #40]	; (6818 <xTimerCreateTimerTask+0x34>)
    67ee:	681b      	ldr	r3, [r3, #0]
    67f0:	2b00      	cmp	r3, #0
    67f2:	d00d      	beq.n	6810 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    67f4:	4b09      	ldr	r3, [pc, #36]	; (681c <xTimerCreateTimerTask+0x38>)
    67f6:	9301      	str	r3, [sp, #4]
    67f8:	2302      	movs	r3, #2
    67fa:	9300      	str	r3, [sp, #0]
    67fc:	2300      	movs	r3, #0
    67fe:	2250      	movs	r2, #80	; 0x50
    6800:	4907      	ldr	r1, [pc, #28]	; (6820 <xTimerCreateTimerTask+0x3c>)
    6802:	4808      	ldr	r0, [pc, #32]	; (6824 <xTimerCreateTimerTask+0x40>)
    6804:	4c08      	ldr	r4, [pc, #32]	; (6828 <xTimerCreateTimerTask+0x44>)
    6806:	47a0      	blx	r4
	configASSERT( xReturn );
    6808:	2800      	cmp	r0, #0
    680a:	d001      	beq.n	6810 <xTimerCreateTimerTask+0x2c>
}
    680c:	b002      	add	sp, #8
    680e:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    6810:	b672      	cpsid	i
    6812:	e7fe      	b.n	6812 <xTimerCreateTimerTask+0x2e>
    6814:	00006785 	.word	0x00006785
    6818:	200050f8 	.word	0x200050f8
    681c:	200050fc 	.word	0x200050fc
    6820:	00008d88 	.word	0x00008d88
    6824:	00006951 	.word	0x00006951
    6828:	00005e81 	.word	0x00005e81

0000682c <xTimerGenericCommand>:
{
    682c:	b530      	push	{r4, r5, lr}
    682e:	b085      	sub	sp, #20
    6830:	0004      	movs	r4, r0
    6832:	001d      	movs	r5, r3
	configASSERT( xTimer );
    6834:	2800      	cmp	r0, #0
    6836:	d014      	beq.n	6862 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    6838:	4b13      	ldr	r3, [pc, #76]	; (6888 <xTimerGenericCommand+0x5c>)
    683a:	6818      	ldr	r0, [r3, #0]
    683c:	2800      	cmp	r0, #0
    683e:	d021      	beq.n	6884 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    6840:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6842:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    6844:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    6846:	2905      	cmp	r1, #5
    6848:	dc15      	bgt.n	6876 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    684a:	4b10      	ldr	r3, [pc, #64]	; (688c <xTimerGenericCommand+0x60>)
    684c:	4798      	blx	r3
    684e:	2802      	cmp	r0, #2
    6850:	d009      	beq.n	6866 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    6852:	4b0d      	ldr	r3, [pc, #52]	; (6888 <xTimerGenericCommand+0x5c>)
    6854:	6818      	ldr	r0, [r3, #0]
    6856:	2300      	movs	r3, #0
    6858:	2200      	movs	r2, #0
    685a:	a901      	add	r1, sp, #4
    685c:	4c0c      	ldr	r4, [pc, #48]	; (6890 <xTimerGenericCommand+0x64>)
    685e:	47a0      	blx	r4
    6860:	e00e      	b.n	6880 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    6862:	b672      	cpsid	i
    6864:	e7fe      	b.n	6864 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    6866:	4b08      	ldr	r3, [pc, #32]	; (6888 <xTimerGenericCommand+0x5c>)
    6868:	6818      	ldr	r0, [r3, #0]
    686a:	2300      	movs	r3, #0
    686c:	9a08      	ldr	r2, [sp, #32]
    686e:	a901      	add	r1, sp, #4
    6870:	4c07      	ldr	r4, [pc, #28]	; (6890 <xTimerGenericCommand+0x64>)
    6872:	47a0      	blx	r4
    6874:	e004      	b.n	6880 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    6876:	2300      	movs	r3, #0
    6878:	002a      	movs	r2, r5
    687a:	a901      	add	r1, sp, #4
    687c:	4c05      	ldr	r4, [pc, #20]	; (6894 <xTimerGenericCommand+0x68>)
    687e:	47a0      	blx	r4
}
    6880:	b005      	add	sp, #20
    6882:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    6884:	2000      	movs	r0, #0
	return xReturn;
    6886:	e7fb      	b.n	6880 <xTimerGenericCommand+0x54>
    6888:	200050f8 	.word	0x200050f8
    688c:	00006561 	.word	0x00006561
    6890:	00005779 	.word	0x00005779
    6894:	00005931 	.word	0x00005931

00006898 <prvSampleTimeNow>:
{
    6898:	b5f0      	push	{r4, r5, r6, r7, lr}
    689a:	46d6      	mov	lr, sl
    689c:	464f      	mov	r7, r9
    689e:	4646      	mov	r6, r8
    68a0:	b5c0      	push	{r6, r7, lr}
    68a2:	b082      	sub	sp, #8
    68a4:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    68a6:	4b23      	ldr	r3, [pc, #140]	; (6934 <prvSampleTimeNow+0x9c>)
    68a8:	4798      	blx	r3
    68aa:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    68ac:	4b22      	ldr	r3, [pc, #136]	; (6938 <prvSampleTimeNow+0xa0>)
    68ae:	681b      	ldr	r3, [r3, #0]
    68b0:	4298      	cmp	r0, r3
    68b2:	d317      	bcc.n	68e4 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    68b4:	2300      	movs	r3, #0
    68b6:	4642      	mov	r2, r8
    68b8:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    68ba:	4b1f      	ldr	r3, [pc, #124]	; (6938 <prvSampleTimeNow+0xa0>)
    68bc:	4652      	mov	r2, sl
    68be:	601a      	str	r2, [r3, #0]
}
    68c0:	4650      	mov	r0, sl
    68c2:	b002      	add	sp, #8
    68c4:	bc1c      	pop	{r2, r3, r4}
    68c6:	4690      	mov	r8, r2
    68c8:	4699      	mov	r9, r3
    68ca:	46a2      	mov	sl, r4
    68cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    68ce:	2300      	movs	r3, #0
    68d0:	9300      	str	r3, [sp, #0]
    68d2:	003a      	movs	r2, r7
    68d4:	2100      	movs	r1, #0
    68d6:	0020      	movs	r0, r4
    68d8:	4c18      	ldr	r4, [pc, #96]	; (693c <prvSampleTimeNow+0xa4>)
    68da:	47a0      	blx	r4
				configASSERT( xResult );
    68dc:	2800      	cmp	r0, #0
    68de:	d104      	bne.n	68ea <prvSampleTimeNow+0x52>
    68e0:	b672      	cpsid	i
    68e2:	e7fe      	b.n	68e2 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    68e4:	4d16      	ldr	r5, [pc, #88]	; (6940 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    68e6:	4b17      	ldr	r3, [pc, #92]	; (6944 <prvSampleTimeNow+0xac>)
    68e8:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    68ea:	682b      	ldr	r3, [r5, #0]
    68ec:	681a      	ldr	r2, [r3, #0]
    68ee:	2a00      	cmp	r2, #0
    68f0:	d017      	beq.n	6922 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    68f2:	68db      	ldr	r3, [r3, #12]
    68f4:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    68f6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    68f8:	1d26      	adds	r6, r4, #4
    68fa:	0030      	movs	r0, r6
    68fc:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    68fe:	0020      	movs	r0, r4
    6900:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6902:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6904:	69e3      	ldr	r3, [r4, #28]
    6906:	2b01      	cmp	r3, #1
    6908:	d1ef      	bne.n	68ea <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    690a:	69a3      	ldr	r3, [r4, #24]
    690c:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    690e:	429f      	cmp	r7, r3
    6910:	d2dd      	bcs.n	68ce <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6912:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6914:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6916:	4b0a      	ldr	r3, [pc, #40]	; (6940 <prvSampleTimeNow+0xa8>)
    6918:	6818      	ldr	r0, [r3, #0]
    691a:	0031      	movs	r1, r6
    691c:	4b0a      	ldr	r3, [pc, #40]	; (6948 <prvSampleTimeNow+0xb0>)
    691e:	4798      	blx	r3
    6920:	e7e3      	b.n	68ea <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    6922:	4a0a      	ldr	r2, [pc, #40]	; (694c <prvSampleTimeNow+0xb4>)
    6924:	4906      	ldr	r1, [pc, #24]	; (6940 <prvSampleTimeNow+0xa8>)
    6926:	6810      	ldr	r0, [r2, #0]
    6928:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    692a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    692c:	2301      	movs	r3, #1
    692e:	4642      	mov	r2, r8
    6930:	6013      	str	r3, [r2, #0]
    6932:	e7c2      	b.n	68ba <prvSampleTimeNow+0x22>
    6934:	000060d9 	.word	0x000060d9
    6938:	200050f4 	.word	0x200050f4
    693c:	0000682d 	.word	0x0000682d
    6940:	200050c4 	.word	0x200050c4
    6944:	00005267 	.word	0x00005267
    6948:	00005239 	.word	0x00005239
    694c:	200050c8 	.word	0x200050c8

00006950 <prvTimerTask>:
{
    6950:	b5f0      	push	{r4, r5, r6, r7, lr}
    6952:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6954:	4f52      	ldr	r7, [pc, #328]	; (6aa0 <prvTimerTask+0x150>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    6956:	4b53      	ldr	r3, [pc, #332]	; (6aa4 <prvTimerTask+0x154>)
    6958:	681b      	ldr	r3, [r3, #0]
    695a:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    695c:	2a00      	cmp	r2, #0
    695e:	d00e      	beq.n	697e <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6960:	68db      	ldr	r3, [r3, #12]
    6962:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    6964:	4b50      	ldr	r3, [pc, #320]	; (6aa8 <prvTimerTask+0x158>)
    6966:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    6968:	a805      	add	r0, sp, #20
    696a:	4b50      	ldr	r3, [pc, #320]	; (6aac <prvTimerTask+0x15c>)
    696c:	4798      	blx	r3
    696e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    6970:	9b05      	ldr	r3, [sp, #20]
    6972:	2b00      	cmp	r3, #0
    6974:	d15f      	bne.n	6a36 <prvTimerTask+0xe6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    6976:	42a0      	cmp	r0, r4
    6978:	d236      	bcs.n	69e8 <prvTimerTask+0x98>
    697a:	2200      	movs	r2, #0
    697c:	e00f      	b.n	699e <prvTimerTask+0x4e>
	vTaskSuspendAll();
    697e:	4b4a      	ldr	r3, [pc, #296]	; (6aa8 <prvTimerTask+0x158>)
    6980:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    6982:	a805      	add	r0, sp, #20
    6984:	4b49      	ldr	r3, [pc, #292]	; (6aac <prvTimerTask+0x15c>)
    6986:	4798      	blx	r3
    6988:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    698a:	9b05      	ldr	r3, [sp, #20]
    698c:	2b00      	cmp	r3, #0
    698e:	d152      	bne.n	6a36 <prvTimerTask+0xe6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    6990:	4b47      	ldr	r3, [pc, #284]	; (6ab0 <prvTimerTask+0x160>)
    6992:	681b      	ldr	r3, [r3, #0]
    6994:	681b      	ldr	r3, [r3, #0]
    6996:	425a      	negs	r2, r3
    6998:	415a      	adcs	r2, r3
    699a:	b2d2      	uxtb	r2, r2
    699c:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    699e:	1b61      	subs	r1, r4, r5
    69a0:	4b44      	ldr	r3, [pc, #272]	; (6ab4 <prvTimerTask+0x164>)
    69a2:	6818      	ldr	r0, [r3, #0]
    69a4:	4b44      	ldr	r3, [pc, #272]	; (6ab8 <prvTimerTask+0x168>)
    69a6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    69a8:	4b44      	ldr	r3, [pc, #272]	; (6abc <prvTimerTask+0x16c>)
    69aa:	4798      	blx	r3
    69ac:	2800      	cmp	r0, #0
    69ae:	d03f      	beq.n	6a30 <prvTimerTask+0xe0>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    69b0:	4d40      	ldr	r5, [pc, #256]	; (6ab4 <prvTimerTask+0x164>)
    69b2:	4c43      	ldr	r4, [pc, #268]	; (6ac0 <prvTimerTask+0x170>)
    69b4:	2200      	movs	r2, #0
    69b6:	a905      	add	r1, sp, #20
    69b8:	6828      	ldr	r0, [r5, #0]
    69ba:	47a0      	blx	r4
    69bc:	2800      	cmp	r0, #0
    69be:	d0ca      	beq.n	6956 <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    69c0:	9b05      	ldr	r3, [sp, #20]
    69c2:	9303      	str	r3, [sp, #12]
    69c4:	2b00      	cmp	r3, #0
    69c6:	dbf5      	blt.n	69b4 <prvTimerTask+0x64>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    69c8:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    69ca:	6973      	ldr	r3, [r6, #20]
    69cc:	2b00      	cmp	r3, #0
    69ce:	d001      	beq.n	69d4 <prvTimerTask+0x84>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    69d0:	1d30      	adds	r0, r6, #4
    69d2:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    69d4:	a804      	add	r0, sp, #16
    69d6:	4b35      	ldr	r3, [pc, #212]	; (6aac <prvTimerTask+0x15c>)
    69d8:	4798      	blx	r3
			switch( xMessage.xMessageID )
    69da:	9b05      	ldr	r3, [sp, #20]
    69dc:	2b09      	cmp	r3, #9
    69de:	d8e9      	bhi.n	69b4 <prvTimerTask+0x64>
    69e0:	009b      	lsls	r3, r3, #2
    69e2:	4a38      	ldr	r2, [pc, #224]	; (6ac4 <prvTimerTask+0x174>)
    69e4:	58d3      	ldr	r3, [r2, r3]
    69e6:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    69e8:	4b34      	ldr	r3, [pc, #208]	; (6abc <prvTimerTask+0x16c>)
    69ea:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    69ec:	4b2d      	ldr	r3, [pc, #180]	; (6aa4 <prvTimerTask+0x154>)
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	68db      	ldr	r3, [r3, #12]
    69f2:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    69f4:	1d30      	adds	r0, r6, #4
    69f6:	4b2a      	ldr	r3, [pc, #168]	; (6aa0 <prvTimerTask+0x150>)
    69f8:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    69fa:	69f3      	ldr	r3, [r6, #28]
    69fc:	2b01      	cmp	r3, #1
    69fe:	d003      	beq.n	6a08 <prvTimerTask+0xb8>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6a00:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6a02:	0030      	movs	r0, r6
    6a04:	4798      	blx	r3
    6a06:	e7d3      	b.n	69b0 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    6a08:	69b3      	ldr	r3, [r6, #24]
    6a0a:	18e1      	adds	r1, r4, r3
    6a0c:	0023      	movs	r3, r4
    6a0e:	002a      	movs	r2, r5
    6a10:	0030      	movs	r0, r6
    6a12:	4d2d      	ldr	r5, [pc, #180]	; (6ac8 <prvTimerTask+0x178>)
    6a14:	47a8      	blx	r5
    6a16:	2800      	cmp	r0, #0
    6a18:	d0f2      	beq.n	6a00 <prvTimerTask+0xb0>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6a1a:	2300      	movs	r3, #0
    6a1c:	9300      	str	r3, [sp, #0]
    6a1e:	0022      	movs	r2, r4
    6a20:	2100      	movs	r1, #0
    6a22:	0030      	movs	r0, r6
    6a24:	4c29      	ldr	r4, [pc, #164]	; (6acc <prvTimerTask+0x17c>)
    6a26:	47a0      	blx	r4
			configASSERT( xResult );
    6a28:	2800      	cmp	r0, #0
    6a2a:	d1e9      	bne.n	6a00 <prvTimerTask+0xb0>
    6a2c:	b672      	cpsid	i
    6a2e:	e7fe      	b.n	6a2e <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
    6a30:	4b27      	ldr	r3, [pc, #156]	; (6ad0 <prvTimerTask+0x180>)
    6a32:	4798      	blx	r3
    6a34:	e7bc      	b.n	69b0 <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    6a36:	4b21      	ldr	r3, [pc, #132]	; (6abc <prvTimerTask+0x16c>)
    6a38:	4798      	blx	r3
    6a3a:	e7b9      	b.n	69b0 <prvTimerTask+0x60>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    6a3c:	9b06      	ldr	r3, [sp, #24]
    6a3e:	69b2      	ldr	r2, [r6, #24]
    6a40:	4694      	mov	ip, r2
    6a42:	4463      	add	r3, ip
    6a44:	0019      	movs	r1, r3
    6a46:	9b06      	ldr	r3, [sp, #24]
    6a48:	0002      	movs	r2, r0
    6a4a:	0030      	movs	r0, r6
    6a4c:	4c1e      	ldr	r4, [pc, #120]	; (6ac8 <prvTimerTask+0x178>)
    6a4e:	47a0      	blx	r4
    6a50:	2800      	cmp	r0, #0
    6a52:	d0ae      	beq.n	69b2 <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6a54:	0030      	movs	r0, r6
    6a56:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6a58:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6a5a:	69f3      	ldr	r3, [r6, #28]
    6a5c:	2b01      	cmp	r3, #1
    6a5e:	d1a8      	bne.n	69b2 <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    6a60:	9b06      	ldr	r3, [sp, #24]
    6a62:	69b1      	ldr	r1, [r6, #24]
    6a64:	468c      	mov	ip, r1
    6a66:	4463      	add	r3, ip
    6a68:	001a      	movs	r2, r3
    6a6a:	2300      	movs	r3, #0
    6a6c:	9300      	str	r3, [sp, #0]
    6a6e:	2100      	movs	r1, #0
    6a70:	0030      	movs	r0, r6
    6a72:	4c16      	ldr	r4, [pc, #88]	; (6acc <prvTimerTask+0x17c>)
    6a74:	47a0      	blx	r4
							configASSERT( xResult );
    6a76:	2800      	cmp	r0, #0
    6a78:	d19b      	bne.n	69b2 <prvTimerTask+0x62>
    6a7a:	b672      	cpsid	i
    6a7c:	e7fe      	b.n	6a7c <prvTimerTask+0x12c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6a7e:	9906      	ldr	r1, [sp, #24]
    6a80:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    6a82:	2900      	cmp	r1, #0
    6a84:	d006      	beq.n	6a94 <prvTimerTask+0x144>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    6a86:	1841      	adds	r1, r0, r1
    6a88:	0003      	movs	r3, r0
    6a8a:	0002      	movs	r2, r0
    6a8c:	0030      	movs	r0, r6
    6a8e:	4c0e      	ldr	r4, [pc, #56]	; (6ac8 <prvTimerTask+0x178>)
    6a90:	47a0      	blx	r4
    6a92:	e78e      	b.n	69b2 <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    6a94:	b672      	cpsid	i
    6a96:	e7fe      	b.n	6a96 <prvTimerTask+0x146>
						vPortFree( pxTimer );
    6a98:	0030      	movs	r0, r6
    6a9a:	4b0e      	ldr	r3, [pc, #56]	; (6ad4 <prvTimerTask+0x184>)
    6a9c:	4798      	blx	r3
    6a9e:	e788      	b.n	69b2 <prvTimerTask+0x62>
    6aa0:	00005267 	.word	0x00005267
    6aa4:	200050c4 	.word	0x200050c4
    6aa8:	000060c9 	.word	0x000060c9
    6aac:	00006899 	.word	0x00006899
    6ab0:	200050c8 	.word	0x200050c8
    6ab4:	200050f8 	.word	0x200050f8
    6ab8:	00005ced 	.word	0x00005ced
    6abc:	00006205 	.word	0x00006205
    6ac0:	00005a01 	.word	0x00005a01
    6ac4:	00008d60 	.word	0x00008d60
    6ac8:	0000673d 	.word	0x0000673d
    6acc:	0000682d 	.word	0x0000682d
    6ad0:	0000538d 	.word	0x0000538d
    6ad4:	000054d1 	.word	0x000054d1

00006ad8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6ad8:	b570      	push	{r4, r5, r6, lr}
    6ada:	b082      	sub	sp, #8
    6adc:	0005      	movs	r5, r0
    6ade:	000e      	movs	r6, r1
	uint16_t temp = 0;
    6ae0:	2200      	movs	r2, #0
    6ae2:	466b      	mov	r3, sp
    6ae4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6ae6:	4c06      	ldr	r4, [pc, #24]	; (6b00 <usart_serial_getchar+0x28>)
    6ae8:	466b      	mov	r3, sp
    6aea:	1d99      	adds	r1, r3, #6
    6aec:	0028      	movs	r0, r5
    6aee:	47a0      	blx	r4
    6af0:	2800      	cmp	r0, #0
    6af2:	d1f9      	bne.n	6ae8 <usart_serial_getchar+0x10>

	*c = temp;
    6af4:	466b      	mov	r3, sp
    6af6:	3306      	adds	r3, #6
    6af8:	881b      	ldrh	r3, [r3, #0]
    6afa:	7033      	strb	r3, [r6, #0]
}
    6afc:	b002      	add	sp, #8
    6afe:	bd70      	pop	{r4, r5, r6, pc}
    6b00:	0000491d 	.word	0x0000491d

00006b04 <usart_serial_putchar>:
{
    6b04:	b570      	push	{r4, r5, r6, lr}
    6b06:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6b08:	b28c      	uxth	r4, r1
    6b0a:	4e03      	ldr	r6, [pc, #12]	; (6b18 <usart_serial_putchar+0x14>)
    6b0c:	0021      	movs	r1, r4
    6b0e:	0028      	movs	r0, r5
    6b10:	47b0      	blx	r6
    6b12:	2800      	cmp	r0, #0
    6b14:	d1fa      	bne.n	6b0c <usart_serial_putchar+0x8>
}
    6b16:	bd70      	pop	{r4, r5, r6, pc}
    6b18:	000048f1 	.word	0x000048f1

00006b1c <mount_fs>:
static const char filename[] = "ed.txt";


//mount a FAT file system from a flash drive connected to EXT1
int mount_fs()
{
    6b1c:	b570      	push	{r4, r5, r6, lr}
    6b1e:	4c1d      	ldr	r4, [pc, #116]	; (6b94 <mount_fs+0x78>)
    6b20:	44a5      	add	sp, r4
	FRESULT res;
	Ctrl_status status;
	char test_file_name[] = "0:ola.txt";
	FIL file_object;
	
    delay_init();
    6b22:	4b1d      	ldr	r3, [pc, #116]	; (6b98 <mount_fs+0x7c>)
    6b24:	4798      	blx	r3
    irq_initialize_vectors();
	cpu_irq_enable();
    6b26:	2201      	movs	r2, #1
    6b28:	4b1c      	ldr	r3, [pc, #112]	; (6b9c <mount_fs+0x80>)
    6b2a:	701a      	strb	r2, [r3, #0]
    6b2c:	f3bf 8f5f 	dmb	sy
    6b30:	b662      	cpsie	i
	
    /* Initialize SD MMC stack */
	sd_mmc_init();
    6b32:	4b1b      	ldr	r3, [pc, #108]	; (6ba0 <mount_fs+0x84>)
    6b34:	4798      	blx	r3
	
	do {
		status = sd_mmc_test_unit_ready(0);
    6b36:	4e1b      	ldr	r6, [pc, #108]	; (6ba4 <mount_fs+0x88>)
		if (CTRL_FAIL == status) {
			printf("Card install FAIL\n\r");
    6b38:	4c1b      	ldr	r4, [pc, #108]	; (6ba8 <mount_fs+0x8c>)
    6b3a:	e008      	b.n	6b4e <mount_fs+0x32>
    6b3c:	481b      	ldr	r0, [pc, #108]	; (6bac <mount_fs+0x90>)
    6b3e:	47a0      	blx	r4
			printf("Please unplug and re-plug the card.\n\r");
    6b40:	481b      	ldr	r0, [pc, #108]	; (6bb0 <mount_fs+0x94>)
    6b42:	47a0      	blx	r4
			while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    6b44:	4d1b      	ldr	r5, [pc, #108]	; (6bb4 <mount_fs+0x98>)
    6b46:	2000      	movs	r0, #0
    6b48:	47a8      	blx	r5
    6b4a:	2802      	cmp	r0, #2
    6b4c:	d1fb      	bne.n	6b46 <mount_fs+0x2a>
		status = sd_mmc_test_unit_ready(0);
    6b4e:	2000      	movs	r0, #0
    6b50:	47b0      	blx	r6
		if (CTRL_FAIL == status) {
    6b52:	2801      	cmp	r0, #1
    6b54:	d0f2      	beq.n	6b3c <mount_fs+0x20>
			}
		}
	} while (CTRL_GOOD != status);
    6b56:	2800      	cmp	r0, #0
    6b58:	d1f9      	bne.n	6b4e <mount_fs+0x32>
	
	printf("Mounting FATfs...\n");
    6b5a:	4817      	ldr	r0, [pc, #92]	; (6bb8 <mount_fs+0x9c>)
    6b5c:	4b17      	ldr	r3, [pc, #92]	; (6bbc <mount_fs+0xa0>)
    6b5e:	4798      	blx	r3
    memset(&fs, 0, sizeof(FATFS));
    6b60:	228c      	movs	r2, #140	; 0x8c
    6b62:	0092      	lsls	r2, r2, #2
    6b64:	2100      	movs	r1, #0
    6b66:	4668      	mov	r0, sp
    6b68:	4b15      	ldr	r3, [pc, #84]	; (6bc0 <mount_fs+0xa4>)
    6b6a:	4798      	blx	r3
    res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    6b6c:	4669      	mov	r1, sp
    6b6e:	2000      	movs	r0, #0
    6b70:	4b14      	ldr	r3, [pc, #80]	; (6bc4 <mount_fs+0xa8>)
    6b72:	4798      	blx	r3
    if (FR_OK != res) {
    6b74:	2800      	cmp	r0, #0
    6b76:	d107      	bne.n	6b88 <mount_fs+0x6c>
	if(res != FR_OK)
	{
		printf("Error closing test file: %d\n", res);
		return 1;
	}*/
	printf("[OK]\r\n");
    6b78:	4813      	ldr	r0, [pc, #76]	; (6bc8 <mount_fs+0xac>)
    6b7a:	4b10      	ldr	r3, [pc, #64]	; (6bbc <mount_fs+0xa0>)
    6b7c:	4798      	blx	r3
	return 0;
    6b7e:	2000      	movs	r0, #0
}
    6b80:	238c      	movs	r3, #140	; 0x8c
    6b82:	009b      	lsls	r3, r3, #2
    6b84:	449d      	add	sp, r3
    6b86:	bd70      	pop	{r4, r5, r6, pc}
        printf("[FAIL] res %d\r\n", res);
    6b88:	0001      	movs	r1, r0
    6b8a:	4810      	ldr	r0, [pc, #64]	; (6bcc <mount_fs+0xb0>)
    6b8c:	4b06      	ldr	r3, [pc, #24]	; (6ba8 <mount_fs+0x8c>)
    6b8e:	4798      	blx	r3
        return 1;
    6b90:	2001      	movs	r0, #1
    6b92:	e7f5      	b.n	6b80 <mount_fs+0x64>
    6b94:	fffffdd0 	.word	0xfffffdd0
    6b98:	000012a1 	.word	0x000012a1
    6b9c:	20000030 	.word	0x20000030
    6ba0:	000002fd 	.word	0x000002fd
    6ba4:	00000a31 	.word	0x00000a31
    6ba8:	00007755 	.word	0x00007755
    6bac:	00008dcc 	.word	0x00008dcc
    6bb0:	00008de0 	.word	0x00008de0
    6bb4:	0000031d 	.word	0x0000031d
    6bb8:	00008e08 	.word	0x00008e08
    6bbc:	00007849 	.word	0x00007849
    6bc0:	00007689 	.word	0x00007689
    6bc4:	00003681 	.word	0x00003681
    6bc8:	00008e2c 	.word	0x00008e2c
    6bcc:	00008e1c 	.word	0x00008e1c

00006bd0 <print_usage>:
	}
}


void print_usage()
{
    6bd0:	b510      	push	{r4, lr}
	printf("Invalid command\nUse -r to read file\n-i message to write message\n");
    6bd2:	4802      	ldr	r0, [pc, #8]	; (6bdc <print_usage+0xc>)
    6bd4:	4b02      	ldr	r3, [pc, #8]	; (6be0 <print_usage+0x10>)
    6bd6:	4798      	blx	r3
}
    6bd8:	bd10      	pop	{r4, pc}
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	00008e34 	.word	0x00008e34
    6be0:	00007849 	.word	0x00007849

00006be4 <read_cmd>:


void read_cmd()
{
    6be4:	b530      	push	{r4, r5, lr}
    6be6:	b099      	sub	sp, #100	; 0x64
	char line[BUFFER_SIZE];
	int res = FR_OK;
	printf("Reading the file...\n");
    6be8:	4815      	ldr	r0, [pc, #84]	; (6c40 <read_cmd+0x5c>)
    6bea:	4b16      	ldr	r3, [pc, #88]	; (6c44 <read_cmd+0x60>)
    6bec:	4798      	blx	r3
	FIL fd; 
	res = f_open(&fd, filename, FA_READ | FA_OPEN_ALWAYS);
    6bee:	2211      	movs	r2, #17
    6bf0:	4915      	ldr	r1, [pc, #84]	; (6c48 <read_cmd+0x64>)
    6bf2:	a801      	add	r0, sp, #4
    6bf4:	4b15      	ldr	r3, [pc, #84]	; (6c4c <read_cmd+0x68>)
    6bf6:	4798      	blx	r3
	if( res != FR_OK)
    6bf8:	2800      	cmp	r0, #0
    6bfa:	d102      	bne.n	6c02 <read_cmd+0x1e>
	{
		printf("Erro abrindo o arquivo para leitura: %d\n", res);
		return;
	}
	while(f_gets(line, BUFFER_SIZE, &fd)) 
    6bfc:	4c14      	ldr	r4, [pc, #80]	; (6c50 <read_cmd+0x6c>)
	{
		printf(line);
    6bfe:	4d15      	ldr	r5, [pc, #84]	; (6c54 <read_cmd+0x70>)
    6c00:	e006      	b.n	6c10 <read_cmd+0x2c>
		printf("Erro abrindo o arquivo para leitura: %d\n", res);
    6c02:	0001      	movs	r1, r0
    6c04:	4814      	ldr	r0, [pc, #80]	; (6c58 <read_cmd+0x74>)
    6c06:	4b13      	ldr	r3, [pc, #76]	; (6c54 <read_cmd+0x70>)
    6c08:	4798      	blx	r3
		return;
    6c0a:	e012      	b.n	6c32 <read_cmd+0x4e>
		printf(line);
    6c0c:	a80b      	add	r0, sp, #44	; 0x2c
    6c0e:	47a8      	blx	r5
	while(f_gets(line, BUFFER_SIZE, &fd)) 
    6c10:	aa01      	add	r2, sp, #4
    6c12:	2132      	movs	r1, #50	; 0x32
    6c14:	a80b      	add	r0, sp, #44	; 0x2c
    6c16:	47a0      	blx	r4
    6c18:	2800      	cmp	r0, #0
    6c1a:	d1f7      	bne.n	6c0c <read_cmd+0x28>
	}
	printf("Closing after reading...\n");
    6c1c:	480f      	ldr	r0, [pc, #60]	; (6c5c <read_cmd+0x78>)
    6c1e:	4b09      	ldr	r3, [pc, #36]	; (6c44 <read_cmd+0x60>)
    6c20:	4798      	blx	r3
	res = f_close(&fd);
    6c22:	a801      	add	r0, sp, #4
    6c24:	4b0e      	ldr	r3, [pc, #56]	; (6c60 <read_cmd+0x7c>)
    6c26:	4798      	blx	r3
	if(res != FR_OK)
    6c28:	2800      	cmp	r0, #0
    6c2a:	d104      	bne.n	6c36 <read_cmd+0x52>
	{
		printf("Error closing: %d", res);
		return;
	}
	printf("[OK]\n");
    6c2c:	480d      	ldr	r0, [pc, #52]	; (6c64 <read_cmd+0x80>)
    6c2e:	4b05      	ldr	r3, [pc, #20]	; (6c44 <read_cmd+0x60>)
    6c30:	4798      	blx	r3
	return;
}
    6c32:	b019      	add	sp, #100	; 0x64
    6c34:	bd30      	pop	{r4, r5, pc}
		printf("Error closing: %d", res);
    6c36:	0001      	movs	r1, r0
    6c38:	480b      	ldr	r0, [pc, #44]	; (6c68 <read_cmd+0x84>)
    6c3a:	4b06      	ldr	r3, [pc, #24]	; (6c54 <read_cmd+0x70>)
    6c3c:	4798      	blx	r3
		return;
    6c3e:	e7f8      	b.n	6c32 <read_cmd+0x4e>
    6c40:	00008e74 	.word	0x00008e74
    6c44:	00007849 	.word	0x00007849
    6c48:	00008dc4 	.word	0x00008dc4
    6c4c:	000036d5 	.word	0x000036d5
    6c50:	00003ff1 	.word	0x00003ff1
    6c54:	00007755 	.word	0x00007755
    6c58:	00008e88 	.word	0x00008e88
    6c5c:	00008eb4 	.word	0x00008eb4
    6c60:	00003df9 	.word	0x00003df9
    6c64:	00008ee4 	.word	0x00008ee4
    6c68:	00008ed0 	.word	0x00008ed0

00006c6c <write_string>:

void write_string(char * string)
{
    6c6c:	b510      	push	{r4, lr}
    6c6e:	b08c      	sub	sp, #48	; 0x30
    6c70:	0004      	movs	r4, r0
	FIL fd;
	int res;
	res = f_open(&fd, filename, FA_OPEN_ALWAYS | FA_WRITE);
    6c72:	2212      	movs	r2, #18
    6c74:	4919      	ldr	r1, [pc, #100]	; (6cdc <write_string+0x70>)
    6c76:	a802      	add	r0, sp, #8
    6c78:	4b19      	ldr	r3, [pc, #100]	; (6ce0 <write_string+0x74>)
    6c7a:	4798      	blx	r3
	if(res != FR_OK)
    6c7c:	2800      	cmp	r0, #0
    6c7e:	d119      	bne.n	6cb4 <write_string+0x48>
	{
		printf("Erro abrindo o arquivo para escrita: %d\n", res);
		return;
	}
	if(f_lseek(&fd, f_size(&fd)) != FR_OK)
    6c80:	9b05      	ldr	r3, [sp, #20]
    6c82:	9301      	str	r3, [sp, #4]
    6c84:	0019      	movs	r1, r3
    6c86:	a802      	add	r0, sp, #8
    6c88:	4b16      	ldr	r3, [pc, #88]	; (6ce4 <write_string+0x78>)
    6c8a:	4798      	blx	r3
    6c8c:	2800      	cmp	r0, #0
    6c8e:	d117      	bne.n	6cc0 <write_string+0x54>
	{
		printf("Erro no lseek()\n");
	}
	res = f_puts(string, &fd);
    6c90:	a902      	add	r1, sp, #8
    6c92:	0020      	movs	r0, r4
    6c94:	4b14      	ldr	r3, [pc, #80]	; (6ce8 <write_string+0x7c>)
    6c96:	4798      	blx	r3
	if(res == EOF)
    6c98:	1c43      	adds	r3, r0, #1
    6c9a:	d015      	beq.n	6cc8 <write_string+0x5c>
	{
		printf("Error writing to file\n");
	}
	printf("Closing after writing...\n");
    6c9c:	4813      	ldr	r0, [pc, #76]	; (6cec <write_string+0x80>)
    6c9e:	4b14      	ldr	r3, [pc, #80]	; (6cf0 <write_string+0x84>)
    6ca0:	4798      	blx	r3
	res = f_close(&fd);
    6ca2:	a802      	add	r0, sp, #8
    6ca4:	4b13      	ldr	r3, [pc, #76]	; (6cf4 <write_string+0x88>)
    6ca6:	4798      	blx	r3
	if(res != FR_OK)
    6ca8:	2800      	cmp	r0, #0
    6caa:	d111      	bne.n	6cd0 <write_string+0x64>
	{
		printf("Error closing: %d", res);
		return;
	}
	printf("[OK]\n");
    6cac:	4812      	ldr	r0, [pc, #72]	; (6cf8 <write_string+0x8c>)
    6cae:	4b10      	ldr	r3, [pc, #64]	; (6cf0 <write_string+0x84>)
    6cb0:	4798      	blx	r3
	return;
    6cb2:	e003      	b.n	6cbc <write_string+0x50>
		printf("Erro abrindo o arquivo para escrita: %d\n", res);
    6cb4:	0001      	movs	r1, r0
    6cb6:	4811      	ldr	r0, [pc, #68]	; (6cfc <write_string+0x90>)
    6cb8:	4b11      	ldr	r3, [pc, #68]	; (6d00 <write_string+0x94>)
    6cba:	4798      	blx	r3
}
    6cbc:	b00c      	add	sp, #48	; 0x30
    6cbe:	bd10      	pop	{r4, pc}
		printf("Erro no lseek()\n");
    6cc0:	4810      	ldr	r0, [pc, #64]	; (6d04 <write_string+0x98>)
    6cc2:	4b0b      	ldr	r3, [pc, #44]	; (6cf0 <write_string+0x84>)
    6cc4:	4798      	blx	r3
    6cc6:	e7e3      	b.n	6c90 <write_string+0x24>
		printf("Error writing to file\n");
    6cc8:	480f      	ldr	r0, [pc, #60]	; (6d08 <write_string+0x9c>)
    6cca:	4b09      	ldr	r3, [pc, #36]	; (6cf0 <write_string+0x84>)
    6ccc:	4798      	blx	r3
    6cce:	e7e5      	b.n	6c9c <write_string+0x30>
		printf("Error closing: %d", res);
    6cd0:	0001      	movs	r1, r0
    6cd2:	480e      	ldr	r0, [pc, #56]	; (6d0c <write_string+0xa0>)
    6cd4:	4b0a      	ldr	r3, [pc, #40]	; (6d00 <write_string+0x94>)
    6cd6:	4798      	blx	r3
		return;
    6cd8:	e7f0      	b.n	6cbc <write_string+0x50>
    6cda:	46c0      	nop			; (mov r8, r8)
    6cdc:	00008dc4 	.word	0x00008dc4
    6ce0:	000036d5 	.word	0x000036d5
    6ce4:	00003e69 	.word	0x00003e69
    6ce8:	00004071 	.word	0x00004071
    6cec:	00008f80 	.word	0x00008f80
    6cf0:	00007849 	.word	0x00007849
    6cf4:	00003df9 	.word	0x00003df9
    6cf8:	00008ee4 	.word	0x00008ee4
    6cfc:	00008f2c 	.word	0x00008f2c
    6d00:	00007755 	.word	0x00007755
    6d04:	00008f58 	.word	0x00008f58
    6d08:	00008f68 	.word	0x00008f68
    6d0c:	00008ed0 	.word	0x00008ed0

00006d10 <writer>:
}



void writer(void * param)
{
    6d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(;;)
	{
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    6d12:	4f13      	ldr	r7, [pc, #76]	; (6d60 <writer+0x50>)
    6d14:	4e13      	ldr	r6, [pc, #76]	; (6d64 <writer+0x54>)
		printf("Dentro do semafaro\n");
    6d16:	4d14      	ldr	r5, [pc, #80]	; (6d68 <writer+0x58>)
    6d18:	e012      	b.n	6d40 <writer+0x30>
			printf("buffer vazio\n");
		}
		else
		{
			//write the contents of the buffer to file
			write_string(g_buffer);
    6d1a:	4c14      	ldr	r4, [pc, #80]	; (6d6c <writer+0x5c>)
    6d1c:	0020      	movs	r0, r4
    6d1e:	4b14      	ldr	r3, [pc, #80]	; (6d70 <writer+0x60>)
    6d20:	4798      	blx	r3
			memset(g_buffer, 0, BUFFER_SIZE);
    6d22:	2232      	movs	r2, #50	; 0x32
    6d24:	2100      	movs	r1, #0
    6d26:	0020      	movs	r0, r4
    6d28:	4b12      	ldr	r3, [pc, #72]	; (6d74 <writer+0x64>)
    6d2a:	4798      	blx	r3
		}
		xSemaphoreGive(terminal_mutex);
    6d2c:	4b0c      	ldr	r3, [pc, #48]	; (6d60 <writer+0x50>)
    6d2e:	6818      	ldr	r0, [r3, #0]
    6d30:	2300      	movs	r3, #0
    6d32:	2200      	movs	r2, #0
    6d34:	2100      	movs	r1, #0
    6d36:	4c10      	ldr	r4, [pc, #64]	; (6d78 <writer+0x68>)
    6d38:	47a0      	blx	r4
		vTaskDelay(WRITER_TASK_DELAY);
    6d3a:	2002      	movs	r0, #2
    6d3c:	4b0f      	ldr	r3, [pc, #60]	; (6d7c <writer+0x6c>)
    6d3e:	4798      	blx	r3
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    6d40:	2101      	movs	r1, #1
    6d42:	4249      	negs	r1, r1
    6d44:	6838      	ldr	r0, [r7, #0]
    6d46:	47b0      	blx	r6
		printf("Dentro do semafaro\n");
    6d48:	0028      	movs	r0, r5
    6d4a:	4b0d      	ldr	r3, [pc, #52]	; (6d80 <writer+0x70>)
    6d4c:	4798      	blx	r3
		if(*g_buffer == 0)
    6d4e:	4b07      	ldr	r3, [pc, #28]	; (6d6c <writer+0x5c>)
    6d50:	781b      	ldrb	r3, [r3, #0]
    6d52:	2b00      	cmp	r3, #0
    6d54:	d1e1      	bne.n	6d1a <writer+0xa>
			printf("buffer vazio\n");
    6d56:	480b      	ldr	r0, [pc, #44]	; (6d84 <writer+0x74>)
    6d58:	4b09      	ldr	r3, [pc, #36]	; (6d80 <writer+0x70>)
    6d5a:	4798      	blx	r3
    6d5c:	e7e6      	b.n	6d2c <writer+0x1c>
    6d5e:	46c0      	nop			; (mov r8, r8)
    6d60:	20005134 	.word	0x20005134
    6d64:	00005b55 	.word	0x00005b55
    6d68:	00008f9c 	.word	0x00008f9c
    6d6c:	20005100 	.word	0x20005100
    6d70:	00006c6d 	.word	0x00006c6d
    6d74:	00007689 	.word	0x00007689
    6d78:	00005779 	.word	0x00005779
    6d7c:	00006305 	.word	0x00006305
    6d80:	00007849 	.word	0x00007849
    6d84:	00008fb0 	.word	0x00008fb0

00006d88 <write_buffer>:
{
    6d88:	b510      	push	{r4, lr}
	if(*message == '\0')
    6d8a:	78c3      	ldrb	r3, [r0, #3]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d009      	beq.n	6da4 <write_buffer+0x1c>
	char * message = string + 3;        //skip the first 3 characters that are not the message ("-i ")
    6d90:	1cc4      	adds	r4, r0, #3
	printf("Writing to buffer: %s", message);
    6d92:	0021      	movs	r1, r4
    6d94:	4805      	ldr	r0, [pc, #20]	; (6dac <write_buffer+0x24>)
    6d96:	4b06      	ldr	r3, [pc, #24]	; (6db0 <write_buffer+0x28>)
    6d98:	4798      	blx	r3
	strcpy(g_buffer, message);
    6d9a:	0021      	movs	r1, r4
    6d9c:	4805      	ldr	r0, [pc, #20]	; (6db4 <write_buffer+0x2c>)
    6d9e:	4b06      	ldr	r3, [pc, #24]	; (6db8 <write_buffer+0x30>)
    6da0:	4798      	blx	r3
}
    6da2:	bd10      	pop	{r4, pc}
		printf("Message is invalid\n");
    6da4:	4805      	ldr	r0, [pc, #20]	; (6dbc <write_buffer+0x34>)
    6da6:	4b06      	ldr	r3, [pc, #24]	; (6dc0 <write_buffer+0x38>)
    6da8:	4798      	blx	r3
		return;
    6daa:	e7fa      	b.n	6da2 <write_buffer+0x1a>
    6dac:	00008f14 	.word	0x00008f14
    6db0:	00007755 	.word	0x00007755
    6db4:	20005100 	.word	0x20005100
    6db8:	00007bbd 	.word	0x00007bbd
    6dbc:	00008f00 	.word	0x00008f00
    6dc0:	00007849 	.word	0x00007849

00006dc4 <parse_command>:
{
    6dc4:	b510      	push	{r4, lr}
	if(sizeof(cmd) < 3 || cmd[0] != '-')
    6dc6:	7803      	ldrb	r3, [r0, #0]
    6dc8:	2b2d      	cmp	r3, #45	; 0x2d
    6dca:	d107      	bne.n	6ddc <parse_command+0x18>
	if(cmd[1] == 'r')
    6dcc:	7843      	ldrb	r3, [r0, #1]
    6dce:	2b72      	cmp	r3, #114	; 0x72
    6dd0:	d007      	beq.n	6de2 <parse_command+0x1e>
	else if(cmd[1] == 'i')
    6dd2:	2b69      	cmp	r3, #105	; 0x69
    6dd4:	d008      	beq.n	6de8 <parse_command+0x24>
		print_usage();
    6dd6:	4b06      	ldr	r3, [pc, #24]	; (6df0 <parse_command+0x2c>)
    6dd8:	4798      	blx	r3
}
    6dda:	bd10      	pop	{r4, pc}
		print_usage();
    6ddc:	4b04      	ldr	r3, [pc, #16]	; (6df0 <parse_command+0x2c>)
    6dde:	4798      	blx	r3
		return;
    6de0:	e7fb      	b.n	6dda <parse_command+0x16>
		read_cmd();
    6de2:	4b04      	ldr	r3, [pc, #16]	; (6df4 <parse_command+0x30>)
    6de4:	4798      	blx	r3
    6de6:	e7f8      	b.n	6dda <parse_command+0x16>
		write_buffer(cmd);
    6de8:	4b03      	ldr	r3, [pc, #12]	; (6df8 <parse_command+0x34>)
    6dea:	4798      	blx	r3
    6dec:	e7f5      	b.n	6dda <parse_command+0x16>
    6dee:	46c0      	nop			; (mov r8, r8)
    6df0:	00006bd1 	.word	0x00006bd1
    6df4:	00006be5 	.word	0x00006be5
    6df8:	00006d89 	.word	0x00006d89

00006dfc <receiver>:
{
    6dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dfe:	b08f      	sub	sp, #60	; 0x3c
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    6e00:	4c0e      	ldr	r4, [pc, #56]	; (6e3c <receiver+0x40>)
    6e02:	4f0f      	ldr	r7, [pc, #60]	; (6e40 <receiver+0x44>)
		printf("Escreva um comando:\n");
    6e04:	4e0f      	ldr	r6, [pc, #60]	; (6e44 <receiver+0x48>)
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    6e06:	2101      	movs	r1, #1
    6e08:	4249      	negs	r1, r1
    6e0a:	6820      	ldr	r0, [r4, #0]
    6e0c:	47b8      	blx	r7
		printf("Escreva um comando:\n");
    6e0e:	0030      	movs	r0, r6
    6e10:	4b0d      	ldr	r3, [pc, #52]	; (6e48 <receiver+0x4c>)
    6e12:	4798      	blx	r3
		fgets(input_buffer, BUFFER_SIZE, stdin);
    6e14:	4b0d      	ldr	r3, [pc, #52]	; (6e4c <receiver+0x50>)
    6e16:	681b      	ldr	r3, [r3, #0]
    6e18:	685a      	ldr	r2, [r3, #4]
    6e1a:	2132      	movs	r1, #50	; 0x32
    6e1c:	a801      	add	r0, sp, #4
    6e1e:	4b0c      	ldr	r3, [pc, #48]	; (6e50 <receiver+0x54>)
    6e20:	4798      	blx	r3
		parse_command(input_buffer);
    6e22:	a801      	add	r0, sp, #4
    6e24:	4b0b      	ldr	r3, [pc, #44]	; (6e54 <receiver+0x58>)
    6e26:	4798      	blx	r3
		xSemaphoreGive(terminal_mutex);
    6e28:	2300      	movs	r3, #0
    6e2a:	2200      	movs	r2, #0
    6e2c:	2100      	movs	r1, #0
    6e2e:	6820      	ldr	r0, [r4, #0]
    6e30:	4d09      	ldr	r5, [pc, #36]	; (6e58 <receiver+0x5c>)
    6e32:	47a8      	blx	r5
		vTaskDelay(RECEVER_TASK_DELAY);
    6e34:	2002      	movs	r0, #2
    6e36:	4b09      	ldr	r3, [pc, #36]	; (6e5c <receiver+0x60>)
    6e38:	4798      	blx	r3
    6e3a:	e7e4      	b.n	6e06 <receiver+0xa>
    6e3c:	20005134 	.word	0x20005134
    6e40:	00005b55 	.word	0x00005b55
    6e44:	00008eec 	.word	0x00008eec
    6e48:	00007849 	.word	0x00007849
    6e4c:	20000038 	.word	0x20000038
    6e50:	00007419 	.word	0x00007419
    6e54:	00006dc5 	.word	0x00006dc5
    6e58:	00005779 	.word	0x00005779
    6e5c:	00006305 	.word	0x00006305

00006e60 <set_usart_config>:
{
    6e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6e62:	4a2b      	ldr	r2, [pc, #172]	; (6f10 <set_usart_config+0xb0>)
    6e64:	2380      	movs	r3, #128	; 0x80
    6e66:	05db      	lsls	r3, r3, #23
    6e68:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6e6a:	2300      	movs	r3, #0
    6e6c:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    6e6e:	21ff      	movs	r1, #255	; 0xff
    6e70:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    6e72:	2100      	movs	r1, #0
    6e74:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6e76:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    6e78:	2401      	movs	r4, #1
    6e7a:	2524      	movs	r5, #36	; 0x24
    6e7c:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    6e7e:	3501      	adds	r5, #1
    6e80:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    6e82:	3501      	adds	r5, #1
    6e84:	5553      	strb	r3, [r2, r5]
	config->use_external_clock = false;
    6e86:	3501      	adds	r5, #1
    6e88:	5553      	strb	r3, [r2, r5]
	config->ext_clock_freq   = 0;
    6e8a:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6e8c:	3505      	adds	r5, #5
    6e8e:	5553      	strb	r3, [r2, r5]
	config->generator_source = GCLK_GENERATOR_0;
    6e90:	3501      	adds	r5, #1
    6e92:	5553      	strb	r3, [r2, r5]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6e94:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6e96:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6e98:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6e9a:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6e9c:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6e9e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    6ea0:	2313      	movs	r3, #19
    6ea2:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6ea4:	7751      	strb	r1, [r2, #29]
	usart_conf.baudrate    = baudrate;
    6ea6:	6210      	str	r0, [r2, #32]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    6ea8:	2380      	movs	r3, #128	; 0x80
    6eaa:	035b      	lsls	r3, r3, #13
    6eac:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    6eae:	4b19      	ldr	r3, [pc, #100]	; (6f14 <set_usart_config+0xb4>)
    6eb0:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6eb2:	4b19      	ldr	r3, [pc, #100]	; (6f18 <set_usart_config+0xb8>)
    6eb4:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    6eb6:	2301      	movs	r3, #1
    6eb8:	425b      	negs	r3, r3
    6eba:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6ebc:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    6ebe:	4d17      	ldr	r5, [pc, #92]	; (6f1c <set_usart_config+0xbc>)
    6ec0:	4b17      	ldr	r3, [pc, #92]	; (6f20 <set_usart_config+0xc0>)
    6ec2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6ec4:	4917      	ldr	r1, [pc, #92]	; (6f24 <set_usart_config+0xc4>)
    6ec6:	4b18      	ldr	r3, [pc, #96]	; (6f28 <set_usart_config+0xc8>)
    6ec8:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6eca:	4918      	ldr	r1, [pc, #96]	; (6f2c <set_usart_config+0xcc>)
    6ecc:	4b18      	ldr	r3, [pc, #96]	; (6f30 <set_usart_config+0xd0>)
    6ece:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    6ed0:	4918      	ldr	r1, [pc, #96]	; (6f34 <set_usart_config+0xd4>)
    6ed2:	0028      	movs	r0, r5
    6ed4:	4b18      	ldr	r3, [pc, #96]	; (6f38 <set_usart_config+0xd8>)
    6ed6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6ed8:	4f18      	ldr	r7, [pc, #96]	; (6f3c <set_usart_config+0xdc>)
    6eda:	683b      	ldr	r3, [r7, #0]
    6edc:	6898      	ldr	r0, [r3, #8]
    6ede:	2100      	movs	r1, #0
    6ee0:	4e17      	ldr	r6, [pc, #92]	; (6f40 <set_usart_config+0xe0>)
    6ee2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    6ee4:	683b      	ldr	r3, [r7, #0]
    6ee6:	6858      	ldr	r0, [r3, #4]
    6ee8:	2100      	movs	r1, #0
    6eea:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6eec:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6eee:	0030      	movs	r0, r6
    6ef0:	4b14      	ldr	r3, [pc, #80]	; (6f44 <set_usart_config+0xe4>)
    6ef2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6ef4:	231f      	movs	r3, #31
    6ef6:	4018      	ands	r0, r3
    6ef8:	4084      	lsls	r4, r0
    6efa:	4b13      	ldr	r3, [pc, #76]	; (6f48 <set_usart_config+0xe8>)
    6efc:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6efe:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6f00:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6f02:	2b00      	cmp	r3, #0
    6f04:	d1fc      	bne.n	6f00 <set_usart_config+0xa0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6f06:	6833      	ldr	r3, [r6, #0]
    6f08:	2202      	movs	r2, #2
    6f0a:	4313      	orrs	r3, r2
    6f0c:	6033      	str	r3, [r6, #0]
}
    6f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f10:	200051b4 	.word	0x200051b4
    6f14:	00160002 	.word	0x00160002
    6f18:	00170002 	.word	0x00170002
    6f1c:	20005180 	.word	0x20005180
    6f20:	20005150 	.word	0x20005150
    6f24:	00006b05 	.word	0x00006b05
    6f28:	2000514c 	.word	0x2000514c
    6f2c:	00006ad9 	.word	0x00006ad9
    6f30:	20005148 	.word	0x20005148
    6f34:	42001400 	.word	0x42001400
    6f38:	000045ad 	.word	0x000045ad
    6f3c:	20000038 	.word	0x20000038
    6f40:	000079b9 	.word	0x000079b9
    6f44:	0000451d 	.word	0x0000451d
    6f48:	e000e100 	.word	0xe000e100

00006f4c <demotasks_init>:

/**
 * \brief Initialize tasks and resources for demo
 */
void demotasks_init(void)
{
    6f4c:	b510      	push	{r4, lr}
    6f4e:	b082      	sub	sp, #8
	int error_return = 0;
	//configure USART
	terminal_mutex = xSemaphoreCreateMutex();
    6f50:	2001      	movs	r0, #1
    6f52:	4b14      	ldr	r3, [pc, #80]	; (6fa4 <demotasks_init+0x58>)
    6f54:	4798      	blx	r3
    6f56:	4b14      	ldr	r3, [pc, #80]	; (6fa8 <demotasks_init+0x5c>)
    6f58:	6018      	str	r0, [r3, #0]
	
	error_return = xTaskCreate(receiver,
    6f5a:	2300      	movs	r3, #0
    6f5c:	9301      	str	r3, [sp, #4]
    6f5e:	3305      	adds	r3, #5
    6f60:	9300      	str	r3, [sp, #0]
    6f62:	2300      	movs	r3, #0
    6f64:	2280      	movs	r2, #128	; 0x80
    6f66:	0112      	lsls	r2, r2, #4
    6f68:	4910      	ldr	r1, [pc, #64]	; (6fac <demotasks_init+0x60>)
    6f6a:	4811      	ldr	r0, [pc, #68]	; (6fb0 <demotasks_init+0x64>)
    6f6c:	4c11      	ldr	r4, [pc, #68]	; (6fb4 <demotasks_init+0x68>)
    6f6e:	47a0      	blx	r4
			(const char *) "RX",
			2048,
			NULL,
			RECEVER_TASK_PRIORITY,
			NULL);
	if(error_return == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
    6f70:	1c43      	adds	r3, r0, #1
    6f72:	d00e      	beq.n	6f92 <demotasks_init+0x46>
	{
		printf("Erro criando receiver\n");
	}
	error_return = xTaskCreate(writer,
    6f74:	2300      	movs	r3, #0
    6f76:	9301      	str	r3, [sp, #4]
    6f78:	3305      	adds	r3, #5
    6f7a:	9300      	str	r3, [sp, #0]
    6f7c:	2300      	movs	r3, #0
    6f7e:	2280      	movs	r2, #128	; 0x80
    6f80:	0112      	lsls	r2, r2, #4
    6f82:	490d      	ldr	r1, [pc, #52]	; (6fb8 <demotasks_init+0x6c>)
    6f84:	480d      	ldr	r0, [pc, #52]	; (6fbc <demotasks_init+0x70>)
    6f86:	4c0b      	ldr	r4, [pc, #44]	; (6fb4 <demotasks_init+0x68>)
    6f88:	47a0      	blx	r4
			(const char *) "WR",
			2048,
			NULL,
			WRITER_TASK_PRIORITY,
			NULL);
	if(error_return == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
    6f8a:	1c43      	adds	r3, r0, #1
    6f8c:	d005      	beq.n	6f9a <demotasks_init+0x4e>
	{
		printf("Erro criando writer\n");
	}
}
    6f8e:	b002      	add	sp, #8
    6f90:	bd10      	pop	{r4, pc}
		printf("Erro criando receiver\n");
    6f92:	480b      	ldr	r0, [pc, #44]	; (6fc0 <demotasks_init+0x74>)
    6f94:	4b0b      	ldr	r3, [pc, #44]	; (6fc4 <demotasks_init+0x78>)
    6f96:	4798      	blx	r3
    6f98:	e7ec      	b.n	6f74 <demotasks_init+0x28>
		printf("Erro criando writer\n");
    6f9a:	480b      	ldr	r0, [pc, #44]	; (6fc8 <demotasks_init+0x7c>)
    6f9c:	4b09      	ldr	r3, [pc, #36]	; (6fc4 <demotasks_init+0x78>)
    6f9e:	4798      	blx	r3
}
    6fa0:	e7f5      	b.n	6f8e <demotasks_init+0x42>
    6fa2:	46c0      	nop			; (mov r8, r8)
    6fa4:	00005905 	.word	0x00005905
    6fa8:	20005134 	.word	0x20005134
    6fac:	00008d90 	.word	0x00008d90
    6fb0:	00006dfd 	.word	0x00006dfd
    6fb4:	00005e81 	.word	0x00005e81
    6fb8:	00008dac 	.word	0x00008dac
    6fbc:	00006d11 	.word	0x00006d11
    6fc0:	00008d94 	.word	0x00008d94
    6fc4:	00007849 	.word	0x00007849
    6fc8:	00008db0 	.word	0x00008db0

00006fcc <main>:
#include <asf.h>
#include "demotasks.h"


int main (void)
{
    6fcc:	b510      	push	{r4, lr}
	system_init();
    6fce:	4b08      	ldr	r3, [pc, #32]	; (6ff0 <main+0x24>)
    6fd0:	4798      	blx	r3
	//initialize tasks
	set_usart_config(9600);
    6fd2:	2096      	movs	r0, #150	; 0x96
    6fd4:	0180      	lsls	r0, r0, #6
    6fd6:	4b07      	ldr	r3, [pc, #28]	; (6ff4 <main+0x28>)
    6fd8:	4798      	blx	r3
	mount_fs();
    6fda:	4b07      	ldr	r3, [pc, #28]	; (6ff8 <main+0x2c>)
    6fdc:	4798      	blx	r3
	demotasks_init();
    6fde:	4b07      	ldr	r3, [pc, #28]	; (6ffc <main+0x30>)
    6fe0:	4798      	blx	r3
	printf("Welcome to microTextEditor!\n");
    6fe2:	4807      	ldr	r0, [pc, #28]	; (7000 <main+0x34>)
    6fe4:	4b07      	ldr	r3, [pc, #28]	; (7004 <main+0x38>)
    6fe6:	4798      	blx	r3
	//start scheduler
	vTaskStartScheduler();
    6fe8:	4b07      	ldr	r3, [pc, #28]	; (7008 <main+0x3c>)
    6fea:	4798      	blx	r3
    6fec:	e7fe      	b.n	6fec <main+0x20>
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	000050b5 	.word	0x000050b5
    6ff4:	00006e61 	.word	0x00006e61
    6ff8:	00006b1d 	.word	0x00006b1d
    6ffc:	00006f4d 	.word	0x00006f4d
    7000:	00008fc0 	.word	0x00008fc0
    7004:	00007849 	.word	0x00007849
    7008:	00006059 	.word	0x00006059

0000700c <__udivsi3>:
    700c:	2200      	movs	r2, #0
    700e:	0843      	lsrs	r3, r0, #1
    7010:	428b      	cmp	r3, r1
    7012:	d374      	bcc.n	70fe <__udivsi3+0xf2>
    7014:	0903      	lsrs	r3, r0, #4
    7016:	428b      	cmp	r3, r1
    7018:	d35f      	bcc.n	70da <__udivsi3+0xce>
    701a:	0a03      	lsrs	r3, r0, #8
    701c:	428b      	cmp	r3, r1
    701e:	d344      	bcc.n	70aa <__udivsi3+0x9e>
    7020:	0b03      	lsrs	r3, r0, #12
    7022:	428b      	cmp	r3, r1
    7024:	d328      	bcc.n	7078 <__udivsi3+0x6c>
    7026:	0c03      	lsrs	r3, r0, #16
    7028:	428b      	cmp	r3, r1
    702a:	d30d      	bcc.n	7048 <__udivsi3+0x3c>
    702c:	22ff      	movs	r2, #255	; 0xff
    702e:	0209      	lsls	r1, r1, #8
    7030:	ba12      	rev	r2, r2
    7032:	0c03      	lsrs	r3, r0, #16
    7034:	428b      	cmp	r3, r1
    7036:	d302      	bcc.n	703e <__udivsi3+0x32>
    7038:	1212      	asrs	r2, r2, #8
    703a:	0209      	lsls	r1, r1, #8
    703c:	d065      	beq.n	710a <__udivsi3+0xfe>
    703e:	0b03      	lsrs	r3, r0, #12
    7040:	428b      	cmp	r3, r1
    7042:	d319      	bcc.n	7078 <__udivsi3+0x6c>
    7044:	e000      	b.n	7048 <__udivsi3+0x3c>
    7046:	0a09      	lsrs	r1, r1, #8
    7048:	0bc3      	lsrs	r3, r0, #15
    704a:	428b      	cmp	r3, r1
    704c:	d301      	bcc.n	7052 <__udivsi3+0x46>
    704e:	03cb      	lsls	r3, r1, #15
    7050:	1ac0      	subs	r0, r0, r3
    7052:	4152      	adcs	r2, r2
    7054:	0b83      	lsrs	r3, r0, #14
    7056:	428b      	cmp	r3, r1
    7058:	d301      	bcc.n	705e <__udivsi3+0x52>
    705a:	038b      	lsls	r3, r1, #14
    705c:	1ac0      	subs	r0, r0, r3
    705e:	4152      	adcs	r2, r2
    7060:	0b43      	lsrs	r3, r0, #13
    7062:	428b      	cmp	r3, r1
    7064:	d301      	bcc.n	706a <__udivsi3+0x5e>
    7066:	034b      	lsls	r3, r1, #13
    7068:	1ac0      	subs	r0, r0, r3
    706a:	4152      	adcs	r2, r2
    706c:	0b03      	lsrs	r3, r0, #12
    706e:	428b      	cmp	r3, r1
    7070:	d301      	bcc.n	7076 <__udivsi3+0x6a>
    7072:	030b      	lsls	r3, r1, #12
    7074:	1ac0      	subs	r0, r0, r3
    7076:	4152      	adcs	r2, r2
    7078:	0ac3      	lsrs	r3, r0, #11
    707a:	428b      	cmp	r3, r1
    707c:	d301      	bcc.n	7082 <__udivsi3+0x76>
    707e:	02cb      	lsls	r3, r1, #11
    7080:	1ac0      	subs	r0, r0, r3
    7082:	4152      	adcs	r2, r2
    7084:	0a83      	lsrs	r3, r0, #10
    7086:	428b      	cmp	r3, r1
    7088:	d301      	bcc.n	708e <__udivsi3+0x82>
    708a:	028b      	lsls	r3, r1, #10
    708c:	1ac0      	subs	r0, r0, r3
    708e:	4152      	adcs	r2, r2
    7090:	0a43      	lsrs	r3, r0, #9
    7092:	428b      	cmp	r3, r1
    7094:	d301      	bcc.n	709a <__udivsi3+0x8e>
    7096:	024b      	lsls	r3, r1, #9
    7098:	1ac0      	subs	r0, r0, r3
    709a:	4152      	adcs	r2, r2
    709c:	0a03      	lsrs	r3, r0, #8
    709e:	428b      	cmp	r3, r1
    70a0:	d301      	bcc.n	70a6 <__udivsi3+0x9a>
    70a2:	020b      	lsls	r3, r1, #8
    70a4:	1ac0      	subs	r0, r0, r3
    70a6:	4152      	adcs	r2, r2
    70a8:	d2cd      	bcs.n	7046 <__udivsi3+0x3a>
    70aa:	09c3      	lsrs	r3, r0, #7
    70ac:	428b      	cmp	r3, r1
    70ae:	d301      	bcc.n	70b4 <__udivsi3+0xa8>
    70b0:	01cb      	lsls	r3, r1, #7
    70b2:	1ac0      	subs	r0, r0, r3
    70b4:	4152      	adcs	r2, r2
    70b6:	0983      	lsrs	r3, r0, #6
    70b8:	428b      	cmp	r3, r1
    70ba:	d301      	bcc.n	70c0 <__udivsi3+0xb4>
    70bc:	018b      	lsls	r3, r1, #6
    70be:	1ac0      	subs	r0, r0, r3
    70c0:	4152      	adcs	r2, r2
    70c2:	0943      	lsrs	r3, r0, #5
    70c4:	428b      	cmp	r3, r1
    70c6:	d301      	bcc.n	70cc <__udivsi3+0xc0>
    70c8:	014b      	lsls	r3, r1, #5
    70ca:	1ac0      	subs	r0, r0, r3
    70cc:	4152      	adcs	r2, r2
    70ce:	0903      	lsrs	r3, r0, #4
    70d0:	428b      	cmp	r3, r1
    70d2:	d301      	bcc.n	70d8 <__udivsi3+0xcc>
    70d4:	010b      	lsls	r3, r1, #4
    70d6:	1ac0      	subs	r0, r0, r3
    70d8:	4152      	adcs	r2, r2
    70da:	08c3      	lsrs	r3, r0, #3
    70dc:	428b      	cmp	r3, r1
    70de:	d301      	bcc.n	70e4 <__udivsi3+0xd8>
    70e0:	00cb      	lsls	r3, r1, #3
    70e2:	1ac0      	subs	r0, r0, r3
    70e4:	4152      	adcs	r2, r2
    70e6:	0883      	lsrs	r3, r0, #2
    70e8:	428b      	cmp	r3, r1
    70ea:	d301      	bcc.n	70f0 <__udivsi3+0xe4>
    70ec:	008b      	lsls	r3, r1, #2
    70ee:	1ac0      	subs	r0, r0, r3
    70f0:	4152      	adcs	r2, r2
    70f2:	0843      	lsrs	r3, r0, #1
    70f4:	428b      	cmp	r3, r1
    70f6:	d301      	bcc.n	70fc <__udivsi3+0xf0>
    70f8:	004b      	lsls	r3, r1, #1
    70fa:	1ac0      	subs	r0, r0, r3
    70fc:	4152      	adcs	r2, r2
    70fe:	1a41      	subs	r1, r0, r1
    7100:	d200      	bcs.n	7104 <__udivsi3+0xf8>
    7102:	4601      	mov	r1, r0
    7104:	4152      	adcs	r2, r2
    7106:	4610      	mov	r0, r2
    7108:	4770      	bx	lr
    710a:	e7ff      	b.n	710c <__udivsi3+0x100>
    710c:	b501      	push	{r0, lr}
    710e:	2000      	movs	r0, #0
    7110:	f000 f8f0 	bl	72f4 <__aeabi_idiv0>
    7114:	bd02      	pop	{r1, pc}
    7116:	46c0      	nop			; (mov r8, r8)

00007118 <__aeabi_uidivmod>:
    7118:	2900      	cmp	r1, #0
    711a:	d0f7      	beq.n	710c <__udivsi3+0x100>
    711c:	e776      	b.n	700c <__udivsi3>
    711e:	4770      	bx	lr

00007120 <__divsi3>:
    7120:	4603      	mov	r3, r0
    7122:	430b      	orrs	r3, r1
    7124:	d47f      	bmi.n	7226 <__divsi3+0x106>
    7126:	2200      	movs	r2, #0
    7128:	0843      	lsrs	r3, r0, #1
    712a:	428b      	cmp	r3, r1
    712c:	d374      	bcc.n	7218 <__divsi3+0xf8>
    712e:	0903      	lsrs	r3, r0, #4
    7130:	428b      	cmp	r3, r1
    7132:	d35f      	bcc.n	71f4 <__divsi3+0xd4>
    7134:	0a03      	lsrs	r3, r0, #8
    7136:	428b      	cmp	r3, r1
    7138:	d344      	bcc.n	71c4 <__divsi3+0xa4>
    713a:	0b03      	lsrs	r3, r0, #12
    713c:	428b      	cmp	r3, r1
    713e:	d328      	bcc.n	7192 <__divsi3+0x72>
    7140:	0c03      	lsrs	r3, r0, #16
    7142:	428b      	cmp	r3, r1
    7144:	d30d      	bcc.n	7162 <__divsi3+0x42>
    7146:	22ff      	movs	r2, #255	; 0xff
    7148:	0209      	lsls	r1, r1, #8
    714a:	ba12      	rev	r2, r2
    714c:	0c03      	lsrs	r3, r0, #16
    714e:	428b      	cmp	r3, r1
    7150:	d302      	bcc.n	7158 <__divsi3+0x38>
    7152:	1212      	asrs	r2, r2, #8
    7154:	0209      	lsls	r1, r1, #8
    7156:	d065      	beq.n	7224 <__divsi3+0x104>
    7158:	0b03      	lsrs	r3, r0, #12
    715a:	428b      	cmp	r3, r1
    715c:	d319      	bcc.n	7192 <__divsi3+0x72>
    715e:	e000      	b.n	7162 <__divsi3+0x42>
    7160:	0a09      	lsrs	r1, r1, #8
    7162:	0bc3      	lsrs	r3, r0, #15
    7164:	428b      	cmp	r3, r1
    7166:	d301      	bcc.n	716c <__divsi3+0x4c>
    7168:	03cb      	lsls	r3, r1, #15
    716a:	1ac0      	subs	r0, r0, r3
    716c:	4152      	adcs	r2, r2
    716e:	0b83      	lsrs	r3, r0, #14
    7170:	428b      	cmp	r3, r1
    7172:	d301      	bcc.n	7178 <__divsi3+0x58>
    7174:	038b      	lsls	r3, r1, #14
    7176:	1ac0      	subs	r0, r0, r3
    7178:	4152      	adcs	r2, r2
    717a:	0b43      	lsrs	r3, r0, #13
    717c:	428b      	cmp	r3, r1
    717e:	d301      	bcc.n	7184 <__divsi3+0x64>
    7180:	034b      	lsls	r3, r1, #13
    7182:	1ac0      	subs	r0, r0, r3
    7184:	4152      	adcs	r2, r2
    7186:	0b03      	lsrs	r3, r0, #12
    7188:	428b      	cmp	r3, r1
    718a:	d301      	bcc.n	7190 <__divsi3+0x70>
    718c:	030b      	lsls	r3, r1, #12
    718e:	1ac0      	subs	r0, r0, r3
    7190:	4152      	adcs	r2, r2
    7192:	0ac3      	lsrs	r3, r0, #11
    7194:	428b      	cmp	r3, r1
    7196:	d301      	bcc.n	719c <__divsi3+0x7c>
    7198:	02cb      	lsls	r3, r1, #11
    719a:	1ac0      	subs	r0, r0, r3
    719c:	4152      	adcs	r2, r2
    719e:	0a83      	lsrs	r3, r0, #10
    71a0:	428b      	cmp	r3, r1
    71a2:	d301      	bcc.n	71a8 <__divsi3+0x88>
    71a4:	028b      	lsls	r3, r1, #10
    71a6:	1ac0      	subs	r0, r0, r3
    71a8:	4152      	adcs	r2, r2
    71aa:	0a43      	lsrs	r3, r0, #9
    71ac:	428b      	cmp	r3, r1
    71ae:	d301      	bcc.n	71b4 <__divsi3+0x94>
    71b0:	024b      	lsls	r3, r1, #9
    71b2:	1ac0      	subs	r0, r0, r3
    71b4:	4152      	adcs	r2, r2
    71b6:	0a03      	lsrs	r3, r0, #8
    71b8:	428b      	cmp	r3, r1
    71ba:	d301      	bcc.n	71c0 <__divsi3+0xa0>
    71bc:	020b      	lsls	r3, r1, #8
    71be:	1ac0      	subs	r0, r0, r3
    71c0:	4152      	adcs	r2, r2
    71c2:	d2cd      	bcs.n	7160 <__divsi3+0x40>
    71c4:	09c3      	lsrs	r3, r0, #7
    71c6:	428b      	cmp	r3, r1
    71c8:	d301      	bcc.n	71ce <__divsi3+0xae>
    71ca:	01cb      	lsls	r3, r1, #7
    71cc:	1ac0      	subs	r0, r0, r3
    71ce:	4152      	adcs	r2, r2
    71d0:	0983      	lsrs	r3, r0, #6
    71d2:	428b      	cmp	r3, r1
    71d4:	d301      	bcc.n	71da <__divsi3+0xba>
    71d6:	018b      	lsls	r3, r1, #6
    71d8:	1ac0      	subs	r0, r0, r3
    71da:	4152      	adcs	r2, r2
    71dc:	0943      	lsrs	r3, r0, #5
    71de:	428b      	cmp	r3, r1
    71e0:	d301      	bcc.n	71e6 <__divsi3+0xc6>
    71e2:	014b      	lsls	r3, r1, #5
    71e4:	1ac0      	subs	r0, r0, r3
    71e6:	4152      	adcs	r2, r2
    71e8:	0903      	lsrs	r3, r0, #4
    71ea:	428b      	cmp	r3, r1
    71ec:	d301      	bcc.n	71f2 <__divsi3+0xd2>
    71ee:	010b      	lsls	r3, r1, #4
    71f0:	1ac0      	subs	r0, r0, r3
    71f2:	4152      	adcs	r2, r2
    71f4:	08c3      	lsrs	r3, r0, #3
    71f6:	428b      	cmp	r3, r1
    71f8:	d301      	bcc.n	71fe <__divsi3+0xde>
    71fa:	00cb      	lsls	r3, r1, #3
    71fc:	1ac0      	subs	r0, r0, r3
    71fe:	4152      	adcs	r2, r2
    7200:	0883      	lsrs	r3, r0, #2
    7202:	428b      	cmp	r3, r1
    7204:	d301      	bcc.n	720a <__divsi3+0xea>
    7206:	008b      	lsls	r3, r1, #2
    7208:	1ac0      	subs	r0, r0, r3
    720a:	4152      	adcs	r2, r2
    720c:	0843      	lsrs	r3, r0, #1
    720e:	428b      	cmp	r3, r1
    7210:	d301      	bcc.n	7216 <__divsi3+0xf6>
    7212:	004b      	lsls	r3, r1, #1
    7214:	1ac0      	subs	r0, r0, r3
    7216:	4152      	adcs	r2, r2
    7218:	1a41      	subs	r1, r0, r1
    721a:	d200      	bcs.n	721e <__divsi3+0xfe>
    721c:	4601      	mov	r1, r0
    721e:	4152      	adcs	r2, r2
    7220:	4610      	mov	r0, r2
    7222:	4770      	bx	lr
    7224:	e05d      	b.n	72e2 <__divsi3+0x1c2>
    7226:	0fca      	lsrs	r2, r1, #31
    7228:	d000      	beq.n	722c <__divsi3+0x10c>
    722a:	4249      	negs	r1, r1
    722c:	1003      	asrs	r3, r0, #32
    722e:	d300      	bcc.n	7232 <__divsi3+0x112>
    7230:	4240      	negs	r0, r0
    7232:	4053      	eors	r3, r2
    7234:	2200      	movs	r2, #0
    7236:	469c      	mov	ip, r3
    7238:	0903      	lsrs	r3, r0, #4
    723a:	428b      	cmp	r3, r1
    723c:	d32d      	bcc.n	729a <__divsi3+0x17a>
    723e:	0a03      	lsrs	r3, r0, #8
    7240:	428b      	cmp	r3, r1
    7242:	d312      	bcc.n	726a <__divsi3+0x14a>
    7244:	22fc      	movs	r2, #252	; 0xfc
    7246:	0189      	lsls	r1, r1, #6
    7248:	ba12      	rev	r2, r2
    724a:	0a03      	lsrs	r3, r0, #8
    724c:	428b      	cmp	r3, r1
    724e:	d30c      	bcc.n	726a <__divsi3+0x14a>
    7250:	0189      	lsls	r1, r1, #6
    7252:	1192      	asrs	r2, r2, #6
    7254:	428b      	cmp	r3, r1
    7256:	d308      	bcc.n	726a <__divsi3+0x14a>
    7258:	0189      	lsls	r1, r1, #6
    725a:	1192      	asrs	r2, r2, #6
    725c:	428b      	cmp	r3, r1
    725e:	d304      	bcc.n	726a <__divsi3+0x14a>
    7260:	0189      	lsls	r1, r1, #6
    7262:	d03a      	beq.n	72da <__divsi3+0x1ba>
    7264:	1192      	asrs	r2, r2, #6
    7266:	e000      	b.n	726a <__divsi3+0x14a>
    7268:	0989      	lsrs	r1, r1, #6
    726a:	09c3      	lsrs	r3, r0, #7
    726c:	428b      	cmp	r3, r1
    726e:	d301      	bcc.n	7274 <__divsi3+0x154>
    7270:	01cb      	lsls	r3, r1, #7
    7272:	1ac0      	subs	r0, r0, r3
    7274:	4152      	adcs	r2, r2
    7276:	0983      	lsrs	r3, r0, #6
    7278:	428b      	cmp	r3, r1
    727a:	d301      	bcc.n	7280 <__divsi3+0x160>
    727c:	018b      	lsls	r3, r1, #6
    727e:	1ac0      	subs	r0, r0, r3
    7280:	4152      	adcs	r2, r2
    7282:	0943      	lsrs	r3, r0, #5
    7284:	428b      	cmp	r3, r1
    7286:	d301      	bcc.n	728c <__divsi3+0x16c>
    7288:	014b      	lsls	r3, r1, #5
    728a:	1ac0      	subs	r0, r0, r3
    728c:	4152      	adcs	r2, r2
    728e:	0903      	lsrs	r3, r0, #4
    7290:	428b      	cmp	r3, r1
    7292:	d301      	bcc.n	7298 <__divsi3+0x178>
    7294:	010b      	lsls	r3, r1, #4
    7296:	1ac0      	subs	r0, r0, r3
    7298:	4152      	adcs	r2, r2
    729a:	08c3      	lsrs	r3, r0, #3
    729c:	428b      	cmp	r3, r1
    729e:	d301      	bcc.n	72a4 <__divsi3+0x184>
    72a0:	00cb      	lsls	r3, r1, #3
    72a2:	1ac0      	subs	r0, r0, r3
    72a4:	4152      	adcs	r2, r2
    72a6:	0883      	lsrs	r3, r0, #2
    72a8:	428b      	cmp	r3, r1
    72aa:	d301      	bcc.n	72b0 <__divsi3+0x190>
    72ac:	008b      	lsls	r3, r1, #2
    72ae:	1ac0      	subs	r0, r0, r3
    72b0:	4152      	adcs	r2, r2
    72b2:	d2d9      	bcs.n	7268 <__divsi3+0x148>
    72b4:	0843      	lsrs	r3, r0, #1
    72b6:	428b      	cmp	r3, r1
    72b8:	d301      	bcc.n	72be <__divsi3+0x19e>
    72ba:	004b      	lsls	r3, r1, #1
    72bc:	1ac0      	subs	r0, r0, r3
    72be:	4152      	adcs	r2, r2
    72c0:	1a41      	subs	r1, r0, r1
    72c2:	d200      	bcs.n	72c6 <__divsi3+0x1a6>
    72c4:	4601      	mov	r1, r0
    72c6:	4663      	mov	r3, ip
    72c8:	4152      	adcs	r2, r2
    72ca:	105b      	asrs	r3, r3, #1
    72cc:	4610      	mov	r0, r2
    72ce:	d301      	bcc.n	72d4 <__divsi3+0x1b4>
    72d0:	4240      	negs	r0, r0
    72d2:	2b00      	cmp	r3, #0
    72d4:	d500      	bpl.n	72d8 <__divsi3+0x1b8>
    72d6:	4249      	negs	r1, r1
    72d8:	4770      	bx	lr
    72da:	4663      	mov	r3, ip
    72dc:	105b      	asrs	r3, r3, #1
    72de:	d300      	bcc.n	72e2 <__divsi3+0x1c2>
    72e0:	4240      	negs	r0, r0
    72e2:	b501      	push	{r0, lr}
    72e4:	2000      	movs	r0, #0
    72e6:	f000 f805 	bl	72f4 <__aeabi_idiv0>
    72ea:	bd02      	pop	{r1, pc}

000072ec <__aeabi_idivmod>:
    72ec:	2900      	cmp	r1, #0
    72ee:	d0f8      	beq.n	72e2 <__divsi3+0x1c2>
    72f0:	e716      	b.n	7120 <__divsi3>
    72f2:	4770      	bx	lr

000072f4 <__aeabi_idiv0>:
    72f4:	4770      	bx	lr
    72f6:	46c0      	nop			; (mov r8, r8)

000072f8 <__aeabi_lmul>:
    72f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72fa:	46ce      	mov	lr, r9
    72fc:	4647      	mov	r7, r8
    72fe:	0415      	lsls	r5, r2, #16
    7300:	0c2d      	lsrs	r5, r5, #16
    7302:	002e      	movs	r6, r5
    7304:	b580      	push	{r7, lr}
    7306:	0407      	lsls	r7, r0, #16
    7308:	0c14      	lsrs	r4, r2, #16
    730a:	0c3f      	lsrs	r7, r7, #16
    730c:	4699      	mov	r9, r3
    730e:	0c03      	lsrs	r3, r0, #16
    7310:	437e      	muls	r6, r7
    7312:	435d      	muls	r5, r3
    7314:	4367      	muls	r7, r4
    7316:	4363      	muls	r3, r4
    7318:	197f      	adds	r7, r7, r5
    731a:	0c34      	lsrs	r4, r6, #16
    731c:	19e4      	adds	r4, r4, r7
    731e:	469c      	mov	ip, r3
    7320:	42a5      	cmp	r5, r4
    7322:	d903      	bls.n	732c <__aeabi_lmul+0x34>
    7324:	2380      	movs	r3, #128	; 0x80
    7326:	025b      	lsls	r3, r3, #9
    7328:	4698      	mov	r8, r3
    732a:	44c4      	add	ip, r8
    732c:	464b      	mov	r3, r9
    732e:	4351      	muls	r1, r2
    7330:	4343      	muls	r3, r0
    7332:	0436      	lsls	r6, r6, #16
    7334:	0c36      	lsrs	r6, r6, #16
    7336:	0c25      	lsrs	r5, r4, #16
    7338:	0424      	lsls	r4, r4, #16
    733a:	4465      	add	r5, ip
    733c:	19a4      	adds	r4, r4, r6
    733e:	1859      	adds	r1, r3, r1
    7340:	1949      	adds	r1, r1, r5
    7342:	0020      	movs	r0, r4
    7344:	bc0c      	pop	{r2, r3}
    7346:	4690      	mov	r8, r2
    7348:	4699      	mov	r9, r3
    734a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000734c <_fgets_r>:
    734c:	b5f0      	push	{r4, r5, r6, r7, lr}
    734e:	b085      	sub	sp, #20
    7350:	0006      	movs	r6, r0
    7352:	9103      	str	r1, [sp, #12]
    7354:	0015      	movs	r5, r2
    7356:	001c      	movs	r4, r3
    7358:	2a01      	cmp	r2, #1
    735a:	dc02      	bgt.n	7362 <_fgets_r+0x16>
    735c:	2000      	movs	r0, #0
    735e:	b005      	add	sp, #20
    7360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7362:	2800      	cmp	r0, #0
    7364:	d004      	beq.n	7370 <_fgets_r+0x24>
    7366:	6983      	ldr	r3, [r0, #24]
    7368:	2b00      	cmp	r3, #0
    736a:	d101      	bne.n	7370 <_fgets_r+0x24>
    736c:	f000 f8a2 	bl	74b4 <__sinit>
    7370:	4b26      	ldr	r3, [pc, #152]	; (740c <_fgets_r+0xc0>)
    7372:	429c      	cmp	r4, r3
    7374:	d112      	bne.n	739c <_fgets_r+0x50>
    7376:	6874      	ldr	r4, [r6, #4]
    7378:	1e6b      	subs	r3, r5, #1
    737a:	9f03      	ldr	r7, [sp, #12]
    737c:	9301      	str	r3, [sp, #4]
    737e:	6865      	ldr	r5, [r4, #4]
    7380:	2d00      	cmp	r5, #0
    7382:	d116      	bne.n	73b2 <_fgets_r+0x66>
    7384:	0021      	movs	r1, r4
    7386:	0030      	movs	r0, r6
    7388:	f000 fa74 	bl	7874 <__srefill_r>
    738c:	2800      	cmp	r0, #0
    738e:	d00f      	beq.n	73b0 <_fgets_r+0x64>
    7390:	9b03      	ldr	r3, [sp, #12]
    7392:	429f      	cmp	r7, r3
    7394:	d0e2      	beq.n	735c <_fgets_r+0x10>
    7396:	2300      	movs	r3, #0
    7398:	703b      	strb	r3, [r7, #0]
    739a:	e024      	b.n	73e6 <_fgets_r+0x9a>
    739c:	4b1c      	ldr	r3, [pc, #112]	; (7410 <_fgets_r+0xc4>)
    739e:	429c      	cmp	r4, r3
    73a0:	d101      	bne.n	73a6 <_fgets_r+0x5a>
    73a2:	68b4      	ldr	r4, [r6, #8]
    73a4:	e7e8      	b.n	7378 <_fgets_r+0x2c>
    73a6:	4b1b      	ldr	r3, [pc, #108]	; (7414 <_fgets_r+0xc8>)
    73a8:	429c      	cmp	r4, r3
    73aa:	d1e5      	bne.n	7378 <_fgets_r+0x2c>
    73ac:	68f4      	ldr	r4, [r6, #12]
    73ae:	e7e3      	b.n	7378 <_fgets_r+0x2c>
    73b0:	6865      	ldr	r5, [r4, #4]
    73b2:	6823      	ldr	r3, [r4, #0]
    73b4:	9302      	str	r3, [sp, #8]
    73b6:	9b01      	ldr	r3, [sp, #4]
    73b8:	429d      	cmp	r5, r3
    73ba:	d900      	bls.n	73be <_fgets_r+0x72>
    73bc:	001d      	movs	r5, r3
    73be:	002a      	movs	r2, r5
    73c0:	210a      	movs	r1, #10
    73c2:	9802      	ldr	r0, [sp, #8]
    73c4:	f000 f94c 	bl	7660 <memchr>
    73c8:	6863      	ldr	r3, [r4, #4]
    73ca:	2800      	cmp	r0, #0
    73cc:	d00d      	beq.n	73ea <_fgets_r+0x9e>
    73ce:	9a02      	ldr	r2, [sp, #8]
    73d0:	3001      	adds	r0, #1
    73d2:	1a85      	subs	r5, r0, r2
    73d4:	1b5b      	subs	r3, r3, r5
    73d6:	c409      	stmia	r4!, {r0, r3}
    73d8:	002a      	movs	r2, r5
    73da:	9902      	ldr	r1, [sp, #8]
    73dc:	0038      	movs	r0, r7
    73de:	f000 f94a 	bl	7676 <memcpy>
    73e2:	2300      	movs	r3, #0
    73e4:	557b      	strb	r3, [r7, r5]
    73e6:	9803      	ldr	r0, [sp, #12]
    73e8:	e7b9      	b.n	735e <_fgets_r+0x12>
    73ea:	1b5b      	subs	r3, r3, r5
    73ec:	6063      	str	r3, [r4, #4]
    73ee:	6823      	ldr	r3, [r4, #0]
    73f0:	0038      	movs	r0, r7
    73f2:	195b      	adds	r3, r3, r5
    73f4:	6023      	str	r3, [r4, #0]
    73f6:	002a      	movs	r2, r5
    73f8:	9902      	ldr	r1, [sp, #8]
    73fa:	f000 f93c 	bl	7676 <memcpy>
    73fe:	9b01      	ldr	r3, [sp, #4]
    7400:	197f      	adds	r7, r7, r5
    7402:	1b5b      	subs	r3, r3, r5
    7404:	9301      	str	r3, [sp, #4]
    7406:	d1ba      	bne.n	737e <_fgets_r+0x32>
    7408:	e7c5      	b.n	7396 <_fgets_r+0x4a>
    740a:	46c0      	nop			; (mov r8, r8)
    740c:	00008ffc 	.word	0x00008ffc
    7410:	0000901c 	.word	0x0000901c
    7414:	00008fdc 	.word	0x00008fdc

00007418 <fgets>:
    7418:	b510      	push	{r4, lr}
    741a:	0013      	movs	r3, r2
    741c:	000a      	movs	r2, r1
    741e:	0001      	movs	r1, r0
    7420:	4802      	ldr	r0, [pc, #8]	; (742c <fgets+0x14>)
    7422:	6800      	ldr	r0, [r0, #0]
    7424:	f7ff ff92 	bl	734c <_fgets_r>
    7428:	bd10      	pop	{r4, pc}
    742a:	46c0      	nop			; (mov r8, r8)
    742c:	20000038 	.word	0x20000038

00007430 <_cleanup_r>:
    7430:	b510      	push	{r4, lr}
    7432:	4902      	ldr	r1, [pc, #8]	; (743c <_cleanup_r+0xc>)
    7434:	f000 f8ce 	bl	75d4 <_fwalk_reent>
    7438:	bd10      	pop	{r4, pc}
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	00007ec5 	.word	0x00007ec5

00007440 <std.isra.0>:
    7440:	2300      	movs	r3, #0
    7442:	b510      	push	{r4, lr}
    7444:	0004      	movs	r4, r0
    7446:	6003      	str	r3, [r0, #0]
    7448:	6043      	str	r3, [r0, #4]
    744a:	6083      	str	r3, [r0, #8]
    744c:	8181      	strh	r1, [r0, #12]
    744e:	6643      	str	r3, [r0, #100]	; 0x64
    7450:	81c2      	strh	r2, [r0, #14]
    7452:	6103      	str	r3, [r0, #16]
    7454:	6143      	str	r3, [r0, #20]
    7456:	6183      	str	r3, [r0, #24]
    7458:	0019      	movs	r1, r3
    745a:	2208      	movs	r2, #8
    745c:	305c      	adds	r0, #92	; 0x5c
    745e:	f000 f913 	bl	7688 <memset>
    7462:	4b05      	ldr	r3, [pc, #20]	; (7478 <std.isra.0+0x38>)
    7464:	6224      	str	r4, [r4, #32]
    7466:	6263      	str	r3, [r4, #36]	; 0x24
    7468:	4b04      	ldr	r3, [pc, #16]	; (747c <std.isra.0+0x3c>)
    746a:	62a3      	str	r3, [r4, #40]	; 0x28
    746c:	4b04      	ldr	r3, [pc, #16]	; (7480 <std.isra.0+0x40>)
    746e:	62e3      	str	r3, [r4, #44]	; 0x2c
    7470:	4b04      	ldr	r3, [pc, #16]	; (7484 <std.isra.0+0x44>)
    7472:	6323      	str	r3, [r4, #48]	; 0x30
    7474:	bd10      	pop	{r4, pc}
    7476:	46c0      	nop			; (mov r8, r8)
    7478:	00007b25 	.word	0x00007b25
    747c:	00007b4d 	.word	0x00007b4d
    7480:	00007b85 	.word	0x00007b85
    7484:	00007bb1 	.word	0x00007bb1

00007488 <__sfmoreglue>:
    7488:	b570      	push	{r4, r5, r6, lr}
    748a:	2568      	movs	r5, #104	; 0x68
    748c:	1e4a      	subs	r2, r1, #1
    748e:	4355      	muls	r5, r2
    7490:	000e      	movs	r6, r1
    7492:	0029      	movs	r1, r5
    7494:	3174      	adds	r1, #116	; 0x74
    7496:	f000 f8ff 	bl	7698 <_malloc_r>
    749a:	1e04      	subs	r4, r0, #0
    749c:	d008      	beq.n	74b0 <__sfmoreglue+0x28>
    749e:	2100      	movs	r1, #0
    74a0:	002a      	movs	r2, r5
    74a2:	6001      	str	r1, [r0, #0]
    74a4:	6046      	str	r6, [r0, #4]
    74a6:	300c      	adds	r0, #12
    74a8:	60a0      	str	r0, [r4, #8]
    74aa:	3268      	adds	r2, #104	; 0x68
    74ac:	f000 f8ec 	bl	7688 <memset>
    74b0:	0020      	movs	r0, r4
    74b2:	bd70      	pop	{r4, r5, r6, pc}

000074b4 <__sinit>:
    74b4:	6983      	ldr	r3, [r0, #24]
    74b6:	b513      	push	{r0, r1, r4, lr}
    74b8:	0004      	movs	r4, r0
    74ba:	2b00      	cmp	r3, #0
    74bc:	d128      	bne.n	7510 <__sinit+0x5c>
    74be:	6483      	str	r3, [r0, #72]	; 0x48
    74c0:	64c3      	str	r3, [r0, #76]	; 0x4c
    74c2:	6503      	str	r3, [r0, #80]	; 0x50
    74c4:	4b13      	ldr	r3, [pc, #76]	; (7514 <__sinit+0x60>)
    74c6:	4a14      	ldr	r2, [pc, #80]	; (7518 <__sinit+0x64>)
    74c8:	681b      	ldr	r3, [r3, #0]
    74ca:	6282      	str	r2, [r0, #40]	; 0x28
    74cc:	9301      	str	r3, [sp, #4]
    74ce:	4298      	cmp	r0, r3
    74d0:	d101      	bne.n	74d6 <__sinit+0x22>
    74d2:	2301      	movs	r3, #1
    74d4:	6183      	str	r3, [r0, #24]
    74d6:	0020      	movs	r0, r4
    74d8:	f000 f820 	bl	751c <__sfp>
    74dc:	6060      	str	r0, [r4, #4]
    74de:	0020      	movs	r0, r4
    74e0:	f000 f81c 	bl	751c <__sfp>
    74e4:	60a0      	str	r0, [r4, #8]
    74e6:	0020      	movs	r0, r4
    74e8:	f000 f818 	bl	751c <__sfp>
    74ec:	2200      	movs	r2, #0
    74ee:	60e0      	str	r0, [r4, #12]
    74f0:	2104      	movs	r1, #4
    74f2:	6860      	ldr	r0, [r4, #4]
    74f4:	f7ff ffa4 	bl	7440 <std.isra.0>
    74f8:	2201      	movs	r2, #1
    74fa:	2109      	movs	r1, #9
    74fc:	68a0      	ldr	r0, [r4, #8]
    74fe:	f7ff ff9f 	bl	7440 <std.isra.0>
    7502:	2202      	movs	r2, #2
    7504:	2112      	movs	r1, #18
    7506:	68e0      	ldr	r0, [r4, #12]
    7508:	f7ff ff9a 	bl	7440 <std.isra.0>
    750c:	2301      	movs	r3, #1
    750e:	61a3      	str	r3, [r4, #24]
    7510:	bd13      	pop	{r0, r1, r4, pc}
    7512:	46c0      	nop			; (mov r8, r8)
    7514:	0000903c 	.word	0x0000903c
    7518:	00007431 	.word	0x00007431

0000751c <__sfp>:
    751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    751e:	4b1e      	ldr	r3, [pc, #120]	; (7598 <__sfp+0x7c>)
    7520:	0007      	movs	r7, r0
    7522:	681e      	ldr	r6, [r3, #0]
    7524:	69b3      	ldr	r3, [r6, #24]
    7526:	2b00      	cmp	r3, #0
    7528:	d102      	bne.n	7530 <__sfp+0x14>
    752a:	0030      	movs	r0, r6
    752c:	f7ff ffc2 	bl	74b4 <__sinit>
    7530:	3648      	adds	r6, #72	; 0x48
    7532:	68b4      	ldr	r4, [r6, #8]
    7534:	6873      	ldr	r3, [r6, #4]
    7536:	3b01      	subs	r3, #1
    7538:	d504      	bpl.n	7544 <__sfp+0x28>
    753a:	6833      	ldr	r3, [r6, #0]
    753c:	2b00      	cmp	r3, #0
    753e:	d007      	beq.n	7550 <__sfp+0x34>
    7540:	6836      	ldr	r6, [r6, #0]
    7542:	e7f6      	b.n	7532 <__sfp+0x16>
    7544:	220c      	movs	r2, #12
    7546:	5ea5      	ldrsh	r5, [r4, r2]
    7548:	2d00      	cmp	r5, #0
    754a:	d00d      	beq.n	7568 <__sfp+0x4c>
    754c:	3468      	adds	r4, #104	; 0x68
    754e:	e7f2      	b.n	7536 <__sfp+0x1a>
    7550:	2104      	movs	r1, #4
    7552:	0038      	movs	r0, r7
    7554:	f7ff ff98 	bl	7488 <__sfmoreglue>
    7558:	6030      	str	r0, [r6, #0]
    755a:	2800      	cmp	r0, #0
    755c:	d1f0      	bne.n	7540 <__sfp+0x24>
    755e:	230c      	movs	r3, #12
    7560:	0004      	movs	r4, r0
    7562:	603b      	str	r3, [r7, #0]
    7564:	0020      	movs	r0, r4
    7566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7568:	2301      	movs	r3, #1
    756a:	0020      	movs	r0, r4
    756c:	425b      	negs	r3, r3
    756e:	81e3      	strh	r3, [r4, #14]
    7570:	3302      	adds	r3, #2
    7572:	81a3      	strh	r3, [r4, #12]
    7574:	6665      	str	r5, [r4, #100]	; 0x64
    7576:	6025      	str	r5, [r4, #0]
    7578:	60a5      	str	r5, [r4, #8]
    757a:	6065      	str	r5, [r4, #4]
    757c:	6125      	str	r5, [r4, #16]
    757e:	6165      	str	r5, [r4, #20]
    7580:	61a5      	str	r5, [r4, #24]
    7582:	2208      	movs	r2, #8
    7584:	0029      	movs	r1, r5
    7586:	305c      	adds	r0, #92	; 0x5c
    7588:	f000 f87e 	bl	7688 <memset>
    758c:	6365      	str	r5, [r4, #52]	; 0x34
    758e:	63a5      	str	r5, [r4, #56]	; 0x38
    7590:	64a5      	str	r5, [r4, #72]	; 0x48
    7592:	64e5      	str	r5, [r4, #76]	; 0x4c
    7594:	e7e6      	b.n	7564 <__sfp+0x48>
    7596:	46c0      	nop			; (mov r8, r8)
    7598:	0000903c 	.word	0x0000903c

0000759c <_fwalk>:
    759c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    759e:	3048      	adds	r0, #72	; 0x48
    75a0:	0004      	movs	r4, r0
    75a2:	2600      	movs	r6, #0
    75a4:	9101      	str	r1, [sp, #4]
    75a6:	2c00      	cmp	r4, #0
    75a8:	d101      	bne.n	75ae <_fwalk+0x12>
    75aa:	0030      	movs	r0, r6
    75ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    75ae:	68a5      	ldr	r5, [r4, #8]
    75b0:	6867      	ldr	r7, [r4, #4]
    75b2:	3f01      	subs	r7, #1
    75b4:	d501      	bpl.n	75ba <_fwalk+0x1e>
    75b6:	6824      	ldr	r4, [r4, #0]
    75b8:	e7f5      	b.n	75a6 <_fwalk+0xa>
    75ba:	89ab      	ldrh	r3, [r5, #12]
    75bc:	2b01      	cmp	r3, #1
    75be:	d907      	bls.n	75d0 <_fwalk+0x34>
    75c0:	220e      	movs	r2, #14
    75c2:	5eab      	ldrsh	r3, [r5, r2]
    75c4:	3301      	adds	r3, #1
    75c6:	d003      	beq.n	75d0 <_fwalk+0x34>
    75c8:	0028      	movs	r0, r5
    75ca:	9b01      	ldr	r3, [sp, #4]
    75cc:	4798      	blx	r3
    75ce:	4306      	orrs	r6, r0
    75d0:	3568      	adds	r5, #104	; 0x68
    75d2:	e7ee      	b.n	75b2 <_fwalk+0x16>

000075d4 <_fwalk_reent>:
    75d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    75d6:	0004      	movs	r4, r0
    75d8:	0007      	movs	r7, r0
    75da:	2600      	movs	r6, #0
    75dc:	9101      	str	r1, [sp, #4]
    75de:	3448      	adds	r4, #72	; 0x48
    75e0:	2c00      	cmp	r4, #0
    75e2:	d101      	bne.n	75e8 <_fwalk_reent+0x14>
    75e4:	0030      	movs	r0, r6
    75e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    75e8:	6863      	ldr	r3, [r4, #4]
    75ea:	68a5      	ldr	r5, [r4, #8]
    75ec:	9300      	str	r3, [sp, #0]
    75ee:	9b00      	ldr	r3, [sp, #0]
    75f0:	3b01      	subs	r3, #1
    75f2:	9300      	str	r3, [sp, #0]
    75f4:	d501      	bpl.n	75fa <_fwalk_reent+0x26>
    75f6:	6824      	ldr	r4, [r4, #0]
    75f8:	e7f2      	b.n	75e0 <_fwalk_reent+0xc>
    75fa:	89ab      	ldrh	r3, [r5, #12]
    75fc:	2b01      	cmp	r3, #1
    75fe:	d908      	bls.n	7612 <_fwalk_reent+0x3e>
    7600:	220e      	movs	r2, #14
    7602:	5eab      	ldrsh	r3, [r5, r2]
    7604:	3301      	adds	r3, #1
    7606:	d004      	beq.n	7612 <_fwalk_reent+0x3e>
    7608:	0029      	movs	r1, r5
    760a:	0038      	movs	r0, r7
    760c:	9b01      	ldr	r3, [sp, #4]
    760e:	4798      	blx	r3
    7610:	4306      	orrs	r6, r0
    7612:	3568      	adds	r5, #104	; 0x68
    7614:	e7eb      	b.n	75ee <_fwalk_reent+0x1a>
	...

00007618 <__libc_init_array>:
    7618:	b570      	push	{r4, r5, r6, lr}
    761a:	2600      	movs	r6, #0
    761c:	4d0c      	ldr	r5, [pc, #48]	; (7650 <__libc_init_array+0x38>)
    761e:	4c0d      	ldr	r4, [pc, #52]	; (7654 <__libc_init_array+0x3c>)
    7620:	1b64      	subs	r4, r4, r5
    7622:	10a4      	asrs	r4, r4, #2
    7624:	42a6      	cmp	r6, r4
    7626:	d109      	bne.n	763c <__libc_init_array+0x24>
    7628:	2600      	movs	r6, #0
    762a:	f001 fd23 	bl	9074 <_init>
    762e:	4d0a      	ldr	r5, [pc, #40]	; (7658 <__libc_init_array+0x40>)
    7630:	4c0a      	ldr	r4, [pc, #40]	; (765c <__libc_init_array+0x44>)
    7632:	1b64      	subs	r4, r4, r5
    7634:	10a4      	asrs	r4, r4, #2
    7636:	42a6      	cmp	r6, r4
    7638:	d105      	bne.n	7646 <__libc_init_array+0x2e>
    763a:	bd70      	pop	{r4, r5, r6, pc}
    763c:	00b3      	lsls	r3, r6, #2
    763e:	58eb      	ldr	r3, [r5, r3]
    7640:	4798      	blx	r3
    7642:	3601      	adds	r6, #1
    7644:	e7ee      	b.n	7624 <__libc_init_array+0xc>
    7646:	00b3      	lsls	r3, r6, #2
    7648:	58eb      	ldr	r3, [r5, r3]
    764a:	4798      	blx	r3
    764c:	3601      	adds	r6, #1
    764e:	e7f2      	b.n	7636 <__libc_init_array+0x1e>
    7650:	00009080 	.word	0x00009080
    7654:	00009080 	.word	0x00009080
    7658:	00009080 	.word	0x00009080
    765c:	00009084 	.word	0x00009084

00007660 <memchr>:
    7660:	b2c9      	uxtb	r1, r1
    7662:	1882      	adds	r2, r0, r2
    7664:	4290      	cmp	r0, r2
    7666:	d101      	bne.n	766c <memchr+0xc>
    7668:	2000      	movs	r0, #0
    766a:	4770      	bx	lr
    766c:	7803      	ldrb	r3, [r0, #0]
    766e:	428b      	cmp	r3, r1
    7670:	d0fb      	beq.n	766a <memchr+0xa>
    7672:	3001      	adds	r0, #1
    7674:	e7f6      	b.n	7664 <memchr+0x4>

00007676 <memcpy>:
    7676:	2300      	movs	r3, #0
    7678:	b510      	push	{r4, lr}
    767a:	429a      	cmp	r2, r3
    767c:	d100      	bne.n	7680 <memcpy+0xa>
    767e:	bd10      	pop	{r4, pc}
    7680:	5ccc      	ldrb	r4, [r1, r3]
    7682:	54c4      	strb	r4, [r0, r3]
    7684:	3301      	adds	r3, #1
    7686:	e7f8      	b.n	767a <memcpy+0x4>

00007688 <memset>:
    7688:	0003      	movs	r3, r0
    768a:	1882      	adds	r2, r0, r2
    768c:	4293      	cmp	r3, r2
    768e:	d100      	bne.n	7692 <memset+0xa>
    7690:	4770      	bx	lr
    7692:	7019      	strb	r1, [r3, #0]
    7694:	3301      	adds	r3, #1
    7696:	e7f9      	b.n	768c <memset+0x4>

00007698 <_malloc_r>:
    7698:	2303      	movs	r3, #3
    769a:	b570      	push	{r4, r5, r6, lr}
    769c:	1ccd      	adds	r5, r1, #3
    769e:	439d      	bics	r5, r3
    76a0:	3508      	adds	r5, #8
    76a2:	0006      	movs	r6, r0
    76a4:	2d0c      	cmp	r5, #12
    76a6:	d21e      	bcs.n	76e6 <_malloc_r+0x4e>
    76a8:	250c      	movs	r5, #12
    76aa:	42a9      	cmp	r1, r5
    76ac:	d81d      	bhi.n	76ea <_malloc_r+0x52>
    76ae:	0030      	movs	r0, r6
    76b0:	f000 fcd2 	bl	8058 <__malloc_lock>
    76b4:	4a25      	ldr	r2, [pc, #148]	; (774c <_malloc_r+0xb4>)
    76b6:	6814      	ldr	r4, [r2, #0]
    76b8:	0021      	movs	r1, r4
    76ba:	2900      	cmp	r1, #0
    76bc:	d119      	bne.n	76f2 <_malloc_r+0x5a>
    76be:	4c24      	ldr	r4, [pc, #144]	; (7750 <_malloc_r+0xb8>)
    76c0:	6823      	ldr	r3, [r4, #0]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d103      	bne.n	76ce <_malloc_r+0x36>
    76c6:	0030      	movs	r0, r6
    76c8:	f000 f964 	bl	7994 <_sbrk_r>
    76cc:	6020      	str	r0, [r4, #0]
    76ce:	0029      	movs	r1, r5
    76d0:	0030      	movs	r0, r6
    76d2:	f000 f95f 	bl	7994 <_sbrk_r>
    76d6:	1c43      	adds	r3, r0, #1
    76d8:	d12c      	bne.n	7734 <_malloc_r+0x9c>
    76da:	230c      	movs	r3, #12
    76dc:	0030      	movs	r0, r6
    76de:	6033      	str	r3, [r6, #0]
    76e0:	f000 fcbb 	bl	805a <__malloc_unlock>
    76e4:	e003      	b.n	76ee <_malloc_r+0x56>
    76e6:	2d00      	cmp	r5, #0
    76e8:	dadf      	bge.n	76aa <_malloc_r+0x12>
    76ea:	230c      	movs	r3, #12
    76ec:	6033      	str	r3, [r6, #0]
    76ee:	2000      	movs	r0, #0
    76f0:	bd70      	pop	{r4, r5, r6, pc}
    76f2:	680b      	ldr	r3, [r1, #0]
    76f4:	1b5b      	subs	r3, r3, r5
    76f6:	d41a      	bmi.n	772e <_malloc_r+0x96>
    76f8:	2b0b      	cmp	r3, #11
    76fa:	d903      	bls.n	7704 <_malloc_r+0x6c>
    76fc:	600b      	str	r3, [r1, #0]
    76fe:	18cc      	adds	r4, r1, r3
    7700:	6025      	str	r5, [r4, #0]
    7702:	e003      	b.n	770c <_malloc_r+0x74>
    7704:	428c      	cmp	r4, r1
    7706:	d10e      	bne.n	7726 <_malloc_r+0x8e>
    7708:	6863      	ldr	r3, [r4, #4]
    770a:	6013      	str	r3, [r2, #0]
    770c:	0030      	movs	r0, r6
    770e:	f000 fca4 	bl	805a <__malloc_unlock>
    7712:	0020      	movs	r0, r4
    7714:	2207      	movs	r2, #7
    7716:	300b      	adds	r0, #11
    7718:	1d23      	adds	r3, r4, #4
    771a:	4390      	bics	r0, r2
    771c:	1ac3      	subs	r3, r0, r3
    771e:	d0e7      	beq.n	76f0 <_malloc_r+0x58>
    7720:	425a      	negs	r2, r3
    7722:	50e2      	str	r2, [r4, r3]
    7724:	e7e4      	b.n	76f0 <_malloc_r+0x58>
    7726:	684b      	ldr	r3, [r1, #4]
    7728:	6063      	str	r3, [r4, #4]
    772a:	000c      	movs	r4, r1
    772c:	e7ee      	b.n	770c <_malloc_r+0x74>
    772e:	000c      	movs	r4, r1
    7730:	6849      	ldr	r1, [r1, #4]
    7732:	e7c2      	b.n	76ba <_malloc_r+0x22>
    7734:	2303      	movs	r3, #3
    7736:	1cc4      	adds	r4, r0, #3
    7738:	439c      	bics	r4, r3
    773a:	42a0      	cmp	r0, r4
    773c:	d0e0      	beq.n	7700 <_malloc_r+0x68>
    773e:	1a21      	subs	r1, r4, r0
    7740:	0030      	movs	r0, r6
    7742:	f000 f927 	bl	7994 <_sbrk_r>
    7746:	1c43      	adds	r3, r0, #1
    7748:	d1da      	bne.n	7700 <_malloc_r+0x68>
    774a:	e7c6      	b.n	76da <_malloc_r+0x42>
    774c:	20005138 	.word	0x20005138
    7750:	2000513c 	.word	0x2000513c

00007754 <iprintf>:
    7754:	b40f      	push	{r0, r1, r2, r3}
    7756:	4b0b      	ldr	r3, [pc, #44]	; (7784 <iprintf+0x30>)
    7758:	b513      	push	{r0, r1, r4, lr}
    775a:	681c      	ldr	r4, [r3, #0]
    775c:	2c00      	cmp	r4, #0
    775e:	d005      	beq.n	776c <iprintf+0x18>
    7760:	69a3      	ldr	r3, [r4, #24]
    7762:	2b00      	cmp	r3, #0
    7764:	d102      	bne.n	776c <iprintf+0x18>
    7766:	0020      	movs	r0, r4
    7768:	f7ff fea4 	bl	74b4 <__sinit>
    776c:	ab05      	add	r3, sp, #20
    776e:	9a04      	ldr	r2, [sp, #16]
    7770:	68a1      	ldr	r1, [r4, #8]
    7772:	0020      	movs	r0, r4
    7774:	9301      	str	r3, [sp, #4]
    7776:	f000 fce3 	bl	8140 <_vfiprintf_r>
    777a:	bc16      	pop	{r1, r2, r4}
    777c:	bc08      	pop	{r3}
    777e:	b004      	add	sp, #16
    7780:	4718      	bx	r3
    7782:	46c0      	nop			; (mov r8, r8)
    7784:	20000038 	.word	0x20000038

00007788 <_puts_r>:
    7788:	b570      	push	{r4, r5, r6, lr}
    778a:	0005      	movs	r5, r0
    778c:	000e      	movs	r6, r1
    778e:	2800      	cmp	r0, #0
    7790:	d004      	beq.n	779c <_puts_r+0x14>
    7792:	6983      	ldr	r3, [r0, #24]
    7794:	2b00      	cmp	r3, #0
    7796:	d101      	bne.n	779c <_puts_r+0x14>
    7798:	f7ff fe8c 	bl	74b4 <__sinit>
    779c:	69ab      	ldr	r3, [r5, #24]
    779e:	68ac      	ldr	r4, [r5, #8]
    77a0:	2b00      	cmp	r3, #0
    77a2:	d102      	bne.n	77aa <_puts_r+0x22>
    77a4:	0028      	movs	r0, r5
    77a6:	f7ff fe85 	bl	74b4 <__sinit>
    77aa:	4b24      	ldr	r3, [pc, #144]	; (783c <_puts_r+0xb4>)
    77ac:	429c      	cmp	r4, r3
    77ae:	d10f      	bne.n	77d0 <_puts_r+0x48>
    77b0:	686c      	ldr	r4, [r5, #4]
    77b2:	89a3      	ldrh	r3, [r4, #12]
    77b4:	071b      	lsls	r3, r3, #28
    77b6:	d502      	bpl.n	77be <_puts_r+0x36>
    77b8:	6923      	ldr	r3, [r4, #16]
    77ba:	2b00      	cmp	r3, #0
    77bc:	d120      	bne.n	7800 <_puts_r+0x78>
    77be:	0021      	movs	r1, r4
    77c0:	0028      	movs	r0, r5
    77c2:	f000 fa6d 	bl	7ca0 <__swsetup_r>
    77c6:	2800      	cmp	r0, #0
    77c8:	d01a      	beq.n	7800 <_puts_r+0x78>
    77ca:	2001      	movs	r0, #1
    77cc:	4240      	negs	r0, r0
    77ce:	bd70      	pop	{r4, r5, r6, pc}
    77d0:	4b1b      	ldr	r3, [pc, #108]	; (7840 <_puts_r+0xb8>)
    77d2:	429c      	cmp	r4, r3
    77d4:	d101      	bne.n	77da <_puts_r+0x52>
    77d6:	68ac      	ldr	r4, [r5, #8]
    77d8:	e7eb      	b.n	77b2 <_puts_r+0x2a>
    77da:	4b1a      	ldr	r3, [pc, #104]	; (7844 <_puts_r+0xbc>)
    77dc:	429c      	cmp	r4, r3
    77de:	d1e8      	bne.n	77b2 <_puts_r+0x2a>
    77e0:	68ec      	ldr	r4, [r5, #12]
    77e2:	e7e6      	b.n	77b2 <_puts_r+0x2a>
    77e4:	3b01      	subs	r3, #1
    77e6:	3601      	adds	r6, #1
    77e8:	60a3      	str	r3, [r4, #8]
    77ea:	2b00      	cmp	r3, #0
    77ec:	da04      	bge.n	77f8 <_puts_r+0x70>
    77ee:	69a2      	ldr	r2, [r4, #24]
    77f0:	4293      	cmp	r3, r2
    77f2:	db16      	blt.n	7822 <_puts_r+0x9a>
    77f4:	290a      	cmp	r1, #10
    77f6:	d014      	beq.n	7822 <_puts_r+0x9a>
    77f8:	6823      	ldr	r3, [r4, #0]
    77fa:	1c5a      	adds	r2, r3, #1
    77fc:	6022      	str	r2, [r4, #0]
    77fe:	7019      	strb	r1, [r3, #0]
    7800:	7831      	ldrb	r1, [r6, #0]
    7802:	68a3      	ldr	r3, [r4, #8]
    7804:	2900      	cmp	r1, #0
    7806:	d1ed      	bne.n	77e4 <_puts_r+0x5c>
    7808:	3b01      	subs	r3, #1
    780a:	60a3      	str	r3, [r4, #8]
    780c:	2b00      	cmp	r3, #0
    780e:	da0f      	bge.n	7830 <_puts_r+0xa8>
    7810:	0022      	movs	r2, r4
    7812:	310a      	adds	r1, #10
    7814:	0028      	movs	r0, r5
    7816:	f000 f9d9 	bl	7bcc <__swbuf_r>
    781a:	1c43      	adds	r3, r0, #1
    781c:	d0d5      	beq.n	77ca <_puts_r+0x42>
    781e:	200a      	movs	r0, #10
    7820:	e7d5      	b.n	77ce <_puts_r+0x46>
    7822:	0022      	movs	r2, r4
    7824:	0028      	movs	r0, r5
    7826:	f000 f9d1 	bl	7bcc <__swbuf_r>
    782a:	1c43      	adds	r3, r0, #1
    782c:	d1e8      	bne.n	7800 <_puts_r+0x78>
    782e:	e7cc      	b.n	77ca <_puts_r+0x42>
    7830:	200a      	movs	r0, #10
    7832:	6823      	ldr	r3, [r4, #0]
    7834:	1c5a      	adds	r2, r3, #1
    7836:	6022      	str	r2, [r4, #0]
    7838:	7018      	strb	r0, [r3, #0]
    783a:	e7c8      	b.n	77ce <_puts_r+0x46>
    783c:	00008ffc 	.word	0x00008ffc
    7840:	0000901c 	.word	0x0000901c
    7844:	00008fdc 	.word	0x00008fdc

00007848 <puts>:
    7848:	b510      	push	{r4, lr}
    784a:	4b03      	ldr	r3, [pc, #12]	; (7858 <puts+0x10>)
    784c:	0001      	movs	r1, r0
    784e:	6818      	ldr	r0, [r3, #0]
    7850:	f7ff ff9a 	bl	7788 <_puts_r>
    7854:	bd10      	pop	{r4, pc}
    7856:	46c0      	nop			; (mov r8, r8)
    7858:	20000038 	.word	0x20000038

0000785c <lflush>:
    785c:	2209      	movs	r2, #9
    785e:	b510      	push	{r4, lr}
    7860:	8983      	ldrh	r3, [r0, #12]
    7862:	4013      	ands	r3, r2
    7864:	2200      	movs	r2, #0
    7866:	2b09      	cmp	r3, #9
    7868:	d102      	bne.n	7870 <lflush+0x14>
    786a:	f000 fb57 	bl	7f1c <fflush>
    786e:	0002      	movs	r2, r0
    7870:	0010      	movs	r0, r2
    7872:	bd10      	pop	{r4, pc}

00007874 <__srefill_r>:
    7874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7876:	0005      	movs	r5, r0
    7878:	000c      	movs	r4, r1
    787a:	2800      	cmp	r0, #0
    787c:	d004      	beq.n	7888 <__srefill_r+0x14>
    787e:	6983      	ldr	r3, [r0, #24]
    7880:	2b00      	cmp	r3, #0
    7882:	d101      	bne.n	7888 <__srefill_r+0x14>
    7884:	f7ff fe16 	bl	74b4 <__sinit>
    7888:	4b3d      	ldr	r3, [pc, #244]	; (7980 <__srefill_r+0x10c>)
    788a:	429c      	cmp	r4, r3
    788c:	d10a      	bne.n	78a4 <__srefill_r+0x30>
    788e:	686c      	ldr	r4, [r5, #4]
    7890:	2300      	movs	r3, #0
    7892:	6063      	str	r3, [r4, #4]
    7894:	230c      	movs	r3, #12
    7896:	5ee2      	ldrsh	r2, [r4, r3]
    7898:	b293      	uxth	r3, r2
    789a:	0699      	lsls	r1, r3, #26
    789c:	d50c      	bpl.n	78b8 <__srefill_r+0x44>
    789e:	2001      	movs	r0, #1
    78a0:	4240      	negs	r0, r0
    78a2:	e068      	b.n	7976 <__srefill_r+0x102>
    78a4:	4b37      	ldr	r3, [pc, #220]	; (7984 <__srefill_r+0x110>)
    78a6:	429c      	cmp	r4, r3
    78a8:	d101      	bne.n	78ae <__srefill_r+0x3a>
    78aa:	68ac      	ldr	r4, [r5, #8]
    78ac:	e7f0      	b.n	7890 <__srefill_r+0x1c>
    78ae:	4b36      	ldr	r3, [pc, #216]	; (7988 <__srefill_r+0x114>)
    78b0:	429c      	cmp	r4, r3
    78b2:	d1ed      	bne.n	7890 <__srefill_r+0x1c>
    78b4:	68ec      	ldr	r4, [r5, #12]
    78b6:	e7eb      	b.n	7890 <__srefill_r+0x1c>
    78b8:	0759      	lsls	r1, r3, #29
    78ba:	d44a      	bmi.n	7952 <__srefill_r+0xde>
    78bc:	06d9      	lsls	r1, r3, #27
    78be:	d405      	bmi.n	78cc <__srefill_r+0x58>
    78c0:	2309      	movs	r3, #9
    78c2:	602b      	str	r3, [r5, #0]
    78c4:	3337      	adds	r3, #55	; 0x37
    78c6:	4313      	orrs	r3, r2
    78c8:	81a3      	strh	r3, [r4, #12]
    78ca:	e7e8      	b.n	789e <__srefill_r+0x2a>
    78cc:	2608      	movs	r6, #8
    78ce:	4233      	tst	r3, r6
    78d0:	d00a      	beq.n	78e8 <__srefill_r+0x74>
    78d2:	0021      	movs	r1, r4
    78d4:	0028      	movs	r0, r5
    78d6:	f000 faf5 	bl	7ec4 <_fflush_r>
    78da:	2800      	cmp	r0, #0
    78dc:	d1df      	bne.n	789e <__srefill_r+0x2a>
    78de:	89a3      	ldrh	r3, [r4, #12]
    78e0:	60a0      	str	r0, [r4, #8]
    78e2:	43b3      	bics	r3, r6
    78e4:	81a3      	strh	r3, [r4, #12]
    78e6:	61a0      	str	r0, [r4, #24]
    78e8:	2304      	movs	r3, #4
    78ea:	89a2      	ldrh	r2, [r4, #12]
    78ec:	4313      	orrs	r3, r2
    78ee:	81a3      	strh	r3, [r4, #12]
    78f0:	6923      	ldr	r3, [r4, #16]
    78f2:	2b00      	cmp	r3, #0
    78f4:	d103      	bne.n	78fe <__srefill_r+0x8a>
    78f6:	0021      	movs	r1, r4
    78f8:	0028      	movs	r0, r5
    78fa:	f000 fb5f 	bl	7fbc <__smakebuf_r>
    78fe:	230c      	movs	r3, #12
    7900:	5ee7      	ldrsh	r7, [r4, r3]
    7902:	b2be      	uxth	r6, r7
    7904:	07b3      	lsls	r3, r6, #30
    7906:	d00f      	beq.n	7928 <__srefill_r+0xb4>
    7908:	2301      	movs	r3, #1
    790a:	81a3      	strh	r3, [r4, #12]
    790c:	4b1f      	ldr	r3, [pc, #124]	; (798c <__srefill_r+0x118>)
    790e:	4920      	ldr	r1, [pc, #128]	; (7990 <__srefill_r+0x11c>)
    7910:	6818      	ldr	r0, [r3, #0]
    7912:	f7ff fe43 	bl	759c <_fwalk>
    7916:	2309      	movs	r3, #9
    7918:	81a7      	strh	r7, [r4, #12]
    791a:	401e      	ands	r6, r3
    791c:	429e      	cmp	r6, r3
    791e:	d103      	bne.n	7928 <__srefill_r+0xb4>
    7920:	0021      	movs	r1, r4
    7922:	0028      	movs	r0, r5
    7924:	f000 fa44 	bl	7db0 <__sflush_r>
    7928:	6923      	ldr	r3, [r4, #16]
    792a:	6922      	ldr	r2, [r4, #16]
    792c:	6023      	str	r3, [r4, #0]
    792e:	0028      	movs	r0, r5
    7930:	6963      	ldr	r3, [r4, #20]
    7932:	6a21      	ldr	r1, [r4, #32]
    7934:	6a65      	ldr	r5, [r4, #36]	; 0x24
    7936:	47a8      	blx	r5
    7938:	0002      	movs	r2, r0
    793a:	6060      	str	r0, [r4, #4]
    793c:	2000      	movs	r0, #0
    793e:	4282      	cmp	r2, r0
    7940:	dc19      	bgt.n	7976 <__srefill_r+0x102>
    7942:	89a1      	ldrh	r1, [r4, #12]
    7944:	4282      	cmp	r2, r0
    7946:	d117      	bne.n	7978 <__srefill_r+0x104>
    7948:	2320      	movs	r3, #32
    794a:	430b      	orrs	r3, r1
    794c:	81a3      	strh	r3, [r4, #12]
    794e:	3801      	subs	r0, #1
    7950:	e011      	b.n	7976 <__srefill_r+0x102>
    7952:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7954:	2900      	cmp	r1, #0
    7956:	d0cb      	beq.n	78f0 <__srefill_r+0x7c>
    7958:	0023      	movs	r3, r4
    795a:	3344      	adds	r3, #68	; 0x44
    795c:	4299      	cmp	r1, r3
    795e:	d002      	beq.n	7966 <__srefill_r+0xf2>
    7960:	0028      	movs	r0, r5
    7962:	f000 fb7b 	bl	805c <_free_r>
    7966:	2000      	movs	r0, #0
    7968:	6c23      	ldr	r3, [r4, #64]	; 0x40
    796a:	6360      	str	r0, [r4, #52]	; 0x34
    796c:	6063      	str	r3, [r4, #4]
    796e:	4283      	cmp	r3, r0
    7970:	d0be      	beq.n	78f0 <__srefill_r+0x7c>
    7972:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7974:	6023      	str	r3, [r4, #0]
    7976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7978:	2340      	movs	r3, #64	; 0x40
    797a:	6060      	str	r0, [r4, #4]
    797c:	430b      	orrs	r3, r1
    797e:	e7a3      	b.n	78c8 <__srefill_r+0x54>
    7980:	00008ffc 	.word	0x00008ffc
    7984:	0000901c 	.word	0x0000901c
    7988:	00008fdc 	.word	0x00008fdc
    798c:	0000903c 	.word	0x0000903c
    7990:	0000785d 	.word	0x0000785d

00007994 <_sbrk_r>:
    7994:	2300      	movs	r3, #0
    7996:	b570      	push	{r4, r5, r6, lr}
    7998:	4c06      	ldr	r4, [pc, #24]	; (79b4 <_sbrk_r+0x20>)
    799a:	0005      	movs	r5, r0
    799c:	0008      	movs	r0, r1
    799e:	6023      	str	r3, [r4, #0]
    79a0:	f7fd fc12 	bl	51c8 <_sbrk>
    79a4:	1c43      	adds	r3, r0, #1
    79a6:	d103      	bne.n	79b0 <_sbrk_r+0x1c>
    79a8:	6823      	ldr	r3, [r4, #0]
    79aa:	2b00      	cmp	r3, #0
    79ac:	d000      	beq.n	79b0 <_sbrk_r+0x1c>
    79ae:	602b      	str	r3, [r5, #0]
    79b0:	bd70      	pop	{r4, r5, r6, pc}
    79b2:	46c0      	nop			; (mov r8, r8)
    79b4:	200051f4 	.word	0x200051f4

000079b8 <setbuf>:
    79b8:	424a      	negs	r2, r1
    79ba:	414a      	adcs	r2, r1
    79bc:	2380      	movs	r3, #128	; 0x80
    79be:	b510      	push	{r4, lr}
    79c0:	0052      	lsls	r2, r2, #1
    79c2:	00db      	lsls	r3, r3, #3
    79c4:	f000 f802 	bl	79cc <setvbuf>
    79c8:	bd10      	pop	{r4, pc}
	...

000079cc <setvbuf>:
    79cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ce:	001d      	movs	r5, r3
    79d0:	4b4f      	ldr	r3, [pc, #316]	; (7b10 <setvbuf+0x144>)
    79d2:	b085      	sub	sp, #20
    79d4:	681e      	ldr	r6, [r3, #0]
    79d6:	0004      	movs	r4, r0
    79d8:	000f      	movs	r7, r1
    79da:	9200      	str	r2, [sp, #0]
    79dc:	2e00      	cmp	r6, #0
    79de:	d005      	beq.n	79ec <setvbuf+0x20>
    79e0:	69b3      	ldr	r3, [r6, #24]
    79e2:	2b00      	cmp	r3, #0
    79e4:	d102      	bne.n	79ec <setvbuf+0x20>
    79e6:	0030      	movs	r0, r6
    79e8:	f7ff fd64 	bl	74b4 <__sinit>
    79ec:	4b49      	ldr	r3, [pc, #292]	; (7b14 <setvbuf+0x148>)
    79ee:	429c      	cmp	r4, r3
    79f0:	d150      	bne.n	7a94 <setvbuf+0xc8>
    79f2:	6874      	ldr	r4, [r6, #4]
    79f4:	9b00      	ldr	r3, [sp, #0]
    79f6:	2b02      	cmp	r3, #2
    79f8:	d005      	beq.n	7a06 <setvbuf+0x3a>
    79fa:	2b01      	cmp	r3, #1
    79fc:	d900      	bls.n	7a00 <setvbuf+0x34>
    79fe:	e084      	b.n	7b0a <setvbuf+0x13e>
    7a00:	2d00      	cmp	r5, #0
    7a02:	da00      	bge.n	7a06 <setvbuf+0x3a>
    7a04:	e081      	b.n	7b0a <setvbuf+0x13e>
    7a06:	0021      	movs	r1, r4
    7a08:	0030      	movs	r0, r6
    7a0a:	f000 fa5b 	bl	7ec4 <_fflush_r>
    7a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7a10:	2900      	cmp	r1, #0
    7a12:	d008      	beq.n	7a26 <setvbuf+0x5a>
    7a14:	0023      	movs	r3, r4
    7a16:	3344      	adds	r3, #68	; 0x44
    7a18:	4299      	cmp	r1, r3
    7a1a:	d002      	beq.n	7a22 <setvbuf+0x56>
    7a1c:	0030      	movs	r0, r6
    7a1e:	f000 fb1d 	bl	805c <_free_r>
    7a22:	2300      	movs	r3, #0
    7a24:	6363      	str	r3, [r4, #52]	; 0x34
    7a26:	2300      	movs	r3, #0
    7a28:	61a3      	str	r3, [r4, #24]
    7a2a:	6063      	str	r3, [r4, #4]
    7a2c:	89a3      	ldrh	r3, [r4, #12]
    7a2e:	061b      	lsls	r3, r3, #24
    7a30:	d503      	bpl.n	7a3a <setvbuf+0x6e>
    7a32:	6921      	ldr	r1, [r4, #16]
    7a34:	0030      	movs	r0, r6
    7a36:	f000 fb11 	bl	805c <_free_r>
    7a3a:	89a3      	ldrh	r3, [r4, #12]
    7a3c:	4a36      	ldr	r2, [pc, #216]	; (7b18 <setvbuf+0x14c>)
    7a3e:	4013      	ands	r3, r2
    7a40:	81a3      	strh	r3, [r4, #12]
    7a42:	9b00      	ldr	r3, [sp, #0]
    7a44:	2b02      	cmp	r3, #2
    7a46:	d05a      	beq.n	7afe <setvbuf+0x132>
    7a48:	ab03      	add	r3, sp, #12
    7a4a:	aa02      	add	r2, sp, #8
    7a4c:	0021      	movs	r1, r4
    7a4e:	0030      	movs	r0, r6
    7a50:	f000 fa8c 	bl	7f6c <__swhatbuf_r>
    7a54:	89a3      	ldrh	r3, [r4, #12]
    7a56:	4318      	orrs	r0, r3
    7a58:	81a0      	strh	r0, [r4, #12]
    7a5a:	2d00      	cmp	r5, #0
    7a5c:	d124      	bne.n	7aa8 <setvbuf+0xdc>
    7a5e:	9d02      	ldr	r5, [sp, #8]
    7a60:	0028      	movs	r0, r5
    7a62:	f000 faef 	bl	8044 <malloc>
    7a66:	9501      	str	r5, [sp, #4]
    7a68:	1e07      	subs	r7, r0, #0
    7a6a:	d142      	bne.n	7af2 <setvbuf+0x126>
    7a6c:	9b02      	ldr	r3, [sp, #8]
    7a6e:	9301      	str	r3, [sp, #4]
    7a70:	42ab      	cmp	r3, r5
    7a72:	d139      	bne.n	7ae8 <setvbuf+0x11c>
    7a74:	2001      	movs	r0, #1
    7a76:	4240      	negs	r0, r0
    7a78:	2302      	movs	r3, #2
    7a7a:	89a2      	ldrh	r2, [r4, #12]
    7a7c:	4313      	orrs	r3, r2
    7a7e:	81a3      	strh	r3, [r4, #12]
    7a80:	2300      	movs	r3, #0
    7a82:	60a3      	str	r3, [r4, #8]
    7a84:	0023      	movs	r3, r4
    7a86:	3347      	adds	r3, #71	; 0x47
    7a88:	6023      	str	r3, [r4, #0]
    7a8a:	6123      	str	r3, [r4, #16]
    7a8c:	2301      	movs	r3, #1
    7a8e:	6163      	str	r3, [r4, #20]
    7a90:	b005      	add	sp, #20
    7a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a94:	4b21      	ldr	r3, [pc, #132]	; (7b1c <setvbuf+0x150>)
    7a96:	429c      	cmp	r4, r3
    7a98:	d101      	bne.n	7a9e <setvbuf+0xd2>
    7a9a:	68b4      	ldr	r4, [r6, #8]
    7a9c:	e7aa      	b.n	79f4 <setvbuf+0x28>
    7a9e:	4b20      	ldr	r3, [pc, #128]	; (7b20 <setvbuf+0x154>)
    7aa0:	429c      	cmp	r4, r3
    7aa2:	d1a7      	bne.n	79f4 <setvbuf+0x28>
    7aa4:	68f4      	ldr	r4, [r6, #12]
    7aa6:	e7a5      	b.n	79f4 <setvbuf+0x28>
    7aa8:	2f00      	cmp	r7, #0
    7aaa:	d0d9      	beq.n	7a60 <setvbuf+0x94>
    7aac:	69b3      	ldr	r3, [r6, #24]
    7aae:	2b00      	cmp	r3, #0
    7ab0:	d102      	bne.n	7ab8 <setvbuf+0xec>
    7ab2:	0030      	movs	r0, r6
    7ab4:	f7ff fcfe 	bl	74b4 <__sinit>
    7ab8:	9b00      	ldr	r3, [sp, #0]
    7aba:	2b01      	cmp	r3, #1
    7abc:	d103      	bne.n	7ac6 <setvbuf+0xfa>
    7abe:	89a3      	ldrh	r3, [r4, #12]
    7ac0:	9a00      	ldr	r2, [sp, #0]
    7ac2:	431a      	orrs	r2, r3
    7ac4:	81a2      	strh	r2, [r4, #12]
    7ac6:	2008      	movs	r0, #8
    7ac8:	89a3      	ldrh	r3, [r4, #12]
    7aca:	6027      	str	r7, [r4, #0]
    7acc:	6127      	str	r7, [r4, #16]
    7ace:	6165      	str	r5, [r4, #20]
    7ad0:	4018      	ands	r0, r3
    7ad2:	d018      	beq.n	7b06 <setvbuf+0x13a>
    7ad4:	2001      	movs	r0, #1
    7ad6:	4018      	ands	r0, r3
    7ad8:	2300      	movs	r3, #0
    7ada:	4298      	cmp	r0, r3
    7adc:	d011      	beq.n	7b02 <setvbuf+0x136>
    7ade:	426d      	negs	r5, r5
    7ae0:	60a3      	str	r3, [r4, #8]
    7ae2:	61a5      	str	r5, [r4, #24]
    7ae4:	0018      	movs	r0, r3
    7ae6:	e7d3      	b.n	7a90 <setvbuf+0xc4>
    7ae8:	9801      	ldr	r0, [sp, #4]
    7aea:	f000 faab 	bl	8044 <malloc>
    7aee:	1e07      	subs	r7, r0, #0
    7af0:	d0c0      	beq.n	7a74 <setvbuf+0xa8>
    7af2:	2380      	movs	r3, #128	; 0x80
    7af4:	89a2      	ldrh	r2, [r4, #12]
    7af6:	9d01      	ldr	r5, [sp, #4]
    7af8:	4313      	orrs	r3, r2
    7afa:	81a3      	strh	r3, [r4, #12]
    7afc:	e7d6      	b.n	7aac <setvbuf+0xe0>
    7afe:	2000      	movs	r0, #0
    7b00:	e7ba      	b.n	7a78 <setvbuf+0xac>
    7b02:	60a5      	str	r5, [r4, #8]
    7b04:	e7c4      	b.n	7a90 <setvbuf+0xc4>
    7b06:	60a0      	str	r0, [r4, #8]
    7b08:	e7c2      	b.n	7a90 <setvbuf+0xc4>
    7b0a:	2001      	movs	r0, #1
    7b0c:	4240      	negs	r0, r0
    7b0e:	e7bf      	b.n	7a90 <setvbuf+0xc4>
    7b10:	20000038 	.word	0x20000038
    7b14:	00008ffc 	.word	0x00008ffc
    7b18:	fffff35c 	.word	0xfffff35c
    7b1c:	0000901c 	.word	0x0000901c
    7b20:	00008fdc 	.word	0x00008fdc

00007b24 <__sread>:
    7b24:	b570      	push	{r4, r5, r6, lr}
    7b26:	000c      	movs	r4, r1
    7b28:	250e      	movs	r5, #14
    7b2a:	5f49      	ldrsh	r1, [r1, r5]
    7b2c:	f000 fdac 	bl	8688 <_read_r>
    7b30:	2800      	cmp	r0, #0
    7b32:	db03      	blt.n	7b3c <__sread+0x18>
    7b34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7b36:	181b      	adds	r3, r3, r0
    7b38:	6563      	str	r3, [r4, #84]	; 0x54
    7b3a:	bd70      	pop	{r4, r5, r6, pc}
    7b3c:	89a3      	ldrh	r3, [r4, #12]
    7b3e:	4a02      	ldr	r2, [pc, #8]	; (7b48 <__sread+0x24>)
    7b40:	4013      	ands	r3, r2
    7b42:	81a3      	strh	r3, [r4, #12]
    7b44:	e7f9      	b.n	7b3a <__sread+0x16>
    7b46:	46c0      	nop			; (mov r8, r8)
    7b48:	ffffefff 	.word	0xffffefff

00007b4c <__swrite>:
    7b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b4e:	001f      	movs	r7, r3
    7b50:	898b      	ldrh	r3, [r1, #12]
    7b52:	0005      	movs	r5, r0
    7b54:	000c      	movs	r4, r1
    7b56:	0016      	movs	r6, r2
    7b58:	05db      	lsls	r3, r3, #23
    7b5a:	d505      	bpl.n	7b68 <__swrite+0x1c>
    7b5c:	230e      	movs	r3, #14
    7b5e:	5ec9      	ldrsh	r1, [r1, r3]
    7b60:	2200      	movs	r2, #0
    7b62:	2302      	movs	r3, #2
    7b64:	f000 f9ee 	bl	7f44 <_lseek_r>
    7b68:	89a3      	ldrh	r3, [r4, #12]
    7b6a:	4a05      	ldr	r2, [pc, #20]	; (7b80 <__swrite+0x34>)
    7b6c:	0028      	movs	r0, r5
    7b6e:	4013      	ands	r3, r2
    7b70:	81a3      	strh	r3, [r4, #12]
    7b72:	0032      	movs	r2, r6
    7b74:	230e      	movs	r3, #14
    7b76:	5ee1      	ldrsh	r1, [r4, r3]
    7b78:	003b      	movs	r3, r7
    7b7a:	f000 f87d 	bl	7c78 <_write_r>
    7b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b80:	ffffefff 	.word	0xffffefff

00007b84 <__sseek>:
    7b84:	b570      	push	{r4, r5, r6, lr}
    7b86:	000c      	movs	r4, r1
    7b88:	250e      	movs	r5, #14
    7b8a:	5f49      	ldrsh	r1, [r1, r5]
    7b8c:	f000 f9da 	bl	7f44 <_lseek_r>
    7b90:	89a3      	ldrh	r3, [r4, #12]
    7b92:	1c42      	adds	r2, r0, #1
    7b94:	d103      	bne.n	7b9e <__sseek+0x1a>
    7b96:	4a05      	ldr	r2, [pc, #20]	; (7bac <__sseek+0x28>)
    7b98:	4013      	ands	r3, r2
    7b9a:	81a3      	strh	r3, [r4, #12]
    7b9c:	bd70      	pop	{r4, r5, r6, pc}
    7b9e:	2280      	movs	r2, #128	; 0x80
    7ba0:	0152      	lsls	r2, r2, #5
    7ba2:	4313      	orrs	r3, r2
    7ba4:	81a3      	strh	r3, [r4, #12]
    7ba6:	6560      	str	r0, [r4, #84]	; 0x54
    7ba8:	e7f8      	b.n	7b9c <__sseek+0x18>
    7baa:	46c0      	nop			; (mov r8, r8)
    7bac:	ffffefff 	.word	0xffffefff

00007bb0 <__sclose>:
    7bb0:	b510      	push	{r4, lr}
    7bb2:	230e      	movs	r3, #14
    7bb4:	5ec9      	ldrsh	r1, [r1, r3]
    7bb6:	f000 f8e9 	bl	7d8c <_close_r>
    7bba:	bd10      	pop	{r4, pc}

00007bbc <strcpy>:
    7bbc:	1c03      	adds	r3, r0, #0
    7bbe:	780a      	ldrb	r2, [r1, #0]
    7bc0:	3101      	adds	r1, #1
    7bc2:	701a      	strb	r2, [r3, #0]
    7bc4:	3301      	adds	r3, #1
    7bc6:	2a00      	cmp	r2, #0
    7bc8:	d1f9      	bne.n	7bbe <strcpy+0x2>
    7bca:	4770      	bx	lr

00007bcc <__swbuf_r>:
    7bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bce:	0005      	movs	r5, r0
    7bd0:	000e      	movs	r6, r1
    7bd2:	0014      	movs	r4, r2
    7bd4:	2800      	cmp	r0, #0
    7bd6:	d004      	beq.n	7be2 <__swbuf_r+0x16>
    7bd8:	6983      	ldr	r3, [r0, #24]
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d101      	bne.n	7be2 <__swbuf_r+0x16>
    7bde:	f7ff fc69 	bl	74b4 <__sinit>
    7be2:	4b22      	ldr	r3, [pc, #136]	; (7c6c <__swbuf_r+0xa0>)
    7be4:	429c      	cmp	r4, r3
    7be6:	d12d      	bne.n	7c44 <__swbuf_r+0x78>
    7be8:	686c      	ldr	r4, [r5, #4]
    7bea:	69a3      	ldr	r3, [r4, #24]
    7bec:	60a3      	str	r3, [r4, #8]
    7bee:	89a3      	ldrh	r3, [r4, #12]
    7bf0:	071b      	lsls	r3, r3, #28
    7bf2:	d531      	bpl.n	7c58 <__swbuf_r+0x8c>
    7bf4:	6923      	ldr	r3, [r4, #16]
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	d02e      	beq.n	7c58 <__swbuf_r+0x8c>
    7bfa:	6823      	ldr	r3, [r4, #0]
    7bfc:	6922      	ldr	r2, [r4, #16]
    7bfe:	b2f7      	uxtb	r7, r6
    7c00:	1a98      	subs	r0, r3, r2
    7c02:	6963      	ldr	r3, [r4, #20]
    7c04:	b2f6      	uxtb	r6, r6
    7c06:	4298      	cmp	r0, r3
    7c08:	db05      	blt.n	7c16 <__swbuf_r+0x4a>
    7c0a:	0021      	movs	r1, r4
    7c0c:	0028      	movs	r0, r5
    7c0e:	f000 f959 	bl	7ec4 <_fflush_r>
    7c12:	2800      	cmp	r0, #0
    7c14:	d126      	bne.n	7c64 <__swbuf_r+0x98>
    7c16:	68a3      	ldr	r3, [r4, #8]
    7c18:	3001      	adds	r0, #1
    7c1a:	3b01      	subs	r3, #1
    7c1c:	60a3      	str	r3, [r4, #8]
    7c1e:	6823      	ldr	r3, [r4, #0]
    7c20:	1c5a      	adds	r2, r3, #1
    7c22:	6022      	str	r2, [r4, #0]
    7c24:	701f      	strb	r7, [r3, #0]
    7c26:	6963      	ldr	r3, [r4, #20]
    7c28:	4298      	cmp	r0, r3
    7c2a:	d004      	beq.n	7c36 <__swbuf_r+0x6a>
    7c2c:	89a3      	ldrh	r3, [r4, #12]
    7c2e:	07db      	lsls	r3, r3, #31
    7c30:	d51a      	bpl.n	7c68 <__swbuf_r+0x9c>
    7c32:	2e0a      	cmp	r6, #10
    7c34:	d118      	bne.n	7c68 <__swbuf_r+0x9c>
    7c36:	0021      	movs	r1, r4
    7c38:	0028      	movs	r0, r5
    7c3a:	f000 f943 	bl	7ec4 <_fflush_r>
    7c3e:	2800      	cmp	r0, #0
    7c40:	d012      	beq.n	7c68 <__swbuf_r+0x9c>
    7c42:	e00f      	b.n	7c64 <__swbuf_r+0x98>
    7c44:	4b0a      	ldr	r3, [pc, #40]	; (7c70 <__swbuf_r+0xa4>)
    7c46:	429c      	cmp	r4, r3
    7c48:	d101      	bne.n	7c4e <__swbuf_r+0x82>
    7c4a:	68ac      	ldr	r4, [r5, #8]
    7c4c:	e7cd      	b.n	7bea <__swbuf_r+0x1e>
    7c4e:	4b09      	ldr	r3, [pc, #36]	; (7c74 <__swbuf_r+0xa8>)
    7c50:	429c      	cmp	r4, r3
    7c52:	d1ca      	bne.n	7bea <__swbuf_r+0x1e>
    7c54:	68ec      	ldr	r4, [r5, #12]
    7c56:	e7c8      	b.n	7bea <__swbuf_r+0x1e>
    7c58:	0021      	movs	r1, r4
    7c5a:	0028      	movs	r0, r5
    7c5c:	f000 f820 	bl	7ca0 <__swsetup_r>
    7c60:	2800      	cmp	r0, #0
    7c62:	d0ca      	beq.n	7bfa <__swbuf_r+0x2e>
    7c64:	2601      	movs	r6, #1
    7c66:	4276      	negs	r6, r6
    7c68:	0030      	movs	r0, r6
    7c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c6c:	00008ffc 	.word	0x00008ffc
    7c70:	0000901c 	.word	0x0000901c
    7c74:	00008fdc 	.word	0x00008fdc

00007c78 <_write_r>:
    7c78:	b570      	push	{r4, r5, r6, lr}
    7c7a:	0005      	movs	r5, r0
    7c7c:	0008      	movs	r0, r1
    7c7e:	0011      	movs	r1, r2
    7c80:	2200      	movs	r2, #0
    7c82:	4c06      	ldr	r4, [pc, #24]	; (7c9c <_write_r+0x24>)
    7c84:	6022      	str	r2, [r4, #0]
    7c86:	001a      	movs	r2, r3
    7c88:	f7fa f908 	bl	1e9c <_write>
    7c8c:	1c43      	adds	r3, r0, #1
    7c8e:	d103      	bne.n	7c98 <_write_r+0x20>
    7c90:	6823      	ldr	r3, [r4, #0]
    7c92:	2b00      	cmp	r3, #0
    7c94:	d000      	beq.n	7c98 <_write_r+0x20>
    7c96:	602b      	str	r3, [r5, #0]
    7c98:	bd70      	pop	{r4, r5, r6, pc}
    7c9a:	46c0      	nop			; (mov r8, r8)
    7c9c:	200051f4 	.word	0x200051f4

00007ca0 <__swsetup_r>:
    7ca0:	4b36      	ldr	r3, [pc, #216]	; (7d7c <__swsetup_r+0xdc>)
    7ca2:	b570      	push	{r4, r5, r6, lr}
    7ca4:	681d      	ldr	r5, [r3, #0]
    7ca6:	0006      	movs	r6, r0
    7ca8:	000c      	movs	r4, r1
    7caa:	2d00      	cmp	r5, #0
    7cac:	d005      	beq.n	7cba <__swsetup_r+0x1a>
    7cae:	69ab      	ldr	r3, [r5, #24]
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d102      	bne.n	7cba <__swsetup_r+0x1a>
    7cb4:	0028      	movs	r0, r5
    7cb6:	f7ff fbfd 	bl	74b4 <__sinit>
    7cba:	4b31      	ldr	r3, [pc, #196]	; (7d80 <__swsetup_r+0xe0>)
    7cbc:	429c      	cmp	r4, r3
    7cbe:	d10f      	bne.n	7ce0 <__swsetup_r+0x40>
    7cc0:	686c      	ldr	r4, [r5, #4]
    7cc2:	230c      	movs	r3, #12
    7cc4:	5ee2      	ldrsh	r2, [r4, r3]
    7cc6:	b293      	uxth	r3, r2
    7cc8:	0719      	lsls	r1, r3, #28
    7cca:	d42d      	bmi.n	7d28 <__swsetup_r+0x88>
    7ccc:	06d9      	lsls	r1, r3, #27
    7cce:	d411      	bmi.n	7cf4 <__swsetup_r+0x54>
    7cd0:	2309      	movs	r3, #9
    7cd2:	2001      	movs	r0, #1
    7cd4:	6033      	str	r3, [r6, #0]
    7cd6:	3337      	adds	r3, #55	; 0x37
    7cd8:	4313      	orrs	r3, r2
    7cda:	81a3      	strh	r3, [r4, #12]
    7cdc:	4240      	negs	r0, r0
    7cde:	bd70      	pop	{r4, r5, r6, pc}
    7ce0:	4b28      	ldr	r3, [pc, #160]	; (7d84 <__swsetup_r+0xe4>)
    7ce2:	429c      	cmp	r4, r3
    7ce4:	d101      	bne.n	7cea <__swsetup_r+0x4a>
    7ce6:	68ac      	ldr	r4, [r5, #8]
    7ce8:	e7eb      	b.n	7cc2 <__swsetup_r+0x22>
    7cea:	4b27      	ldr	r3, [pc, #156]	; (7d88 <__swsetup_r+0xe8>)
    7cec:	429c      	cmp	r4, r3
    7cee:	d1e8      	bne.n	7cc2 <__swsetup_r+0x22>
    7cf0:	68ec      	ldr	r4, [r5, #12]
    7cf2:	e7e6      	b.n	7cc2 <__swsetup_r+0x22>
    7cf4:	075b      	lsls	r3, r3, #29
    7cf6:	d513      	bpl.n	7d20 <__swsetup_r+0x80>
    7cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7cfa:	2900      	cmp	r1, #0
    7cfc:	d008      	beq.n	7d10 <__swsetup_r+0x70>
    7cfe:	0023      	movs	r3, r4
    7d00:	3344      	adds	r3, #68	; 0x44
    7d02:	4299      	cmp	r1, r3
    7d04:	d002      	beq.n	7d0c <__swsetup_r+0x6c>
    7d06:	0030      	movs	r0, r6
    7d08:	f000 f9a8 	bl	805c <_free_r>
    7d0c:	2300      	movs	r3, #0
    7d0e:	6363      	str	r3, [r4, #52]	; 0x34
    7d10:	2224      	movs	r2, #36	; 0x24
    7d12:	89a3      	ldrh	r3, [r4, #12]
    7d14:	4393      	bics	r3, r2
    7d16:	81a3      	strh	r3, [r4, #12]
    7d18:	2300      	movs	r3, #0
    7d1a:	6063      	str	r3, [r4, #4]
    7d1c:	6923      	ldr	r3, [r4, #16]
    7d1e:	6023      	str	r3, [r4, #0]
    7d20:	2308      	movs	r3, #8
    7d22:	89a2      	ldrh	r2, [r4, #12]
    7d24:	4313      	orrs	r3, r2
    7d26:	81a3      	strh	r3, [r4, #12]
    7d28:	6923      	ldr	r3, [r4, #16]
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	d10b      	bne.n	7d46 <__swsetup_r+0xa6>
    7d2e:	21a0      	movs	r1, #160	; 0xa0
    7d30:	2280      	movs	r2, #128	; 0x80
    7d32:	89a3      	ldrh	r3, [r4, #12]
    7d34:	0089      	lsls	r1, r1, #2
    7d36:	0092      	lsls	r2, r2, #2
    7d38:	400b      	ands	r3, r1
    7d3a:	4293      	cmp	r3, r2
    7d3c:	d003      	beq.n	7d46 <__swsetup_r+0xa6>
    7d3e:	0021      	movs	r1, r4
    7d40:	0030      	movs	r0, r6
    7d42:	f000 f93b 	bl	7fbc <__smakebuf_r>
    7d46:	2301      	movs	r3, #1
    7d48:	89a2      	ldrh	r2, [r4, #12]
    7d4a:	4013      	ands	r3, r2
    7d4c:	d011      	beq.n	7d72 <__swsetup_r+0xd2>
    7d4e:	2300      	movs	r3, #0
    7d50:	60a3      	str	r3, [r4, #8]
    7d52:	6963      	ldr	r3, [r4, #20]
    7d54:	425b      	negs	r3, r3
    7d56:	61a3      	str	r3, [r4, #24]
    7d58:	2000      	movs	r0, #0
    7d5a:	6923      	ldr	r3, [r4, #16]
    7d5c:	4283      	cmp	r3, r0
    7d5e:	d1be      	bne.n	7cde <__swsetup_r+0x3e>
    7d60:	230c      	movs	r3, #12
    7d62:	5ee2      	ldrsh	r2, [r4, r3]
    7d64:	0613      	lsls	r3, r2, #24
    7d66:	d5ba      	bpl.n	7cde <__swsetup_r+0x3e>
    7d68:	2340      	movs	r3, #64	; 0x40
    7d6a:	4313      	orrs	r3, r2
    7d6c:	81a3      	strh	r3, [r4, #12]
    7d6e:	3801      	subs	r0, #1
    7d70:	e7b5      	b.n	7cde <__swsetup_r+0x3e>
    7d72:	0792      	lsls	r2, r2, #30
    7d74:	d400      	bmi.n	7d78 <__swsetup_r+0xd8>
    7d76:	6963      	ldr	r3, [r4, #20]
    7d78:	60a3      	str	r3, [r4, #8]
    7d7a:	e7ed      	b.n	7d58 <__swsetup_r+0xb8>
    7d7c:	20000038 	.word	0x20000038
    7d80:	00008ffc 	.word	0x00008ffc
    7d84:	0000901c 	.word	0x0000901c
    7d88:	00008fdc 	.word	0x00008fdc

00007d8c <_close_r>:
    7d8c:	2300      	movs	r3, #0
    7d8e:	b570      	push	{r4, r5, r6, lr}
    7d90:	4c06      	ldr	r4, [pc, #24]	; (7dac <_close_r+0x20>)
    7d92:	0005      	movs	r5, r0
    7d94:	0008      	movs	r0, r1
    7d96:	6023      	str	r3, [r4, #0]
    7d98:	f7fd fa28 	bl	51ec <_close>
    7d9c:	1c43      	adds	r3, r0, #1
    7d9e:	d103      	bne.n	7da8 <_close_r+0x1c>
    7da0:	6823      	ldr	r3, [r4, #0]
    7da2:	2b00      	cmp	r3, #0
    7da4:	d000      	beq.n	7da8 <_close_r+0x1c>
    7da6:	602b      	str	r3, [r5, #0]
    7da8:	bd70      	pop	{r4, r5, r6, pc}
    7daa:	46c0      	nop			; (mov r8, r8)
    7dac:	200051f4 	.word	0x200051f4

00007db0 <__sflush_r>:
    7db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7db2:	898a      	ldrh	r2, [r1, #12]
    7db4:	0005      	movs	r5, r0
    7db6:	000c      	movs	r4, r1
    7db8:	0713      	lsls	r3, r2, #28
    7dba:	d460      	bmi.n	7e7e <__sflush_r+0xce>
    7dbc:	684b      	ldr	r3, [r1, #4]
    7dbe:	2b00      	cmp	r3, #0
    7dc0:	dc04      	bgt.n	7dcc <__sflush_r+0x1c>
    7dc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	dc01      	bgt.n	7dcc <__sflush_r+0x1c>
    7dc8:	2000      	movs	r0, #0
    7dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7dcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7dce:	2f00      	cmp	r7, #0
    7dd0:	d0fa      	beq.n	7dc8 <__sflush_r+0x18>
    7dd2:	2300      	movs	r3, #0
    7dd4:	682e      	ldr	r6, [r5, #0]
    7dd6:	602b      	str	r3, [r5, #0]
    7dd8:	2380      	movs	r3, #128	; 0x80
    7dda:	015b      	lsls	r3, r3, #5
    7ddc:	401a      	ands	r2, r3
    7dde:	d034      	beq.n	7e4a <__sflush_r+0x9a>
    7de0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7de2:	89a3      	ldrh	r3, [r4, #12]
    7de4:	075b      	lsls	r3, r3, #29
    7de6:	d506      	bpl.n	7df6 <__sflush_r+0x46>
    7de8:	6863      	ldr	r3, [r4, #4]
    7dea:	1ac0      	subs	r0, r0, r3
    7dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7dee:	2b00      	cmp	r3, #0
    7df0:	d001      	beq.n	7df6 <__sflush_r+0x46>
    7df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7df4:	1ac0      	subs	r0, r0, r3
    7df6:	0002      	movs	r2, r0
    7df8:	6a21      	ldr	r1, [r4, #32]
    7dfa:	2300      	movs	r3, #0
    7dfc:	0028      	movs	r0, r5
    7dfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7e00:	47b8      	blx	r7
    7e02:	89a1      	ldrh	r1, [r4, #12]
    7e04:	1c43      	adds	r3, r0, #1
    7e06:	d106      	bne.n	7e16 <__sflush_r+0x66>
    7e08:	682b      	ldr	r3, [r5, #0]
    7e0a:	2b1d      	cmp	r3, #29
    7e0c:	d831      	bhi.n	7e72 <__sflush_r+0xc2>
    7e0e:	4a2c      	ldr	r2, [pc, #176]	; (7ec0 <__sflush_r+0x110>)
    7e10:	40da      	lsrs	r2, r3
    7e12:	07d3      	lsls	r3, r2, #31
    7e14:	d52d      	bpl.n	7e72 <__sflush_r+0xc2>
    7e16:	2300      	movs	r3, #0
    7e18:	6063      	str	r3, [r4, #4]
    7e1a:	6923      	ldr	r3, [r4, #16]
    7e1c:	6023      	str	r3, [r4, #0]
    7e1e:	04cb      	lsls	r3, r1, #19
    7e20:	d505      	bpl.n	7e2e <__sflush_r+0x7e>
    7e22:	1c43      	adds	r3, r0, #1
    7e24:	d102      	bne.n	7e2c <__sflush_r+0x7c>
    7e26:	682b      	ldr	r3, [r5, #0]
    7e28:	2b00      	cmp	r3, #0
    7e2a:	d100      	bne.n	7e2e <__sflush_r+0x7e>
    7e2c:	6560      	str	r0, [r4, #84]	; 0x54
    7e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7e30:	602e      	str	r6, [r5, #0]
    7e32:	2900      	cmp	r1, #0
    7e34:	d0c8      	beq.n	7dc8 <__sflush_r+0x18>
    7e36:	0023      	movs	r3, r4
    7e38:	3344      	adds	r3, #68	; 0x44
    7e3a:	4299      	cmp	r1, r3
    7e3c:	d002      	beq.n	7e44 <__sflush_r+0x94>
    7e3e:	0028      	movs	r0, r5
    7e40:	f000 f90c 	bl	805c <_free_r>
    7e44:	2000      	movs	r0, #0
    7e46:	6360      	str	r0, [r4, #52]	; 0x34
    7e48:	e7bf      	b.n	7dca <__sflush_r+0x1a>
    7e4a:	2301      	movs	r3, #1
    7e4c:	6a21      	ldr	r1, [r4, #32]
    7e4e:	0028      	movs	r0, r5
    7e50:	47b8      	blx	r7
    7e52:	1c43      	adds	r3, r0, #1
    7e54:	d1c5      	bne.n	7de2 <__sflush_r+0x32>
    7e56:	682b      	ldr	r3, [r5, #0]
    7e58:	2b00      	cmp	r3, #0
    7e5a:	d0c2      	beq.n	7de2 <__sflush_r+0x32>
    7e5c:	2b1d      	cmp	r3, #29
    7e5e:	d001      	beq.n	7e64 <__sflush_r+0xb4>
    7e60:	2b16      	cmp	r3, #22
    7e62:	d101      	bne.n	7e68 <__sflush_r+0xb8>
    7e64:	602e      	str	r6, [r5, #0]
    7e66:	e7af      	b.n	7dc8 <__sflush_r+0x18>
    7e68:	2340      	movs	r3, #64	; 0x40
    7e6a:	89a2      	ldrh	r2, [r4, #12]
    7e6c:	4313      	orrs	r3, r2
    7e6e:	81a3      	strh	r3, [r4, #12]
    7e70:	e7ab      	b.n	7dca <__sflush_r+0x1a>
    7e72:	2340      	movs	r3, #64	; 0x40
    7e74:	430b      	orrs	r3, r1
    7e76:	2001      	movs	r0, #1
    7e78:	81a3      	strh	r3, [r4, #12]
    7e7a:	4240      	negs	r0, r0
    7e7c:	e7a5      	b.n	7dca <__sflush_r+0x1a>
    7e7e:	690f      	ldr	r7, [r1, #16]
    7e80:	2f00      	cmp	r7, #0
    7e82:	d0a1      	beq.n	7dc8 <__sflush_r+0x18>
    7e84:	680b      	ldr	r3, [r1, #0]
    7e86:	600f      	str	r7, [r1, #0]
    7e88:	1bdb      	subs	r3, r3, r7
    7e8a:	9301      	str	r3, [sp, #4]
    7e8c:	2300      	movs	r3, #0
    7e8e:	0792      	lsls	r2, r2, #30
    7e90:	d100      	bne.n	7e94 <__sflush_r+0xe4>
    7e92:	694b      	ldr	r3, [r1, #20]
    7e94:	60a3      	str	r3, [r4, #8]
    7e96:	9b01      	ldr	r3, [sp, #4]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	dc00      	bgt.n	7e9e <__sflush_r+0xee>
    7e9c:	e794      	b.n	7dc8 <__sflush_r+0x18>
    7e9e:	9b01      	ldr	r3, [sp, #4]
    7ea0:	003a      	movs	r2, r7
    7ea2:	6a21      	ldr	r1, [r4, #32]
    7ea4:	0028      	movs	r0, r5
    7ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7ea8:	47b0      	blx	r6
    7eaa:	2800      	cmp	r0, #0
    7eac:	dc03      	bgt.n	7eb6 <__sflush_r+0x106>
    7eae:	2340      	movs	r3, #64	; 0x40
    7eb0:	89a2      	ldrh	r2, [r4, #12]
    7eb2:	4313      	orrs	r3, r2
    7eb4:	e7df      	b.n	7e76 <__sflush_r+0xc6>
    7eb6:	9b01      	ldr	r3, [sp, #4]
    7eb8:	183f      	adds	r7, r7, r0
    7eba:	1a1b      	subs	r3, r3, r0
    7ebc:	9301      	str	r3, [sp, #4]
    7ebe:	e7ea      	b.n	7e96 <__sflush_r+0xe6>
    7ec0:	20400001 	.word	0x20400001

00007ec4 <_fflush_r>:
    7ec4:	690b      	ldr	r3, [r1, #16]
    7ec6:	b570      	push	{r4, r5, r6, lr}
    7ec8:	0005      	movs	r5, r0
    7eca:	000c      	movs	r4, r1
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d101      	bne.n	7ed4 <_fflush_r+0x10>
    7ed0:	2000      	movs	r0, #0
    7ed2:	bd70      	pop	{r4, r5, r6, pc}
    7ed4:	2800      	cmp	r0, #0
    7ed6:	d004      	beq.n	7ee2 <_fflush_r+0x1e>
    7ed8:	6983      	ldr	r3, [r0, #24]
    7eda:	2b00      	cmp	r3, #0
    7edc:	d101      	bne.n	7ee2 <_fflush_r+0x1e>
    7ede:	f7ff fae9 	bl	74b4 <__sinit>
    7ee2:	4b0b      	ldr	r3, [pc, #44]	; (7f10 <_fflush_r+0x4c>)
    7ee4:	429c      	cmp	r4, r3
    7ee6:	d109      	bne.n	7efc <_fflush_r+0x38>
    7ee8:	686c      	ldr	r4, [r5, #4]
    7eea:	220c      	movs	r2, #12
    7eec:	5ea3      	ldrsh	r3, [r4, r2]
    7eee:	2b00      	cmp	r3, #0
    7ef0:	d0ee      	beq.n	7ed0 <_fflush_r+0xc>
    7ef2:	0021      	movs	r1, r4
    7ef4:	0028      	movs	r0, r5
    7ef6:	f7ff ff5b 	bl	7db0 <__sflush_r>
    7efa:	e7ea      	b.n	7ed2 <_fflush_r+0xe>
    7efc:	4b05      	ldr	r3, [pc, #20]	; (7f14 <_fflush_r+0x50>)
    7efe:	429c      	cmp	r4, r3
    7f00:	d101      	bne.n	7f06 <_fflush_r+0x42>
    7f02:	68ac      	ldr	r4, [r5, #8]
    7f04:	e7f1      	b.n	7eea <_fflush_r+0x26>
    7f06:	4b04      	ldr	r3, [pc, #16]	; (7f18 <_fflush_r+0x54>)
    7f08:	429c      	cmp	r4, r3
    7f0a:	d1ee      	bne.n	7eea <_fflush_r+0x26>
    7f0c:	68ec      	ldr	r4, [r5, #12]
    7f0e:	e7ec      	b.n	7eea <_fflush_r+0x26>
    7f10:	00008ffc 	.word	0x00008ffc
    7f14:	0000901c 	.word	0x0000901c
    7f18:	00008fdc 	.word	0x00008fdc

00007f1c <fflush>:
    7f1c:	b510      	push	{r4, lr}
    7f1e:	1e01      	subs	r1, r0, #0
    7f20:	d105      	bne.n	7f2e <fflush+0x12>
    7f22:	4b05      	ldr	r3, [pc, #20]	; (7f38 <fflush+0x1c>)
    7f24:	4905      	ldr	r1, [pc, #20]	; (7f3c <fflush+0x20>)
    7f26:	6818      	ldr	r0, [r3, #0]
    7f28:	f7ff fb54 	bl	75d4 <_fwalk_reent>
    7f2c:	bd10      	pop	{r4, pc}
    7f2e:	4b04      	ldr	r3, [pc, #16]	; (7f40 <fflush+0x24>)
    7f30:	6818      	ldr	r0, [r3, #0]
    7f32:	f7ff ffc7 	bl	7ec4 <_fflush_r>
    7f36:	e7f9      	b.n	7f2c <fflush+0x10>
    7f38:	0000903c 	.word	0x0000903c
    7f3c:	00007ec5 	.word	0x00007ec5
    7f40:	20000038 	.word	0x20000038

00007f44 <_lseek_r>:
    7f44:	b570      	push	{r4, r5, r6, lr}
    7f46:	0005      	movs	r5, r0
    7f48:	0008      	movs	r0, r1
    7f4a:	0011      	movs	r1, r2
    7f4c:	2200      	movs	r2, #0
    7f4e:	4c06      	ldr	r4, [pc, #24]	; (7f68 <_lseek_r+0x24>)
    7f50:	6022      	str	r2, [r4, #0]
    7f52:	001a      	movs	r2, r3
    7f54:	f7fd f954 	bl	5200 <_lseek>
    7f58:	1c43      	adds	r3, r0, #1
    7f5a:	d103      	bne.n	7f64 <_lseek_r+0x20>
    7f5c:	6823      	ldr	r3, [r4, #0]
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d000      	beq.n	7f64 <_lseek_r+0x20>
    7f62:	602b      	str	r3, [r5, #0]
    7f64:	bd70      	pop	{r4, r5, r6, pc}
    7f66:	46c0      	nop			; (mov r8, r8)
    7f68:	200051f4 	.word	0x200051f4

00007f6c <__swhatbuf_r>:
    7f6c:	b570      	push	{r4, r5, r6, lr}
    7f6e:	000e      	movs	r6, r1
    7f70:	001d      	movs	r5, r3
    7f72:	230e      	movs	r3, #14
    7f74:	5ec9      	ldrsh	r1, [r1, r3]
    7f76:	b090      	sub	sp, #64	; 0x40
    7f78:	0014      	movs	r4, r2
    7f7a:	2900      	cmp	r1, #0
    7f7c:	da07      	bge.n	7f8e <__swhatbuf_r+0x22>
    7f7e:	2300      	movs	r3, #0
    7f80:	602b      	str	r3, [r5, #0]
    7f82:	89b3      	ldrh	r3, [r6, #12]
    7f84:	061b      	lsls	r3, r3, #24
    7f86:	d411      	bmi.n	7fac <__swhatbuf_r+0x40>
    7f88:	2380      	movs	r3, #128	; 0x80
    7f8a:	00db      	lsls	r3, r3, #3
    7f8c:	e00f      	b.n	7fae <__swhatbuf_r+0x42>
    7f8e:	aa01      	add	r2, sp, #4
    7f90:	f000 fb8e 	bl	86b0 <_fstat_r>
    7f94:	2800      	cmp	r0, #0
    7f96:	dbf2      	blt.n	7f7e <__swhatbuf_r+0x12>
    7f98:	22f0      	movs	r2, #240	; 0xf0
    7f9a:	9b02      	ldr	r3, [sp, #8]
    7f9c:	0212      	lsls	r2, r2, #8
    7f9e:	4013      	ands	r3, r2
    7fa0:	4a05      	ldr	r2, [pc, #20]	; (7fb8 <__swhatbuf_r+0x4c>)
    7fa2:	189b      	adds	r3, r3, r2
    7fa4:	425a      	negs	r2, r3
    7fa6:	4153      	adcs	r3, r2
    7fa8:	602b      	str	r3, [r5, #0]
    7faa:	e7ed      	b.n	7f88 <__swhatbuf_r+0x1c>
    7fac:	2340      	movs	r3, #64	; 0x40
    7fae:	2000      	movs	r0, #0
    7fb0:	6023      	str	r3, [r4, #0]
    7fb2:	b010      	add	sp, #64	; 0x40
    7fb4:	bd70      	pop	{r4, r5, r6, pc}
    7fb6:	46c0      	nop			; (mov r8, r8)
    7fb8:	ffffe000 	.word	0xffffe000

00007fbc <__smakebuf_r>:
    7fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7fbe:	2602      	movs	r6, #2
    7fc0:	898b      	ldrh	r3, [r1, #12]
    7fc2:	0005      	movs	r5, r0
    7fc4:	000c      	movs	r4, r1
    7fc6:	4233      	tst	r3, r6
    7fc8:	d006      	beq.n	7fd8 <__smakebuf_r+0x1c>
    7fca:	0023      	movs	r3, r4
    7fcc:	3347      	adds	r3, #71	; 0x47
    7fce:	6023      	str	r3, [r4, #0]
    7fd0:	6123      	str	r3, [r4, #16]
    7fd2:	2301      	movs	r3, #1
    7fd4:	6163      	str	r3, [r4, #20]
    7fd6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7fd8:	ab01      	add	r3, sp, #4
    7fda:	466a      	mov	r2, sp
    7fdc:	f7ff ffc6 	bl	7f6c <__swhatbuf_r>
    7fe0:	9900      	ldr	r1, [sp, #0]
    7fe2:	0007      	movs	r7, r0
    7fe4:	0028      	movs	r0, r5
    7fe6:	f7ff fb57 	bl	7698 <_malloc_r>
    7fea:	2800      	cmp	r0, #0
    7fec:	d108      	bne.n	8000 <__smakebuf_r+0x44>
    7fee:	220c      	movs	r2, #12
    7ff0:	5ea3      	ldrsh	r3, [r4, r2]
    7ff2:	059a      	lsls	r2, r3, #22
    7ff4:	d4ef      	bmi.n	7fd6 <__smakebuf_r+0x1a>
    7ff6:	2203      	movs	r2, #3
    7ff8:	4393      	bics	r3, r2
    7ffa:	431e      	orrs	r6, r3
    7ffc:	81a6      	strh	r6, [r4, #12]
    7ffe:	e7e4      	b.n	7fca <__smakebuf_r+0xe>
    8000:	4b0f      	ldr	r3, [pc, #60]	; (8040 <__smakebuf_r+0x84>)
    8002:	62ab      	str	r3, [r5, #40]	; 0x28
    8004:	2380      	movs	r3, #128	; 0x80
    8006:	89a2      	ldrh	r2, [r4, #12]
    8008:	6020      	str	r0, [r4, #0]
    800a:	4313      	orrs	r3, r2
    800c:	81a3      	strh	r3, [r4, #12]
    800e:	9b00      	ldr	r3, [sp, #0]
    8010:	6120      	str	r0, [r4, #16]
    8012:	6163      	str	r3, [r4, #20]
    8014:	9b01      	ldr	r3, [sp, #4]
    8016:	2b00      	cmp	r3, #0
    8018:	d00d      	beq.n	8036 <__smakebuf_r+0x7a>
    801a:	230e      	movs	r3, #14
    801c:	5ee1      	ldrsh	r1, [r4, r3]
    801e:	0028      	movs	r0, r5
    8020:	f000 fb58 	bl	86d4 <_isatty_r>
    8024:	2800      	cmp	r0, #0
    8026:	d006      	beq.n	8036 <__smakebuf_r+0x7a>
    8028:	2203      	movs	r2, #3
    802a:	89a3      	ldrh	r3, [r4, #12]
    802c:	4393      	bics	r3, r2
    802e:	001a      	movs	r2, r3
    8030:	2301      	movs	r3, #1
    8032:	4313      	orrs	r3, r2
    8034:	81a3      	strh	r3, [r4, #12]
    8036:	89a0      	ldrh	r0, [r4, #12]
    8038:	4338      	orrs	r0, r7
    803a:	81a0      	strh	r0, [r4, #12]
    803c:	e7cb      	b.n	7fd6 <__smakebuf_r+0x1a>
    803e:	46c0      	nop			; (mov r8, r8)
    8040:	00007431 	.word	0x00007431

00008044 <malloc>:
    8044:	b510      	push	{r4, lr}
    8046:	4b03      	ldr	r3, [pc, #12]	; (8054 <malloc+0x10>)
    8048:	0001      	movs	r1, r0
    804a:	6818      	ldr	r0, [r3, #0]
    804c:	f7ff fb24 	bl	7698 <_malloc_r>
    8050:	bd10      	pop	{r4, pc}
    8052:	46c0      	nop			; (mov r8, r8)
    8054:	20000038 	.word	0x20000038

00008058 <__malloc_lock>:
    8058:	4770      	bx	lr

0000805a <__malloc_unlock>:
    805a:	4770      	bx	lr

0000805c <_free_r>:
    805c:	b570      	push	{r4, r5, r6, lr}
    805e:	0005      	movs	r5, r0
    8060:	2900      	cmp	r1, #0
    8062:	d010      	beq.n	8086 <_free_r+0x2a>
    8064:	1f0c      	subs	r4, r1, #4
    8066:	6823      	ldr	r3, [r4, #0]
    8068:	2b00      	cmp	r3, #0
    806a:	da00      	bge.n	806e <_free_r+0x12>
    806c:	18e4      	adds	r4, r4, r3
    806e:	0028      	movs	r0, r5
    8070:	f7ff fff2 	bl	8058 <__malloc_lock>
    8074:	4a1d      	ldr	r2, [pc, #116]	; (80ec <_free_r+0x90>)
    8076:	6813      	ldr	r3, [r2, #0]
    8078:	2b00      	cmp	r3, #0
    807a:	d105      	bne.n	8088 <_free_r+0x2c>
    807c:	6063      	str	r3, [r4, #4]
    807e:	6014      	str	r4, [r2, #0]
    8080:	0028      	movs	r0, r5
    8082:	f7ff ffea 	bl	805a <__malloc_unlock>
    8086:	bd70      	pop	{r4, r5, r6, pc}
    8088:	42a3      	cmp	r3, r4
    808a:	d909      	bls.n	80a0 <_free_r+0x44>
    808c:	6821      	ldr	r1, [r4, #0]
    808e:	1860      	adds	r0, r4, r1
    8090:	4283      	cmp	r3, r0
    8092:	d1f3      	bne.n	807c <_free_r+0x20>
    8094:	6818      	ldr	r0, [r3, #0]
    8096:	685b      	ldr	r3, [r3, #4]
    8098:	1841      	adds	r1, r0, r1
    809a:	6021      	str	r1, [r4, #0]
    809c:	e7ee      	b.n	807c <_free_r+0x20>
    809e:	0013      	movs	r3, r2
    80a0:	685a      	ldr	r2, [r3, #4]
    80a2:	2a00      	cmp	r2, #0
    80a4:	d001      	beq.n	80aa <_free_r+0x4e>
    80a6:	42a2      	cmp	r2, r4
    80a8:	d9f9      	bls.n	809e <_free_r+0x42>
    80aa:	6819      	ldr	r1, [r3, #0]
    80ac:	1858      	adds	r0, r3, r1
    80ae:	42a0      	cmp	r0, r4
    80b0:	d10b      	bne.n	80ca <_free_r+0x6e>
    80b2:	6820      	ldr	r0, [r4, #0]
    80b4:	1809      	adds	r1, r1, r0
    80b6:	1858      	adds	r0, r3, r1
    80b8:	6019      	str	r1, [r3, #0]
    80ba:	4282      	cmp	r2, r0
    80bc:	d1e0      	bne.n	8080 <_free_r+0x24>
    80be:	6810      	ldr	r0, [r2, #0]
    80c0:	6852      	ldr	r2, [r2, #4]
    80c2:	1841      	adds	r1, r0, r1
    80c4:	6019      	str	r1, [r3, #0]
    80c6:	605a      	str	r2, [r3, #4]
    80c8:	e7da      	b.n	8080 <_free_r+0x24>
    80ca:	42a0      	cmp	r0, r4
    80cc:	d902      	bls.n	80d4 <_free_r+0x78>
    80ce:	230c      	movs	r3, #12
    80d0:	602b      	str	r3, [r5, #0]
    80d2:	e7d5      	b.n	8080 <_free_r+0x24>
    80d4:	6821      	ldr	r1, [r4, #0]
    80d6:	1860      	adds	r0, r4, r1
    80d8:	4282      	cmp	r2, r0
    80da:	d103      	bne.n	80e4 <_free_r+0x88>
    80dc:	6810      	ldr	r0, [r2, #0]
    80de:	6852      	ldr	r2, [r2, #4]
    80e0:	1841      	adds	r1, r0, r1
    80e2:	6021      	str	r1, [r4, #0]
    80e4:	6062      	str	r2, [r4, #4]
    80e6:	605c      	str	r4, [r3, #4]
    80e8:	e7ca      	b.n	8080 <_free_r+0x24>
    80ea:	46c0      	nop			; (mov r8, r8)
    80ec:	20005138 	.word	0x20005138

000080f0 <__sfputc_r>:
    80f0:	6893      	ldr	r3, [r2, #8]
    80f2:	b510      	push	{r4, lr}
    80f4:	3b01      	subs	r3, #1
    80f6:	6093      	str	r3, [r2, #8]
    80f8:	2b00      	cmp	r3, #0
    80fa:	da05      	bge.n	8108 <__sfputc_r+0x18>
    80fc:	6994      	ldr	r4, [r2, #24]
    80fe:	42a3      	cmp	r3, r4
    8100:	db08      	blt.n	8114 <__sfputc_r+0x24>
    8102:	b2cb      	uxtb	r3, r1
    8104:	2b0a      	cmp	r3, #10
    8106:	d005      	beq.n	8114 <__sfputc_r+0x24>
    8108:	6813      	ldr	r3, [r2, #0]
    810a:	1c58      	adds	r0, r3, #1
    810c:	6010      	str	r0, [r2, #0]
    810e:	7019      	strb	r1, [r3, #0]
    8110:	b2c8      	uxtb	r0, r1
    8112:	bd10      	pop	{r4, pc}
    8114:	f7ff fd5a 	bl	7bcc <__swbuf_r>
    8118:	e7fb      	b.n	8112 <__sfputc_r+0x22>

0000811a <__sfputs_r>:
    811a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    811c:	0006      	movs	r6, r0
    811e:	000f      	movs	r7, r1
    8120:	0014      	movs	r4, r2
    8122:	18d5      	adds	r5, r2, r3
    8124:	42ac      	cmp	r4, r5
    8126:	d101      	bne.n	812c <__sfputs_r+0x12>
    8128:	2000      	movs	r0, #0
    812a:	e007      	b.n	813c <__sfputs_r+0x22>
    812c:	7821      	ldrb	r1, [r4, #0]
    812e:	003a      	movs	r2, r7
    8130:	0030      	movs	r0, r6
    8132:	f7ff ffdd 	bl	80f0 <__sfputc_r>
    8136:	3401      	adds	r4, #1
    8138:	1c43      	adds	r3, r0, #1
    813a:	d1f3      	bne.n	8124 <__sfputs_r+0xa>
    813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008140 <_vfiprintf_r>:
    8140:	b5f0      	push	{r4, r5, r6, r7, lr}
    8142:	b09f      	sub	sp, #124	; 0x7c
    8144:	0006      	movs	r6, r0
    8146:	000f      	movs	r7, r1
    8148:	0014      	movs	r4, r2
    814a:	9305      	str	r3, [sp, #20]
    814c:	2800      	cmp	r0, #0
    814e:	d004      	beq.n	815a <_vfiprintf_r+0x1a>
    8150:	6983      	ldr	r3, [r0, #24]
    8152:	2b00      	cmp	r3, #0
    8154:	d101      	bne.n	815a <_vfiprintf_r+0x1a>
    8156:	f7ff f9ad 	bl	74b4 <__sinit>
    815a:	4b7f      	ldr	r3, [pc, #508]	; (8358 <_vfiprintf_r+0x218>)
    815c:	429f      	cmp	r7, r3
    815e:	d15c      	bne.n	821a <_vfiprintf_r+0xda>
    8160:	6877      	ldr	r7, [r6, #4]
    8162:	89bb      	ldrh	r3, [r7, #12]
    8164:	071b      	lsls	r3, r3, #28
    8166:	d562      	bpl.n	822e <_vfiprintf_r+0xee>
    8168:	693b      	ldr	r3, [r7, #16]
    816a:	2b00      	cmp	r3, #0
    816c:	d05f      	beq.n	822e <_vfiprintf_r+0xee>
    816e:	2300      	movs	r3, #0
    8170:	ad06      	add	r5, sp, #24
    8172:	616b      	str	r3, [r5, #20]
    8174:	3320      	adds	r3, #32
    8176:	766b      	strb	r3, [r5, #25]
    8178:	3310      	adds	r3, #16
    817a:	76ab      	strb	r3, [r5, #26]
    817c:	9402      	str	r4, [sp, #8]
    817e:	9c02      	ldr	r4, [sp, #8]
    8180:	7823      	ldrb	r3, [r4, #0]
    8182:	2b00      	cmp	r3, #0
    8184:	d15d      	bne.n	8242 <_vfiprintf_r+0x102>
    8186:	9b02      	ldr	r3, [sp, #8]
    8188:	1ae3      	subs	r3, r4, r3
    818a:	9304      	str	r3, [sp, #16]
    818c:	d00d      	beq.n	81aa <_vfiprintf_r+0x6a>
    818e:	9b04      	ldr	r3, [sp, #16]
    8190:	9a02      	ldr	r2, [sp, #8]
    8192:	0039      	movs	r1, r7
    8194:	0030      	movs	r0, r6
    8196:	f7ff ffc0 	bl	811a <__sfputs_r>
    819a:	1c43      	adds	r3, r0, #1
    819c:	d100      	bne.n	81a0 <_vfiprintf_r+0x60>
    819e:	e0cc      	b.n	833a <_vfiprintf_r+0x1fa>
    81a0:	696a      	ldr	r2, [r5, #20]
    81a2:	9b04      	ldr	r3, [sp, #16]
    81a4:	4694      	mov	ip, r2
    81a6:	4463      	add	r3, ip
    81a8:	616b      	str	r3, [r5, #20]
    81aa:	7823      	ldrb	r3, [r4, #0]
    81ac:	2b00      	cmp	r3, #0
    81ae:	d100      	bne.n	81b2 <_vfiprintf_r+0x72>
    81b0:	e0c3      	b.n	833a <_vfiprintf_r+0x1fa>
    81b2:	2201      	movs	r2, #1
    81b4:	2300      	movs	r3, #0
    81b6:	4252      	negs	r2, r2
    81b8:	606a      	str	r2, [r5, #4]
    81ba:	a902      	add	r1, sp, #8
    81bc:	3254      	adds	r2, #84	; 0x54
    81be:	1852      	adds	r2, r2, r1
    81c0:	3401      	adds	r4, #1
    81c2:	602b      	str	r3, [r5, #0]
    81c4:	60eb      	str	r3, [r5, #12]
    81c6:	60ab      	str	r3, [r5, #8]
    81c8:	7013      	strb	r3, [r2, #0]
    81ca:	65ab      	str	r3, [r5, #88]	; 0x58
    81cc:	7821      	ldrb	r1, [r4, #0]
    81ce:	2205      	movs	r2, #5
    81d0:	4862      	ldr	r0, [pc, #392]	; (835c <_vfiprintf_r+0x21c>)
    81d2:	f7ff fa45 	bl	7660 <memchr>
    81d6:	1c63      	adds	r3, r4, #1
    81d8:	469c      	mov	ip, r3
    81da:	2800      	cmp	r0, #0
    81dc:	d135      	bne.n	824a <_vfiprintf_r+0x10a>
    81de:	6829      	ldr	r1, [r5, #0]
    81e0:	06cb      	lsls	r3, r1, #27
    81e2:	d504      	bpl.n	81ee <_vfiprintf_r+0xae>
    81e4:	2353      	movs	r3, #83	; 0x53
    81e6:	aa02      	add	r2, sp, #8
    81e8:	3020      	adds	r0, #32
    81ea:	189b      	adds	r3, r3, r2
    81ec:	7018      	strb	r0, [r3, #0]
    81ee:	070b      	lsls	r3, r1, #28
    81f0:	d504      	bpl.n	81fc <_vfiprintf_r+0xbc>
    81f2:	2353      	movs	r3, #83	; 0x53
    81f4:	202b      	movs	r0, #43	; 0x2b
    81f6:	aa02      	add	r2, sp, #8
    81f8:	189b      	adds	r3, r3, r2
    81fa:	7018      	strb	r0, [r3, #0]
    81fc:	7823      	ldrb	r3, [r4, #0]
    81fe:	2b2a      	cmp	r3, #42	; 0x2a
    8200:	d02c      	beq.n	825c <_vfiprintf_r+0x11c>
    8202:	2000      	movs	r0, #0
    8204:	210a      	movs	r1, #10
    8206:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8208:	7822      	ldrb	r2, [r4, #0]
    820a:	3a30      	subs	r2, #48	; 0x30
    820c:	2a09      	cmp	r2, #9
    820e:	d800      	bhi.n	8212 <_vfiprintf_r+0xd2>
    8210:	e06b      	b.n	82ea <_vfiprintf_r+0x1aa>
    8212:	2800      	cmp	r0, #0
    8214:	d02a      	beq.n	826c <_vfiprintf_r+0x12c>
    8216:	9309      	str	r3, [sp, #36]	; 0x24
    8218:	e028      	b.n	826c <_vfiprintf_r+0x12c>
    821a:	4b51      	ldr	r3, [pc, #324]	; (8360 <_vfiprintf_r+0x220>)
    821c:	429f      	cmp	r7, r3
    821e:	d101      	bne.n	8224 <_vfiprintf_r+0xe4>
    8220:	68b7      	ldr	r7, [r6, #8]
    8222:	e79e      	b.n	8162 <_vfiprintf_r+0x22>
    8224:	4b4f      	ldr	r3, [pc, #316]	; (8364 <_vfiprintf_r+0x224>)
    8226:	429f      	cmp	r7, r3
    8228:	d19b      	bne.n	8162 <_vfiprintf_r+0x22>
    822a:	68f7      	ldr	r7, [r6, #12]
    822c:	e799      	b.n	8162 <_vfiprintf_r+0x22>
    822e:	0039      	movs	r1, r7
    8230:	0030      	movs	r0, r6
    8232:	f7ff fd35 	bl	7ca0 <__swsetup_r>
    8236:	2800      	cmp	r0, #0
    8238:	d099      	beq.n	816e <_vfiprintf_r+0x2e>
    823a:	2001      	movs	r0, #1
    823c:	4240      	negs	r0, r0
    823e:	b01f      	add	sp, #124	; 0x7c
    8240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8242:	2b25      	cmp	r3, #37	; 0x25
    8244:	d09f      	beq.n	8186 <_vfiprintf_r+0x46>
    8246:	3401      	adds	r4, #1
    8248:	e79a      	b.n	8180 <_vfiprintf_r+0x40>
    824a:	4b44      	ldr	r3, [pc, #272]	; (835c <_vfiprintf_r+0x21c>)
    824c:	6829      	ldr	r1, [r5, #0]
    824e:	1ac0      	subs	r0, r0, r3
    8250:	2301      	movs	r3, #1
    8252:	4083      	lsls	r3, r0
    8254:	430b      	orrs	r3, r1
    8256:	602b      	str	r3, [r5, #0]
    8258:	4664      	mov	r4, ip
    825a:	e7b7      	b.n	81cc <_vfiprintf_r+0x8c>
    825c:	9b05      	ldr	r3, [sp, #20]
    825e:	1d18      	adds	r0, r3, #4
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	9005      	str	r0, [sp, #20]
    8264:	2b00      	cmp	r3, #0
    8266:	db3a      	blt.n	82de <_vfiprintf_r+0x19e>
    8268:	9309      	str	r3, [sp, #36]	; 0x24
    826a:	4664      	mov	r4, ip
    826c:	7823      	ldrb	r3, [r4, #0]
    826e:	2b2e      	cmp	r3, #46	; 0x2e
    8270:	d10b      	bne.n	828a <_vfiprintf_r+0x14a>
    8272:	7863      	ldrb	r3, [r4, #1]
    8274:	1c62      	adds	r2, r4, #1
    8276:	2b2a      	cmp	r3, #42	; 0x2a
    8278:	d13f      	bne.n	82fa <_vfiprintf_r+0x1ba>
    827a:	9b05      	ldr	r3, [sp, #20]
    827c:	3402      	adds	r4, #2
    827e:	1d1a      	adds	r2, r3, #4
    8280:	681b      	ldr	r3, [r3, #0]
    8282:	9205      	str	r2, [sp, #20]
    8284:	2b00      	cmp	r3, #0
    8286:	db35      	blt.n	82f4 <_vfiprintf_r+0x1b4>
    8288:	9307      	str	r3, [sp, #28]
    828a:	7821      	ldrb	r1, [r4, #0]
    828c:	2203      	movs	r2, #3
    828e:	4836      	ldr	r0, [pc, #216]	; (8368 <_vfiprintf_r+0x228>)
    8290:	f7ff f9e6 	bl	7660 <memchr>
    8294:	2800      	cmp	r0, #0
    8296:	d007      	beq.n	82a8 <_vfiprintf_r+0x168>
    8298:	4b33      	ldr	r3, [pc, #204]	; (8368 <_vfiprintf_r+0x228>)
    829a:	682a      	ldr	r2, [r5, #0]
    829c:	1ac0      	subs	r0, r0, r3
    829e:	2340      	movs	r3, #64	; 0x40
    82a0:	4083      	lsls	r3, r0
    82a2:	4313      	orrs	r3, r2
    82a4:	602b      	str	r3, [r5, #0]
    82a6:	3401      	adds	r4, #1
    82a8:	7821      	ldrb	r1, [r4, #0]
    82aa:	1c63      	adds	r3, r4, #1
    82ac:	2206      	movs	r2, #6
    82ae:	482f      	ldr	r0, [pc, #188]	; (836c <_vfiprintf_r+0x22c>)
    82b0:	9302      	str	r3, [sp, #8]
    82b2:	7629      	strb	r1, [r5, #24]
    82b4:	f7ff f9d4 	bl	7660 <memchr>
    82b8:	2800      	cmp	r0, #0
    82ba:	d044      	beq.n	8346 <_vfiprintf_r+0x206>
    82bc:	4b2c      	ldr	r3, [pc, #176]	; (8370 <_vfiprintf_r+0x230>)
    82be:	2b00      	cmp	r3, #0
    82c0:	d12f      	bne.n	8322 <_vfiprintf_r+0x1e2>
    82c2:	6829      	ldr	r1, [r5, #0]
    82c4:	9b05      	ldr	r3, [sp, #20]
    82c6:	2207      	movs	r2, #7
    82c8:	05c9      	lsls	r1, r1, #23
    82ca:	d528      	bpl.n	831e <_vfiprintf_r+0x1de>
    82cc:	189b      	adds	r3, r3, r2
    82ce:	4393      	bics	r3, r2
    82d0:	3308      	adds	r3, #8
    82d2:	9305      	str	r3, [sp, #20]
    82d4:	696b      	ldr	r3, [r5, #20]
    82d6:	9a03      	ldr	r2, [sp, #12]
    82d8:	189b      	adds	r3, r3, r2
    82da:	616b      	str	r3, [r5, #20]
    82dc:	e74f      	b.n	817e <_vfiprintf_r+0x3e>
    82de:	425b      	negs	r3, r3
    82e0:	60eb      	str	r3, [r5, #12]
    82e2:	2302      	movs	r3, #2
    82e4:	430b      	orrs	r3, r1
    82e6:	602b      	str	r3, [r5, #0]
    82e8:	e7bf      	b.n	826a <_vfiprintf_r+0x12a>
    82ea:	434b      	muls	r3, r1
    82ec:	3401      	adds	r4, #1
    82ee:	189b      	adds	r3, r3, r2
    82f0:	2001      	movs	r0, #1
    82f2:	e789      	b.n	8208 <_vfiprintf_r+0xc8>
    82f4:	2301      	movs	r3, #1
    82f6:	425b      	negs	r3, r3
    82f8:	e7c6      	b.n	8288 <_vfiprintf_r+0x148>
    82fa:	2300      	movs	r3, #0
    82fc:	0014      	movs	r4, r2
    82fe:	200a      	movs	r0, #10
    8300:	001a      	movs	r2, r3
    8302:	606b      	str	r3, [r5, #4]
    8304:	7821      	ldrb	r1, [r4, #0]
    8306:	3930      	subs	r1, #48	; 0x30
    8308:	2909      	cmp	r1, #9
    830a:	d903      	bls.n	8314 <_vfiprintf_r+0x1d4>
    830c:	2b00      	cmp	r3, #0
    830e:	d0bc      	beq.n	828a <_vfiprintf_r+0x14a>
    8310:	9207      	str	r2, [sp, #28]
    8312:	e7ba      	b.n	828a <_vfiprintf_r+0x14a>
    8314:	4342      	muls	r2, r0
    8316:	3401      	adds	r4, #1
    8318:	1852      	adds	r2, r2, r1
    831a:	2301      	movs	r3, #1
    831c:	e7f2      	b.n	8304 <_vfiprintf_r+0x1c4>
    831e:	3307      	adds	r3, #7
    8320:	e7d5      	b.n	82ce <_vfiprintf_r+0x18e>
    8322:	ab05      	add	r3, sp, #20
    8324:	9300      	str	r3, [sp, #0]
    8326:	003a      	movs	r2, r7
    8328:	4b12      	ldr	r3, [pc, #72]	; (8374 <_vfiprintf_r+0x234>)
    832a:	0029      	movs	r1, r5
    832c:	0030      	movs	r0, r6
    832e:	e000      	b.n	8332 <_vfiprintf_r+0x1f2>
    8330:	bf00      	nop
    8332:	9003      	str	r0, [sp, #12]
    8334:	9b03      	ldr	r3, [sp, #12]
    8336:	3301      	adds	r3, #1
    8338:	d1cc      	bne.n	82d4 <_vfiprintf_r+0x194>
    833a:	89bb      	ldrh	r3, [r7, #12]
    833c:	065b      	lsls	r3, r3, #25
    833e:	d500      	bpl.n	8342 <_vfiprintf_r+0x202>
    8340:	e77b      	b.n	823a <_vfiprintf_r+0xfa>
    8342:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8344:	e77b      	b.n	823e <_vfiprintf_r+0xfe>
    8346:	ab05      	add	r3, sp, #20
    8348:	9300      	str	r3, [sp, #0]
    834a:	003a      	movs	r2, r7
    834c:	4b09      	ldr	r3, [pc, #36]	; (8374 <_vfiprintf_r+0x234>)
    834e:	0029      	movs	r1, r5
    8350:	0030      	movs	r0, r6
    8352:	f000 f87f 	bl	8454 <_printf_i>
    8356:	e7ec      	b.n	8332 <_vfiprintf_r+0x1f2>
    8358:	00008ffc 	.word	0x00008ffc
    835c:	00009040 	.word	0x00009040
    8360:	0000901c 	.word	0x0000901c
    8364:	00008fdc 	.word	0x00008fdc
    8368:	00009046 	.word	0x00009046
    836c:	0000904a 	.word	0x0000904a
    8370:	00000000 	.word	0x00000000
    8374:	0000811b 	.word	0x0000811b

00008378 <_printf_common>:
    8378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    837a:	0015      	movs	r5, r2
    837c:	9301      	str	r3, [sp, #4]
    837e:	688a      	ldr	r2, [r1, #8]
    8380:	690b      	ldr	r3, [r1, #16]
    8382:	9000      	str	r0, [sp, #0]
    8384:	000c      	movs	r4, r1
    8386:	4293      	cmp	r3, r2
    8388:	da00      	bge.n	838c <_printf_common+0x14>
    838a:	0013      	movs	r3, r2
    838c:	0022      	movs	r2, r4
    838e:	602b      	str	r3, [r5, #0]
    8390:	3243      	adds	r2, #67	; 0x43
    8392:	7812      	ldrb	r2, [r2, #0]
    8394:	2a00      	cmp	r2, #0
    8396:	d001      	beq.n	839c <_printf_common+0x24>
    8398:	3301      	adds	r3, #1
    839a:	602b      	str	r3, [r5, #0]
    839c:	6823      	ldr	r3, [r4, #0]
    839e:	069b      	lsls	r3, r3, #26
    83a0:	d502      	bpl.n	83a8 <_printf_common+0x30>
    83a2:	682b      	ldr	r3, [r5, #0]
    83a4:	3302      	adds	r3, #2
    83a6:	602b      	str	r3, [r5, #0]
    83a8:	2706      	movs	r7, #6
    83aa:	6823      	ldr	r3, [r4, #0]
    83ac:	401f      	ands	r7, r3
    83ae:	d027      	beq.n	8400 <_printf_common+0x88>
    83b0:	0023      	movs	r3, r4
    83b2:	3343      	adds	r3, #67	; 0x43
    83b4:	781b      	ldrb	r3, [r3, #0]
    83b6:	1e5a      	subs	r2, r3, #1
    83b8:	4193      	sbcs	r3, r2
    83ba:	6822      	ldr	r2, [r4, #0]
    83bc:	0692      	lsls	r2, r2, #26
    83be:	d430      	bmi.n	8422 <_printf_common+0xaa>
    83c0:	0022      	movs	r2, r4
    83c2:	9901      	ldr	r1, [sp, #4]
    83c4:	3243      	adds	r2, #67	; 0x43
    83c6:	9800      	ldr	r0, [sp, #0]
    83c8:	9e08      	ldr	r6, [sp, #32]
    83ca:	47b0      	blx	r6
    83cc:	1c43      	adds	r3, r0, #1
    83ce:	d025      	beq.n	841c <_printf_common+0xa4>
    83d0:	2306      	movs	r3, #6
    83d2:	6820      	ldr	r0, [r4, #0]
    83d4:	682a      	ldr	r2, [r5, #0]
    83d6:	68e1      	ldr	r1, [r4, #12]
    83d8:	4003      	ands	r3, r0
    83da:	2500      	movs	r5, #0
    83dc:	2b04      	cmp	r3, #4
    83de:	d103      	bne.n	83e8 <_printf_common+0x70>
    83e0:	1a8d      	subs	r5, r1, r2
    83e2:	43eb      	mvns	r3, r5
    83e4:	17db      	asrs	r3, r3, #31
    83e6:	401d      	ands	r5, r3
    83e8:	68a3      	ldr	r3, [r4, #8]
    83ea:	6922      	ldr	r2, [r4, #16]
    83ec:	4293      	cmp	r3, r2
    83ee:	dd01      	ble.n	83f4 <_printf_common+0x7c>
    83f0:	1a9b      	subs	r3, r3, r2
    83f2:	18ed      	adds	r5, r5, r3
    83f4:	2700      	movs	r7, #0
    83f6:	42bd      	cmp	r5, r7
    83f8:	d120      	bne.n	843c <_printf_common+0xc4>
    83fa:	2000      	movs	r0, #0
    83fc:	e010      	b.n	8420 <_printf_common+0xa8>
    83fe:	3701      	adds	r7, #1
    8400:	68e3      	ldr	r3, [r4, #12]
    8402:	682a      	ldr	r2, [r5, #0]
    8404:	1a9b      	subs	r3, r3, r2
    8406:	429f      	cmp	r7, r3
    8408:	dad2      	bge.n	83b0 <_printf_common+0x38>
    840a:	0022      	movs	r2, r4
    840c:	2301      	movs	r3, #1
    840e:	3219      	adds	r2, #25
    8410:	9901      	ldr	r1, [sp, #4]
    8412:	9800      	ldr	r0, [sp, #0]
    8414:	9e08      	ldr	r6, [sp, #32]
    8416:	47b0      	blx	r6
    8418:	1c43      	adds	r3, r0, #1
    841a:	d1f0      	bne.n	83fe <_printf_common+0x86>
    841c:	2001      	movs	r0, #1
    841e:	4240      	negs	r0, r0
    8420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8422:	2030      	movs	r0, #48	; 0x30
    8424:	18e1      	adds	r1, r4, r3
    8426:	3143      	adds	r1, #67	; 0x43
    8428:	7008      	strb	r0, [r1, #0]
    842a:	0021      	movs	r1, r4
    842c:	1c5a      	adds	r2, r3, #1
    842e:	3145      	adds	r1, #69	; 0x45
    8430:	7809      	ldrb	r1, [r1, #0]
    8432:	18a2      	adds	r2, r4, r2
    8434:	3243      	adds	r2, #67	; 0x43
    8436:	3302      	adds	r3, #2
    8438:	7011      	strb	r1, [r2, #0]
    843a:	e7c1      	b.n	83c0 <_printf_common+0x48>
    843c:	0022      	movs	r2, r4
    843e:	2301      	movs	r3, #1
    8440:	321a      	adds	r2, #26
    8442:	9901      	ldr	r1, [sp, #4]
    8444:	9800      	ldr	r0, [sp, #0]
    8446:	9e08      	ldr	r6, [sp, #32]
    8448:	47b0      	blx	r6
    844a:	1c43      	adds	r3, r0, #1
    844c:	d0e6      	beq.n	841c <_printf_common+0xa4>
    844e:	3701      	adds	r7, #1
    8450:	e7d1      	b.n	83f6 <_printf_common+0x7e>
	...

00008454 <_printf_i>:
    8454:	b5f0      	push	{r4, r5, r6, r7, lr}
    8456:	b08b      	sub	sp, #44	; 0x2c
    8458:	9206      	str	r2, [sp, #24]
    845a:	000a      	movs	r2, r1
    845c:	3243      	adds	r2, #67	; 0x43
    845e:	9307      	str	r3, [sp, #28]
    8460:	9005      	str	r0, [sp, #20]
    8462:	9204      	str	r2, [sp, #16]
    8464:	7e0a      	ldrb	r2, [r1, #24]
    8466:	000c      	movs	r4, r1
    8468:	9b10      	ldr	r3, [sp, #64]	; 0x40
    846a:	2a6e      	cmp	r2, #110	; 0x6e
    846c:	d100      	bne.n	8470 <_printf_i+0x1c>
    846e:	e08f      	b.n	8590 <_printf_i+0x13c>
    8470:	d817      	bhi.n	84a2 <_printf_i+0x4e>
    8472:	2a63      	cmp	r2, #99	; 0x63
    8474:	d02c      	beq.n	84d0 <_printf_i+0x7c>
    8476:	d808      	bhi.n	848a <_printf_i+0x36>
    8478:	2a00      	cmp	r2, #0
    847a:	d100      	bne.n	847e <_printf_i+0x2a>
    847c:	e099      	b.n	85b2 <_printf_i+0x15e>
    847e:	2a58      	cmp	r2, #88	; 0x58
    8480:	d054      	beq.n	852c <_printf_i+0xd8>
    8482:	0026      	movs	r6, r4
    8484:	3642      	adds	r6, #66	; 0x42
    8486:	7032      	strb	r2, [r6, #0]
    8488:	e029      	b.n	84de <_printf_i+0x8a>
    848a:	2a64      	cmp	r2, #100	; 0x64
    848c:	d001      	beq.n	8492 <_printf_i+0x3e>
    848e:	2a69      	cmp	r2, #105	; 0x69
    8490:	d1f7      	bne.n	8482 <_printf_i+0x2e>
    8492:	6821      	ldr	r1, [r4, #0]
    8494:	681a      	ldr	r2, [r3, #0]
    8496:	0608      	lsls	r0, r1, #24
    8498:	d523      	bpl.n	84e2 <_printf_i+0x8e>
    849a:	1d11      	adds	r1, r2, #4
    849c:	6019      	str	r1, [r3, #0]
    849e:	6815      	ldr	r5, [r2, #0]
    84a0:	e025      	b.n	84ee <_printf_i+0x9a>
    84a2:	2a73      	cmp	r2, #115	; 0x73
    84a4:	d100      	bne.n	84a8 <_printf_i+0x54>
    84a6:	e088      	b.n	85ba <_printf_i+0x166>
    84a8:	d808      	bhi.n	84bc <_printf_i+0x68>
    84aa:	2a6f      	cmp	r2, #111	; 0x6f
    84ac:	d029      	beq.n	8502 <_printf_i+0xae>
    84ae:	2a70      	cmp	r2, #112	; 0x70
    84b0:	d1e7      	bne.n	8482 <_printf_i+0x2e>
    84b2:	2220      	movs	r2, #32
    84b4:	6809      	ldr	r1, [r1, #0]
    84b6:	430a      	orrs	r2, r1
    84b8:	6022      	str	r2, [r4, #0]
    84ba:	e003      	b.n	84c4 <_printf_i+0x70>
    84bc:	2a75      	cmp	r2, #117	; 0x75
    84be:	d020      	beq.n	8502 <_printf_i+0xae>
    84c0:	2a78      	cmp	r2, #120	; 0x78
    84c2:	d1de      	bne.n	8482 <_printf_i+0x2e>
    84c4:	0022      	movs	r2, r4
    84c6:	2178      	movs	r1, #120	; 0x78
    84c8:	3245      	adds	r2, #69	; 0x45
    84ca:	7011      	strb	r1, [r2, #0]
    84cc:	4a6c      	ldr	r2, [pc, #432]	; (8680 <_printf_i+0x22c>)
    84ce:	e030      	b.n	8532 <_printf_i+0xde>
    84d0:	000e      	movs	r6, r1
    84d2:	681a      	ldr	r2, [r3, #0]
    84d4:	3642      	adds	r6, #66	; 0x42
    84d6:	1d11      	adds	r1, r2, #4
    84d8:	6019      	str	r1, [r3, #0]
    84da:	6813      	ldr	r3, [r2, #0]
    84dc:	7033      	strb	r3, [r6, #0]
    84de:	2301      	movs	r3, #1
    84e0:	e079      	b.n	85d6 <_printf_i+0x182>
    84e2:	0649      	lsls	r1, r1, #25
    84e4:	d5d9      	bpl.n	849a <_printf_i+0x46>
    84e6:	1d11      	adds	r1, r2, #4
    84e8:	6019      	str	r1, [r3, #0]
    84ea:	2300      	movs	r3, #0
    84ec:	5ed5      	ldrsh	r5, [r2, r3]
    84ee:	2d00      	cmp	r5, #0
    84f0:	da03      	bge.n	84fa <_printf_i+0xa6>
    84f2:	232d      	movs	r3, #45	; 0x2d
    84f4:	9a04      	ldr	r2, [sp, #16]
    84f6:	426d      	negs	r5, r5
    84f8:	7013      	strb	r3, [r2, #0]
    84fa:	4b62      	ldr	r3, [pc, #392]	; (8684 <_printf_i+0x230>)
    84fc:	270a      	movs	r7, #10
    84fe:	9303      	str	r3, [sp, #12]
    8500:	e02f      	b.n	8562 <_printf_i+0x10e>
    8502:	6820      	ldr	r0, [r4, #0]
    8504:	6819      	ldr	r1, [r3, #0]
    8506:	0605      	lsls	r5, r0, #24
    8508:	d503      	bpl.n	8512 <_printf_i+0xbe>
    850a:	1d08      	adds	r0, r1, #4
    850c:	6018      	str	r0, [r3, #0]
    850e:	680d      	ldr	r5, [r1, #0]
    8510:	e005      	b.n	851e <_printf_i+0xca>
    8512:	0640      	lsls	r0, r0, #25
    8514:	d5f9      	bpl.n	850a <_printf_i+0xb6>
    8516:	680d      	ldr	r5, [r1, #0]
    8518:	1d08      	adds	r0, r1, #4
    851a:	6018      	str	r0, [r3, #0]
    851c:	b2ad      	uxth	r5, r5
    851e:	4b59      	ldr	r3, [pc, #356]	; (8684 <_printf_i+0x230>)
    8520:	2708      	movs	r7, #8
    8522:	9303      	str	r3, [sp, #12]
    8524:	2a6f      	cmp	r2, #111	; 0x6f
    8526:	d018      	beq.n	855a <_printf_i+0x106>
    8528:	270a      	movs	r7, #10
    852a:	e016      	b.n	855a <_printf_i+0x106>
    852c:	3145      	adds	r1, #69	; 0x45
    852e:	700a      	strb	r2, [r1, #0]
    8530:	4a54      	ldr	r2, [pc, #336]	; (8684 <_printf_i+0x230>)
    8532:	9203      	str	r2, [sp, #12]
    8534:	681a      	ldr	r2, [r3, #0]
    8536:	6821      	ldr	r1, [r4, #0]
    8538:	1d10      	adds	r0, r2, #4
    853a:	6018      	str	r0, [r3, #0]
    853c:	6815      	ldr	r5, [r2, #0]
    853e:	0608      	lsls	r0, r1, #24
    8540:	d522      	bpl.n	8588 <_printf_i+0x134>
    8542:	07cb      	lsls	r3, r1, #31
    8544:	d502      	bpl.n	854c <_printf_i+0xf8>
    8546:	2320      	movs	r3, #32
    8548:	4319      	orrs	r1, r3
    854a:	6021      	str	r1, [r4, #0]
    854c:	2710      	movs	r7, #16
    854e:	2d00      	cmp	r5, #0
    8550:	d103      	bne.n	855a <_printf_i+0x106>
    8552:	2320      	movs	r3, #32
    8554:	6822      	ldr	r2, [r4, #0]
    8556:	439a      	bics	r2, r3
    8558:	6022      	str	r2, [r4, #0]
    855a:	0023      	movs	r3, r4
    855c:	2200      	movs	r2, #0
    855e:	3343      	adds	r3, #67	; 0x43
    8560:	701a      	strb	r2, [r3, #0]
    8562:	6863      	ldr	r3, [r4, #4]
    8564:	60a3      	str	r3, [r4, #8]
    8566:	2b00      	cmp	r3, #0
    8568:	db5c      	blt.n	8624 <_printf_i+0x1d0>
    856a:	2204      	movs	r2, #4
    856c:	6821      	ldr	r1, [r4, #0]
    856e:	4391      	bics	r1, r2
    8570:	6021      	str	r1, [r4, #0]
    8572:	2d00      	cmp	r5, #0
    8574:	d158      	bne.n	8628 <_printf_i+0x1d4>
    8576:	9e04      	ldr	r6, [sp, #16]
    8578:	2b00      	cmp	r3, #0
    857a:	d064      	beq.n	8646 <_printf_i+0x1f2>
    857c:	0026      	movs	r6, r4
    857e:	9b03      	ldr	r3, [sp, #12]
    8580:	3642      	adds	r6, #66	; 0x42
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	7033      	strb	r3, [r6, #0]
    8586:	e05e      	b.n	8646 <_printf_i+0x1f2>
    8588:	0648      	lsls	r0, r1, #25
    858a:	d5da      	bpl.n	8542 <_printf_i+0xee>
    858c:	b2ad      	uxth	r5, r5
    858e:	e7d8      	b.n	8542 <_printf_i+0xee>
    8590:	6809      	ldr	r1, [r1, #0]
    8592:	681a      	ldr	r2, [r3, #0]
    8594:	0608      	lsls	r0, r1, #24
    8596:	d505      	bpl.n	85a4 <_printf_i+0x150>
    8598:	1d11      	adds	r1, r2, #4
    859a:	6019      	str	r1, [r3, #0]
    859c:	6813      	ldr	r3, [r2, #0]
    859e:	6962      	ldr	r2, [r4, #20]
    85a0:	601a      	str	r2, [r3, #0]
    85a2:	e006      	b.n	85b2 <_printf_i+0x15e>
    85a4:	0649      	lsls	r1, r1, #25
    85a6:	d5f7      	bpl.n	8598 <_printf_i+0x144>
    85a8:	1d11      	adds	r1, r2, #4
    85aa:	6019      	str	r1, [r3, #0]
    85ac:	6813      	ldr	r3, [r2, #0]
    85ae:	8aa2      	ldrh	r2, [r4, #20]
    85b0:	801a      	strh	r2, [r3, #0]
    85b2:	2300      	movs	r3, #0
    85b4:	9e04      	ldr	r6, [sp, #16]
    85b6:	6123      	str	r3, [r4, #16]
    85b8:	e054      	b.n	8664 <_printf_i+0x210>
    85ba:	681a      	ldr	r2, [r3, #0]
    85bc:	1d11      	adds	r1, r2, #4
    85be:	6019      	str	r1, [r3, #0]
    85c0:	6816      	ldr	r6, [r2, #0]
    85c2:	2100      	movs	r1, #0
    85c4:	6862      	ldr	r2, [r4, #4]
    85c6:	0030      	movs	r0, r6
    85c8:	f7ff f84a 	bl	7660 <memchr>
    85cc:	2800      	cmp	r0, #0
    85ce:	d001      	beq.n	85d4 <_printf_i+0x180>
    85d0:	1b80      	subs	r0, r0, r6
    85d2:	6060      	str	r0, [r4, #4]
    85d4:	6863      	ldr	r3, [r4, #4]
    85d6:	6123      	str	r3, [r4, #16]
    85d8:	2300      	movs	r3, #0
    85da:	9a04      	ldr	r2, [sp, #16]
    85dc:	7013      	strb	r3, [r2, #0]
    85de:	e041      	b.n	8664 <_printf_i+0x210>
    85e0:	6923      	ldr	r3, [r4, #16]
    85e2:	0032      	movs	r2, r6
    85e4:	9906      	ldr	r1, [sp, #24]
    85e6:	9805      	ldr	r0, [sp, #20]
    85e8:	9d07      	ldr	r5, [sp, #28]
    85ea:	47a8      	blx	r5
    85ec:	1c43      	adds	r3, r0, #1
    85ee:	d043      	beq.n	8678 <_printf_i+0x224>
    85f0:	6823      	ldr	r3, [r4, #0]
    85f2:	2500      	movs	r5, #0
    85f4:	079b      	lsls	r3, r3, #30
    85f6:	d40f      	bmi.n	8618 <_printf_i+0x1c4>
    85f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    85fa:	68e0      	ldr	r0, [r4, #12]
    85fc:	4298      	cmp	r0, r3
    85fe:	da3d      	bge.n	867c <_printf_i+0x228>
    8600:	0018      	movs	r0, r3
    8602:	e03b      	b.n	867c <_printf_i+0x228>
    8604:	0022      	movs	r2, r4
    8606:	2301      	movs	r3, #1
    8608:	3219      	adds	r2, #25
    860a:	9906      	ldr	r1, [sp, #24]
    860c:	9805      	ldr	r0, [sp, #20]
    860e:	9e07      	ldr	r6, [sp, #28]
    8610:	47b0      	blx	r6
    8612:	1c43      	adds	r3, r0, #1
    8614:	d030      	beq.n	8678 <_printf_i+0x224>
    8616:	3501      	adds	r5, #1
    8618:	68e3      	ldr	r3, [r4, #12]
    861a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    861c:	1a9b      	subs	r3, r3, r2
    861e:	429d      	cmp	r5, r3
    8620:	dbf0      	blt.n	8604 <_printf_i+0x1b0>
    8622:	e7e9      	b.n	85f8 <_printf_i+0x1a4>
    8624:	2d00      	cmp	r5, #0
    8626:	d0a9      	beq.n	857c <_printf_i+0x128>
    8628:	9e04      	ldr	r6, [sp, #16]
    862a:	0028      	movs	r0, r5
    862c:	0039      	movs	r1, r7
    862e:	f7fe fd73 	bl	7118 <__aeabi_uidivmod>
    8632:	9b03      	ldr	r3, [sp, #12]
    8634:	3e01      	subs	r6, #1
    8636:	5c5b      	ldrb	r3, [r3, r1]
    8638:	0028      	movs	r0, r5
    863a:	7033      	strb	r3, [r6, #0]
    863c:	0039      	movs	r1, r7
    863e:	f7fe fce5 	bl	700c <__udivsi3>
    8642:	1e05      	subs	r5, r0, #0
    8644:	d1f1      	bne.n	862a <_printf_i+0x1d6>
    8646:	2f08      	cmp	r7, #8
    8648:	d109      	bne.n	865e <_printf_i+0x20a>
    864a:	6823      	ldr	r3, [r4, #0]
    864c:	07db      	lsls	r3, r3, #31
    864e:	d506      	bpl.n	865e <_printf_i+0x20a>
    8650:	6863      	ldr	r3, [r4, #4]
    8652:	6922      	ldr	r2, [r4, #16]
    8654:	4293      	cmp	r3, r2
    8656:	dc02      	bgt.n	865e <_printf_i+0x20a>
    8658:	2330      	movs	r3, #48	; 0x30
    865a:	3e01      	subs	r6, #1
    865c:	7033      	strb	r3, [r6, #0]
    865e:	9b04      	ldr	r3, [sp, #16]
    8660:	1b9b      	subs	r3, r3, r6
    8662:	6123      	str	r3, [r4, #16]
    8664:	9b07      	ldr	r3, [sp, #28]
    8666:	aa09      	add	r2, sp, #36	; 0x24
    8668:	9300      	str	r3, [sp, #0]
    866a:	0021      	movs	r1, r4
    866c:	9b06      	ldr	r3, [sp, #24]
    866e:	9805      	ldr	r0, [sp, #20]
    8670:	f7ff fe82 	bl	8378 <_printf_common>
    8674:	1c43      	adds	r3, r0, #1
    8676:	d1b3      	bne.n	85e0 <_printf_i+0x18c>
    8678:	2001      	movs	r0, #1
    867a:	4240      	negs	r0, r0
    867c:	b00b      	add	sp, #44	; 0x2c
    867e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8680:	00009062 	.word	0x00009062
    8684:	00009051 	.word	0x00009051

00008688 <_read_r>:
    8688:	b570      	push	{r4, r5, r6, lr}
    868a:	0005      	movs	r5, r0
    868c:	0008      	movs	r0, r1
    868e:	0011      	movs	r1, r2
    8690:	2200      	movs	r2, #0
    8692:	4c06      	ldr	r4, [pc, #24]	; (86ac <_read_r+0x24>)
    8694:	6022      	str	r2, [r4, #0]
    8696:	001a      	movs	r2, r3
    8698:	f7f9 fbde 	bl	1e58 <_read>
    869c:	1c43      	adds	r3, r0, #1
    869e:	d103      	bne.n	86a8 <_read_r+0x20>
    86a0:	6823      	ldr	r3, [r4, #0]
    86a2:	2b00      	cmp	r3, #0
    86a4:	d000      	beq.n	86a8 <_read_r+0x20>
    86a6:	602b      	str	r3, [r5, #0]
    86a8:	bd70      	pop	{r4, r5, r6, pc}
    86aa:	46c0      	nop			; (mov r8, r8)
    86ac:	200051f4 	.word	0x200051f4

000086b0 <_fstat_r>:
    86b0:	2300      	movs	r3, #0
    86b2:	b570      	push	{r4, r5, r6, lr}
    86b4:	4c06      	ldr	r4, [pc, #24]	; (86d0 <_fstat_r+0x20>)
    86b6:	0005      	movs	r5, r0
    86b8:	0008      	movs	r0, r1
    86ba:	0011      	movs	r1, r2
    86bc:	6023      	str	r3, [r4, #0]
    86be:	f7fc fd98 	bl	51f2 <_fstat>
    86c2:	1c43      	adds	r3, r0, #1
    86c4:	d103      	bne.n	86ce <_fstat_r+0x1e>
    86c6:	6823      	ldr	r3, [r4, #0]
    86c8:	2b00      	cmp	r3, #0
    86ca:	d000      	beq.n	86ce <_fstat_r+0x1e>
    86cc:	602b      	str	r3, [r5, #0]
    86ce:	bd70      	pop	{r4, r5, r6, pc}
    86d0:	200051f4 	.word	0x200051f4

000086d4 <_isatty_r>:
    86d4:	2300      	movs	r3, #0
    86d6:	b570      	push	{r4, r5, r6, lr}
    86d8:	4c06      	ldr	r4, [pc, #24]	; (86f4 <_isatty_r+0x20>)
    86da:	0005      	movs	r5, r0
    86dc:	0008      	movs	r0, r1
    86de:	6023      	str	r3, [r4, #0]
    86e0:	f7fc fd8c 	bl	51fc <_isatty>
    86e4:	1c43      	adds	r3, r0, #1
    86e6:	d103      	bne.n	86f0 <_isatty_r+0x1c>
    86e8:	6823      	ldr	r3, [r4, #0]
    86ea:	2b00      	cmp	r3, #0
    86ec:	d000      	beq.n	86f0 <_isatty_r+0x1c>
    86ee:	602b      	str	r3, [r5, #0]
    86f0:	bd70      	pop	{r4, r5, r6, pc}
    86f2:	46c0      	nop			; (mov r8, r8)
    86f4:	200051f4 	.word	0x200051f4

000086f8 <mmc_trans_multipliers>:
    86f8:	00000000 0000000a 0000000c 0000000d     ................
    8708:	0000000f 00000014 0000001a 0000001e     ................
    8718:	00000023 00000028 0000002d 00000034     #...(...-...4...
    8728:	00000037 0000003c 00000046 00000050     7...<...F...P...

00008738 <sd_mmc_trans_units>:
    8738:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00008754 <sd_trans_multipliers>:
    8754:	00000000 0000000a 0000000c 0000000d     ................
    8764:	0000000f 00000014 00000019 0000001e     ................
    8774:	00000023 00000028 0000002d 00000032     #...(...-...2...
    8784:	00000037 0000003c 00000046 00000050     7...<...F...P...

00008794 <Tbl>:
    8794:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    87a4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    87b4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    87c4:	00d600ff 00f800dc 00d800a3 019200d7     ................
    87d4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    87e4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    87f4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    8804:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    8814:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    8824:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    8834:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    8844:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    8854:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    8864:	00da00de 00d900db 00dd00fd 00b400af     ................
    8874:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    8884:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00008894 <tbl_lower.4309>:
    8894:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    88a4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    88b4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    88c4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    88d4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    88e4:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    88f4:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    8904:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    8914:	01050103 01090107 010d010b 0111010f     ................
    8924:	01150113 01190117 011d011b 0121011f     ..............!.
    8934:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    8944:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    8954:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    8964:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    8974:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    8984:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    8994:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    89a4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    89b4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    89c4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    89d4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    89e4:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    89f4:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    8a04:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    8a14:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    8a24:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    8a34:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    8a44:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    8a54:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    8a64:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00008a74 <tbl_upper.4310>:
    8a74:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    8a84:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    8a94:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    8aa4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    8ab4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    8ac4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    8ad4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    8ae4:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    8af4:	01040102 01080106 010c010a 0110010e     ................
    8b04:	01140112 01180116 011c011a 0120011e     .............. .
    8b14:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    8b24:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    8b34:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    8b44:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    8b54:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    8b64:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    8b74:	03940393 03960395 03980397 039a0399     ................
    8b84:	039c039b 039e039d 03a0039f 03a303a1     ................
    8b94:	03a503a4 03a703a6 03a903a8 041003aa     ................
    8ba4:	04120411 04140413 04160415 04180417     ................
    8bb4:	041a0419 041c041b 041e041d 0420041f     .............. .
    8bc4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    8bd4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    8be4:	04030402 04050404 04070406 04090408     ................
    8bf4:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    8c04:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    8c14:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    8c24:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    8c34:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    8c44:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

00008c54 <LfnOfs>:
    8c54:	07050301 12100e09 1c181614 0000001e     ................

00008c64 <excvt.4605>:
    8c64:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    8c74:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    8c84:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    8c94:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    8ca4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    8cb4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    8cc4:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    8cd4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    8ce4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    8cf4:	00005d5b 42000800 42000c00 42001000     [].....B...B...B
    8d04:	42001400 42001800 42001c00 00004b32     ...B...B...B2K..
    8d14:	00004b2e 00004b2e 00004b94 00004b94     .K...K...K...K..
    8d24:	00004b46 00004b38 00004b4c 00004b82     FK..8K..LK...K..
    8d34:	00004c1c 00004bfc 00004bfc 00004c88     .L...K...K...L..
    8d44:	00004c0e 00004c2a 00004c00 00004c38     .L..*L...L..8L..
    8d54:	00004c78 454c4449 00000000 00006a3c     xL..IDLE....<j..
    8d64:	00006a3c 00006a3c 000069b4 00006a7e     <j..<j...i..~j..
    8d74:	00006a98 00006a3c 00006a3c 000069b4     .j..<j..<j...i..
    8d84:	00006a7e 20726d54 00637653 00005852     ~j..Tmr Svc.RX..
    8d94:	6f727245 69726320 6f646e61 63657220     Erro criando rec
    8da4:	65766965 00000072 00005257 6f727245     eiver...WR..Erro
    8db4:	69726320 6f646e61 69727720 00726574      criando writer.

00008dc4 <filename>:
    8dc4:	742e6465 00007478 64726143 736e6920     ed.txt..Card ins
    8dd4:	6c6c6174 49414620 000d0a4c 61656c50     tall FAIL...Plea
    8de4:	75206573 756c706e 6e612067 65722064     se unplug and re
    8df4:	756c702d 68742067 61632065 0a2e6472     -plug the card..
    8e04:	0000000d 6e756f4d 676e6974 54414620     ....Mounting FAT
    8e14:	2e2e7366 0000002e 4941465b 72205d4c     fs......[FAIL] r
    8e24:	25207365 000a0d64 5d4b4f5b 0000000d     es %d...[OK]....
    8e34:	61766e49 2064696c 6d6d6f63 0a646e61     Invalid command.
    8e44:	20657355 7420722d 6572206f 66206461     Use -r to read f
    8e54:	0a656c69 6d20692d 61737365 74206567     ile.-i message t
    8e64:	7277206f 20657469 7373656d 00656761     o write message.
    8e74:	64616552 20676e69 20656874 656c6966     Reading the file
    8e84:	002e2e2e 6f727245 72626120 6f646e69     ....Erro abrindo
    8e94:	61206f20 69757172 70206f76 20617261      o arquivo para 
    8ea4:	7469656c 3a617275 0a642520 00000000     leitura: %d.....
    8eb4:	736f6c43 20676e69 65746661 65722072     Closing after re
    8ec4:	6e696461 2e2e2e67 00000000 6f727245     ading.......Erro
    8ed4:	6c632072 6e69736f 25203a67 00000064     r closing: %d...
    8ee4:	5d4b4f5b 00000000 72637345 20617665     [OK]....Escreva 
    8ef4:	63206d75 6e616d6f 003a6f64 7373654d     um comando:.Mess
    8f04:	20656761 69207369 6c61766e 00006469     age is invalid..
    8f14:	74697257 20676e69 62206f74 65666675     Writing to buffe
    8f24:	25203a72 00000073 6f727245 72626120     r: %s...Erro abr
    8f34:	6f646e69 61206f20 69757172 70206f76     indo o arquivo p
    8f44:	20617261 72637365 3a617469 0a642520     ara escrita: %d.
    8f54:	00000000 6f727245 206f6e20 6565736c     ....Erro no lsee
    8f64:	0029286b 6f727245 72772072 6e697469     k().Error writin
    8f74:	6f742067 6c696620 00000065 736f6c43     g to file...Clos
    8f84:	20676e69 65746661 72772072 6e697469     ing after writin
    8f94:	2e2e2e67 00000000 746e6544 64206f72     g.......Dentro d
    8fa4:	6573206f 6166616d 00006f72 66667562     o semafaro..buff
    8fb4:	76207265 6f697a61 00000000 636c6557     er vazio....Welc
    8fc4:	20656d6f 6d206f74 6f726369 74786554     ome to microText
    8fd4:	74696445 0021726f                       Editor!.

00008fdc <__sf_fake_stderr>:
	...

00008ffc <__sf_fake_stdin>:
	...

0000901c <__sf_fake_stdout>:
	...

0000903c <_global_impure_ptr>:
    903c:	2000003c 2b302d23 6c680020 6665004c     <.. #-0+ .hlL.ef
    904c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    905c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    906c:	64636261 00006665                       abcdef..

00009074 <_init>:
    9074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9076:	46c0      	nop			; (mov r8, r8)
    9078:	bcf8      	pop	{r3, r4, r5, r6, r7}
    907a:	bc08      	pop	{r3}
    907c:	469e      	mov	lr, r3
    907e:	4770      	bx	lr

00009080 <__init_array_start>:
    9080:	000000dd 	.word	0x000000dd

00009084 <_fini>:
    9084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9086:	46c0      	nop			; (mov r8, r8)
    9088:	bcf8      	pop	{r3, r4, r5, r6, r7}
    908a:	bc08      	pop	{r3}
    908c:	469e      	mov	lr, r3
    908e:	4770      	bx	lr

00009090 <__fini_array_start>:
    9090:	000000b5 	.word	0x000000b5

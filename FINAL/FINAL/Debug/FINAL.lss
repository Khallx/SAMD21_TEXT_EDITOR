
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004738  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00004738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000030b4  2000006c  000047a4  0002006c  2**2
                  ALLOC
  3 .stack        00002000  20003120  00007858  0002006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003012e  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e52  00000000  00000000  0005021b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000097ab  00000000  00000000  0005506d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000948  00000000  00000000  0005e818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b38  00000000  00000000  0005f160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d4a1  00000000  00000000  0005fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011659  00000000  00000000  0007d139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097da4  00000000  00000000  0008e792  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000200c  00000000  00000000  00126538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20 51 00 20 35 12 00 00 31 12 00 00 31 12 00 00      Q. 5...1...1...
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	65 14 00 00 00 00 00 00 00 00 00 00 41 15 00 00     e...........A...
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	85 15 00 00 31 12 00 00 31 12 00 00 31 12 00 00     ....1...1...1...
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	15 01 00 00 31 12 00 00 31 12 00 00 31 12 00 00     ....1...1...1...
			time.hour = 12;
      5c:	31 12 00 00 31 12 00 00 9d 06 00 00 ad 06 00 00     1...1...........
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	bd 06 00 00 cd 06 00 00 dd 06 00 00 ed 06 00 00     ................
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	31 12 00 00 31 12 00 00 31 12 00 00 31 12 00 00     1...1...1...1...

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	31 12 00 00 31 12 00 00 31 12 00 00 31 12 00 00     1...1...1...1...
		if (time.pm == 1) {
      9c:	31 12 00 00 31 12 00 00 31 12 00 00 31 12 00 00     1...1...1...1...
			time.pm = 0;
      ac:	31 12 00 00 00 00 00 00                             1.......

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	2000006c 	.word	0x2000006c
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	00004738 	.word	0x00004738

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000070 	.word	0x20000070
     108:	00004738 	.word	0x00004738
     10c:	00004738 	.word	0x00004738
     110:	00000000 	.word	0x00000000

00000114 <RTC_Handler>:
     114:	b510      	push	{r4, lr}
     116:	4b0f      	ldr	r3, [pc, #60]	; (154 <RTC_Handler+0x40>)
     118:	681a      	ldr	r2, [r3, #0]
     11a:	6814      	ldr	r4, [r2, #0]
	struct rtc_module *module = _rtc_instance[instance_index];

	Rtc *const rtc_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     11c:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
     11e:	8a13      	ldrh	r3, [r2, #16]
     120:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     122:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     124:	79e3      	ldrb	r3, [r4, #7]
     126:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     128:	b258      	sxtb	r0, r3
     12a:	2800      	cmp	r0, #0
     12c:	db06      	blt.n	13c <RTC_Handler+0x28>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     12e:	07db      	lsls	r3, r3, #31
     130:	d503      	bpl.n	13a <RTC_Handler+0x26>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     132:	07cb      	lsls	r3, r1, #31
     134:	d40a      	bmi.n	14c <RTC_Handler+0x38>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     136:	2301      	movs	r3, #1
     138:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     13a:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     13c:	078b      	lsls	r3, r1, #30
     13e:	d402      	bmi.n	146 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     140:	2380      	movs	r3, #128	; 0x80
     142:	7223      	strb	r3, [r4, #8]
     144:	e7f9      	b.n	13a <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     146:	68d3      	ldr	r3, [r2, #12]
     148:	4798      	blx	r3
     14a:	e7f9      	b.n	140 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     14c:	6893      	ldr	r3, [r2, #8]
     14e:	4798      	blx	r3
     150:	e7f1      	b.n	136 <RTC_Handler+0x22>
     152:	46c0      	nop			; (mov r8, r8)
     154:	20003080 	.word	0x20003080

00000158 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	46c6      	mov	lr, r8
     15c:	b500      	push	{lr}
     15e:	000c      	movs	r4, r1
     160:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     162:	2800      	cmp	r0, #0
     164:	d10f      	bne.n	186 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     166:	2a00      	cmp	r2, #0
     168:	dd11      	ble.n	18e <_read+0x36>
     16a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     16c:	4e09      	ldr	r6, [pc, #36]	; (194 <_read+0x3c>)
     16e:	4d0a      	ldr	r5, [pc, #40]	; (198 <_read+0x40>)
     170:	6830      	ldr	r0, [r6, #0]
     172:	0021      	movs	r1, r4
     174:	682b      	ldr	r3, [r5, #0]
     176:	4798      	blx	r3
		ptr++;
     178:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     17a:	42bc      	cmp	r4, r7
     17c:	d1f8      	bne.n	170 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     17e:	4640      	mov	r0, r8
     180:	bc04      	pop	{r2}
     182:	4690      	mov	r8, r2
     184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     186:	2301      	movs	r3, #1
     188:	425b      	negs	r3, r3
     18a:	4698      	mov	r8, r3
     18c:	e7f7      	b.n	17e <_read+0x26>
	for (; len > 0; --len) {
     18e:	4680      	mov	r8, r0
     190:	e7f5      	b.n	17e <_read+0x26>
     192:	46c0      	nop			; (mov r8, r8)
     194:	2000308c 	.word	0x2000308c
     198:	20003084 	.word	0x20003084

0000019c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	46c6      	mov	lr, r8
     1a0:	b500      	push	{lr}
     1a2:	000e      	movs	r6, r1
     1a4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     1a6:	3801      	subs	r0, #1
     1a8:	2802      	cmp	r0, #2
     1aa:	d810      	bhi.n	1ce <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     1ac:	2a00      	cmp	r2, #0
     1ae:	d011      	beq.n	1d4 <_write+0x38>
     1b0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     1b2:	4b0c      	ldr	r3, [pc, #48]	; (1e4 <_write+0x48>)
     1b4:	4698      	mov	r8, r3
     1b6:	4f0c      	ldr	r7, [pc, #48]	; (1e8 <_write+0x4c>)
     1b8:	4643      	mov	r3, r8
     1ba:	6818      	ldr	r0, [r3, #0]
     1bc:	5d31      	ldrb	r1, [r6, r4]
     1be:	683b      	ldr	r3, [r7, #0]
     1c0:	4798      	blx	r3
     1c2:	2800      	cmp	r0, #0
     1c4:	db08      	blt.n	1d8 <_write+0x3c>
			return -1;
		}
		++nChars;
     1c6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     1c8:	42a5      	cmp	r5, r4
     1ca:	d1f5      	bne.n	1b8 <_write+0x1c>
     1cc:	e006      	b.n	1dc <_write+0x40>
		return -1;
     1ce:	2401      	movs	r4, #1
     1d0:	4264      	negs	r4, r4
     1d2:	e003      	b.n	1dc <_write+0x40>
	for (; len != 0; --len) {
     1d4:	0014      	movs	r4, r2
     1d6:	e001      	b.n	1dc <_write+0x40>
			return -1;
     1d8:	2401      	movs	r4, #1
     1da:	4264      	negs	r4, r4
	}
	return nChars;
}
     1dc:	0020      	movs	r0, r4
     1de:	bc04      	pop	{r2}
     1e0:	4690      	mov	r8, r2
     1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1e4:	2000308c 	.word	0x2000308c
     1e8:	20003088 	.word	0x20003088

000001ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ec:	4b0c      	ldr	r3, [pc, #48]	; (220 <cpu_irq_enter_critical+0x34>)
     1ee:	681b      	ldr	r3, [r3, #0]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d106      	bne.n	202 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1f8:	2b00      	cmp	r3, #0
     1fa:	d007      	beq.n	20c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1fc:	2200      	movs	r2, #0
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <cpu_irq_enter_critical+0x38>)
     200:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     202:	4a07      	ldr	r2, [pc, #28]	; (220 <cpu_irq_enter_critical+0x34>)
     204:	6813      	ldr	r3, [r2, #0]
     206:	3301      	adds	r3, #1
     208:	6013      	str	r3, [r2, #0]
}
     20a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     20c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     20e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     212:	2200      	movs	r2, #0
     214:	4b04      	ldr	r3, [pc, #16]	; (228 <cpu_irq_enter_critical+0x3c>)
     216:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     218:	3201      	adds	r2, #1
     21a:	4b02      	ldr	r3, [pc, #8]	; (224 <cpu_irq_enter_critical+0x38>)
     21c:	701a      	strb	r2, [r3, #0]
     21e:	e7f0      	b.n	202 <cpu_irq_enter_critical+0x16>
     220:	20000088 	.word	0x20000088
     224:	2000008c 	.word	0x2000008c
     228:	20000000 	.word	0x20000000

0000022c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     22c:	4b08      	ldr	r3, [pc, #32]	; (250 <cpu_irq_leave_critical+0x24>)
     22e:	681a      	ldr	r2, [r3, #0]
     230:	3a01      	subs	r2, #1
     232:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     234:	681b      	ldr	r3, [r3, #0]
     236:	2b00      	cmp	r3, #0
     238:	d109      	bne.n	24e <cpu_irq_leave_critical+0x22>
     23a:	4b06      	ldr	r3, [pc, #24]	; (254 <cpu_irq_leave_critical+0x28>)
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	2b00      	cmp	r3, #0
     240:	d005      	beq.n	24e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     242:	2201      	movs	r2, #1
     244:	4b04      	ldr	r3, [pc, #16]	; (258 <cpu_irq_leave_critical+0x2c>)
     246:	701a      	strb	r2, [r3, #0]
     248:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     24c:	b662      	cpsie	i
	}
}
     24e:	4770      	bx	lr
     250:	20000088 	.word	0x20000088
     254:	2000008c 	.word	0x2000008c
     258:	20000000 	.word	0x20000000

0000025c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     25c:	b5f0      	push	{r4, r5, r6, r7, lr}
     25e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     260:	ac01      	add	r4, sp, #4
     262:	2501      	movs	r5, #1
     264:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     266:	2700      	movs	r7, #0
     268:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     26a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	203e      	movs	r0, #62	; 0x3e
     270:	4e06      	ldr	r6, [pc, #24]	; (28c <system_board_init+0x30>)
     272:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     274:	2280      	movs	r2, #128	; 0x80
     276:	05d2      	lsls	r2, r2, #23
     278:	4b05      	ldr	r3, [pc, #20]	; (290 <system_board_init+0x34>)
     27a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     27c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     27e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     280:	0021      	movs	r1, r4
     282:	200f      	movs	r0, #15
     284:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     286:	b003      	add	sp, #12
     288:	bdf0      	pop	{r4, r5, r6, r7, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	00000295 	.word	0x00000295
     290:	41004480 	.word	0x41004480

00000294 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     294:	b500      	push	{lr}
     296:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     298:	ab01      	add	r3, sp, #4
     29a:	2280      	movs	r2, #128	; 0x80
     29c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     29e:	780a      	ldrb	r2, [r1, #0]
     2a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     2a2:	784a      	ldrb	r2, [r1, #1]
     2a4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     2a6:	788a      	ldrb	r2, [r1, #2]
     2a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     2aa:	0019      	movs	r1, r3
     2ac:	4b01      	ldr	r3, [pc, #4]	; (2b4 <port_pin_set_config+0x20>)
     2ae:	4798      	blx	r3
}
     2b0:	b003      	add	sp, #12
     2b2:	bd00      	pop	{pc}
     2b4:	000011d1 	.word	0x000011d1

000002b8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ba:	46de      	mov	lr, fp
     2bc:	4657      	mov	r7, sl
     2be:	464e      	mov	r6, r9
     2c0:	4645      	mov	r5, r8
     2c2:	b5e0      	push	{r5, r6, r7, lr}
     2c4:	b087      	sub	sp, #28
     2c6:	4680      	mov	r8, r0
     2c8:	9104      	str	r1, [sp, #16]
     2ca:	0016      	movs	r6, r2
     2cc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     2ce:	2200      	movs	r2, #0
     2d0:	2300      	movs	r3, #0
     2d2:	2100      	movs	r1, #0
     2d4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     2d6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     2d8:	2001      	movs	r0, #1
     2da:	0021      	movs	r1, r4
     2dc:	9600      	str	r6, [sp, #0]
     2de:	9701      	str	r7, [sp, #4]
     2e0:	465c      	mov	r4, fp
     2e2:	9403      	str	r4, [sp, #12]
     2e4:	4644      	mov	r4, r8
     2e6:	9405      	str	r4, [sp, #20]
     2e8:	e013      	b.n	312 <long_division+0x5a>
     2ea:	2420      	movs	r4, #32
     2ec:	1a64      	subs	r4, r4, r1
     2ee:	0005      	movs	r5, r0
     2f0:	40e5      	lsrs	r5, r4
     2f2:	46a8      	mov	r8, r5
     2f4:	e014      	b.n	320 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     2f6:	9c00      	ldr	r4, [sp, #0]
     2f8:	9d01      	ldr	r5, [sp, #4]
     2fa:	1b12      	subs	r2, r2, r4
     2fc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     2fe:	465c      	mov	r4, fp
     300:	464d      	mov	r5, r9
     302:	432c      	orrs	r4, r5
     304:	46a3      	mov	fp, r4
     306:	9c03      	ldr	r4, [sp, #12]
     308:	4645      	mov	r5, r8
     30a:	432c      	orrs	r4, r5
     30c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     30e:	3901      	subs	r1, #1
     310:	d325      	bcc.n	35e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     312:	2420      	movs	r4, #32
     314:	4264      	negs	r4, r4
     316:	190c      	adds	r4, r1, r4
     318:	d4e7      	bmi.n	2ea <long_division+0x32>
     31a:	0005      	movs	r5, r0
     31c:	40a5      	lsls	r5, r4
     31e:	46a8      	mov	r8, r5
     320:	0004      	movs	r4, r0
     322:	408c      	lsls	r4, r1
     324:	46a1      	mov	r9, r4
		r = r << 1;
     326:	1892      	adds	r2, r2, r2
     328:	415b      	adcs	r3, r3
     32a:	0014      	movs	r4, r2
     32c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     32e:	9e05      	ldr	r6, [sp, #20]
     330:	464f      	mov	r7, r9
     332:	403e      	ands	r6, r7
     334:	46b4      	mov	ip, r6
     336:	9e04      	ldr	r6, [sp, #16]
     338:	4647      	mov	r7, r8
     33a:	403e      	ands	r6, r7
     33c:	46b2      	mov	sl, r6
     33e:	4666      	mov	r6, ip
     340:	4657      	mov	r7, sl
     342:	433e      	orrs	r6, r7
     344:	d003      	beq.n	34e <long_division+0x96>
			r |= 0x01;
     346:	0006      	movs	r6, r0
     348:	4326      	orrs	r6, r4
     34a:	0032      	movs	r2, r6
     34c:	002b      	movs	r3, r5
		if (r >= d) {
     34e:	9c00      	ldr	r4, [sp, #0]
     350:	9d01      	ldr	r5, [sp, #4]
     352:	429d      	cmp	r5, r3
     354:	d8db      	bhi.n	30e <long_division+0x56>
     356:	d1ce      	bne.n	2f6 <long_division+0x3e>
     358:	4294      	cmp	r4, r2
     35a:	d8d8      	bhi.n	30e <long_division+0x56>
     35c:	e7cb      	b.n	2f6 <long_division+0x3e>
     35e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     360:	4658      	mov	r0, fp
     362:	0019      	movs	r1, r3
     364:	b007      	add	sp, #28
     366:	bc3c      	pop	{r2, r3, r4, r5}
     368:	4690      	mov	r8, r2
     36a:	4699      	mov	r9, r3
     36c:	46a2      	mov	sl, r4
     36e:	46ab      	mov	fp, r5
     370:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000372 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     372:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     374:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     376:	2340      	movs	r3, #64	; 0x40
     378:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     37a:	4281      	cmp	r1, r0
     37c:	d202      	bcs.n	384 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     37e:	0018      	movs	r0, r3
     380:	bd10      	pop	{r4, pc}
		baud_calculated++;
     382:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     384:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     386:	1c63      	adds	r3, r4, #1
     388:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     38a:	4288      	cmp	r0, r1
     38c:	d9f9      	bls.n	382 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     38e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     390:	2cff      	cmp	r4, #255	; 0xff
     392:	d8f4      	bhi.n	37e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     394:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     396:	2300      	movs	r3, #0
     398:	e7f1      	b.n	37e <_sercom_get_sync_baud_val+0xc>
	...

0000039c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     39c:	b5f0      	push	{r4, r5, r6, r7, lr}
     39e:	b083      	sub	sp, #12
     3a0:	000f      	movs	r7, r1
     3a2:	0016      	movs	r6, r2
     3a4:	aa08      	add	r2, sp, #32
     3a6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3a8:	0004      	movs	r4, r0
     3aa:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ac:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     3ae:	42bc      	cmp	r4, r7
     3b0:	d902      	bls.n	3b8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     3b2:	0010      	movs	r0, r2
     3b4:	b003      	add	sp, #12
     3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     3b8:	2b00      	cmp	r3, #0
     3ba:	d114      	bne.n	3e6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3bc:	0002      	movs	r2, r0
     3be:	0008      	movs	r0, r1
     3c0:	2100      	movs	r1, #0
     3c2:	4c19      	ldr	r4, [pc, #100]	; (428 <_sercom_get_async_baud_val+0x8c>)
     3c4:	47a0      	blx	r4
     3c6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     3c8:	003a      	movs	r2, r7
     3ca:	2300      	movs	r3, #0
     3cc:	2000      	movs	r0, #0
     3ce:	4c17      	ldr	r4, [pc, #92]	; (42c <_sercom_get_async_baud_val+0x90>)
     3d0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3d2:	2200      	movs	r2, #0
     3d4:	2301      	movs	r3, #1
     3d6:	1a12      	subs	r2, r2, r0
     3d8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3da:	0c12      	lsrs	r2, r2, #16
     3dc:	041b      	lsls	r3, r3, #16
     3de:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     3e0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     3e2:	2200      	movs	r2, #0
     3e4:	e7e5      	b.n	3b2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     3e6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3e8:	2b01      	cmp	r3, #1
     3ea:	d1f9      	bne.n	3e0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     3ec:	000a      	movs	r2, r1
     3ee:	2300      	movs	r3, #0
     3f0:	2100      	movs	r1, #0
     3f2:	4c0d      	ldr	r4, [pc, #52]	; (428 <_sercom_get_async_baud_val+0x8c>)
     3f4:	47a0      	blx	r4
     3f6:	0002      	movs	r2, r0
     3f8:	000b      	movs	r3, r1
     3fa:	9200      	str	r2, [sp, #0]
     3fc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     3fe:	0038      	movs	r0, r7
     400:	2100      	movs	r1, #0
     402:	4c0a      	ldr	r4, [pc, #40]	; (42c <_sercom_get_async_baud_val+0x90>)
     404:	47a0      	blx	r4
     406:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     408:	2380      	movs	r3, #128	; 0x80
     40a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     40c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     40e:	4298      	cmp	r0, r3
     410:	d8cf      	bhi.n	3b2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     412:	0f79      	lsrs	r1, r7, #29
     414:	00f8      	lsls	r0, r7, #3
     416:	9a00      	ldr	r2, [sp, #0]
     418:	9b01      	ldr	r3, [sp, #4]
     41a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     41c:	00ea      	lsls	r2, r5, #3
     41e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     420:	b2d2      	uxtb	r2, r2
     422:	0352      	lsls	r2, r2, #13
     424:	432a      	orrs	r2, r5
     426:	e7db      	b.n	3e0 <_sercom_get_async_baud_val+0x44>
     428:	000030c5 	.word	0x000030c5
     42c:	000002b9 	.word	0x000002b9

00000430 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     430:	b510      	push	{r4, lr}
     432:	b082      	sub	sp, #8
     434:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     436:	4b0e      	ldr	r3, [pc, #56]	; (470 <sercom_set_gclk_generator+0x40>)
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2b00      	cmp	r3, #0
     43c:	d007      	beq.n	44e <sercom_set_gclk_generator+0x1e>
     43e:	2900      	cmp	r1, #0
     440:	d105      	bne.n	44e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     442:	4b0b      	ldr	r3, [pc, #44]	; (470 <sercom_set_gclk_generator+0x40>)
     444:	785b      	ldrb	r3, [r3, #1]
     446:	4283      	cmp	r3, r0
     448:	d010      	beq.n	46c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     44a:	201d      	movs	r0, #29
     44c:	e00c      	b.n	468 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     44e:	a901      	add	r1, sp, #4
     450:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     452:	2013      	movs	r0, #19
     454:	4b07      	ldr	r3, [pc, #28]	; (474 <sercom_set_gclk_generator+0x44>)
     456:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     458:	2013      	movs	r0, #19
     45a:	4b07      	ldr	r3, [pc, #28]	; (478 <sercom_set_gclk_generator+0x48>)
     45c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     45e:	4b04      	ldr	r3, [pc, #16]	; (470 <sercom_set_gclk_generator+0x40>)
     460:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     462:	2201      	movs	r2, #1
     464:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     466:	2000      	movs	r0, #0
}
     468:	b002      	add	sp, #8
     46a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     46c:	2000      	movs	r0, #0
     46e:	e7fb      	b.n	468 <sercom_set_gclk_generator+0x38>
     470:	20000090 	.word	0x20000090
     474:	000010d9 	.word	0x000010d9
     478:	0000104d 	.word	0x0000104d

0000047c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     47c:	4b40      	ldr	r3, [pc, #256]	; (580 <_sercom_get_default_pad+0x104>)
     47e:	4298      	cmp	r0, r3
     480:	d031      	beq.n	4e6 <_sercom_get_default_pad+0x6a>
     482:	d90a      	bls.n	49a <_sercom_get_default_pad+0x1e>
     484:	4b3f      	ldr	r3, [pc, #252]	; (584 <_sercom_get_default_pad+0x108>)
     486:	4298      	cmp	r0, r3
     488:	d04d      	beq.n	526 <_sercom_get_default_pad+0xaa>
     48a:	4b3f      	ldr	r3, [pc, #252]	; (588 <_sercom_get_default_pad+0x10c>)
     48c:	4298      	cmp	r0, r3
     48e:	d05a      	beq.n	546 <_sercom_get_default_pad+0xca>
     490:	4b3e      	ldr	r3, [pc, #248]	; (58c <_sercom_get_default_pad+0x110>)
     492:	4298      	cmp	r0, r3
     494:	d037      	beq.n	506 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     496:	2000      	movs	r0, #0
}
     498:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     49a:	4b3d      	ldr	r3, [pc, #244]	; (590 <_sercom_get_default_pad+0x114>)
     49c:	4298      	cmp	r0, r3
     49e:	d00c      	beq.n	4ba <_sercom_get_default_pad+0x3e>
     4a0:	4b3c      	ldr	r3, [pc, #240]	; (594 <_sercom_get_default_pad+0x118>)
     4a2:	4298      	cmp	r0, r3
     4a4:	d1f7      	bne.n	496 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4a6:	2901      	cmp	r1, #1
     4a8:	d017      	beq.n	4da <_sercom_get_default_pad+0x5e>
     4aa:	2900      	cmp	r1, #0
     4ac:	d05d      	beq.n	56a <_sercom_get_default_pad+0xee>
     4ae:	2902      	cmp	r1, #2
     4b0:	d015      	beq.n	4de <_sercom_get_default_pad+0x62>
     4b2:	2903      	cmp	r1, #3
     4b4:	d015      	beq.n	4e2 <_sercom_get_default_pad+0x66>
	return 0;
     4b6:	2000      	movs	r0, #0
     4b8:	e7ee      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ba:	2901      	cmp	r1, #1
     4bc:	d007      	beq.n	4ce <_sercom_get_default_pad+0x52>
     4be:	2900      	cmp	r1, #0
     4c0:	d051      	beq.n	566 <_sercom_get_default_pad+0xea>
     4c2:	2902      	cmp	r1, #2
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0x56>
     4c6:	2903      	cmp	r1, #3
     4c8:	d005      	beq.n	4d6 <_sercom_get_default_pad+0x5a>
	return 0;
     4ca:	2000      	movs	r0, #0
     4cc:	e7e4      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ce:	4832      	ldr	r0, [pc, #200]	; (598 <_sercom_get_default_pad+0x11c>)
     4d0:	e7e2      	b.n	498 <_sercom_get_default_pad+0x1c>
     4d2:	4832      	ldr	r0, [pc, #200]	; (59c <_sercom_get_default_pad+0x120>)
     4d4:	e7e0      	b.n	498 <_sercom_get_default_pad+0x1c>
     4d6:	4832      	ldr	r0, [pc, #200]	; (5a0 <_sercom_get_default_pad+0x124>)
     4d8:	e7de      	b.n	498 <_sercom_get_default_pad+0x1c>
     4da:	4832      	ldr	r0, [pc, #200]	; (5a4 <_sercom_get_default_pad+0x128>)
     4dc:	e7dc      	b.n	498 <_sercom_get_default_pad+0x1c>
     4de:	4832      	ldr	r0, [pc, #200]	; (5a8 <_sercom_get_default_pad+0x12c>)
     4e0:	e7da      	b.n	498 <_sercom_get_default_pad+0x1c>
     4e2:	4832      	ldr	r0, [pc, #200]	; (5ac <_sercom_get_default_pad+0x130>)
     4e4:	e7d8      	b.n	498 <_sercom_get_default_pad+0x1c>
     4e6:	2901      	cmp	r1, #1
     4e8:	d007      	beq.n	4fa <_sercom_get_default_pad+0x7e>
     4ea:	2900      	cmp	r1, #0
     4ec:	d03f      	beq.n	56e <_sercom_get_default_pad+0xf2>
     4ee:	2902      	cmp	r1, #2
     4f0:	d005      	beq.n	4fe <_sercom_get_default_pad+0x82>
     4f2:	2903      	cmp	r1, #3
     4f4:	d005      	beq.n	502 <_sercom_get_default_pad+0x86>
	return 0;
     4f6:	2000      	movs	r0, #0
     4f8:	e7ce      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4fa:	482d      	ldr	r0, [pc, #180]	; (5b0 <_sercom_get_default_pad+0x134>)
     4fc:	e7cc      	b.n	498 <_sercom_get_default_pad+0x1c>
     4fe:	482d      	ldr	r0, [pc, #180]	; (5b4 <_sercom_get_default_pad+0x138>)
     500:	e7ca      	b.n	498 <_sercom_get_default_pad+0x1c>
     502:	482d      	ldr	r0, [pc, #180]	; (5b8 <_sercom_get_default_pad+0x13c>)
     504:	e7c8      	b.n	498 <_sercom_get_default_pad+0x1c>
     506:	2901      	cmp	r1, #1
     508:	d007      	beq.n	51a <_sercom_get_default_pad+0x9e>
     50a:	2900      	cmp	r1, #0
     50c:	d031      	beq.n	572 <_sercom_get_default_pad+0xf6>
     50e:	2902      	cmp	r1, #2
     510:	d005      	beq.n	51e <_sercom_get_default_pad+0xa2>
     512:	2903      	cmp	r1, #3
     514:	d005      	beq.n	522 <_sercom_get_default_pad+0xa6>
	return 0;
     516:	2000      	movs	r0, #0
     518:	e7be      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     51a:	4828      	ldr	r0, [pc, #160]	; (5bc <_sercom_get_default_pad+0x140>)
     51c:	e7bc      	b.n	498 <_sercom_get_default_pad+0x1c>
     51e:	4828      	ldr	r0, [pc, #160]	; (5c0 <_sercom_get_default_pad+0x144>)
     520:	e7ba      	b.n	498 <_sercom_get_default_pad+0x1c>
     522:	4828      	ldr	r0, [pc, #160]	; (5c4 <_sercom_get_default_pad+0x148>)
     524:	e7b8      	b.n	498 <_sercom_get_default_pad+0x1c>
     526:	2901      	cmp	r1, #1
     528:	d007      	beq.n	53a <_sercom_get_default_pad+0xbe>
     52a:	2900      	cmp	r1, #0
     52c:	d023      	beq.n	576 <_sercom_get_default_pad+0xfa>
     52e:	2902      	cmp	r1, #2
     530:	d005      	beq.n	53e <_sercom_get_default_pad+0xc2>
     532:	2903      	cmp	r1, #3
     534:	d005      	beq.n	542 <_sercom_get_default_pad+0xc6>
	return 0;
     536:	2000      	movs	r0, #0
     538:	e7ae      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     53a:	4823      	ldr	r0, [pc, #140]	; (5c8 <_sercom_get_default_pad+0x14c>)
     53c:	e7ac      	b.n	498 <_sercom_get_default_pad+0x1c>
     53e:	4823      	ldr	r0, [pc, #140]	; (5cc <_sercom_get_default_pad+0x150>)
     540:	e7aa      	b.n	498 <_sercom_get_default_pad+0x1c>
     542:	4823      	ldr	r0, [pc, #140]	; (5d0 <_sercom_get_default_pad+0x154>)
     544:	e7a8      	b.n	498 <_sercom_get_default_pad+0x1c>
     546:	2901      	cmp	r1, #1
     548:	d007      	beq.n	55a <_sercom_get_default_pad+0xde>
     54a:	2900      	cmp	r1, #0
     54c:	d015      	beq.n	57a <_sercom_get_default_pad+0xfe>
     54e:	2902      	cmp	r1, #2
     550:	d005      	beq.n	55e <_sercom_get_default_pad+0xe2>
     552:	2903      	cmp	r1, #3
     554:	d005      	beq.n	562 <_sercom_get_default_pad+0xe6>
	return 0;
     556:	2000      	movs	r0, #0
     558:	e79e      	b.n	498 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     55a:	481e      	ldr	r0, [pc, #120]	; (5d4 <_sercom_get_default_pad+0x158>)
     55c:	e79c      	b.n	498 <_sercom_get_default_pad+0x1c>
     55e:	481e      	ldr	r0, [pc, #120]	; (5d8 <_sercom_get_default_pad+0x15c>)
     560:	e79a      	b.n	498 <_sercom_get_default_pad+0x1c>
     562:	481e      	ldr	r0, [pc, #120]	; (5dc <_sercom_get_default_pad+0x160>)
     564:	e798      	b.n	498 <_sercom_get_default_pad+0x1c>
     566:	481e      	ldr	r0, [pc, #120]	; (5e0 <_sercom_get_default_pad+0x164>)
     568:	e796      	b.n	498 <_sercom_get_default_pad+0x1c>
     56a:	2003      	movs	r0, #3
     56c:	e794      	b.n	498 <_sercom_get_default_pad+0x1c>
     56e:	481d      	ldr	r0, [pc, #116]	; (5e4 <_sercom_get_default_pad+0x168>)
     570:	e792      	b.n	498 <_sercom_get_default_pad+0x1c>
     572:	481d      	ldr	r0, [pc, #116]	; (5e8 <_sercom_get_default_pad+0x16c>)
     574:	e790      	b.n	498 <_sercom_get_default_pad+0x1c>
     576:	481d      	ldr	r0, [pc, #116]	; (5ec <_sercom_get_default_pad+0x170>)
     578:	e78e      	b.n	498 <_sercom_get_default_pad+0x1c>
     57a:	481d      	ldr	r0, [pc, #116]	; (5f0 <_sercom_get_default_pad+0x174>)
     57c:	e78c      	b.n	498 <_sercom_get_default_pad+0x1c>
     57e:	46c0      	nop			; (mov r8, r8)
     580:	42001000 	.word	0x42001000
     584:	42001800 	.word	0x42001800
     588:	42001c00 	.word	0x42001c00
     58c:	42001400 	.word	0x42001400
     590:	42000800 	.word	0x42000800
     594:	42000c00 	.word	0x42000c00
     598:	00050003 	.word	0x00050003
     59c:	00060003 	.word	0x00060003
     5a0:	00070003 	.word	0x00070003
     5a4:	00010003 	.word	0x00010003
     5a8:	001e0003 	.word	0x001e0003
     5ac:	001f0003 	.word	0x001f0003
     5b0:	00090003 	.word	0x00090003
     5b4:	000a0003 	.word	0x000a0003
     5b8:	000b0003 	.word	0x000b0003
     5bc:	00110003 	.word	0x00110003
     5c0:	00120003 	.word	0x00120003
     5c4:	00130003 	.word	0x00130003
     5c8:	000d0003 	.word	0x000d0003
     5cc:	000e0003 	.word	0x000e0003
     5d0:	000f0003 	.word	0x000f0003
     5d4:	00170003 	.word	0x00170003
     5d8:	00180003 	.word	0x00180003
     5dc:	00190003 	.word	0x00190003
     5e0:	00040003 	.word	0x00040003
     5e4:	00080003 	.word	0x00080003
     5e8:	00100003 	.word	0x00100003
     5ec:	000c0003 	.word	0x000c0003
     5f0:	00160003 	.word	0x00160003

000005f4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5f4:	b530      	push	{r4, r5, lr}
     5f6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5f8:	4b0b      	ldr	r3, [pc, #44]	; (628 <_sercom_get_sercom_inst_index+0x34>)
     5fa:	466a      	mov	r2, sp
     5fc:	cb32      	ldmia	r3!, {r1, r4, r5}
     5fe:	c232      	stmia	r2!, {r1, r4, r5}
     600:	cb32      	ldmia	r3!, {r1, r4, r5}
     602:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     604:	9b00      	ldr	r3, [sp, #0]
     606:	4283      	cmp	r3, r0
     608:	d00b      	beq.n	622 <_sercom_get_sercom_inst_index+0x2e>
     60a:	2301      	movs	r3, #1
     60c:	009a      	lsls	r2, r3, #2
     60e:	4669      	mov	r1, sp
     610:	5852      	ldr	r2, [r2, r1]
     612:	4282      	cmp	r2, r0
     614:	d006      	beq.n	624 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     616:	3301      	adds	r3, #1
     618:	2b06      	cmp	r3, #6
     61a:	d1f7      	bne.n	60c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     61c:	2000      	movs	r0, #0
}
     61e:	b007      	add	sp, #28
     620:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     622:	2300      	movs	r3, #0
			return i;
     624:	b2d8      	uxtb	r0, r3
     626:	e7fa      	b.n	61e <_sercom_get_sercom_inst_index+0x2a>
     628:	000044c4 	.word	0x000044c4

0000062c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     62c:	4770      	bx	lr
	...

00000630 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     630:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     632:	4b0a      	ldr	r3, [pc, #40]	; (65c <_sercom_set_handler+0x2c>)
     634:	781b      	ldrb	r3, [r3, #0]
     636:	2b00      	cmp	r3, #0
     638:	d10c      	bne.n	654 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     63a:	4f09      	ldr	r7, [pc, #36]	; (660 <_sercom_set_handler+0x30>)
     63c:	4e09      	ldr	r6, [pc, #36]	; (664 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     63e:	4d0a      	ldr	r5, [pc, #40]	; (668 <_sercom_set_handler+0x38>)
     640:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     642:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     644:	195a      	adds	r2, r3, r5
     646:	6014      	str	r4, [r2, #0]
     648:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     64a:	2b18      	cmp	r3, #24
     64c:	d1f9      	bne.n	642 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     64e:	2201      	movs	r2, #1
     650:	4b02      	ldr	r3, [pc, #8]	; (65c <_sercom_set_handler+0x2c>)
     652:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     654:	0080      	lsls	r0, r0, #2
     656:	4b02      	ldr	r3, [pc, #8]	; (660 <_sercom_set_handler+0x30>)
     658:	50c1      	str	r1, [r0, r3]
}
     65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     65c:	20000092 	.word	0x20000092
     660:	20000094 	.word	0x20000094
     664:	0000062d 	.word	0x0000062d
     668:	20003090 	.word	0x20003090

0000066c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     66c:	b500      	push	{lr}
     66e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     670:	2309      	movs	r3, #9
     672:	466a      	mov	r2, sp
     674:	7013      	strb	r3, [r2, #0]
     676:	3301      	adds	r3, #1
     678:	7053      	strb	r3, [r2, #1]
     67a:	3301      	adds	r3, #1
     67c:	7093      	strb	r3, [r2, #2]
     67e:	3301      	adds	r3, #1
     680:	70d3      	strb	r3, [r2, #3]
     682:	3301      	adds	r3, #1
     684:	7113      	strb	r3, [r2, #4]
     686:	3301      	adds	r3, #1
     688:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     68a:	4b03      	ldr	r3, [pc, #12]	; (698 <_sercom_get_interrupt_vector+0x2c>)
     68c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     68e:	466b      	mov	r3, sp
     690:	5618      	ldrsb	r0, [r3, r0]
}
     692:	b003      	add	sp, #12
     694:	bd00      	pop	{pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	000005f5 	.word	0x000005f5

0000069c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     69c:	b510      	push	{r4, lr}
     69e:	4b02      	ldr	r3, [pc, #8]	; (6a8 <SERCOM0_Handler+0xc>)
     6a0:	681b      	ldr	r3, [r3, #0]
     6a2:	2000      	movs	r0, #0
     6a4:	4798      	blx	r3
     6a6:	bd10      	pop	{r4, pc}
     6a8:	20000094 	.word	0x20000094

000006ac <SERCOM1_Handler>:
     6ac:	b510      	push	{r4, lr}
     6ae:	4b02      	ldr	r3, [pc, #8]	; (6b8 <SERCOM1_Handler+0xc>)
     6b0:	685b      	ldr	r3, [r3, #4]
     6b2:	2001      	movs	r0, #1
     6b4:	4798      	blx	r3
     6b6:	bd10      	pop	{r4, pc}
     6b8:	20000094 	.word	0x20000094

000006bc <SERCOM2_Handler>:
     6bc:	b510      	push	{r4, lr}
     6be:	4b02      	ldr	r3, [pc, #8]	; (6c8 <SERCOM2_Handler+0xc>)
     6c0:	689b      	ldr	r3, [r3, #8]
     6c2:	2002      	movs	r0, #2
     6c4:	4798      	blx	r3
     6c6:	bd10      	pop	{r4, pc}
     6c8:	20000094 	.word	0x20000094

000006cc <SERCOM3_Handler>:
     6cc:	b510      	push	{r4, lr}
     6ce:	4b02      	ldr	r3, [pc, #8]	; (6d8 <SERCOM3_Handler+0xc>)
     6d0:	68db      	ldr	r3, [r3, #12]
     6d2:	2003      	movs	r0, #3
     6d4:	4798      	blx	r3
     6d6:	bd10      	pop	{r4, pc}
     6d8:	20000094 	.word	0x20000094

000006dc <SERCOM4_Handler>:
     6dc:	b510      	push	{r4, lr}
     6de:	4b02      	ldr	r3, [pc, #8]	; (6e8 <SERCOM4_Handler+0xc>)
     6e0:	691b      	ldr	r3, [r3, #16]
     6e2:	2004      	movs	r0, #4
     6e4:	4798      	blx	r3
     6e6:	bd10      	pop	{r4, pc}
     6e8:	20000094 	.word	0x20000094

000006ec <SERCOM5_Handler>:
     6ec:	b510      	push	{r4, lr}
     6ee:	4b02      	ldr	r3, [pc, #8]	; (6f8 <SERCOM5_Handler+0xc>)
     6f0:	695b      	ldr	r3, [r3, #20]
     6f2:	2005      	movs	r0, #5
     6f4:	4798      	blx	r3
     6f6:	bd10      	pop	{r4, pc}
     6f8:	20000094 	.word	0x20000094

000006fc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	46de      	mov	lr, fp
     700:	4657      	mov	r7, sl
     702:	464e      	mov	r6, r9
     704:	4645      	mov	r5, r8
     706:	b5e0      	push	{r5, r6, r7, lr}
     708:	b091      	sub	sp, #68	; 0x44
     70a:	0005      	movs	r5, r0
     70c:	000c      	movs	r4, r1
     70e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     710:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     712:	0008      	movs	r0, r1
     714:	4bbc      	ldr	r3, [pc, #752]	; (a08 <usart_init+0x30c>)
     716:	4798      	blx	r3
     718:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     71a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     71c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     71e:	07db      	lsls	r3, r3, #31
     720:	d506      	bpl.n	730 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     722:	b011      	add	sp, #68	; 0x44
     724:	bc3c      	pop	{r2, r3, r4, r5}
     726:	4690      	mov	r8, r2
     728:	4699      	mov	r9, r3
     72a:	46a2      	mov	sl, r4
     72c:	46ab      	mov	fp, r5
     72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     730:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     732:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     734:	079b      	lsls	r3, r3, #30
     736:	d4f4      	bmi.n	722 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     738:	49b4      	ldr	r1, [pc, #720]	; (a0c <usart_init+0x310>)
     73a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     73c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     73e:	2301      	movs	r3, #1
     740:	40bb      	lsls	r3, r7
     742:	4303      	orrs	r3, r0
     744:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     746:	a90f      	add	r1, sp, #60	; 0x3c
     748:	272d      	movs	r7, #45	; 0x2d
     74a:	5df3      	ldrb	r3, [r6, r7]
     74c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     74e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     750:	b2d3      	uxtb	r3, r2
     752:	9302      	str	r3, [sp, #8]
     754:	0018      	movs	r0, r3
     756:	4bae      	ldr	r3, [pc, #696]	; (a10 <usart_init+0x314>)
     758:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     75a:	9802      	ldr	r0, [sp, #8]
     75c:	4bad      	ldr	r3, [pc, #692]	; (a14 <usart_init+0x318>)
     75e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     760:	5df0      	ldrb	r0, [r6, r7]
     762:	2100      	movs	r1, #0
     764:	4bac      	ldr	r3, [pc, #688]	; (a18 <usart_init+0x31c>)
     766:	4798      	blx	r3
	module->character_size = config->character_size;
     768:	7af3      	ldrb	r3, [r6, #11]
     76a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     76c:	2324      	movs	r3, #36	; 0x24
     76e:	5cf3      	ldrb	r3, [r6, r3]
     770:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     772:	2325      	movs	r3, #37	; 0x25
     774:	5cf3      	ldrb	r3, [r6, r3]
     776:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     778:	7ef3      	ldrb	r3, [r6, #27]
     77a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     77c:	7f33      	ldrb	r3, [r6, #28]
     77e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     780:	682b      	ldr	r3, [r5, #0]
     782:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     784:	0018      	movs	r0, r3
     786:	4ba0      	ldr	r3, [pc, #640]	; (a08 <usart_init+0x30c>)
     788:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     78a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     78c:	2200      	movs	r2, #0
     78e:	230e      	movs	r3, #14
     790:	a906      	add	r1, sp, #24
     792:	468c      	mov	ip, r1
     794:	4463      	add	r3, ip
     796:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     798:	8a32      	ldrh	r2, [r6, #16]
     79a:	9202      	str	r2, [sp, #8]
     79c:	2380      	movs	r3, #128	; 0x80
     79e:	01db      	lsls	r3, r3, #7
     7a0:	429a      	cmp	r2, r3
     7a2:	d100      	bne.n	7a6 <usart_init+0xaa>
     7a4:	e09e      	b.n	8e4 <usart_init+0x1e8>
     7a6:	d90f      	bls.n	7c8 <usart_init+0xcc>
     7a8:	23c0      	movs	r3, #192	; 0xc0
     7aa:	01db      	lsls	r3, r3, #7
     7ac:	9a02      	ldr	r2, [sp, #8]
     7ae:	429a      	cmp	r2, r3
     7b0:	d100      	bne.n	7b4 <usart_init+0xb8>
     7b2:	e092      	b.n	8da <usart_init+0x1de>
     7b4:	2380      	movs	r3, #128	; 0x80
     7b6:	021b      	lsls	r3, r3, #8
     7b8:	429a      	cmp	r2, r3
     7ba:	d000      	beq.n	7be <usart_init+0xc2>
     7bc:	e11f      	b.n	9fe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     7be:	2303      	movs	r3, #3
     7c0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     7c2:	2300      	movs	r3, #0
     7c4:	9307      	str	r3, [sp, #28]
     7c6:	e008      	b.n	7da <usart_init+0xde>
	switch (config->sample_rate) {
     7c8:	2380      	movs	r3, #128	; 0x80
     7ca:	019b      	lsls	r3, r3, #6
     7cc:	429a      	cmp	r2, r3
     7ce:	d000      	beq.n	7d2 <usart_init+0xd6>
     7d0:	e115      	b.n	9fe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     7d2:	2310      	movs	r3, #16
     7d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     7d6:	3b0f      	subs	r3, #15
     7d8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     7da:	6833      	ldr	r3, [r6, #0]
     7dc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     7de:	68f3      	ldr	r3, [r6, #12]
     7e0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     7e2:	6973      	ldr	r3, [r6, #20]
     7e4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7e6:	7e33      	ldrb	r3, [r6, #24]
     7e8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7ea:	2326      	movs	r3, #38	; 0x26
     7ec:	5cf3      	ldrb	r3, [r6, r3]
     7ee:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     7f0:	6873      	ldr	r3, [r6, #4]
     7f2:	4699      	mov	r9, r3
	switch (transfer_mode)
     7f4:	2b00      	cmp	r3, #0
     7f6:	d100      	bne.n	7fa <usart_init+0xfe>
     7f8:	e0a0      	b.n	93c <usart_init+0x240>
     7fa:	2380      	movs	r3, #128	; 0x80
     7fc:	055b      	lsls	r3, r3, #21
     7fe:	4599      	cmp	r9, r3
     800:	d100      	bne.n	804 <usart_init+0x108>
     802:	e084      	b.n	90e <usart_init+0x212>
	if(config->encoding_format_enable) {
     804:	7e73      	ldrb	r3, [r6, #25]
     806:	2b00      	cmp	r3, #0
     808:	d002      	beq.n	810 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     80a:	7eb3      	ldrb	r3, [r6, #26]
     80c:	4642      	mov	r2, r8
     80e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     810:	682a      	ldr	r2, [r5, #0]
     812:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     814:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     816:	2b00      	cmp	r3, #0
     818:	d1fc      	bne.n	814 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     81a:	330e      	adds	r3, #14
     81c:	aa06      	add	r2, sp, #24
     81e:	4694      	mov	ip, r2
     820:	4463      	add	r3, ip
     822:	881b      	ldrh	r3, [r3, #0]
     824:	4642      	mov	r2, r8
     826:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     828:	9b05      	ldr	r3, [sp, #20]
     82a:	9a03      	ldr	r2, [sp, #12]
     82c:	4313      	orrs	r3, r2
     82e:	9a04      	ldr	r2, [sp, #16]
     830:	4313      	orrs	r3, r2
     832:	464a      	mov	r2, r9
     834:	4313      	orrs	r3, r2
     836:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     838:	465b      	mov	r3, fp
     83a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     83c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     83e:	4653      	mov	r3, sl
     840:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     842:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     844:	2327      	movs	r3, #39	; 0x27
     846:	5cf3      	ldrb	r3, [r6, r3]
     848:	2b00      	cmp	r3, #0
     84a:	d101      	bne.n	850 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     84c:	3304      	adds	r3, #4
     84e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     850:	7e73      	ldrb	r3, [r6, #25]
     852:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     854:	7f32      	ldrb	r2, [r6, #28]
     856:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     858:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     85a:	7f72      	ldrb	r2, [r6, #29]
     85c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     85e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     860:	2224      	movs	r2, #36	; 0x24
     862:	5cb2      	ldrb	r2, [r6, r2]
     864:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     866:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     868:	2225      	movs	r2, #37	; 0x25
     86a:	5cb2      	ldrb	r2, [r6, r2]
     86c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     86e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     870:	7ab1      	ldrb	r1, [r6, #10]
     872:	7af2      	ldrb	r2, [r6, #11]
     874:	4311      	orrs	r1, r2
     876:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     878:	8933      	ldrh	r3, [r6, #8]
     87a:	2bff      	cmp	r3, #255	; 0xff
     87c:	d100      	bne.n	880 <usart_init+0x184>
     87e:	e081      	b.n	984 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     880:	2280      	movs	r2, #128	; 0x80
     882:	0452      	lsls	r2, r2, #17
     884:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     886:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     888:	232c      	movs	r3, #44	; 0x2c
     88a:	5cf3      	ldrb	r3, [r6, r3]
     88c:	2b00      	cmp	r3, #0
     88e:	d103      	bne.n	898 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     890:	4b62      	ldr	r3, [pc, #392]	; (a1c <usart_init+0x320>)
     892:	789b      	ldrb	r3, [r3, #2]
     894:	079b      	lsls	r3, r3, #30
     896:	d501      	bpl.n	89c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     898:	2380      	movs	r3, #128	; 0x80
     89a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     89c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     89e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     8a0:	2b00      	cmp	r3, #0
     8a2:	d1fc      	bne.n	89e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     8a4:	4643      	mov	r3, r8
     8a6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     8aa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     8ac:	2b00      	cmp	r3, #0
     8ae:	d1fc      	bne.n	8aa <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     8b0:	4643      	mov	r3, r8
     8b2:	601f      	str	r7, [r3, #0]
     8b4:	ab0e      	add	r3, sp, #56	; 0x38
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8ba:	2200      	movs	r2, #0
     8bc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     8be:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     8c0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     8c2:	6b33      	ldr	r3, [r6, #48]	; 0x30
     8c4:	930a      	str	r3, [sp, #40]	; 0x28
     8c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
     8c8:	930b      	str	r3, [sp, #44]	; 0x2c
     8ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     8cc:	930c      	str	r3, [sp, #48]	; 0x30
     8ce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     8d0:	9302      	str	r3, [sp, #8]
     8d2:	930d      	str	r3, [sp, #52]	; 0x34
     8d4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8d6:	ae0a      	add	r6, sp, #40	; 0x28
     8d8:	e063      	b.n	9a2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8da:	2308      	movs	r3, #8
     8dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8de:	3b07      	subs	r3, #7
     8e0:	9307      	str	r3, [sp, #28]
     8e2:	e77a      	b.n	7da <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     8e4:	6833      	ldr	r3, [r6, #0]
     8e6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     8e8:	68f3      	ldr	r3, [r6, #12]
     8ea:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     8ec:	6973      	ldr	r3, [r6, #20]
     8ee:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8f0:	7e33      	ldrb	r3, [r6, #24]
     8f2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8f4:	2326      	movs	r3, #38	; 0x26
     8f6:	5cf3      	ldrb	r3, [r6, r3]
     8f8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     8fa:	6873      	ldr	r3, [r6, #4]
     8fc:	4699      	mov	r9, r3
	switch (transfer_mode)
     8fe:	2b00      	cmp	r3, #0
     900:	d018      	beq.n	934 <usart_init+0x238>
     902:	2380      	movs	r3, #128	; 0x80
     904:	055b      	lsls	r3, r3, #21
     906:	4599      	cmp	r9, r3
     908:	d001      	beq.n	90e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     90a:	2000      	movs	r0, #0
     90c:	e025      	b.n	95a <usart_init+0x25e>
			if (!config->use_external_clock) {
     90e:	2327      	movs	r3, #39	; 0x27
     910:	5cf3      	ldrb	r3, [r6, r3]
     912:	2b00      	cmp	r3, #0
     914:	d000      	beq.n	918 <usart_init+0x21c>
     916:	e775      	b.n	804 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     918:	6a33      	ldr	r3, [r6, #32]
     91a:	001f      	movs	r7, r3
     91c:	b2c0      	uxtb	r0, r0
     91e:	4b40      	ldr	r3, [pc, #256]	; (a20 <usart_init+0x324>)
     920:	4798      	blx	r3
     922:	0001      	movs	r1, r0
     924:	220e      	movs	r2, #14
     926:	ab06      	add	r3, sp, #24
     928:	469c      	mov	ip, r3
     92a:	4462      	add	r2, ip
     92c:	0038      	movs	r0, r7
     92e:	4b3d      	ldr	r3, [pc, #244]	; (a24 <usart_init+0x328>)
     930:	4798      	blx	r3
     932:	e012      	b.n	95a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     934:	2308      	movs	r3, #8
     936:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     938:	2300      	movs	r3, #0
     93a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     93c:	2327      	movs	r3, #39	; 0x27
     93e:	5cf3      	ldrb	r3, [r6, r3]
     940:	2b00      	cmp	r3, #0
     942:	d00e      	beq.n	962 <usart_init+0x266>
				status_code =
     944:	9b06      	ldr	r3, [sp, #24]
     946:	9300      	str	r3, [sp, #0]
     948:	9b07      	ldr	r3, [sp, #28]
     94a:	220e      	movs	r2, #14
     94c:	a906      	add	r1, sp, #24
     94e:	468c      	mov	ip, r1
     950:	4462      	add	r2, ip
     952:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     954:	6a30      	ldr	r0, [r6, #32]
     956:	4f34      	ldr	r7, [pc, #208]	; (a28 <usart_init+0x32c>)
     958:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     95a:	2800      	cmp	r0, #0
     95c:	d000      	beq.n	960 <usart_init+0x264>
     95e:	e6e0      	b.n	722 <usart_init+0x26>
     960:	e750      	b.n	804 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     962:	6a33      	ldr	r3, [r6, #32]
     964:	001f      	movs	r7, r3
     966:	b2c0      	uxtb	r0, r0
     968:	4b2d      	ldr	r3, [pc, #180]	; (a20 <usart_init+0x324>)
     96a:	4798      	blx	r3
     96c:	0001      	movs	r1, r0
				status_code =
     96e:	9b06      	ldr	r3, [sp, #24]
     970:	9300      	str	r3, [sp, #0]
     972:	9b07      	ldr	r3, [sp, #28]
     974:	220e      	movs	r2, #14
     976:	a806      	add	r0, sp, #24
     978:	4684      	mov	ip, r0
     97a:	4462      	add	r2, ip
     97c:	0038      	movs	r0, r7
     97e:	4f2a      	ldr	r7, [pc, #168]	; (a28 <usart_init+0x32c>)
     980:	47b8      	blx	r7
     982:	e7ea      	b.n	95a <usart_init+0x25e>
		if(config->lin_slave_enable) {
     984:	7ef3      	ldrb	r3, [r6, #27]
     986:	2b00      	cmp	r3, #0
     988:	d100      	bne.n	98c <usart_init+0x290>
     98a:	e77d      	b.n	888 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     98c:	2380      	movs	r3, #128	; 0x80
     98e:	04db      	lsls	r3, r3, #19
     990:	431f      	orrs	r7, r3
     992:	e779      	b.n	888 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     994:	0020      	movs	r0, r4
     996:	4b25      	ldr	r3, [pc, #148]	; (a2c <usart_init+0x330>)
     998:	4798      	blx	r3
     99a:	e007      	b.n	9ac <usart_init+0x2b0>
     99c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     99e:	2f04      	cmp	r7, #4
     9a0:	d00d      	beq.n	9be <usart_init+0x2c2>
     9a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9a4:	00bb      	lsls	r3, r7, #2
     9a6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     9a8:	2800      	cmp	r0, #0
     9aa:	d0f3      	beq.n	994 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     9ac:	1c43      	adds	r3, r0, #1
     9ae:	d0f5      	beq.n	99c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9b0:	a90e      	add	r1, sp, #56	; 0x38
     9b2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9b4:	0c00      	lsrs	r0, r0, #16
     9b6:	b2c0      	uxtb	r0, r0
     9b8:	4b1d      	ldr	r3, [pc, #116]	; (a30 <usart_init+0x334>)
     9ba:	4798      	blx	r3
     9bc:	e7ee      	b.n	99c <usart_init+0x2a0>
		module->callback[i]            = NULL;
     9be:	2300      	movs	r3, #0
     9c0:	60eb      	str	r3, [r5, #12]
     9c2:	612b      	str	r3, [r5, #16]
     9c4:	616b      	str	r3, [r5, #20]
     9c6:	61ab      	str	r3, [r5, #24]
     9c8:	61eb      	str	r3, [r5, #28]
     9ca:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     9cc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     9ce:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     9d0:	2200      	movs	r2, #0
     9d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     9d4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     9d6:	3330      	adds	r3, #48	; 0x30
     9d8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     9da:	3301      	adds	r3, #1
     9dc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     9de:	3301      	adds	r3, #1
     9e0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     9e2:	3301      	adds	r3, #1
     9e4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     9e6:	6828      	ldr	r0, [r5, #0]
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <usart_init+0x30c>)
     9ea:	4798      	blx	r3
     9ec:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     9ee:	4911      	ldr	r1, [pc, #68]	; (a34 <usart_init+0x338>)
     9f0:	4b11      	ldr	r3, [pc, #68]	; (a38 <usart_init+0x33c>)
     9f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9f4:	00a4      	lsls	r4, r4, #2
     9f6:	4b11      	ldr	r3, [pc, #68]	; (a3c <usart_init+0x340>)
     9f8:	50e5      	str	r5, [r4, r3]
	return status_code;
     9fa:	2000      	movs	r0, #0
     9fc:	e691      	b.n	722 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9fe:	2310      	movs	r3, #16
     a00:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a02:	2300      	movs	r3, #0
     a04:	9307      	str	r3, [sp, #28]
     a06:	e6e8      	b.n	7da <usart_init+0xde>
     a08:	000005f5 	.word	0x000005f5
     a0c:	40000400 	.word	0x40000400
     a10:	000010d9 	.word	0x000010d9
     a14:	0000104d 	.word	0x0000104d
     a18:	00000431 	.word	0x00000431
     a1c:	41002000 	.word	0x41002000
     a20:	000010f5 	.word	0x000010f5
     a24:	00000373 	.word	0x00000373
     a28:	0000039d 	.word	0x0000039d
     a2c:	0000047d 	.word	0x0000047d
     a30:	000011d1 	.word	0x000011d1
     a34:	00000add 	.word	0x00000add
     a38:	00000631 	.word	0x00000631
     a3c:	20003090 	.word	0x20003090

00000a40 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a40:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     a42:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     a44:	2a00      	cmp	r2, #0
     a46:	d101      	bne.n	a4c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     a48:	0018      	movs	r0, r3
     a4a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     a4c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     a4e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a50:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     a52:	2a00      	cmp	r2, #0
     a54:	d1f8      	bne.n	a48 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a56:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     a58:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     a5a:	2a00      	cmp	r2, #0
     a5c:	d1fc      	bne.n	a58 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     a5e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     a60:	2102      	movs	r1, #2
     a62:	7e1a      	ldrb	r2, [r3, #24]
     a64:	420a      	tst	r2, r1
     a66:	d0fc      	beq.n	a62 <usart_write_wait+0x22>
	return STATUS_OK;
     a68:	2300      	movs	r3, #0
     a6a:	e7ed      	b.n	a48 <usart_write_wait+0x8>

00000a6c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a6c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     a6e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     a70:	2a00      	cmp	r2, #0
     a72:	d101      	bne.n	a78 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     a74:	0018      	movs	r0, r3
     a76:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     a78:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     a7a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a7c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     a7e:	2a00      	cmp	r2, #0
     a80:	d1f8      	bne.n	a74 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a82:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a84:	7e10      	ldrb	r0, [r2, #24]
     a86:	0740      	lsls	r0, r0, #29
     a88:	d5f4      	bpl.n	a74 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     a8a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a8c:	2b00      	cmp	r3, #0
     a8e:	d1fc      	bne.n	a8a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a90:	8b53      	ldrh	r3, [r2, #26]
     a92:	b2db      	uxtb	r3, r3
	if (error_code) {
     a94:	0698      	lsls	r0, r3, #26
     a96:	d01d      	beq.n	ad4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a98:	0798      	lsls	r0, r3, #30
     a9a:	d503      	bpl.n	aa4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a9c:	2302      	movs	r3, #2
     a9e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     aa0:	3318      	adds	r3, #24
     aa2:	e7e7      	b.n	a74 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     aa4:	0758      	lsls	r0, r3, #29
     aa6:	d503      	bpl.n	ab0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     aa8:	2304      	movs	r3, #4
     aaa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     aac:	331a      	adds	r3, #26
     aae:	e7e1      	b.n	a74 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ab0:	07d8      	lsls	r0, r3, #31
     ab2:	d503      	bpl.n	abc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ab4:	2301      	movs	r3, #1
     ab6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     ab8:	3312      	adds	r3, #18
     aba:	e7db      	b.n	a74 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     abc:	06d8      	lsls	r0, r3, #27
     abe:	d503      	bpl.n	ac8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ac0:	2310      	movs	r3, #16
     ac2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     ac4:	3332      	adds	r3, #50	; 0x32
     ac6:	e7d5      	b.n	a74 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ac8:	069b      	lsls	r3, r3, #26
     aca:	d503      	bpl.n	ad4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     acc:	2320      	movs	r3, #32
     ace:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     ad0:	3321      	adds	r3, #33	; 0x21
     ad2:	e7cf      	b.n	a74 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     ad4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     ad6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     ad8:	2300      	movs	r3, #0
     ada:	e7cb      	b.n	a74 <usart_read_wait+0x8>

00000adc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     ade:	0080      	lsls	r0, r0, #2
     ae0:	4b62      	ldr	r3, [pc, #392]	; (c6c <_usart_interrupt_handler+0x190>)
     ae2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ae4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ae6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     ae8:	2b00      	cmp	r3, #0
     aea:	d1fc      	bne.n	ae6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     aec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     aee:	7da6      	ldrb	r6, [r4, #22]
     af0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     af2:	2330      	movs	r3, #48	; 0x30
     af4:	5ceb      	ldrb	r3, [r5, r3]
     af6:	2231      	movs	r2, #49	; 0x31
     af8:	5caf      	ldrb	r7, [r5, r2]
     afa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     afc:	07f3      	lsls	r3, r6, #31
     afe:	d522      	bpl.n	b46 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     b00:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b02:	b29b      	uxth	r3, r3
     b04:	2b00      	cmp	r3, #0
     b06:	d01c      	beq.n	b42 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     b0a:	7813      	ldrb	r3, [r2, #0]
     b0c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     b0e:	1c51      	adds	r1, r2, #1
     b10:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b12:	7969      	ldrb	r1, [r5, #5]
     b14:	2901      	cmp	r1, #1
     b16:	d00e      	beq.n	b36 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b18:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     b1a:	05db      	lsls	r3, r3, #23
     b1c:	0ddb      	lsrs	r3, r3, #23
     b1e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     b20:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b22:	3b01      	subs	r3, #1
     b24:	b29b      	uxth	r3, r3
     b26:	85eb      	strh	r3, [r5, #46]	; 0x2e
     b28:	2b00      	cmp	r3, #0
     b2a:	d10c      	bne.n	b46 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b2c:	3301      	adds	r3, #1
     b2e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b30:	3301      	adds	r3, #1
     b32:	75a3      	strb	r3, [r4, #22]
     b34:	e007      	b.n	b46 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b36:	7851      	ldrb	r1, [r2, #1]
     b38:	0209      	lsls	r1, r1, #8
     b3a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b3c:	3202      	adds	r2, #2
     b3e:	62aa      	str	r2, [r5, #40]	; 0x28
     b40:	e7eb      	b.n	b1a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b42:	2301      	movs	r3, #1
     b44:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b46:	07b3      	lsls	r3, r6, #30
     b48:	d506      	bpl.n	b58 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b4a:	2302      	movs	r3, #2
     b4c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     b4e:	2200      	movs	r2, #0
     b50:	3331      	adds	r3, #49	; 0x31
     b52:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b54:	07fb      	lsls	r3, r7, #31
     b56:	d41a      	bmi.n	b8e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b58:	0773      	lsls	r3, r6, #29
     b5a:	d565      	bpl.n	c28 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     b5c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b5e:	b29b      	uxth	r3, r3
     b60:	2b00      	cmp	r3, #0
     b62:	d05f      	beq.n	c24 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b64:	8b63      	ldrh	r3, [r4, #26]
     b66:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     b68:	071a      	lsls	r2, r3, #28
     b6a:	d414      	bmi.n	b96 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b6c:	223f      	movs	r2, #63	; 0x3f
     b6e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b70:	2b00      	cmp	r3, #0
     b72:	d034      	beq.n	bde <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b74:	079a      	lsls	r2, r3, #30
     b76:	d511      	bpl.n	b9c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b78:	221a      	movs	r2, #26
     b7a:	2332      	movs	r3, #50	; 0x32
     b7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b7e:	3b30      	subs	r3, #48	; 0x30
     b80:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     b82:	077b      	lsls	r3, r7, #29
     b84:	d550      	bpl.n	c28 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b86:	0028      	movs	r0, r5
     b88:	696b      	ldr	r3, [r5, #20]
     b8a:	4798      	blx	r3
     b8c:	e04c      	b.n	c28 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b8e:	0028      	movs	r0, r5
     b90:	68eb      	ldr	r3, [r5, #12]
     b92:	4798      	blx	r3
     b94:	e7e0      	b.n	b58 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b96:	2237      	movs	r2, #55	; 0x37
     b98:	4013      	ands	r3, r2
     b9a:	e7e9      	b.n	b70 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b9c:	075a      	lsls	r2, r3, #29
     b9e:	d505      	bpl.n	bac <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     ba0:	221e      	movs	r2, #30
     ba2:	2332      	movs	r3, #50	; 0x32
     ba4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ba6:	3b2e      	subs	r3, #46	; 0x2e
     ba8:	8363      	strh	r3, [r4, #26]
     baa:	e7ea      	b.n	b82 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bac:	07da      	lsls	r2, r3, #31
     bae:	d505      	bpl.n	bbc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     bb0:	2213      	movs	r2, #19
     bb2:	2332      	movs	r3, #50	; 0x32
     bb4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bb6:	3b31      	subs	r3, #49	; 0x31
     bb8:	8363      	strh	r3, [r4, #26]
     bba:	e7e2      	b.n	b82 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     bbc:	06da      	lsls	r2, r3, #27
     bbe:	d505      	bpl.n	bcc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     bc0:	2242      	movs	r2, #66	; 0x42
     bc2:	2332      	movs	r3, #50	; 0x32
     bc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     bc6:	3b22      	subs	r3, #34	; 0x22
     bc8:	8363      	strh	r3, [r4, #26]
     bca:	e7da      	b.n	b82 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     bcc:	2220      	movs	r2, #32
     bce:	421a      	tst	r2, r3
     bd0:	d0d7      	beq.n	b82 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     bd2:	3221      	adds	r2, #33	; 0x21
     bd4:	2332      	movs	r3, #50	; 0x32
     bd6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bd8:	3b12      	subs	r3, #18
     bda:	8363      	strh	r3, [r4, #26]
     bdc:	e7d1      	b.n	b82 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     bde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     be0:	05db      	lsls	r3, r3, #23
     be2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     be4:	b2da      	uxtb	r2, r3
     be6:	6a69      	ldr	r1, [r5, #36]	; 0x24
     be8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     bea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     bec:	1c51      	adds	r1, r2, #1
     bee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bf0:	7969      	ldrb	r1, [r5, #5]
     bf2:	2901      	cmp	r1, #1
     bf4:	d010      	beq.n	c18 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     bf6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     bf8:	3b01      	subs	r3, #1
     bfa:	b29b      	uxth	r3, r3
     bfc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     bfe:	2b00      	cmp	r3, #0
     c00:	d112      	bne.n	c28 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c02:	3304      	adds	r3, #4
     c04:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     c06:	2200      	movs	r2, #0
     c08:	332e      	adds	r3, #46	; 0x2e
     c0a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     c0c:	07bb      	lsls	r3, r7, #30
     c0e:	d50b      	bpl.n	c28 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c10:	0028      	movs	r0, r5
     c12:	692b      	ldr	r3, [r5, #16]
     c14:	4798      	blx	r3
     c16:	e007      	b.n	c28 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c18:	0a1b      	lsrs	r3, r3, #8
     c1a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     c1e:	3301      	adds	r3, #1
     c20:	626b      	str	r3, [r5, #36]	; 0x24
     c22:	e7e8      	b.n	bf6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c24:	2304      	movs	r3, #4
     c26:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     c28:	06f3      	lsls	r3, r6, #27
     c2a:	d504      	bpl.n	c36 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     c2c:	2310      	movs	r3, #16
     c2e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     c30:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     c32:	06fb      	lsls	r3, r7, #27
     c34:	d40e      	bmi.n	c54 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     c36:	06b3      	lsls	r3, r6, #26
     c38:	d504      	bpl.n	c44 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     c3a:	2320      	movs	r3, #32
     c3c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     c3e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     c40:	073b      	lsls	r3, r7, #28
     c42:	d40b      	bmi.n	c5c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     c44:	0733      	lsls	r3, r6, #28
     c46:	d504      	bpl.n	c52 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     c48:	2308      	movs	r3, #8
     c4a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     c4c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     c4e:	06bb      	lsls	r3, r7, #26
     c50:	d408      	bmi.n	c64 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     c54:	0028      	movs	r0, r5
     c56:	69eb      	ldr	r3, [r5, #28]
     c58:	4798      	blx	r3
     c5a:	e7ec      	b.n	c36 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     c5c:	0028      	movs	r0, r5
     c5e:	69ab      	ldr	r3, [r5, #24]
     c60:	4798      	blx	r3
     c62:	e7ef      	b.n	c44 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     c64:	6a2b      	ldr	r3, [r5, #32]
     c66:	0028      	movs	r0, r5
     c68:	4798      	blx	r3
}
     c6a:	e7f2      	b.n	c52 <_usart_interrupt_handler+0x176>
     c6c:	20003090 	.word	0x20003090

00000c70 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c70:	b510      	push	{r4, lr}
	switch (clock_source) {
     c72:	2808      	cmp	r0, #8
     c74:	d803      	bhi.n	c7e <system_clock_source_get_hz+0xe>
     c76:	0080      	lsls	r0, r0, #2
     c78:	4b1c      	ldr	r3, [pc, #112]	; (cec <system_clock_source_get_hz+0x7c>)
     c7a:	581b      	ldr	r3, [r3, r0]
     c7c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     c7e:	2000      	movs	r0, #0
     c80:	e032      	b.n	ce8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     c82:	4b1b      	ldr	r3, [pc, #108]	; (cf0 <system_clock_source_get_hz+0x80>)
     c84:	6918      	ldr	r0, [r3, #16]
     c86:	e02f      	b.n	ce8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c88:	4b1a      	ldr	r3, [pc, #104]	; (cf4 <system_clock_source_get_hz+0x84>)
     c8a:	6a1b      	ldr	r3, [r3, #32]
     c8c:	059b      	lsls	r3, r3, #22
     c8e:	0f9b      	lsrs	r3, r3, #30
     c90:	4819      	ldr	r0, [pc, #100]	; (cf8 <system_clock_source_get_hz+0x88>)
     c92:	40d8      	lsrs	r0, r3
     c94:	e028      	b.n	ce8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     c96:	4b16      	ldr	r3, [pc, #88]	; (cf0 <system_clock_source_get_hz+0x80>)
     c98:	6958      	ldr	r0, [r3, #20]
     c9a:	e025      	b.n	ce8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c9c:	4b14      	ldr	r3, [pc, #80]	; (cf0 <system_clock_source_get_hz+0x80>)
     c9e:	681b      	ldr	r3, [r3, #0]
			return 0;
     ca0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ca2:	079b      	lsls	r3, r3, #30
     ca4:	d520      	bpl.n	ce8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ca6:	4913      	ldr	r1, [pc, #76]	; (cf4 <system_clock_source_get_hz+0x84>)
     ca8:	2210      	movs	r2, #16
     caa:	68cb      	ldr	r3, [r1, #12]
     cac:	421a      	tst	r2, r3
     cae:	d0fc      	beq.n	caa <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     cb0:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <system_clock_source_get_hz+0x80>)
     cb2:	681a      	ldr	r2, [r3, #0]
     cb4:	2324      	movs	r3, #36	; 0x24
     cb6:	4013      	ands	r3, r2
     cb8:	2b04      	cmp	r3, #4
     cba:	d001      	beq.n	cc0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     cbc:	480f      	ldr	r0, [pc, #60]	; (cfc <system_clock_source_get_hz+0x8c>)
     cbe:	e013      	b.n	ce8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cc0:	2000      	movs	r0, #0
     cc2:	4b0f      	ldr	r3, [pc, #60]	; (d00 <system_clock_source_get_hz+0x90>)
     cc4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <system_clock_source_get_hz+0x80>)
     cc8:	689b      	ldr	r3, [r3, #8]
     cca:	041b      	lsls	r3, r3, #16
     ccc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cce:	4358      	muls	r0, r3
     cd0:	e00a      	b.n	ce8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cd2:	2350      	movs	r3, #80	; 0x50
     cd4:	4a07      	ldr	r2, [pc, #28]	; (cf4 <system_clock_source_get_hz+0x84>)
     cd6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     cd8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cda:	075b      	lsls	r3, r3, #29
     cdc:	d504      	bpl.n	ce8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <system_clock_source_get_hz+0x80>)
     ce0:	68d8      	ldr	r0, [r3, #12]
     ce2:	e001      	b.n	ce8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     ce4:	2080      	movs	r0, #128	; 0x80
     ce6:	0200      	lsls	r0, r0, #8
	}
}
     ce8:	bd10      	pop	{r4, pc}
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	000044dc 	.word	0x000044dc
     cf0:	200000ac 	.word	0x200000ac
     cf4:	40000800 	.word	0x40000800
     cf8:	007a1200 	.word	0x007a1200
     cfc:	02dc6c00 	.word	0x02dc6c00
     d00:	000010f5 	.word	0x000010f5

00000d04 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d04:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d06:	490c      	ldr	r1, [pc, #48]	; (d38 <system_clock_source_osc8m_set_config+0x34>)
     d08:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d0a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d0c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d0e:	7840      	ldrb	r0, [r0, #1]
     d10:	2201      	movs	r2, #1
     d12:	4010      	ands	r0, r2
     d14:	0180      	lsls	r0, r0, #6
     d16:	2640      	movs	r6, #64	; 0x40
     d18:	43b3      	bics	r3, r6
     d1a:	4303      	orrs	r3, r0
     d1c:	402a      	ands	r2, r5
     d1e:	01d2      	lsls	r2, r2, #7
     d20:	2080      	movs	r0, #128	; 0x80
     d22:	4383      	bics	r3, r0
     d24:	4313      	orrs	r3, r2
     d26:	2203      	movs	r2, #3
     d28:	4022      	ands	r2, r4
     d2a:	0212      	lsls	r2, r2, #8
     d2c:	4803      	ldr	r0, [pc, #12]	; (d3c <system_clock_source_osc8m_set_config+0x38>)
     d2e:	4003      	ands	r3, r0
     d30:	4313      	orrs	r3, r2
     d32:	620b      	str	r3, [r1, #32]
}
     d34:	bd70      	pop	{r4, r5, r6, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	40000800 	.word	0x40000800
     d3c:	fffffcff 	.word	0xfffffcff

00000d40 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d40:	2808      	cmp	r0, #8
     d42:	d803      	bhi.n	d4c <system_clock_source_enable+0xc>
     d44:	0080      	lsls	r0, r0, #2
     d46:	4b25      	ldr	r3, [pc, #148]	; (ddc <system_clock_source_enable+0x9c>)
     d48:	581b      	ldr	r3, [r3, r0]
     d4a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d4c:	2017      	movs	r0, #23
     d4e:	e044      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d50:	4a23      	ldr	r2, [pc, #140]	; (de0 <system_clock_source_enable+0xa0>)
     d52:	6a13      	ldr	r3, [r2, #32]
     d54:	2102      	movs	r1, #2
     d56:	430b      	orrs	r3, r1
     d58:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d5a:	2000      	movs	r0, #0
     d5c:	e03d      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d5e:	4a20      	ldr	r2, [pc, #128]	; (de0 <system_clock_source_enable+0xa0>)
     d60:	6993      	ldr	r3, [r2, #24]
     d62:	2102      	movs	r1, #2
     d64:	430b      	orrs	r3, r1
     d66:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     d68:	2000      	movs	r0, #0
		break;
     d6a:	e036      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d6c:	4a1c      	ldr	r2, [pc, #112]	; (de0 <system_clock_source_enable+0xa0>)
     d6e:	8a13      	ldrh	r3, [r2, #16]
     d70:	2102      	movs	r1, #2
     d72:	430b      	orrs	r3, r1
     d74:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     d76:	2000      	movs	r0, #0
		break;
     d78:	e02f      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d7a:	4a19      	ldr	r2, [pc, #100]	; (de0 <system_clock_source_enable+0xa0>)
     d7c:	8a93      	ldrh	r3, [r2, #20]
     d7e:	2102      	movs	r1, #2
     d80:	430b      	orrs	r3, r1
     d82:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     d84:	2000      	movs	r0, #0
		break;
     d86:	e028      	b.n	dda <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     d88:	4916      	ldr	r1, [pc, #88]	; (de4 <system_clock_source_enable+0xa4>)
     d8a:	680b      	ldr	r3, [r1, #0]
     d8c:	2202      	movs	r2, #2
     d8e:	4313      	orrs	r3, r2
     d90:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     d92:	4b13      	ldr	r3, [pc, #76]	; (de0 <system_clock_source_enable+0xa0>)
     d94:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d96:	0019      	movs	r1, r3
     d98:	320e      	adds	r2, #14
     d9a:	68cb      	ldr	r3, [r1, #12]
     d9c:	421a      	tst	r2, r3
     d9e:	d0fc      	beq.n	d9a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     da0:	4a10      	ldr	r2, [pc, #64]	; (de4 <system_clock_source_enable+0xa4>)
     da2:	6891      	ldr	r1, [r2, #8]
     da4:	4b0e      	ldr	r3, [pc, #56]	; (de0 <system_clock_source_enable+0xa0>)
     da6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     da8:	6852      	ldr	r2, [r2, #4]
     daa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     dac:	2200      	movs	r2, #0
     dae:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     db0:	0019      	movs	r1, r3
     db2:	3210      	adds	r2, #16
     db4:	68cb      	ldr	r3, [r1, #12]
     db6:	421a      	tst	r2, r3
     db8:	d0fc      	beq.n	db4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     dba:	4b0a      	ldr	r3, [pc, #40]	; (de4 <system_clock_source_enable+0xa4>)
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	b29b      	uxth	r3, r3
     dc0:	4a07      	ldr	r2, [pc, #28]	; (de0 <system_clock_source_enable+0xa0>)
     dc2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     dc4:	2000      	movs	r0, #0
     dc6:	e008      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     dc8:	4905      	ldr	r1, [pc, #20]	; (de0 <system_clock_source_enable+0xa0>)
     dca:	2244      	movs	r2, #68	; 0x44
     dcc:	5c8b      	ldrb	r3, [r1, r2]
     dce:	2002      	movs	r0, #2
     dd0:	4303      	orrs	r3, r0
     dd2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     dd4:	2000      	movs	r0, #0
		break;
     dd6:	e000      	b.n	dda <system_clock_source_enable+0x9a>
		return STATUS_OK;
     dd8:	2000      	movs	r0, #0
}
     dda:	4770      	bx	lr
     ddc:	00004500 	.word	0x00004500
     de0:	40000800 	.word	0x40000800
     de4:	200000ac 	.word	0x200000ac

00000de8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     de8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dea:	46c6      	mov	lr, r8
     dec:	b500      	push	{lr}
     dee:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df0:	22c2      	movs	r2, #194	; 0xc2
     df2:	00d2      	lsls	r2, r2, #3
     df4:	4b21      	ldr	r3, [pc, #132]	; (e7c <system_clock_init+0x94>)
     df6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     df8:	4a21      	ldr	r2, [pc, #132]	; (e80 <system_clock_init+0x98>)
     dfa:	6853      	ldr	r3, [r2, #4]
     dfc:	211e      	movs	r1, #30
     dfe:	438b      	bics	r3, r1
     e00:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     e02:	2301      	movs	r3, #1
     e04:	466a      	mov	r2, sp
     e06:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e08:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e0a:	4d1e      	ldr	r5, [pc, #120]	; (e84 <system_clock_init+0x9c>)
     e0c:	b2e0      	uxtb	r0, r4
     e0e:	4669      	mov	r1, sp
     e10:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e12:	3401      	adds	r4, #1
     e14:	2c25      	cmp	r4, #37	; 0x25
     e16:	d1f9      	bne.n	e0c <system_clock_init+0x24>
	config->run_in_standby  = false;
     e18:	a803      	add	r0, sp, #12
     e1a:	2400      	movs	r4, #0
     e1c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     e1e:	2301      	movs	r3, #1
     e20:	4698      	mov	r8, r3
     e22:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e24:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e26:	4b18      	ldr	r3, [pc, #96]	; (e88 <system_clock_init+0xa0>)
     e28:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e2a:	2006      	movs	r0, #6
     e2c:	4b17      	ldr	r3, [pc, #92]	; (e8c <system_clock_init+0xa4>)
     e2e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e30:	4b17      	ldr	r3, [pc, #92]	; (e90 <system_clock_init+0xa8>)
     e32:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     e34:	466b      	mov	r3, sp
     e36:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e38:	2706      	movs	r7, #6
     e3a:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
     e3c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     e3e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     e40:	2310      	movs	r3, #16
     e42:	9301      	str	r3, [sp, #4]
     e44:	4669      	mov	r1, sp
     e46:	2003      	movs	r0, #3
     e48:	4e12      	ldr	r6, [pc, #72]	; (e94 <system_clock_init+0xac>)
     e4a:	47b0      	blx	r6
     e4c:	2003      	movs	r0, #3
     e4e:	4d12      	ldr	r5, [pc, #72]	; (e98 <system_clock_init+0xb0>)
     e50:	47a8      	blx	r5
	PM->CPUSEL.reg = (uint32_t)divider;
     e52:	4b12      	ldr	r3, [pc, #72]	; (e9c <system_clock_init+0xb4>)
     e54:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e56:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e58:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e5a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     e5c:	4643      	mov	r3, r8
     e5e:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
     e60:	466b      	mov	r3, sp
     e62:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e64:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
     e66:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     e68:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e6a:	4669      	mov	r1, sp
     e6c:	2000      	movs	r0, #0
     e6e:	47b0      	blx	r6
     e70:	2000      	movs	r0, #0
     e72:	47a8      	blx	r5
#endif
}
     e74:	b004      	add	sp, #16
     e76:	bc04      	pop	{r2}
     e78:	4690      	mov	r8, r2
     e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e7c:	40000800 	.word	0x40000800
     e80:	41004000 	.word	0x41004000
     e84:	000010d9 	.word	0x000010d9
     e88:	00000d05 	.word	0x00000d05
     e8c:	00000d41 	.word	0x00000d41
     e90:	00000ea1 	.word	0x00000ea1
     e94:	00000ec5 	.word	0x00000ec5
     e98:	00000f7d 	.word	0x00000f7d
     e9c:	40000400 	.word	0x40000400

00000ea0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     ea0:	4a06      	ldr	r2, [pc, #24]	; (ebc <system_gclk_init+0x1c>)
     ea2:	6993      	ldr	r3, [r2, #24]
     ea4:	2108      	movs	r1, #8
     ea6:	430b      	orrs	r3, r1
     ea8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     eaa:	2201      	movs	r2, #1
     eac:	4b04      	ldr	r3, [pc, #16]	; (ec0 <system_gclk_init+0x20>)
     eae:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     eb0:	0019      	movs	r1, r3
     eb2:	780b      	ldrb	r3, [r1, #0]
     eb4:	4213      	tst	r3, r2
     eb6:	d1fc      	bne.n	eb2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     eb8:	4770      	bx	lr
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	40000400 	.word	0x40000400
     ec0:	40000c00 	.word	0x40000c00

00000ec4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ec4:	b570      	push	{r4, r5, r6, lr}
     ec6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     ec8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     eca:	780d      	ldrb	r5, [r1, #0]
     ecc:	022d      	lsls	r5, r5, #8
     ece:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ed0:	784b      	ldrb	r3, [r1, #1]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d002      	beq.n	edc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ed6:	2380      	movs	r3, #128	; 0x80
     ed8:	02db      	lsls	r3, r3, #11
     eda:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     edc:	7a4b      	ldrb	r3, [r1, #9]
     ede:	2b00      	cmp	r3, #0
     ee0:	d002      	beq.n	ee8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     ee2:	2380      	movs	r3, #128	; 0x80
     ee4:	031b      	lsls	r3, r3, #12
     ee6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ee8:	6848      	ldr	r0, [r1, #4]
     eea:	2801      	cmp	r0, #1
     eec:	d910      	bls.n	f10 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     eee:	1e43      	subs	r3, r0, #1
     ef0:	4218      	tst	r0, r3
     ef2:	d134      	bne.n	f5e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     ef4:	2802      	cmp	r0, #2
     ef6:	d930      	bls.n	f5a <system_gclk_gen_set_config+0x96>
     ef8:	2302      	movs	r3, #2
     efa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     efc:	3201      	adds	r2, #1
						mask <<= 1) {
     efe:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f00:	4298      	cmp	r0, r3
     f02:	d8fb      	bhi.n	efc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f04:	0212      	lsls	r2, r2, #8
     f06:	4332      	orrs	r2, r6
     f08:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f0a:	2380      	movs	r3, #128	; 0x80
     f0c:	035b      	lsls	r3, r3, #13
     f0e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f10:	7a0b      	ldrb	r3, [r1, #8]
     f12:	2b00      	cmp	r3, #0
     f14:	d002      	beq.n	f1c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f16:	2380      	movs	r3, #128	; 0x80
     f18:	039b      	lsls	r3, r3, #14
     f1a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f1c:	4a13      	ldr	r2, [pc, #76]	; (f6c <system_gclk_gen_set_config+0xa8>)
     f1e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f20:	b25b      	sxtb	r3, r3
     f22:	2b00      	cmp	r3, #0
     f24:	dbfb      	blt.n	f1e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f26:	4b12      	ldr	r3, [pc, #72]	; (f70 <system_gclk_gen_set_config+0xac>)
     f28:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f2a:	4b12      	ldr	r3, [pc, #72]	; (f74 <system_gclk_gen_set_config+0xb0>)
     f2c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f2e:	4a0f      	ldr	r2, [pc, #60]	; (f6c <system_gclk_gen_set_config+0xa8>)
     f30:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f32:	b25b      	sxtb	r3, r3
     f34:	2b00      	cmp	r3, #0
     f36:	dbfb      	blt.n	f30 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f38:	4b0c      	ldr	r3, [pc, #48]	; (f6c <system_gclk_gen_set_config+0xa8>)
     f3a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f3c:	001a      	movs	r2, r3
     f3e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     f40:	b25b      	sxtb	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	dbfb      	blt.n	f3e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f46:	4a09      	ldr	r2, [pc, #36]	; (f6c <system_gclk_gen_set_config+0xa8>)
     f48:	6853      	ldr	r3, [r2, #4]
     f4a:	2180      	movs	r1, #128	; 0x80
     f4c:	0249      	lsls	r1, r1, #9
     f4e:	400b      	ands	r3, r1
     f50:	431d      	orrs	r5, r3
     f52:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f54:	4b08      	ldr	r3, [pc, #32]	; (f78 <system_gclk_gen_set_config+0xb4>)
     f56:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f58:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f5a:	2200      	movs	r2, #0
     f5c:	e7d2      	b.n	f04 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     f5e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     f60:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f62:	2380      	movs	r3, #128	; 0x80
     f64:	029b      	lsls	r3, r3, #10
     f66:	431d      	orrs	r5, r3
     f68:	e7d2      	b.n	f10 <system_gclk_gen_set_config+0x4c>
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	40000c00 	.word	0x40000c00
     f70:	000001ed 	.word	0x000001ed
     f74:	40000c08 	.word	0x40000c08
     f78:	0000022d 	.word	0x0000022d

00000f7c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f7c:	b510      	push	{r4, lr}
     f7e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f80:	4a0b      	ldr	r2, [pc, #44]	; (fb0 <system_gclk_gen_enable+0x34>)
     f82:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f84:	b25b      	sxtb	r3, r3
     f86:	2b00      	cmp	r3, #0
     f88:	dbfb      	blt.n	f82 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     f8a:	4b0a      	ldr	r3, [pc, #40]	; (fb4 <system_gclk_gen_enable+0x38>)
     f8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f8e:	4b0a      	ldr	r3, [pc, #40]	; (fb8 <system_gclk_gen_enable+0x3c>)
     f90:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f92:	4a07      	ldr	r2, [pc, #28]	; (fb0 <system_gclk_gen_enable+0x34>)
     f94:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f96:	b25b      	sxtb	r3, r3
     f98:	2b00      	cmp	r3, #0
     f9a:	dbfb      	blt.n	f94 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f9c:	4a04      	ldr	r2, [pc, #16]	; (fb0 <system_gclk_gen_enable+0x34>)
     f9e:	6851      	ldr	r1, [r2, #4]
     fa0:	2380      	movs	r3, #128	; 0x80
     fa2:	025b      	lsls	r3, r3, #9
     fa4:	430b      	orrs	r3, r1
     fa6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     fa8:	4b04      	ldr	r3, [pc, #16]	; (fbc <system_gclk_gen_enable+0x40>)
     faa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fac:	bd10      	pop	{r4, pc}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	40000c00 	.word	0x40000c00
     fb4:	000001ed 	.word	0x000001ed
     fb8:	40000c04 	.word	0x40000c04
     fbc:	0000022d 	.word	0x0000022d

00000fc0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fc4:	4a1a      	ldr	r2, [pc, #104]	; (1030 <system_gclk_gen_get_hz+0x70>)
     fc6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fc8:	b25b      	sxtb	r3, r3
     fca:	2b00      	cmp	r3, #0
     fcc:	dbfb      	blt.n	fc6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     fce:	4b19      	ldr	r3, [pc, #100]	; (1034 <system_gclk_gen_get_hz+0x74>)
     fd0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fd2:	4b19      	ldr	r3, [pc, #100]	; (1038 <system_gclk_gen_get_hz+0x78>)
     fd4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fd6:	4a16      	ldr	r2, [pc, #88]	; (1030 <system_gclk_gen_get_hz+0x70>)
     fd8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fda:	b25b      	sxtb	r3, r3
     fdc:	2b00      	cmp	r3, #0
     fde:	dbfb      	blt.n	fd8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     fe0:	4e13      	ldr	r6, [pc, #76]	; (1030 <system_gclk_gen_get_hz+0x70>)
     fe2:	6870      	ldr	r0, [r6, #4]
     fe4:	04c0      	lsls	r0, r0, #19
     fe6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     fe8:	4b14      	ldr	r3, [pc, #80]	; (103c <system_gclk_gen_get_hz+0x7c>)
     fea:	4798      	blx	r3
     fec:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fee:	4b12      	ldr	r3, [pc, #72]	; (1038 <system_gclk_gen_get_hz+0x78>)
     ff0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ff2:	6876      	ldr	r6, [r6, #4]
     ff4:	02f6      	lsls	r6, r6, #11
     ff6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ff8:	4b11      	ldr	r3, [pc, #68]	; (1040 <system_gclk_gen_get_hz+0x80>)
     ffa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ffc:	4a0c      	ldr	r2, [pc, #48]	; (1030 <system_gclk_gen_get_hz+0x70>)
     ffe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1000:	b25b      	sxtb	r3, r3
    1002:	2b00      	cmp	r3, #0
    1004:	dbfb      	blt.n	ffe <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1006:	4b0a      	ldr	r3, [pc, #40]	; (1030 <system_gclk_gen_get_hz+0x70>)
    1008:	689c      	ldr	r4, [r3, #8]
    100a:	0224      	lsls	r4, r4, #8
    100c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    100e:	4b0d      	ldr	r3, [pc, #52]	; (1044 <system_gclk_gen_get_hz+0x84>)
    1010:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1012:	2e00      	cmp	r6, #0
    1014:	d107      	bne.n	1026 <system_gclk_gen_get_hz+0x66>
    1016:	2c01      	cmp	r4, #1
    1018:	d907      	bls.n	102a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    101a:	0021      	movs	r1, r4
    101c:	0028      	movs	r0, r5
    101e:	4b0a      	ldr	r3, [pc, #40]	; (1048 <system_gclk_gen_get_hz+0x88>)
    1020:	4798      	blx	r3
    1022:	0005      	movs	r5, r0
    1024:	e001      	b.n	102a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1026:	3401      	adds	r4, #1
    1028:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    102a:	0028      	movs	r0, r5
    102c:	bd70      	pop	{r4, r5, r6, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	40000c00 	.word	0x40000c00
    1034:	000001ed 	.word	0x000001ed
    1038:	40000c04 	.word	0x40000c04
    103c:	00000c71 	.word	0x00000c71
    1040:	40000c08 	.word	0x40000c08
    1044:	0000022d 	.word	0x0000022d
    1048:	00002fad 	.word	0x00002fad

0000104c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    104c:	b510      	push	{r4, lr}
    104e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1050:	4b06      	ldr	r3, [pc, #24]	; (106c <system_gclk_chan_enable+0x20>)
    1052:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1054:	4b06      	ldr	r3, [pc, #24]	; (1070 <system_gclk_chan_enable+0x24>)
    1056:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1058:	4a06      	ldr	r2, [pc, #24]	; (1074 <system_gclk_chan_enable+0x28>)
    105a:	8853      	ldrh	r3, [r2, #2]
    105c:	2180      	movs	r1, #128	; 0x80
    105e:	01c9      	lsls	r1, r1, #7
    1060:	430b      	orrs	r3, r1
    1062:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1064:	4b04      	ldr	r3, [pc, #16]	; (1078 <system_gclk_chan_enable+0x2c>)
    1066:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1068:	bd10      	pop	{r4, pc}
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	000001ed 	.word	0x000001ed
    1070:	40000c02 	.word	0x40000c02
    1074:	40000c00 	.word	0x40000c00
    1078:	0000022d 	.word	0x0000022d

0000107c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    107c:	b510      	push	{r4, lr}
    107e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1080:	4b0f      	ldr	r3, [pc, #60]	; (10c0 <system_gclk_chan_disable+0x44>)
    1082:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1084:	4b0f      	ldr	r3, [pc, #60]	; (10c4 <system_gclk_chan_disable+0x48>)
    1086:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1088:	4a0f      	ldr	r2, [pc, #60]	; (10c8 <system_gclk_chan_disable+0x4c>)
    108a:	8853      	ldrh	r3, [r2, #2]
    108c:	051b      	lsls	r3, r3, #20
    108e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1090:	8853      	ldrh	r3, [r2, #2]
    1092:	490e      	ldr	r1, [pc, #56]	; (10cc <system_gclk_chan_disable+0x50>)
    1094:	400b      	ands	r3, r1
    1096:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1098:	8853      	ldrh	r3, [r2, #2]
    109a:	490d      	ldr	r1, [pc, #52]	; (10d0 <system_gclk_chan_disable+0x54>)
    109c:	400b      	ands	r3, r1
    109e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    10a0:	0011      	movs	r1, r2
    10a2:	2280      	movs	r2, #128	; 0x80
    10a4:	01d2      	lsls	r2, r2, #7
    10a6:	884b      	ldrh	r3, [r1, #2]
    10a8:	4213      	tst	r3, r2
    10aa:	d1fc      	bne.n	10a6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    10ac:	4906      	ldr	r1, [pc, #24]	; (10c8 <system_gclk_chan_disable+0x4c>)
    10ae:	884a      	ldrh	r2, [r1, #2]
    10b0:	0203      	lsls	r3, r0, #8
    10b2:	4806      	ldr	r0, [pc, #24]	; (10cc <system_gclk_chan_disable+0x50>)
    10b4:	4002      	ands	r2, r0
    10b6:	4313      	orrs	r3, r2
    10b8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    10ba:	4b06      	ldr	r3, [pc, #24]	; (10d4 <system_gclk_chan_disable+0x58>)
    10bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10be:	bd10      	pop	{r4, pc}
    10c0:	000001ed 	.word	0x000001ed
    10c4:	40000c02 	.word	0x40000c02
    10c8:	40000c00 	.word	0x40000c00
    10cc:	fffff0ff 	.word	0xfffff0ff
    10d0:	ffffbfff 	.word	0xffffbfff
    10d4:	0000022d 	.word	0x0000022d

000010d8 <system_gclk_chan_set_config>:
{
    10d8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    10da:	780c      	ldrb	r4, [r1, #0]
    10dc:	0224      	lsls	r4, r4, #8
    10de:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    10e0:	4b02      	ldr	r3, [pc, #8]	; (10ec <system_gclk_chan_set_config+0x14>)
    10e2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    10e4:	b2a4      	uxth	r4, r4
    10e6:	4b02      	ldr	r3, [pc, #8]	; (10f0 <system_gclk_chan_set_config+0x18>)
    10e8:	805c      	strh	r4, [r3, #2]
}
    10ea:	bd10      	pop	{r4, pc}
    10ec:	0000107d 	.word	0x0000107d
    10f0:	40000c00 	.word	0x40000c00

000010f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    10f4:	b510      	push	{r4, lr}
    10f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10f8:	4b06      	ldr	r3, [pc, #24]	; (1114 <system_gclk_chan_get_hz+0x20>)
    10fa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10fc:	4b06      	ldr	r3, [pc, #24]	; (1118 <system_gclk_chan_get_hz+0x24>)
    10fe:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1100:	4b06      	ldr	r3, [pc, #24]	; (111c <system_gclk_chan_get_hz+0x28>)
    1102:	885c      	ldrh	r4, [r3, #2]
    1104:	0524      	lsls	r4, r4, #20
    1106:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1108:	4b05      	ldr	r3, [pc, #20]	; (1120 <system_gclk_chan_get_hz+0x2c>)
    110a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    110c:	0020      	movs	r0, r4
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <system_gclk_chan_get_hz+0x30>)
    1110:	4798      	blx	r3
}
    1112:	bd10      	pop	{r4, pc}
    1114:	000001ed 	.word	0x000001ed
    1118:	40000c02 	.word	0x40000c02
    111c:	40000c00 	.word	0x40000c00
    1120:	0000022d 	.word	0x0000022d
    1124:	00000fc1 	.word	0x00000fc1

00001128 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1128:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    112a:	78d3      	ldrb	r3, [r2, #3]
    112c:	2b00      	cmp	r3, #0
    112e:	d135      	bne.n	119c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1130:	7813      	ldrb	r3, [r2, #0]
    1132:	2b80      	cmp	r3, #128	; 0x80
    1134:	d029      	beq.n	118a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1136:	061b      	lsls	r3, r3, #24
    1138:	2480      	movs	r4, #128	; 0x80
    113a:	0264      	lsls	r4, r4, #9
    113c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    113e:	7854      	ldrb	r4, [r2, #1]
    1140:	2502      	movs	r5, #2
    1142:	43ac      	bics	r4, r5
    1144:	d106      	bne.n	1154 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1146:	7894      	ldrb	r4, [r2, #2]
    1148:	2c00      	cmp	r4, #0
    114a:	d120      	bne.n	118e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    114c:	2480      	movs	r4, #128	; 0x80
    114e:	02a4      	lsls	r4, r4, #10
    1150:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1152:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1154:	7854      	ldrb	r4, [r2, #1]
    1156:	3c01      	subs	r4, #1
    1158:	2c01      	cmp	r4, #1
    115a:	d91c      	bls.n	1196 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    115c:	040d      	lsls	r5, r1, #16
    115e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1160:	24a0      	movs	r4, #160	; 0xa0
    1162:	05e4      	lsls	r4, r4, #23
    1164:	432c      	orrs	r4, r5
    1166:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1168:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    116a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    116c:	24d0      	movs	r4, #208	; 0xd0
    116e:	0624      	lsls	r4, r4, #24
    1170:	432c      	orrs	r4, r5
    1172:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1174:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1176:	78d4      	ldrb	r4, [r2, #3]
    1178:	2c00      	cmp	r4, #0
    117a:	d122      	bne.n	11c2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    117c:	035b      	lsls	r3, r3, #13
    117e:	d51c      	bpl.n	11ba <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1180:	7893      	ldrb	r3, [r2, #2]
    1182:	2b01      	cmp	r3, #1
    1184:	d01e      	beq.n	11c4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1186:	6141      	str	r1, [r0, #20]
    1188:	e017      	b.n	11ba <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    118a:	2300      	movs	r3, #0
    118c:	e7d7      	b.n	113e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    118e:	24c0      	movs	r4, #192	; 0xc0
    1190:	02e4      	lsls	r4, r4, #11
    1192:	4323      	orrs	r3, r4
    1194:	e7dd      	b.n	1152 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1196:	4c0d      	ldr	r4, [pc, #52]	; (11cc <_system_pinmux_config+0xa4>)
    1198:	4023      	ands	r3, r4
    119a:	e7df      	b.n	115c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    119c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    119e:	040c      	lsls	r4, r1, #16
    11a0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11a2:	23a0      	movs	r3, #160	; 0xa0
    11a4:	05db      	lsls	r3, r3, #23
    11a6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11a8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11aa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11ac:	23d0      	movs	r3, #208	; 0xd0
    11ae:	061b      	lsls	r3, r3, #24
    11b0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11b2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    11b4:	78d3      	ldrb	r3, [r2, #3]
    11b6:	2b00      	cmp	r3, #0
    11b8:	d103      	bne.n	11c2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11ba:	7853      	ldrb	r3, [r2, #1]
    11bc:	3b01      	subs	r3, #1
    11be:	2b01      	cmp	r3, #1
    11c0:	d902      	bls.n	11c8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    11c2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    11c4:	6181      	str	r1, [r0, #24]
    11c6:	e7f8      	b.n	11ba <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    11c8:	6081      	str	r1, [r0, #8]
}
    11ca:	e7fa      	b.n	11c2 <_system_pinmux_config+0x9a>
    11cc:	fffbffff 	.word	0xfffbffff

000011d0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    11d0:	b510      	push	{r4, lr}
    11d2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11d4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11d6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11d8:	2900      	cmp	r1, #0
    11da:	d104      	bne.n	11e6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    11dc:	0943      	lsrs	r3, r0, #5
    11de:	01db      	lsls	r3, r3, #7
    11e0:	4905      	ldr	r1, [pc, #20]	; (11f8 <system_pinmux_pin_set_config+0x28>)
    11e2:	468c      	mov	ip, r1
    11e4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    11e6:	241f      	movs	r4, #31
    11e8:	4020      	ands	r0, r4
    11ea:	2101      	movs	r1, #1
    11ec:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    11ee:	0018      	movs	r0, r3
    11f0:	4b02      	ldr	r3, [pc, #8]	; (11fc <system_pinmux_pin_set_config+0x2c>)
    11f2:	4798      	blx	r3
}
    11f4:	bd10      	pop	{r4, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	41004400 	.word	0x41004400
    11fc:	00001129 	.word	0x00001129

00001200 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1200:	4770      	bx	lr
	...

00001204 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1204:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1206:	4b05      	ldr	r3, [pc, #20]	; (121c <system_init+0x18>)
    1208:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    120a:	4b05      	ldr	r3, [pc, #20]	; (1220 <system_init+0x1c>)
    120c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    120e:	4b05      	ldr	r3, [pc, #20]	; (1224 <system_init+0x20>)
    1210:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1212:	4b05      	ldr	r3, [pc, #20]	; (1228 <system_init+0x24>)
    1214:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1216:	4b05      	ldr	r3, [pc, #20]	; (122c <system_init+0x28>)
    1218:	4798      	blx	r3
}
    121a:	bd10      	pop	{r4, pc}
    121c:	00000de9 	.word	0x00000de9
    1220:	0000025d 	.word	0x0000025d
    1224:	00001201 	.word	0x00001201
    1228:	00001201 	.word	0x00001201
    122c:	00001201 	.word	0x00001201

00001230 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1230:	e7fe      	b.n	1230 <Dummy_Handler>
	...

00001234 <Reset_Handler>:
{
    1234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1236:	4a2a      	ldr	r2, [pc, #168]	; (12e0 <Reset_Handler+0xac>)
    1238:	4b2a      	ldr	r3, [pc, #168]	; (12e4 <Reset_Handler+0xb0>)
    123a:	429a      	cmp	r2, r3
    123c:	d011      	beq.n	1262 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    123e:	001a      	movs	r2, r3
    1240:	4b29      	ldr	r3, [pc, #164]	; (12e8 <Reset_Handler+0xb4>)
    1242:	429a      	cmp	r2, r3
    1244:	d20d      	bcs.n	1262 <Reset_Handler+0x2e>
    1246:	4a29      	ldr	r2, [pc, #164]	; (12ec <Reset_Handler+0xb8>)
    1248:	3303      	adds	r3, #3
    124a:	1a9b      	subs	r3, r3, r2
    124c:	089b      	lsrs	r3, r3, #2
    124e:	3301      	adds	r3, #1
    1250:	009b      	lsls	r3, r3, #2
    1252:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1254:	4823      	ldr	r0, [pc, #140]	; (12e4 <Reset_Handler+0xb0>)
    1256:	4922      	ldr	r1, [pc, #136]	; (12e0 <Reset_Handler+0xac>)
    1258:	588c      	ldr	r4, [r1, r2]
    125a:	5084      	str	r4, [r0, r2]
    125c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    125e:	429a      	cmp	r2, r3
    1260:	d1fa      	bne.n	1258 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1262:	4a23      	ldr	r2, [pc, #140]	; (12f0 <Reset_Handler+0xbc>)
    1264:	4b23      	ldr	r3, [pc, #140]	; (12f4 <Reset_Handler+0xc0>)
    1266:	429a      	cmp	r2, r3
    1268:	d20a      	bcs.n	1280 <Reset_Handler+0x4c>
    126a:	43d3      	mvns	r3, r2
    126c:	4921      	ldr	r1, [pc, #132]	; (12f4 <Reset_Handler+0xc0>)
    126e:	185b      	adds	r3, r3, r1
    1270:	2103      	movs	r1, #3
    1272:	438b      	bics	r3, r1
    1274:	3304      	adds	r3, #4
    1276:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1278:	2100      	movs	r1, #0
    127a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    127c:	4293      	cmp	r3, r2
    127e:	d1fc      	bne.n	127a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1280:	4a1d      	ldr	r2, [pc, #116]	; (12f8 <Reset_Handler+0xc4>)
    1282:	21ff      	movs	r1, #255	; 0xff
    1284:	4b1d      	ldr	r3, [pc, #116]	; (12fc <Reset_Handler+0xc8>)
    1286:	438b      	bics	r3, r1
    1288:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    128a:	39fd      	subs	r1, #253	; 0xfd
    128c:	2390      	movs	r3, #144	; 0x90
    128e:	005b      	lsls	r3, r3, #1
    1290:	4a1b      	ldr	r2, [pc, #108]	; (1300 <Reset_Handler+0xcc>)
    1292:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1294:	4a1b      	ldr	r2, [pc, #108]	; (1304 <Reset_Handler+0xd0>)
    1296:	78d3      	ldrb	r3, [r2, #3]
    1298:	2503      	movs	r5, #3
    129a:	43ab      	bics	r3, r5
    129c:	2402      	movs	r4, #2
    129e:	4323      	orrs	r3, r4
    12a0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    12a2:	78d3      	ldrb	r3, [r2, #3]
    12a4:	270c      	movs	r7, #12
    12a6:	43bb      	bics	r3, r7
    12a8:	2608      	movs	r6, #8
    12aa:	4333      	orrs	r3, r6
    12ac:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    12ae:	4b16      	ldr	r3, [pc, #88]	; (1308 <Reset_Handler+0xd4>)
    12b0:	7b98      	ldrb	r0, [r3, #14]
    12b2:	2230      	movs	r2, #48	; 0x30
    12b4:	4390      	bics	r0, r2
    12b6:	2220      	movs	r2, #32
    12b8:	4310      	orrs	r0, r2
    12ba:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    12bc:	7b99      	ldrb	r1, [r3, #14]
    12be:	43b9      	bics	r1, r7
    12c0:	4331      	orrs	r1, r6
    12c2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    12c4:	7b9a      	ldrb	r2, [r3, #14]
    12c6:	43aa      	bics	r2, r5
    12c8:	4322      	orrs	r2, r4
    12ca:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    12cc:	4a0f      	ldr	r2, [pc, #60]	; (130c <Reset_Handler+0xd8>)
    12ce:	6853      	ldr	r3, [r2, #4]
    12d0:	2180      	movs	r1, #128	; 0x80
    12d2:	430b      	orrs	r3, r1
    12d4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    12d6:	4b0e      	ldr	r3, [pc, #56]	; (1310 <Reset_Handler+0xdc>)
    12d8:	4798      	blx	r3
        main();
    12da:	4b0e      	ldr	r3, [pc, #56]	; (1314 <Reset_Handler+0xe0>)
    12dc:	4798      	blx	r3
    12de:	e7fe      	b.n	12de <Reset_Handler+0xaa>
    12e0:	00004738 	.word	0x00004738
    12e4:	20000000 	.word	0x20000000
    12e8:	2000006c 	.word	0x2000006c
    12ec:	20000004 	.word	0x20000004
    12f0:	2000006c 	.word	0x2000006c
    12f4:	20003120 	.word	0x20003120
    12f8:	e000ed00 	.word	0xe000ed00
    12fc:	00000000 	.word	0x00000000
    1300:	41007000 	.word	0x41007000
    1304:	41005000 	.word	0x41005000
    1308:	41004800 	.word	0x41004800
    130c:	41004000 	.word	0x41004000
    1310:	000033e5 	.word	0x000033e5
    1314:	00002f81 	.word	0x00002f81

00001318 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1318:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    131a:	4a06      	ldr	r2, [pc, #24]	; (1334 <_sbrk+0x1c>)
    131c:	6812      	ldr	r2, [r2, #0]
    131e:	2a00      	cmp	r2, #0
    1320:	d004      	beq.n	132c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1322:	4a04      	ldr	r2, [pc, #16]	; (1334 <_sbrk+0x1c>)
    1324:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1326:	18c3      	adds	r3, r0, r3
    1328:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    132a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    132c:	4902      	ldr	r1, [pc, #8]	; (1338 <_sbrk+0x20>)
    132e:	4a01      	ldr	r2, [pc, #4]	; (1334 <_sbrk+0x1c>)
    1330:	6011      	str	r1, [r2, #0]
    1332:	e7f6      	b.n	1322 <_sbrk+0xa>
    1334:	200000c4 	.word	0x200000c4
    1338:	20005120 	.word	0x20005120

0000133c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    133c:	2001      	movs	r0, #1
    133e:	4240      	negs	r0, r0
    1340:	4770      	bx	lr

00001342 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1342:	2380      	movs	r3, #128	; 0x80
    1344:	019b      	lsls	r3, r3, #6
    1346:	604b      	str	r3, [r1, #4]

	return 0;
}
    1348:	2000      	movs	r0, #0
    134a:	4770      	bx	lr

0000134c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    134c:	2001      	movs	r0, #1
    134e:	4770      	bx	lr

00001350 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1350:	2000      	movs	r0, #0
    1352:	4770      	bx	lr

00001354 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1354:	0003      	movs	r3, r0
    1356:	3308      	adds	r3, #8
    1358:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    135a:	2201      	movs	r2, #1
    135c:	4252      	negs	r2, r2
    135e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1360:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1362:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1364:	2300      	movs	r3, #0
    1366:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1368:	4770      	bx	lr

0000136a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    136a:	2300      	movs	r3, #0
    136c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    136e:	4770      	bx	lr

00001370 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1370:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1372:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1374:	689a      	ldr	r2, [r3, #8]
    1376:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1378:	689a      	ldr	r2, [r3, #8]
    137a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    137c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    137e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1380:	6803      	ldr	r3, [r0, #0]
    1382:	3301      	adds	r3, #1
    1384:	6003      	str	r3, [r0, #0]
}
    1386:	4770      	bx	lr

00001388 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1388:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    138a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    138c:	0002      	movs	r2, r0
    138e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    1390:	1c63      	adds	r3, r4, #1
    1392:	d102      	bne.n	139a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    1394:	6902      	ldr	r2, [r0, #16]
    1396:	e004      	b.n	13a2 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1398:	001a      	movs	r2, r3
    139a:	6853      	ldr	r3, [r2, #4]
    139c:	681d      	ldr	r5, [r3, #0]
    139e:	42ac      	cmp	r4, r5
    13a0:	d2fa      	bcs.n	1398 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    13a2:	6853      	ldr	r3, [r2, #4]
    13a4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    13a6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    13a8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    13aa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    13ac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    13ae:	6803      	ldr	r3, [r0, #0]
    13b0:	3301      	adds	r3, #1
    13b2:	6003      	str	r3, [r0, #0]
}
    13b4:	bd30      	pop	{r4, r5, pc}

000013b6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    13b6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    13b8:	6842      	ldr	r2, [r0, #4]
    13ba:	6881      	ldr	r1, [r0, #8]
    13bc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    13be:	6882      	ldr	r2, [r0, #8]
    13c0:	6841      	ldr	r1, [r0, #4]
    13c2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    13c4:	685a      	ldr	r2, [r3, #4]
    13c6:	4290      	cmp	r0, r2
    13c8:	d006      	beq.n	13d8 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    13ca:	2200      	movs	r2, #0
    13cc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    13ce:	681a      	ldr	r2, [r3, #0]
    13d0:	3a01      	subs	r2, #1
    13d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    13d4:	6818      	ldr	r0, [r3, #0]
}
    13d6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    13d8:	6882      	ldr	r2, [r0, #8]
    13da:	605a      	str	r2, [r3, #4]
    13dc:	e7f5      	b.n	13ca <uxListRemove+0x14>
	...

000013e0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    13e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    13e2:	2300      	movs	r3, #0
    13e4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    13e6:	4b06      	ldr	r3, [pc, #24]	; (1400 <prvTaskExitError+0x20>)
    13e8:	681b      	ldr	r3, [r3, #0]
    13ea:	3301      	adds	r3, #1
    13ec:	d001      	beq.n	13f2 <prvTaskExitError+0x12>
    13ee:	b672      	cpsid	i
    13f0:	e7fe      	b.n	13f0 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    13f2:	b672      	cpsid	i
	while( ulDummy == 0 )
    13f4:	9b01      	ldr	r3, [sp, #4]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d0fc      	beq.n	13f4 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    13fa:	b002      	add	sp, #8
    13fc:	4770      	bx	lr
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	20000004 	.word	0x20000004
	...

00001410 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1410:	4a0b      	ldr	r2, [pc, #44]	; (1440 <pxCurrentTCBConst2>)
    1412:	6813      	ldr	r3, [r2, #0]
    1414:	6818      	ldr	r0, [r3, #0]
    1416:	3020      	adds	r0, #32
    1418:	f380 8809 	msr	PSP, r0
    141c:	2002      	movs	r0, #2
    141e:	f380 8814 	msr	CONTROL, r0
    1422:	f3bf 8f6f 	isb	sy
    1426:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1428:	46ae      	mov	lr, r5
    142a:	bc08      	pop	{r3}
    142c:	bc04      	pop	{r2}
    142e:	b662      	cpsie	i
    1430:	4718      	bx	r3
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	46c0      	nop			; (mov r8, r8)
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	46c0      	nop			; (mov r8, r8)
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	46c0      	nop			; (mov r8, r8)
    143e:	46c0      	nop			; (mov r8, r8)

00001440 <pxCurrentTCBConst2>:
    1440:	20002ed0 	.word	0x20002ed0

00001444 <pxPortInitialiseStack>:
{
    1444:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1446:	1f03      	subs	r3, r0, #4
    1448:	2480      	movs	r4, #128	; 0x80
    144a:	0464      	lsls	r4, r4, #17
    144c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    144e:	3b04      	subs	r3, #4
    1450:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1452:	3b04      	subs	r3, #4
    1454:	4902      	ldr	r1, [pc, #8]	; (1460 <pxPortInitialiseStack+0x1c>)
    1456:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1458:	3b14      	subs	r3, #20
    145a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    145c:	3840      	subs	r0, #64	; 0x40
}
    145e:	bd10      	pop	{r4, pc}
    1460:	000013e1 	.word	0x000013e1

00001464 <SVC_Handler>:
}
    1464:	4770      	bx	lr
	...

00001468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1468:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    146a:	4b12      	ldr	r3, [pc, #72]	; (14b4 <xPortStartScheduler+0x4c>)
    146c:	6819      	ldr	r1, [r3, #0]
    146e:	22ff      	movs	r2, #255	; 0xff
    1470:	0412      	lsls	r2, r2, #16
    1472:	430a      	orrs	r2, r1
    1474:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1476:	6819      	ldr	r1, [r3, #0]
    1478:	22ff      	movs	r2, #255	; 0xff
    147a:	0612      	lsls	r2, r2, #24
    147c:	430a      	orrs	r2, r1
    147e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    1480:	4d0d      	ldr	r5, [pc, #52]	; (14b8 <xPortStartScheduler+0x50>)
    1482:	2400      	movs	r4, #0
    1484:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1486:	4b0d      	ldr	r3, [pc, #52]	; (14bc <xPortStartScheduler+0x54>)
    1488:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    148a:	2000      	movs	r0, #0
    148c:	4b0c      	ldr	r3, [pc, #48]	; (14c0 <xPortStartScheduler+0x58>)
    148e:	4798      	blx	r3
    1490:	21c8      	movs	r1, #200	; 0xc8
    1492:	4b0c      	ldr	r3, [pc, #48]	; (14c4 <xPortStartScheduler+0x5c>)
    1494:	4798      	blx	r3
    1496:	3801      	subs	r0, #1
    1498:	4b0b      	ldr	r3, [pc, #44]	; (14c8 <xPortStartScheduler+0x60>)
    149a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    149c:	2307      	movs	r3, #7
    149e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    14a0:	4b0a      	ldr	r3, [pc, #40]	; (14cc <xPortStartScheduler+0x64>)
    14a2:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    14a4:	4b0a      	ldr	r3, [pc, #40]	; (14d0 <xPortStartScheduler+0x68>)
    14a6:	4798      	blx	r3
	vTaskSwitchContext();
    14a8:	4b0a      	ldr	r3, [pc, #40]	; (14d4 <xPortStartScheduler+0x6c>)
    14aa:	4798      	blx	r3
	prvTaskExitError();
    14ac:	4b0a      	ldr	r3, [pc, #40]	; (14d8 <xPortStartScheduler+0x70>)
    14ae:	4798      	blx	r3
}
    14b0:	2000      	movs	r0, #0
    14b2:	bd70      	pop	{r4, r5, r6, pc}
    14b4:	e000ed20 	.word	0xe000ed20
    14b8:	e000e010 	.word	0xe000e010
    14bc:	e000e018 	.word	0xe000e018
    14c0:	00000fc1 	.word	0x00000fc1
    14c4:	00002fad 	.word	0x00002fad
    14c8:	e000e014 	.word	0xe000e014
    14cc:	20000004 	.word	0x20000004
    14d0:	00001411 	.word	0x00001411
    14d4:	00002495 	.word	0x00002495
    14d8:	000013e1 	.word	0x000013e1

000014dc <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	0552      	lsls	r2, r2, #21
    14e0:	4b03      	ldr	r3, [pc, #12]	; (14f0 <vPortYield+0x14>)
    14e2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    14e4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    14e8:	f3bf 8f6f 	isb	sy
}
    14ec:	4770      	bx	lr
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	e000ed04 	.word	0xe000ed04

000014f4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    14f4:	b672      	cpsid	i
    uxCriticalNesting++;
    14f6:	4a04      	ldr	r2, [pc, #16]	; (1508 <vPortEnterCritical+0x14>)
    14f8:	6813      	ldr	r3, [r2, #0]
    14fa:	3301      	adds	r3, #1
    14fc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    14fe:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1502:	f3bf 8f6f 	isb	sy
}
    1506:	4770      	bx	lr
    1508:	20000004 	.word	0x20000004

0000150c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    150c:	4b06      	ldr	r3, [pc, #24]	; (1528 <vPortExitCritical+0x1c>)
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d101      	bne.n	1518 <vPortExitCritical+0xc>
    1514:	b672      	cpsid	i
    1516:	e7fe      	b.n	1516 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1518:	3b01      	subs	r3, #1
    151a:	4a03      	ldr	r2, [pc, #12]	; (1528 <vPortExitCritical+0x1c>)
    151c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    151e:	2b00      	cmp	r3, #0
    1520:	d100      	bne.n	1524 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    1522:	b662      	cpsie	i
}
    1524:	4770      	bx	lr
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	20000004 	.word	0x20000004

0000152c <ulSetInterruptMaskFromISR>:
	__asm volatile(
    152c:	f3ef 8010 	mrs	r0, PRIMASK
    1530:	b672      	cpsid	i
    1532:	4770      	bx	lr

00001534 <vClearInterruptMaskFromISR>:
	__asm volatile(
    1534:	f380 8810 	msr	PRIMASK, r0
    1538:	4770      	bx	lr
    153a:	0000      	movs	r0, r0
    153c:	0000      	movs	r0, r0
	...

00001540 <PendSV_Handler>:
	__asm volatile
    1540:	f3ef 8009 	mrs	r0, PSP
    1544:	4b0e      	ldr	r3, [pc, #56]	; (1580 <pxCurrentTCBConst>)
    1546:	681a      	ldr	r2, [r3, #0]
    1548:	3820      	subs	r0, #32
    154a:	6010      	str	r0, [r2, #0]
    154c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    154e:	4644      	mov	r4, r8
    1550:	464d      	mov	r5, r9
    1552:	4656      	mov	r6, sl
    1554:	465f      	mov	r7, fp
    1556:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1558:	b508      	push	{r3, lr}
    155a:	b672      	cpsid	i
    155c:	f000 ff9a 	bl	2494 <vTaskSwitchContext>
    1560:	b662      	cpsie	i
    1562:	bc0c      	pop	{r2, r3}
    1564:	6811      	ldr	r1, [r2, #0]
    1566:	6808      	ldr	r0, [r1, #0]
    1568:	3010      	adds	r0, #16
    156a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    156c:	46a0      	mov	r8, r4
    156e:	46a9      	mov	r9, r5
    1570:	46b2      	mov	sl, r6
    1572:	46bb      	mov	fp, r7
    1574:	f380 8809 	msr	PSP, r0
    1578:	3820      	subs	r0, #32
    157a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    157c:	4718      	bx	r3
    157e:	46c0      	nop			; (mov r8, r8)

00001580 <pxCurrentTCBConst>:
    1580:	20002ed0 	.word	0x20002ed0

00001584 <SysTick_Handler>:
{
    1584:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1586:	4b07      	ldr	r3, [pc, #28]	; (15a4 <SysTick_Handler+0x20>)
    1588:	4798      	blx	r3
    158a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    158c:	4b06      	ldr	r3, [pc, #24]	; (15a8 <SysTick_Handler+0x24>)
    158e:	4798      	blx	r3
    1590:	2800      	cmp	r0, #0
    1592:	d003      	beq.n	159c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1594:	2280      	movs	r2, #128	; 0x80
    1596:	0552      	lsls	r2, r2, #21
    1598:	4b04      	ldr	r3, [pc, #16]	; (15ac <SysTick_Handler+0x28>)
    159a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    159c:	0020      	movs	r0, r4
    159e:	4b04      	ldr	r3, [pc, #16]	; (15b0 <SysTick_Handler+0x2c>)
    15a0:	4798      	blx	r3
}
    15a2:	bd10      	pop	{r4, pc}
    15a4:	0000152d 	.word	0x0000152d
    15a8:	00002235 	.word	0x00002235
    15ac:	e000ed04 	.word	0xe000ed04
    15b0:	00001535 	.word	0x00001535

000015b4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    15b4:	b570      	push	{r4, r5, r6, lr}
    15b6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    15b8:	0743      	lsls	r3, r0, #29
    15ba:	d002      	beq.n	15c2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    15bc:	2307      	movs	r3, #7
    15be:	439c      	bics	r4, r3
    15c0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    15c2:	4b11      	ldr	r3, [pc, #68]	; (1608 <pvPortMalloc+0x54>)
    15c4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    15c6:	4b11      	ldr	r3, [pc, #68]	; (160c <pvPortMalloc+0x58>)
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d010      	beq.n	15f0 <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    15ce:	4b10      	ldr	r3, [pc, #64]	; (1610 <pvPortMalloc+0x5c>)
    15d0:	681b      	ldr	r3, [r3, #0]
    15d2:	18e4      	adds	r4, r4, r3
    15d4:	4a0f      	ldr	r2, [pc, #60]	; (1614 <pvPortMalloc+0x60>)
    15d6:	4294      	cmp	r4, r2
    15d8:	d811      	bhi.n	15fe <pvPortMalloc+0x4a>
    15da:	42a3      	cmp	r3, r4
    15dc:	d211      	bcs.n	1602 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    15de:	4a0b      	ldr	r2, [pc, #44]	; (160c <pvPortMalloc+0x58>)
    15e0:	6815      	ldr	r5, [r2, #0]
    15e2:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    15e4:	4b0a      	ldr	r3, [pc, #40]	; (1610 <pvPortMalloc+0x5c>)
    15e6:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    15e8:	4b0b      	ldr	r3, [pc, #44]	; (1618 <pvPortMalloc+0x64>)
    15ea:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    15ec:	0028      	movs	r0, r5
    15ee:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    15f0:	2207      	movs	r2, #7
    15f2:	4b0a      	ldr	r3, [pc, #40]	; (161c <pvPortMalloc+0x68>)
    15f4:	3308      	adds	r3, #8
    15f6:	4393      	bics	r3, r2
    15f8:	4a04      	ldr	r2, [pc, #16]	; (160c <pvPortMalloc+0x58>)
    15fa:	6013      	str	r3, [r2, #0]
    15fc:	e7e7      	b.n	15ce <pvPortMalloc+0x1a>
void *pvReturn = NULL;
    15fe:	2500      	movs	r5, #0
    1600:	e7f2      	b.n	15e8 <pvPortMalloc+0x34>
    1602:	2500      	movs	r5, #0
    1604:	e7f0      	b.n	15e8 <pvPortMalloc+0x34>
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	00002219 	.word	0x00002219
    160c:	200000c8 	.word	0x200000c8
    1610:	20002ecc 	.word	0x20002ecc
    1614:	00002df7 	.word	0x00002df7
    1618:	00002355 	.word	0x00002355
    161c:	200000cc 	.word	0x200000cc

00001620 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1620:	2800      	cmp	r0, #0
    1622:	d001      	beq.n	1628 <vPortFree+0x8>
    1624:	b672      	cpsid	i
    1626:	e7fe      	b.n	1626 <vPortFree+0x6>
}
    1628:	4770      	bx	lr
	...

0000162c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    162c:	b510      	push	{r4, lr}
    162e:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1630:	4b03      	ldr	r3, [pc, #12]	; (1640 <prvIsQueueEmpty+0x14>)
    1632:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1634:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1636:	4b03      	ldr	r3, [pc, #12]	; (1644 <prvIsQueueEmpty+0x18>)
    1638:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    163a:	4260      	negs	r0, r4
    163c:	4160      	adcs	r0, r4

	return xReturn;
}
    163e:	bd10      	pop	{r4, pc}
    1640:	000014f5 	.word	0x000014f5
    1644:	0000150d 	.word	0x0000150d

00001648 <prvCopyDataToQueue>:
{
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	0004      	movs	r4, r0
    164c:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    164e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1650:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1652:	2a00      	cmp	r2, #0
    1654:	d10b      	bne.n	166e <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    1656:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1658:	6823      	ldr	r3, [r4, #0]
    165a:	4283      	cmp	r3, r0
    165c:	d104      	bne.n	1668 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    165e:	6860      	ldr	r0, [r4, #4]
    1660:	4b16      	ldr	r3, [pc, #88]	; (16bc <prvCopyDataToQueue+0x74>)
    1662:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1664:	2300      	movs	r3, #0
    1666:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    1668:	3501      	adds	r5, #1
    166a:	63a5      	str	r5, [r4, #56]	; 0x38
}
    166c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    166e:	2e00      	cmp	r6, #0
    1670:	d10e      	bne.n	1690 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1672:	6880      	ldr	r0, [r0, #8]
    1674:	4b12      	ldr	r3, [pc, #72]	; (16c0 <prvCopyDataToQueue+0x78>)
    1676:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1678:	68a3      	ldr	r3, [r4, #8]
    167a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    167c:	4694      	mov	ip, r2
    167e:	4463      	add	r3, ip
    1680:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    1682:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1684:	6862      	ldr	r2, [r4, #4]
    1686:	4293      	cmp	r3, r2
    1688:	d3ee      	bcc.n	1668 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    168a:	6823      	ldr	r3, [r4, #0]
    168c:	60a3      	str	r3, [r4, #8]
    168e:	e7eb      	b.n	1668 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1690:	68c0      	ldr	r0, [r0, #12]
    1692:	4b0b      	ldr	r3, [pc, #44]	; (16c0 <prvCopyDataToQueue+0x78>)
    1694:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1696:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1698:	425b      	negs	r3, r3
    169a:	68e2      	ldr	r2, [r4, #12]
    169c:	18d2      	adds	r2, r2, r3
    169e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    16a0:	6821      	ldr	r1, [r4, #0]
    16a2:	428a      	cmp	r2, r1
    16a4:	d203      	bcs.n	16ae <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    16a6:	6862      	ldr	r2, [r4, #4]
    16a8:	4694      	mov	ip, r2
    16aa:	4463      	add	r3, ip
    16ac:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    16ae:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    16b0:	2e02      	cmp	r6, #2
    16b2:	d1d9      	bne.n	1668 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    16b4:	4285      	cmp	r5, r0
    16b6:	d0d7      	beq.n	1668 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    16b8:	3d01      	subs	r5, #1
    16ba:	e7d5      	b.n	1668 <prvCopyDataToQueue+0x20>
    16bc:	00002769 	.word	0x00002769
    16c0:	00003443 	.word	0x00003443

000016c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    16c4:	b570      	push	{r4, r5, r6, lr}
    16c6:	b082      	sub	sp, #8
    16c8:	9001      	str	r0, [sp, #4]
    16ca:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    16cc:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    16ce:	2c00      	cmp	r4, #0
    16d0:	d005      	beq.n	16de <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    16d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    16d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    16d6:	4299      	cmp	r1, r3
    16d8:	d303      	bcc.n	16e2 <prvNotifyQueueSetContainer+0x1e>
    16da:	b672      	cpsid	i
    16dc:	e7fe      	b.n	16dc <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    16de:	b672      	cpsid	i
    16e0:	e7fe      	b.n	16e0 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    16e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    16e4:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    16e6:	428b      	cmp	r3, r1
    16e8:	d802      	bhi.n	16f0 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    16ea:	0030      	movs	r0, r6
    16ec:	b002      	add	sp, #8
    16ee:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    16f0:	2345      	movs	r3, #69	; 0x45
    16f2:	5ce5      	ldrb	r5, [r4, r3]
    16f4:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    16f6:	a901      	add	r1, sp, #4
    16f8:	0020      	movs	r0, r4
    16fa:	4b0a      	ldr	r3, [pc, #40]	; (1724 <prvNotifyQueueSetContainer+0x60>)
    16fc:	4798      	blx	r3
    16fe:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    1700:	1c6b      	adds	r3, r5, #1
    1702:	d10a      	bne.n	171a <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1704:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1706:	2b00      	cmp	r3, #0
    1708:	d0ef      	beq.n	16ea <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    170a:	0020      	movs	r0, r4
    170c:	3024      	adds	r0, #36	; 0x24
    170e:	4b06      	ldr	r3, [pc, #24]	; (1728 <prvNotifyQueueSetContainer+0x64>)
    1710:	4798      	blx	r3
    1712:	2800      	cmp	r0, #0
    1714:	d0e9      	beq.n	16ea <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    1716:	2601      	movs	r6, #1
    1718:	e7e7      	b.n	16ea <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    171a:	3501      	adds	r5, #1
    171c:	b26d      	sxtb	r5, r5
    171e:	2345      	movs	r3, #69	; 0x45
    1720:	54e5      	strb	r5, [r4, r3]
    1722:	e7e2      	b.n	16ea <prvNotifyQueueSetContainer+0x26>
    1724:	00001649 	.word	0x00001649
    1728:	00002595 	.word	0x00002595

0000172c <prvCopyDataFromQueue>:
{
    172c:	b510      	push	{r4, lr}
    172e:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1730:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1732:	2a00      	cmp	r2, #0
    1734:	d00b      	beq.n	174e <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1736:	68c3      	ldr	r3, [r0, #12]
    1738:	189b      	adds	r3, r3, r2
    173a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    173c:	6841      	ldr	r1, [r0, #4]
    173e:	428b      	cmp	r3, r1
    1740:	d301      	bcc.n	1746 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1742:	6803      	ldr	r3, [r0, #0]
    1744:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1746:	68c1      	ldr	r1, [r0, #12]
    1748:	0020      	movs	r0, r4
    174a:	4b01      	ldr	r3, [pc, #4]	; (1750 <prvCopyDataFromQueue+0x24>)
    174c:	4798      	blx	r3
}
    174e:	bd10      	pop	{r4, pc}
    1750:	00003443 	.word	0x00003443

00001754 <prvUnlockQueue>:
{
    1754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1756:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    1758:	4b25      	ldr	r3, [pc, #148]	; (17f0 <prvUnlockQueue+0x9c>)
    175a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    175c:	2345      	movs	r3, #69	; 0x45
    175e:	5cfc      	ldrb	r4, [r7, r3]
    1760:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1762:	2c00      	cmp	r4, #0
    1764:	dd1c      	ble.n	17a0 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    1766:	4e23      	ldr	r6, [pc, #140]	; (17f4 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1768:	4d23      	ldr	r5, [pc, #140]	; (17f8 <prvUnlockQueue+0xa4>)
    176a:	e00b      	b.n	1784 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    176e:	2b00      	cmp	r3, #0
    1770:	d016      	beq.n	17a0 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1772:	0038      	movs	r0, r7
    1774:	3024      	adds	r0, #36	; 0x24
    1776:	47a8      	blx	r5
    1778:	2800      	cmp	r0, #0
    177a:	d10e      	bne.n	179a <prvUnlockQueue+0x46>
    177c:	3c01      	subs	r4, #1
    177e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1780:	2c00      	cmp	r4, #0
    1782:	d00d      	beq.n	17a0 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    1784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1786:	2b00      	cmp	r3, #0
    1788:	d0f0      	beq.n	176c <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    178a:	2100      	movs	r1, #0
    178c:	0038      	movs	r0, r7
    178e:	47b0      	blx	r6
    1790:	2800      	cmp	r0, #0
    1792:	d0f3      	beq.n	177c <prvUnlockQueue+0x28>
						vTaskMissedYield();
    1794:	4b19      	ldr	r3, [pc, #100]	; (17fc <prvUnlockQueue+0xa8>)
    1796:	4798      	blx	r3
    1798:	e7f0      	b.n	177c <prvUnlockQueue+0x28>
							vTaskMissedYield();
    179a:	4b18      	ldr	r3, [pc, #96]	; (17fc <prvUnlockQueue+0xa8>)
    179c:	4798      	blx	r3
    179e:	e7ed      	b.n	177c <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    17a0:	22ff      	movs	r2, #255	; 0xff
    17a2:	2345      	movs	r3, #69	; 0x45
    17a4:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    17a6:	4b16      	ldr	r3, [pc, #88]	; (1800 <prvUnlockQueue+0xac>)
    17a8:	4798      	blx	r3
	taskENTER_CRITICAL();
    17aa:	4b11      	ldr	r3, [pc, #68]	; (17f0 <prvUnlockQueue+0x9c>)
    17ac:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    17ae:	2344      	movs	r3, #68	; 0x44
    17b0:	5cfc      	ldrb	r4, [r7, r3]
    17b2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    17b4:	2c00      	cmp	r4, #0
    17b6:	dd14      	ble.n	17e2 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17b8:	693b      	ldr	r3, [r7, #16]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d011      	beq.n	17e2 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    17be:	003d      	movs	r5, r7
    17c0:	3510      	adds	r5, #16
    17c2:	4e0d      	ldr	r6, [pc, #52]	; (17f8 <prvUnlockQueue+0xa4>)
    17c4:	e006      	b.n	17d4 <prvUnlockQueue+0x80>
    17c6:	3c01      	subs	r4, #1
    17c8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    17ca:	2c00      	cmp	r4, #0
    17cc:	d009      	beq.n	17e2 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17ce:	693b      	ldr	r3, [r7, #16]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d006      	beq.n	17e2 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    17d4:	0028      	movs	r0, r5
    17d6:	47b0      	blx	r6
    17d8:	2800      	cmp	r0, #0
    17da:	d0f4      	beq.n	17c6 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    17dc:	4b07      	ldr	r3, [pc, #28]	; (17fc <prvUnlockQueue+0xa8>)
    17de:	4798      	blx	r3
    17e0:	e7f1      	b.n	17c6 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    17e2:	22ff      	movs	r2, #255	; 0xff
    17e4:	2344      	movs	r3, #68	; 0x44
    17e6:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    17e8:	4b05      	ldr	r3, [pc, #20]	; (1800 <prvUnlockQueue+0xac>)
    17ea:	4798      	blx	r3
}
    17ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	000014f5 	.word	0x000014f5
    17f4:	000016c5 	.word	0x000016c5
    17f8:	00002595 	.word	0x00002595
    17fc:	000026a5 	.word	0x000026a5
    1800:	0000150d 	.word	0x0000150d

00001804 <xQueueGenericReset>:
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	0004      	movs	r4, r0
    1808:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    180a:	2800      	cmp	r0, #0
    180c:	d021      	beq.n	1852 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    180e:	4b17      	ldr	r3, [pc, #92]	; (186c <xQueueGenericReset+0x68>)
    1810:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1812:	6822      	ldr	r2, [r4, #0]
    1814:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1818:	434b      	muls	r3, r1
    181a:	18d0      	adds	r0, r2, r3
    181c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    181e:	2000      	movs	r0, #0
    1820:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1822:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1824:	1a5b      	subs	r3, r3, r1
    1826:	18d3      	adds	r3, r2, r3
    1828:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    182a:	23ff      	movs	r3, #255	; 0xff
    182c:	2244      	movs	r2, #68	; 0x44
    182e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    1830:	3201      	adds	r2, #1
    1832:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    1834:	2d00      	cmp	r5, #0
    1836:	d111      	bne.n	185c <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1838:	6923      	ldr	r3, [r4, #16]
    183a:	2b00      	cmp	r3, #0
    183c:	d005      	beq.n	184a <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    183e:	0020      	movs	r0, r4
    1840:	3010      	adds	r0, #16
    1842:	4b0b      	ldr	r3, [pc, #44]	; (1870 <xQueueGenericReset+0x6c>)
    1844:	4798      	blx	r3
    1846:	2800      	cmp	r0, #0
    1848:	d105      	bne.n	1856 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    184a:	4b0a      	ldr	r3, [pc, #40]	; (1874 <xQueueGenericReset+0x70>)
    184c:	4798      	blx	r3
}
    184e:	2001      	movs	r0, #1
    1850:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    1852:	b672      	cpsid	i
    1854:	e7fe      	b.n	1854 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    1856:	4b08      	ldr	r3, [pc, #32]	; (1878 <xQueueGenericReset+0x74>)
    1858:	4798      	blx	r3
    185a:	e7f6      	b.n	184a <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    185c:	0020      	movs	r0, r4
    185e:	3010      	adds	r0, #16
    1860:	4d06      	ldr	r5, [pc, #24]	; (187c <xQueueGenericReset+0x78>)
    1862:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1864:	0020      	movs	r0, r4
    1866:	3024      	adds	r0, #36	; 0x24
    1868:	47a8      	blx	r5
    186a:	e7ee      	b.n	184a <xQueueGenericReset+0x46>
    186c:	000014f5 	.word	0x000014f5
    1870:	00002595 	.word	0x00002595
    1874:	0000150d 	.word	0x0000150d
    1878:	000014dd 	.word	0x000014dd
    187c:	00001355 	.word	0x00001355

00001880 <xQueueGenericCreate>:
	{
    1880:	b570      	push	{r4, r5, r6, lr}
    1882:	0006      	movs	r6, r0
    1884:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    1886:	2800      	cmp	r0, #0
    1888:	d101      	bne.n	188e <xQueueGenericCreate+0xe>
    188a:	b672      	cpsid	i
    188c:	e7fe      	b.n	188c <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    188e:	0008      	movs	r0, r1
    1890:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1892:	304c      	adds	r0, #76	; 0x4c
    1894:	4b0a      	ldr	r3, [pc, #40]	; (18c0 <xQueueGenericCreate+0x40>)
    1896:	4798      	blx	r3
    1898:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    189a:	d00e      	beq.n	18ba <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
    189c:	2d00      	cmp	r5, #0
    189e:	d003      	beq.n	18a8 <xQueueGenericCreate+0x28>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    18a0:	0003      	movs	r3, r0
    18a2:	334c      	adds	r3, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    18a4:	6003      	str	r3, [r0, #0]
    18a6:	e000      	b.n	18aa <xQueueGenericCreate+0x2a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    18a8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    18aa:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    18ac:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    18ae:	2101      	movs	r1, #1
    18b0:	0020      	movs	r0, r4
    18b2:	4b04      	ldr	r3, [pc, #16]	; (18c4 <xQueueGenericCreate+0x44>)
    18b4:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
    18b6:	2300      	movs	r3, #0
    18b8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    18ba:	0020      	movs	r0, r4
    18bc:	bd70      	pop	{r4, r5, r6, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	000015b5 	.word	0x000015b5
    18c4:	00001805 	.word	0x00001805

000018c8 <xQueueGenericSend>:
{
    18c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ca:	46ce      	mov	lr, r9
    18cc:	4647      	mov	r7, r8
    18ce:	b580      	push	{r7, lr}
    18d0:	b085      	sub	sp, #20
    18d2:	0004      	movs	r4, r0
    18d4:	000f      	movs	r7, r1
    18d6:	9201      	str	r2, [sp, #4]
    18d8:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    18da:	2800      	cmp	r0, #0
    18dc:	d00c      	beq.n	18f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    18de:	2900      	cmp	r1, #0
    18e0:	d00c      	beq.n	18fc <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    18e2:	2d02      	cmp	r5, #2
    18e4:	d00f      	beq.n	1906 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    18e6:	4b4e      	ldr	r3, [pc, #312]	; (1a20 <xQueueGenericSend+0x158>)
    18e8:	4798      	blx	r3
    18ea:	2800      	cmp	r0, #0
    18ec:	d110      	bne.n	1910 <xQueueGenericSend+0x48>
    18ee:	9b01      	ldr	r3, [sp, #4]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d011      	beq.n	1918 <xQueueGenericSend+0x50>
    18f4:	b672      	cpsid	i
    18f6:	e7fe      	b.n	18f6 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    18f8:	b672      	cpsid	i
    18fa:	e7fe      	b.n	18fa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    18fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    18fe:	2b00      	cmp	r3, #0
    1900:	d0ef      	beq.n	18e2 <xQueueGenericSend+0x1a>
    1902:	b672      	cpsid	i
    1904:	e7fe      	b.n	1904 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1908:	2b01      	cmp	r3, #1
    190a:	d0ec      	beq.n	18e6 <xQueueGenericSend+0x1e>
    190c:	b672      	cpsid	i
    190e:	e7fe      	b.n	190e <xQueueGenericSend+0x46>
    1910:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    1912:	4b44      	ldr	r3, [pc, #272]	; (1a24 <xQueueGenericSend+0x15c>)
    1914:	4698      	mov	r8, r3
    1916:	e04c      	b.n	19b2 <xQueueGenericSend+0xea>
    1918:	2600      	movs	r6, #0
    191a:	e7fa      	b.n	1912 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    191c:	002a      	movs	r2, r5
    191e:	0039      	movs	r1, r7
    1920:	0020      	movs	r0, r4
    1922:	4b41      	ldr	r3, [pc, #260]	; (1a28 <xQueueGenericSend+0x160>)
    1924:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    1926:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1928:	2b00      	cmp	r3, #0
    192a:	d00f      	beq.n	194c <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    192c:	0029      	movs	r1, r5
    192e:	0020      	movs	r0, r4
    1930:	4b3e      	ldr	r3, [pc, #248]	; (1a2c <xQueueGenericSend+0x164>)
    1932:	4798      	blx	r3
    1934:	2800      	cmp	r0, #0
    1936:	d001      	beq.n	193c <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1938:	4b3d      	ldr	r3, [pc, #244]	; (1a30 <xQueueGenericSend+0x168>)
    193a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    193c:	4b3d      	ldr	r3, [pc, #244]	; (1a34 <xQueueGenericSend+0x16c>)
    193e:	4798      	blx	r3
				return pdPASS;
    1940:	2001      	movs	r0, #1
}
    1942:	b005      	add	sp, #20
    1944:	bc0c      	pop	{r2, r3}
    1946:	4690      	mov	r8, r2
    1948:	4699      	mov	r9, r3
    194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    194c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    194e:	2b00      	cmp	r3, #0
    1950:	d008      	beq.n	1964 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1952:	0020      	movs	r0, r4
    1954:	3024      	adds	r0, #36	; 0x24
    1956:	4b38      	ldr	r3, [pc, #224]	; (1a38 <xQueueGenericSend+0x170>)
    1958:	4798      	blx	r3
    195a:	2800      	cmp	r0, #0
    195c:	d0ee      	beq.n	193c <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    195e:	4b34      	ldr	r3, [pc, #208]	; (1a30 <xQueueGenericSend+0x168>)
    1960:	4798      	blx	r3
    1962:	e7eb      	b.n	193c <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    1964:	2800      	cmp	r0, #0
    1966:	d0e9      	beq.n	193c <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1968:	4b31      	ldr	r3, [pc, #196]	; (1a30 <xQueueGenericSend+0x168>)
    196a:	4798      	blx	r3
    196c:	e7e6      	b.n	193c <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    196e:	4b31      	ldr	r3, [pc, #196]	; (1a34 <xQueueGenericSend+0x16c>)
    1970:	4798      	blx	r3
					return errQUEUE_FULL;
    1972:	2000      	movs	r0, #0
    1974:	e7e5      	b.n	1942 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    1976:	4b2f      	ldr	r3, [pc, #188]	; (1a34 <xQueueGenericSend+0x16c>)
    1978:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    197a:	a901      	add	r1, sp, #4
    197c:	a802      	add	r0, sp, #8
    197e:	4b2f      	ldr	r3, [pc, #188]	; (1a3c <xQueueGenericSend+0x174>)
    1980:	4798      	blx	r3
    1982:	2800      	cmp	r0, #0
    1984:	d144      	bne.n	1a10 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    1986:	4b27      	ldr	r3, [pc, #156]	; (1a24 <xQueueGenericSend+0x15c>)
    1988:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    198a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    198c:	4699      	mov	r9, r3
    198e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    1990:	4b28      	ldr	r3, [pc, #160]	; (1a34 <xQueueGenericSend+0x16c>)
    1992:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1994:	45b1      	cmp	r9, r6
    1996:	d135      	bne.n	1a04 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1998:	0020      	movs	r0, r4
    199a:	3010      	adds	r0, #16
    199c:	9901      	ldr	r1, [sp, #4]
    199e:	4b28      	ldr	r3, [pc, #160]	; (1a40 <xQueueGenericSend+0x178>)
    19a0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    19a2:	0020      	movs	r0, r4
    19a4:	4b27      	ldr	r3, [pc, #156]	; (1a44 <xQueueGenericSend+0x17c>)
    19a6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    19a8:	4b27      	ldr	r3, [pc, #156]	; (1a48 <xQueueGenericSend+0x180>)
    19aa:	4798      	blx	r3
    19ac:	2800      	cmp	r0, #0
    19ae:	d026      	beq.n	19fe <xQueueGenericSend+0x136>
    19b0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    19b2:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    19b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    19b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    19b8:	4293      	cmp	r3, r2
    19ba:	d3af      	bcc.n	191c <xQueueGenericSend+0x54>
    19bc:	2d02      	cmp	r5, #2
    19be:	d0ad      	beq.n	191c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    19c0:	9b01      	ldr	r3, [sp, #4]
    19c2:	2b00      	cmp	r3, #0
    19c4:	d0d3      	beq.n	196e <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    19c6:	2e00      	cmp	r6, #0
    19c8:	d102      	bne.n	19d0 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    19ca:	a802      	add	r0, sp, #8
    19cc:	4b1f      	ldr	r3, [pc, #124]	; (1a4c <xQueueGenericSend+0x184>)
    19ce:	4798      	blx	r3
		taskEXIT_CRITICAL();
    19d0:	4b18      	ldr	r3, [pc, #96]	; (1a34 <xQueueGenericSend+0x16c>)
    19d2:	4798      	blx	r3
		vTaskSuspendAll();
    19d4:	4b1e      	ldr	r3, [pc, #120]	; (1a50 <xQueueGenericSend+0x188>)
    19d6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    19d8:	4b12      	ldr	r3, [pc, #72]	; (1a24 <xQueueGenericSend+0x15c>)
    19da:	4798      	blx	r3
    19dc:	2344      	movs	r3, #68	; 0x44
    19de:	5ce3      	ldrb	r3, [r4, r3]
    19e0:	b25b      	sxtb	r3, r3
    19e2:	3301      	adds	r3, #1
    19e4:	d102      	bne.n	19ec <xQueueGenericSend+0x124>
    19e6:	2200      	movs	r2, #0
    19e8:	2344      	movs	r3, #68	; 0x44
    19ea:	54e2      	strb	r2, [r4, r3]
    19ec:	2345      	movs	r3, #69	; 0x45
    19ee:	5ce3      	ldrb	r3, [r4, r3]
    19f0:	b25b      	sxtb	r3, r3
    19f2:	3301      	adds	r3, #1
    19f4:	d1bf      	bne.n	1976 <xQueueGenericSend+0xae>
    19f6:	2200      	movs	r2, #0
    19f8:	2345      	movs	r3, #69	; 0x45
    19fa:	54e2      	strb	r2, [r4, r3]
    19fc:	e7bb      	b.n	1976 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    19fe:	4b0c      	ldr	r3, [pc, #48]	; (1a30 <xQueueGenericSend+0x168>)
    1a00:	4798      	blx	r3
    1a02:	e7d5      	b.n	19b0 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    1a04:	0020      	movs	r0, r4
    1a06:	4b0f      	ldr	r3, [pc, #60]	; (1a44 <xQueueGenericSend+0x17c>)
    1a08:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1a0a:	4b0f      	ldr	r3, [pc, #60]	; (1a48 <xQueueGenericSend+0x180>)
    1a0c:	4798      	blx	r3
    1a0e:	e7cf      	b.n	19b0 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    1a10:	0020      	movs	r0, r4
    1a12:	4b0c      	ldr	r3, [pc, #48]	; (1a44 <xQueueGenericSend+0x17c>)
    1a14:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1a16:	4b0c      	ldr	r3, [pc, #48]	; (1a48 <xQueueGenericSend+0x180>)
    1a18:	4798      	blx	r3
			return errQUEUE_FULL;
    1a1a:	2000      	movs	r0, #0
    1a1c:	e791      	b.n	1942 <xQueueGenericSend+0x7a>
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	000026b1 	.word	0x000026b1
    1a24:	000014f5 	.word	0x000014f5
    1a28:	00001649 	.word	0x00001649
    1a2c:	000016c5 	.word	0x000016c5
    1a30:	000014dd 	.word	0x000014dd
    1a34:	0000150d 	.word	0x0000150d
    1a38:	00002595 	.word	0x00002595
    1a3c:	00002635 	.word	0x00002635
    1a40:	00002531 	.word	0x00002531
    1a44:	00001755 	.word	0x00001755
    1a48:	00002355 	.word	0x00002355
    1a4c:	0000261d 	.word	0x0000261d
    1a50:	00002219 	.word	0x00002219

00001a54 <xQueueCreateMutex>:
	{
    1a54:	b570      	push	{r4, r5, r6, lr}
    1a56:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    1a58:	2100      	movs	r1, #0
    1a5a:	2001      	movs	r0, #1
    1a5c:	4b06      	ldr	r3, [pc, #24]	; (1a78 <xQueueCreateMutex+0x24>)
    1a5e:	4798      	blx	r3
    1a60:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1a62:	d007      	beq.n	1a74 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    1a64:	2300      	movs	r3, #0
    1a66:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1a68:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    1a6a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1a6c:	2200      	movs	r2, #0
    1a6e:	2100      	movs	r1, #0
    1a70:	4d02      	ldr	r5, [pc, #8]	; (1a7c <xQueueCreateMutex+0x28>)
    1a72:	47a8      	blx	r5
	}
    1a74:	0020      	movs	r0, r4
    1a76:	bd70      	pop	{r4, r5, r6, pc}
    1a78:	00001881 	.word	0x00001881
    1a7c:	000018c9 	.word	0x000018c9

00001a80 <xQueueGenericSendFromISR>:
{
    1a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a82:	b083      	sub	sp, #12
    1a84:	0004      	movs	r4, r0
    1a86:	9101      	str	r1, [sp, #4]
    1a88:	0016      	movs	r6, r2
    1a8a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d012      	beq.n	1ab6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1a90:	9b01      	ldr	r3, [sp, #4]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d011      	beq.n	1aba <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1a96:	2d02      	cmp	r5, #2
    1a98:	d014      	beq.n	1ac4 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1a9a:	4b28      	ldr	r3, [pc, #160]	; (1b3c <xQueueGenericSendFromISR+0xbc>)
    1a9c:	4798      	blx	r3
    1a9e:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1aa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1aa4:	429a      	cmp	r2, r3
    1aa6:	d82f      	bhi.n	1b08 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    1aa8:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1aaa:	9800      	ldr	r0, [sp, #0]
    1aac:	4b24      	ldr	r3, [pc, #144]	; (1b40 <xQueueGenericSendFromISR+0xc0>)
    1aae:	4798      	blx	r3
}
    1ab0:	0028      	movs	r0, r5
    1ab2:	b003      	add	sp, #12
    1ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    1ab6:	b672      	cpsid	i
    1ab8:	e7fe      	b.n	1ab8 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1aba:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1abc:	2b00      	cmp	r3, #0
    1abe:	d0ea      	beq.n	1a96 <xQueueGenericSendFromISR+0x16>
    1ac0:	b672      	cpsid	i
    1ac2:	e7fe      	b.n	1ac2 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1ac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1ac6:	2b01      	cmp	r3, #1
    1ac8:	d01a      	beq.n	1b00 <xQueueGenericSendFromISR+0x80>
    1aca:	b672      	cpsid	i
    1acc:	e7fe      	b.n	1acc <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    1ad0:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d0e9      	beq.n	1aaa <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ad6:	0020      	movs	r0, r4
    1ad8:	3024      	adds	r0, #36	; 0x24
    1ada:	4b1a      	ldr	r3, [pc, #104]	; (1b44 <xQueueGenericSendFromISR+0xc4>)
    1adc:	4798      	blx	r3
    1ade:	2800      	cmp	r0, #0
    1ae0:	d0e3      	beq.n	1aaa <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    1ae2:	2e00      	cmp	r6, #0
    1ae4:	d00a      	beq.n	1afc <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    1ae6:	2301      	movs	r3, #1
    1ae8:	6033      	str	r3, [r6, #0]
    1aea:	e7de      	b.n	1aaa <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1aec:	1c7b      	adds	r3, r7, #1
    1aee:	b25b      	sxtb	r3, r3
    1af0:	2245      	movs	r2, #69	; 0x45
    1af2:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    1af4:	2501      	movs	r5, #1
    1af6:	e7d8      	b.n	1aaa <xQueueGenericSendFromISR+0x2a>
    1af8:	2501      	movs	r5, #1
    1afa:	e7d6      	b.n	1aaa <xQueueGenericSendFromISR+0x2a>
    1afc:	2501      	movs	r5, #1
    1afe:	e7d4      	b.n	1aaa <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1b00:	4b0e      	ldr	r3, [pc, #56]	; (1b3c <xQueueGenericSendFromISR+0xbc>)
    1b02:	4798      	blx	r3
    1b04:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    1b08:	2345      	movs	r3, #69	; 0x45
    1b0a:	5ce7      	ldrb	r7, [r4, r3]
    1b0c:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1b0e:	002a      	movs	r2, r5
    1b10:	9901      	ldr	r1, [sp, #4]
    1b12:	0020      	movs	r0, r4
    1b14:	4b0c      	ldr	r3, [pc, #48]	; (1b48 <xQueueGenericSendFromISR+0xc8>)
    1b16:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    1b18:	1c7b      	adds	r3, r7, #1
    1b1a:	d1e7      	bne.n	1aec <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    1b1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d0d5      	beq.n	1ace <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1b22:	0029      	movs	r1, r5
    1b24:	0020      	movs	r0, r4
    1b26:	4b09      	ldr	r3, [pc, #36]	; (1b4c <xQueueGenericSendFromISR+0xcc>)
    1b28:	4798      	blx	r3
			xReturn = pdPASS;
    1b2a:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1b2c:	2800      	cmp	r0, #0
    1b2e:	d0bc      	beq.n	1aaa <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    1b30:	2e00      	cmp	r6, #0
    1b32:	d0e1      	beq.n	1af8 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    1b34:	2301      	movs	r3, #1
    1b36:	6033      	str	r3, [r6, #0]
    1b38:	e7b7      	b.n	1aaa <xQueueGenericSendFromISR+0x2a>
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	0000152d 	.word	0x0000152d
    1b40:	00001535 	.word	0x00001535
    1b44:	00002595 	.word	0x00002595
    1b48:	00001649 	.word	0x00001649
    1b4c:	000016c5 	.word	0x000016c5

00001b50 <xQueueReceive>:
{
    1b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b52:	46c6      	mov	lr, r8
    1b54:	b500      	push	{lr}
    1b56:	b084      	sub	sp, #16
    1b58:	0004      	movs	r4, r0
    1b5a:	000f      	movs	r7, r1
    1b5c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    1b5e:	2800      	cmp	r0, #0
    1b60:	d00a      	beq.n	1b78 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1b62:	2900      	cmp	r1, #0
    1b64:	d00a      	beq.n	1b7c <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1b66:	4b42      	ldr	r3, [pc, #264]	; (1c70 <xQueueReceive+0x120>)
    1b68:	4798      	blx	r3
    1b6a:	2800      	cmp	r0, #0
    1b6c:	d10b      	bne.n	1b86 <xQueueReceive+0x36>
    1b6e:	9b01      	ldr	r3, [sp, #4]
    1b70:	2b00      	cmp	r3, #0
    1b72:	d00c      	beq.n	1b8e <xQueueReceive+0x3e>
    1b74:	b672      	cpsid	i
    1b76:	e7fe      	b.n	1b76 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    1b78:	b672      	cpsid	i
    1b7a:	e7fe      	b.n	1b7a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1b7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d0f1      	beq.n	1b66 <xQueueReceive+0x16>
    1b82:	b672      	cpsid	i
    1b84:	e7fe      	b.n	1b84 <xQueueReceive+0x34>
    1b86:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    1b88:	4b3a      	ldr	r3, [pc, #232]	; (1c74 <xQueueReceive+0x124>)
    1b8a:	4698      	mov	r8, r3
    1b8c:	e02f      	b.n	1bee <xQueueReceive+0x9e>
    1b8e:	2600      	movs	r6, #0
    1b90:	e7fa      	b.n	1b88 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1b92:	0039      	movs	r1, r7
    1b94:	0020      	movs	r0, r4
    1b96:	4b38      	ldr	r3, [pc, #224]	; (1c78 <xQueueReceive+0x128>)
    1b98:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    1b9a:	3d01      	subs	r5, #1
    1b9c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b9e:	6923      	ldr	r3, [r4, #16]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d007      	beq.n	1bb4 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ba4:	0020      	movs	r0, r4
    1ba6:	3010      	adds	r0, #16
    1ba8:	4b34      	ldr	r3, [pc, #208]	; (1c7c <xQueueReceive+0x12c>)
    1baa:	4798      	blx	r3
    1bac:	2800      	cmp	r0, #0
    1bae:	d001      	beq.n	1bb4 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    1bb0:	4b33      	ldr	r3, [pc, #204]	; (1c80 <xQueueReceive+0x130>)
    1bb2:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1bb4:	4b33      	ldr	r3, [pc, #204]	; (1c84 <xQueueReceive+0x134>)
    1bb6:	4798      	blx	r3
				return pdPASS;
    1bb8:	2001      	movs	r0, #1
}
    1bba:	b004      	add	sp, #16
    1bbc:	bc04      	pop	{r2}
    1bbe:	4690      	mov	r8, r2
    1bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    1bc2:	4b30      	ldr	r3, [pc, #192]	; (1c84 <xQueueReceive+0x134>)
    1bc4:	4798      	blx	r3
					return errQUEUE_EMPTY;
    1bc6:	2000      	movs	r0, #0
    1bc8:	e7f7      	b.n	1bba <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    1bca:	a802      	add	r0, sp, #8
    1bcc:	4b2e      	ldr	r3, [pc, #184]	; (1c88 <xQueueReceive+0x138>)
    1bce:	4798      	blx	r3
    1bd0:	e016      	b.n	1c00 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    1bd2:	2200      	movs	r2, #0
    1bd4:	2344      	movs	r3, #68	; 0x44
    1bd6:	54e2      	strb	r2, [r4, r3]
    1bd8:	e01d      	b.n	1c16 <xQueueReceive+0xc6>
    1bda:	2200      	movs	r2, #0
    1bdc:	2345      	movs	r3, #69	; 0x45
    1bde:	54e2      	strb	r2, [r4, r3]
    1be0:	e01e      	b.n	1c20 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    1be2:	0020      	movs	r0, r4
    1be4:	4b29      	ldr	r3, [pc, #164]	; (1c8c <xQueueReceive+0x13c>)
    1be6:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1be8:	4b29      	ldr	r3, [pc, #164]	; (1c90 <xQueueReceive+0x140>)
    1bea:	4798      	blx	r3
    1bec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    1bee:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1bf0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1bf2:	2d00      	cmp	r5, #0
    1bf4:	d1cd      	bne.n	1b92 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    1bf6:	9b01      	ldr	r3, [sp, #4]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d0e2      	beq.n	1bc2 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    1bfc:	2e00      	cmp	r6, #0
    1bfe:	d0e4      	beq.n	1bca <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    1c00:	4b20      	ldr	r3, [pc, #128]	; (1c84 <xQueueReceive+0x134>)
    1c02:	4798      	blx	r3
		vTaskSuspendAll();
    1c04:	4b23      	ldr	r3, [pc, #140]	; (1c94 <xQueueReceive+0x144>)
    1c06:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1c08:	4b1a      	ldr	r3, [pc, #104]	; (1c74 <xQueueReceive+0x124>)
    1c0a:	4798      	blx	r3
    1c0c:	2344      	movs	r3, #68	; 0x44
    1c0e:	5ce3      	ldrb	r3, [r4, r3]
    1c10:	b25b      	sxtb	r3, r3
    1c12:	3301      	adds	r3, #1
    1c14:	d0dd      	beq.n	1bd2 <xQueueReceive+0x82>
    1c16:	2345      	movs	r3, #69	; 0x45
    1c18:	5ce3      	ldrb	r3, [r4, r3]
    1c1a:	b25b      	sxtb	r3, r3
    1c1c:	3301      	adds	r3, #1
    1c1e:	d0dc      	beq.n	1bda <xQueueReceive+0x8a>
    1c20:	4b18      	ldr	r3, [pc, #96]	; (1c84 <xQueueReceive+0x134>)
    1c22:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c24:	a901      	add	r1, sp, #4
    1c26:	a802      	add	r0, sp, #8
    1c28:	4b1b      	ldr	r3, [pc, #108]	; (1c98 <xQueueReceive+0x148>)
    1c2a:	4798      	blx	r3
    1c2c:	2800      	cmp	r0, #0
    1c2e:	d113      	bne.n	1c58 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c30:	0020      	movs	r0, r4
    1c32:	4b1a      	ldr	r3, [pc, #104]	; (1c9c <xQueueReceive+0x14c>)
    1c34:	4798      	blx	r3
    1c36:	2800      	cmp	r0, #0
    1c38:	d0d3      	beq.n	1be2 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1c3a:	0020      	movs	r0, r4
    1c3c:	3024      	adds	r0, #36	; 0x24
    1c3e:	9901      	ldr	r1, [sp, #4]
    1c40:	4b17      	ldr	r3, [pc, #92]	; (1ca0 <xQueueReceive+0x150>)
    1c42:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1c44:	0020      	movs	r0, r4
    1c46:	4b11      	ldr	r3, [pc, #68]	; (1c8c <xQueueReceive+0x13c>)
    1c48:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1c4a:	4b11      	ldr	r3, [pc, #68]	; (1c90 <xQueueReceive+0x140>)
    1c4c:	4798      	blx	r3
    1c4e:	2800      	cmp	r0, #0
    1c50:	d1cc      	bne.n	1bec <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    1c52:	4b0b      	ldr	r3, [pc, #44]	; (1c80 <xQueueReceive+0x130>)
    1c54:	4798      	blx	r3
    1c56:	e7c9      	b.n	1bec <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    1c58:	0020      	movs	r0, r4
    1c5a:	4b0c      	ldr	r3, [pc, #48]	; (1c8c <xQueueReceive+0x13c>)
    1c5c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1c5e:	4b0c      	ldr	r3, [pc, #48]	; (1c90 <xQueueReceive+0x140>)
    1c60:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c62:	0020      	movs	r0, r4
    1c64:	4b0d      	ldr	r3, [pc, #52]	; (1c9c <xQueueReceive+0x14c>)
    1c66:	4798      	blx	r3
    1c68:	2800      	cmp	r0, #0
    1c6a:	d0bf      	beq.n	1bec <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    1c6c:	2000      	movs	r0, #0
    1c6e:	e7a4      	b.n	1bba <xQueueReceive+0x6a>
    1c70:	000026b1 	.word	0x000026b1
    1c74:	000014f5 	.word	0x000014f5
    1c78:	0000172d 	.word	0x0000172d
    1c7c:	00002595 	.word	0x00002595
    1c80:	000014dd 	.word	0x000014dd
    1c84:	0000150d 	.word	0x0000150d
    1c88:	0000261d 	.word	0x0000261d
    1c8c:	00001755 	.word	0x00001755
    1c90:	00002355 	.word	0x00002355
    1c94:	00002219 	.word	0x00002219
    1c98:	00002635 	.word	0x00002635
    1c9c:	0000162d 	.word	0x0000162d
    1ca0:	00002531 	.word	0x00002531

00001ca4 <xQueueSemaphoreTake>:
{
    1ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca6:	b085      	sub	sp, #20
    1ca8:	1e04      	subs	r4, r0, #0
    1caa:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    1cac:	d004      	beq.n	1cb8 <xQueueSemaphoreTake+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
    1cae:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d003      	beq.n	1cbc <xQueueSemaphoreTake+0x18>
    1cb4:	b672      	cpsid	i
    1cb6:	e7fe      	b.n	1cb6 <xQueueSemaphoreTake+0x12>
	configASSERT( ( pxQueue ) );
    1cb8:	b672      	cpsid	i
    1cba:	e7fe      	b.n	1cba <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1cbc:	4b50      	ldr	r3, [pc, #320]	; (1e00 <xQueueSemaphoreTake+0x15c>)
    1cbe:	4798      	blx	r3
    1cc0:	2800      	cmp	r0, #0
    1cc2:	d104      	bne.n	1cce <xQueueSemaphoreTake+0x2a>
    1cc4:	9b01      	ldr	r3, [sp, #4]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d005      	beq.n	1cd6 <xQueueSemaphoreTake+0x32>
    1cca:	b672      	cpsid	i
    1ccc:	e7fe      	b.n	1ccc <xQueueSemaphoreTake+0x28>
    1cce:	2500      	movs	r5, #0
    1cd0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    1cd2:	4f4c      	ldr	r7, [pc, #304]	; (1e04 <xQueueSemaphoreTake+0x160>)
    1cd4:	e048      	b.n	1d68 <xQueueSemaphoreTake+0xc4>
    1cd6:	2500      	movs	r5, #0
    1cd8:	2600      	movs	r6, #0
    1cda:	e7fa      	b.n	1cd2 <xQueueSemaphoreTake+0x2e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    1cdc:	3b01      	subs	r3, #1
    1cde:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1ce0:	6823      	ldr	r3, [r4, #0]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d102      	bne.n	1cec <xQueueSemaphoreTake+0x48>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1ce6:	4b48      	ldr	r3, [pc, #288]	; (1e08 <xQueueSemaphoreTake+0x164>)
    1ce8:	4798      	blx	r3
    1cea:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1cec:	6923      	ldr	r3, [r4, #16]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d007      	beq.n	1d02 <xQueueSemaphoreTake+0x5e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1cf2:	0020      	movs	r0, r4
    1cf4:	3010      	adds	r0, #16
    1cf6:	4b45      	ldr	r3, [pc, #276]	; (1e0c <xQueueSemaphoreTake+0x168>)
    1cf8:	4798      	blx	r3
    1cfa:	2800      	cmp	r0, #0
    1cfc:	d001      	beq.n	1d02 <xQueueSemaphoreTake+0x5e>
						queueYIELD_IF_USING_PREEMPTION();
    1cfe:	4b44      	ldr	r3, [pc, #272]	; (1e10 <xQueueSemaphoreTake+0x16c>)
    1d00:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1d02:	4b44      	ldr	r3, [pc, #272]	; (1e14 <xQueueSemaphoreTake+0x170>)
    1d04:	4798      	blx	r3
				return pdPASS;
    1d06:	2501      	movs	r5, #1
}
    1d08:	0028      	movs	r0, r5
    1d0a:	b005      	add	sp, #20
    1d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
    1d0e:	2d00      	cmp	r5, #0
    1d10:	d001      	beq.n	1d16 <xQueueSemaphoreTake+0x72>
    1d12:	b672      	cpsid	i
    1d14:	e7fe      	b.n	1d14 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
    1d16:	4b3f      	ldr	r3, [pc, #252]	; (1e14 <xQueueSemaphoreTake+0x170>)
    1d18:	4798      	blx	r3
					return errQUEUE_EMPTY;
    1d1a:	e7f5      	b.n	1d08 <xQueueSemaphoreTake+0x64>
					vTaskInternalSetTimeOutState( &xTimeOut );
    1d1c:	a802      	add	r0, sp, #8
    1d1e:	4b3e      	ldr	r3, [pc, #248]	; (1e18 <xQueueSemaphoreTake+0x174>)
    1d20:	4798      	blx	r3
    1d22:	e02a      	b.n	1d7a <xQueueSemaphoreTake+0xd6>
		prvLockQueue( pxQueue );
    1d24:	2200      	movs	r2, #0
    1d26:	2344      	movs	r3, #68	; 0x44
    1d28:	54e2      	strb	r2, [r4, r3]
    1d2a:	e031      	b.n	1d90 <xQueueSemaphoreTake+0xec>
    1d2c:	2200      	movs	r2, #0
    1d2e:	2345      	movs	r3, #69	; 0x45
    1d30:	54e2      	strb	r2, [r4, r3]
    1d32:	e032      	b.n	1d9a <xQueueSemaphoreTake+0xf6>
						taskENTER_CRITICAL();
    1d34:	4b33      	ldr	r3, [pc, #204]	; (1e04 <xQueueSemaphoreTake+0x160>)
    1d36:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1d38:	6860      	ldr	r0, [r4, #4]
    1d3a:	4b38      	ldr	r3, [pc, #224]	; (1e1c <xQueueSemaphoreTake+0x178>)
    1d3c:	4798      	blx	r3
    1d3e:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    1d40:	4b34      	ldr	r3, [pc, #208]	; (1e14 <xQueueSemaphoreTake+0x170>)
    1d42:	4798      	blx	r3
    1d44:	e039      	b.n	1dba <xQueueSemaphoreTake+0x116>
				prvUnlockQueue( pxQueue );
    1d46:	0020      	movs	r0, r4
    1d48:	4b35      	ldr	r3, [pc, #212]	; (1e20 <xQueueSemaphoreTake+0x17c>)
    1d4a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1d4c:	4b35      	ldr	r3, [pc, #212]	; (1e24 <xQueueSemaphoreTake+0x180>)
    1d4e:	4798      	blx	r3
    1d50:	e009      	b.n	1d66 <xQueueSemaphoreTake+0xc2>
			prvUnlockQueue( pxQueue );
    1d52:	0020      	movs	r0, r4
    1d54:	4b32      	ldr	r3, [pc, #200]	; (1e20 <xQueueSemaphoreTake+0x17c>)
    1d56:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1d58:	4b32      	ldr	r3, [pc, #200]	; (1e24 <xQueueSemaphoreTake+0x180>)
    1d5a:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1d5c:	0020      	movs	r0, r4
    1d5e:	4b32      	ldr	r3, [pc, #200]	; (1e28 <xQueueSemaphoreTake+0x184>)
    1d60:	4798      	blx	r3
    1d62:	2800      	cmp	r0, #0
    1d64:	d138      	bne.n	1dd8 <xQueueSemaphoreTake+0x134>
    1d66:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    1d68:	47b8      	blx	r7
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d1b5      	bne.n	1cdc <xQueueSemaphoreTake+0x38>
				if( xTicksToWait == ( TickType_t ) 0 )
    1d70:	9b01      	ldr	r3, [sp, #4]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d0cb      	beq.n	1d0e <xQueueSemaphoreTake+0x6a>
				else if( xEntryTimeSet == pdFALSE )
    1d76:	2e00      	cmp	r6, #0
    1d78:	d0d0      	beq.n	1d1c <xQueueSemaphoreTake+0x78>
		taskEXIT_CRITICAL();
    1d7a:	4b26      	ldr	r3, [pc, #152]	; (1e14 <xQueueSemaphoreTake+0x170>)
    1d7c:	4798      	blx	r3
		vTaskSuspendAll();
    1d7e:	4b2b      	ldr	r3, [pc, #172]	; (1e2c <xQueueSemaphoreTake+0x188>)
    1d80:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1d82:	4b20      	ldr	r3, [pc, #128]	; (1e04 <xQueueSemaphoreTake+0x160>)
    1d84:	4798      	blx	r3
    1d86:	2344      	movs	r3, #68	; 0x44
    1d88:	5ce3      	ldrb	r3, [r4, r3]
    1d8a:	b25b      	sxtb	r3, r3
    1d8c:	3301      	adds	r3, #1
    1d8e:	d0c9      	beq.n	1d24 <xQueueSemaphoreTake+0x80>
    1d90:	2345      	movs	r3, #69	; 0x45
    1d92:	5ce3      	ldrb	r3, [r4, r3]
    1d94:	b25b      	sxtb	r3, r3
    1d96:	3301      	adds	r3, #1
    1d98:	d0c8      	beq.n	1d2c <xQueueSemaphoreTake+0x88>
    1d9a:	4b1e      	ldr	r3, [pc, #120]	; (1e14 <xQueueSemaphoreTake+0x170>)
    1d9c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1d9e:	a901      	add	r1, sp, #4
    1da0:	a802      	add	r0, sp, #8
    1da2:	4b23      	ldr	r3, [pc, #140]	; (1e30 <xQueueSemaphoreTake+0x18c>)
    1da4:	4798      	blx	r3
    1da6:	2800      	cmp	r0, #0
    1da8:	d1d3      	bne.n	1d52 <xQueueSemaphoreTake+0xae>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1daa:	0020      	movs	r0, r4
    1dac:	4b1e      	ldr	r3, [pc, #120]	; (1e28 <xQueueSemaphoreTake+0x184>)
    1dae:	4798      	blx	r3
    1db0:	2800      	cmp	r0, #0
    1db2:	d0c8      	beq.n	1d46 <xQueueSemaphoreTake+0xa2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1db4:	6823      	ldr	r3, [r4, #0]
    1db6:	2b00      	cmp	r3, #0
    1db8:	d0bc      	beq.n	1d34 <xQueueSemaphoreTake+0x90>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1dba:	0020      	movs	r0, r4
    1dbc:	3024      	adds	r0, #36	; 0x24
    1dbe:	9901      	ldr	r1, [sp, #4]
    1dc0:	4b1c      	ldr	r3, [pc, #112]	; (1e34 <xQueueSemaphoreTake+0x190>)
    1dc2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1dc4:	0020      	movs	r0, r4
    1dc6:	4b16      	ldr	r3, [pc, #88]	; (1e20 <xQueueSemaphoreTake+0x17c>)
    1dc8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1dca:	4b16      	ldr	r3, [pc, #88]	; (1e24 <xQueueSemaphoreTake+0x180>)
    1dcc:	4798      	blx	r3
    1dce:	2800      	cmp	r0, #0
    1dd0:	d1c9      	bne.n	1d66 <xQueueSemaphoreTake+0xc2>
					portYIELD_WITHIN_API();
    1dd2:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <xQueueSemaphoreTake+0x16c>)
    1dd4:	4798      	blx	r3
    1dd6:	e7c6      	b.n	1d66 <xQueueSemaphoreTake+0xc2>
					if( xInheritanceOccurred != pdFALSE )
    1dd8:	2d00      	cmp	r5, #0
    1dda:	d100      	bne.n	1dde <xQueueSemaphoreTake+0x13a>
    1ddc:	e794      	b.n	1d08 <xQueueSemaphoreTake+0x64>
						taskENTER_CRITICAL();
    1dde:	4b09      	ldr	r3, [pc, #36]	; (1e04 <xQueueSemaphoreTake+0x160>)
    1de0:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    1de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    1de4:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    1de6:	2b00      	cmp	r3, #0
    1de8:	d003      	beq.n	1df2 <xQueueSemaphoreTake+0x14e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    1dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1dec:	681b      	ldr	r3, [r3, #0]
    1dee:	3105      	adds	r1, #5
    1df0:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    1df2:	6860      	ldr	r0, [r4, #4]
    1df4:	4b10      	ldr	r3, [pc, #64]	; (1e38 <xQueueSemaphoreTake+0x194>)
    1df6:	4798      	blx	r3
						taskEXIT_CRITICAL();
    1df8:	4b06      	ldr	r3, [pc, #24]	; (1e14 <xQueueSemaphoreTake+0x170>)
    1dfa:	4798      	blx	r3
				return errQUEUE_EMPTY;
    1dfc:	2500      	movs	r5, #0
    1dfe:	e783      	b.n	1d08 <xQueueSemaphoreTake+0x64>
    1e00:	000026b1 	.word	0x000026b1
    1e04:	000014f5 	.word	0x000014f5
    1e08:	00002871 	.word	0x00002871
    1e0c:	00002595 	.word	0x00002595
    1e10:	000014dd 	.word	0x000014dd
    1e14:	0000150d 	.word	0x0000150d
    1e18:	0000261d 	.word	0x0000261d
    1e1c:	000026d1 	.word	0x000026d1
    1e20:	00001755 	.word	0x00001755
    1e24:	00002355 	.word	0x00002355
    1e28:	0000162d 	.word	0x0000162d
    1e2c:	00002219 	.word	0x00002219
    1e30:	00002635 	.word	0x00002635
    1e34:	00002531 	.word	0x00002531
    1e38:	000027e5 	.word	0x000027e5

00001e3c <vQueueWaitForMessageRestricted>:
	{
    1e3c:	b570      	push	{r4, r5, r6, lr}
    1e3e:	0004      	movs	r4, r0
    1e40:	000d      	movs	r5, r1
    1e42:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    1e44:	4b11      	ldr	r3, [pc, #68]	; (1e8c <vQueueWaitForMessageRestricted+0x50>)
    1e46:	4798      	blx	r3
    1e48:	2344      	movs	r3, #68	; 0x44
    1e4a:	5ce3      	ldrb	r3, [r4, r3]
    1e4c:	b25b      	sxtb	r3, r3
    1e4e:	3301      	adds	r3, #1
    1e50:	d00d      	beq.n	1e6e <vQueueWaitForMessageRestricted+0x32>
    1e52:	2345      	movs	r3, #69	; 0x45
    1e54:	5ce3      	ldrb	r3, [r4, r3]
    1e56:	b25b      	sxtb	r3, r3
    1e58:	3301      	adds	r3, #1
    1e5a:	d00c      	beq.n	1e76 <vQueueWaitForMessageRestricted+0x3a>
    1e5c:	4b0c      	ldr	r3, [pc, #48]	; (1e90 <vQueueWaitForMessageRestricted+0x54>)
    1e5e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1e62:	2b00      	cmp	r3, #0
    1e64:	d00b      	beq.n	1e7e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    1e66:	0020      	movs	r0, r4
    1e68:	4b0a      	ldr	r3, [pc, #40]	; (1e94 <vQueueWaitForMessageRestricted+0x58>)
    1e6a:	4798      	blx	r3
	}
    1e6c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    1e6e:	2200      	movs	r2, #0
    1e70:	2344      	movs	r3, #68	; 0x44
    1e72:	54e2      	strb	r2, [r4, r3]
    1e74:	e7ed      	b.n	1e52 <vQueueWaitForMessageRestricted+0x16>
    1e76:	2200      	movs	r2, #0
    1e78:	2345      	movs	r3, #69	; 0x45
    1e7a:	54e2      	strb	r2, [r4, r3]
    1e7c:	e7ee      	b.n	1e5c <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1e7e:	0020      	movs	r0, r4
    1e80:	3024      	adds	r0, #36	; 0x24
    1e82:	0032      	movs	r2, r6
    1e84:	0029      	movs	r1, r5
    1e86:	4b04      	ldr	r3, [pc, #16]	; (1e98 <vQueueWaitForMessageRestricted+0x5c>)
    1e88:	4798      	blx	r3
    1e8a:	e7ec      	b.n	1e66 <vQueueWaitForMessageRestricted+0x2a>
    1e8c:	000014f5 	.word	0x000014f5
    1e90:	0000150d 	.word	0x0000150d
    1e94:	00001755 	.word	0x00001755
    1e98:	0000255d 	.word	0x0000255d

00001e9c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1e9c:	4b08      	ldr	r3, [pc, #32]	; (1ec0 <prvResetNextTaskUnblockTime+0x24>)
    1e9e:	681b      	ldr	r3, [r3, #0]
    1ea0:	681b      	ldr	r3, [r3, #0]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d007      	beq.n	1eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1ea6:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <prvResetNextTaskUnblockTime+0x24>)
    1ea8:	681b      	ldr	r3, [r3, #0]
    1eaa:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1eac:	68db      	ldr	r3, [r3, #12]
    1eae:	685a      	ldr	r2, [r3, #4]
    1eb0:	4b04      	ldr	r3, [pc, #16]	; (1ec4 <prvResetNextTaskUnblockTime+0x28>)
    1eb2:	601a      	str	r2, [r3, #0]
	}
}
    1eb4:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    1eb6:	2201      	movs	r2, #1
    1eb8:	4252      	negs	r2, r2
    1eba:	4b02      	ldr	r3, [pc, #8]	; (1ec4 <prvResetNextTaskUnblockTime+0x28>)
    1ebc:	601a      	str	r2, [r3, #0]
    1ebe:	e7f9      	b.n	1eb4 <prvResetNextTaskUnblockTime+0x18>
    1ec0:	20002ed4 	.word	0x20002ed4
    1ec4:	20002f84 	.word	0x20002f84

00001ec8 <prvIdleTask>:
{
    1ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eca:	46d6      	mov	lr, sl
    1ecc:	464f      	mov	r7, r9
    1ece:	4646      	mov	r6, r8
    1ed0:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1ed2:	4b14      	ldr	r3, [pc, #80]	; (1f24 <prvIdleTask+0x5c>)
    1ed4:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    1ed6:	4b14      	ldr	r3, [pc, #80]	; (1f28 <prvIdleTask+0x60>)
    1ed8:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1eda:	4f14      	ldr	r7, [pc, #80]	; (1f2c <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1edc:	4b14      	ldr	r3, [pc, #80]	; (1f30 <prvIdleTask+0x68>)
    1ede:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1ee0:	464b      	mov	r3, r9
    1ee2:	681b      	ldr	r3, [r3, #0]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d016      	beq.n	1f16 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    1ee8:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1eea:	68fb      	ldr	r3, [r7, #12]
    1eec:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1eee:	1d28      	adds	r0, r5, #4
    1ef0:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    1ef2:	4a10      	ldr	r2, [pc, #64]	; (1f34 <prvIdleTask+0x6c>)
    1ef4:	6813      	ldr	r3, [r2, #0]
    1ef6:	3b01      	subs	r3, #1
    1ef8:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    1efa:	4c0a      	ldr	r4, [pc, #40]	; (1f24 <prvIdleTask+0x5c>)
    1efc:	6823      	ldr	r3, [r4, #0]
    1efe:	3b01      	subs	r3, #1
    1f00:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    1f02:	4b0d      	ldr	r3, [pc, #52]	; (1f38 <prvIdleTask+0x70>)
    1f04:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    1f06:	6b28      	ldr	r0, [r5, #48]	; 0x30
    1f08:	4e0c      	ldr	r6, [pc, #48]	; (1f3c <prvIdleTask+0x74>)
    1f0a:	47b0      	blx	r6
			vPortFree( pxTCB );
    1f0c:	0028      	movs	r0, r5
    1f0e:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1f10:	6823      	ldr	r3, [r4, #0]
    1f12:	2b00      	cmp	r3, #0
    1f14:	d1e8      	bne.n	1ee8 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1f16:	4b0a      	ldr	r3, [pc, #40]	; (1f40 <prvIdleTask+0x78>)
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	2b01      	cmp	r3, #1
    1f1c:	d9e0      	bls.n	1ee0 <prvIdleTask+0x18>
				taskYIELD();
    1f1e:	4b09      	ldr	r3, [pc, #36]	; (1f44 <prvIdleTask+0x7c>)
    1f20:	4798      	blx	r3
    1f22:	e7dd      	b.n	1ee0 <prvIdleTask+0x18>
    1f24:	20002f44 	.word	0x20002f44
    1f28:	000014f5 	.word	0x000014f5
    1f2c:	20002fb8 	.word	0x20002fb8
    1f30:	000013b7 	.word	0x000013b7
    1f34:	20002f40 	.word	0x20002f40
    1f38:	0000150d 	.word	0x0000150d
    1f3c:	00001621 	.word	0x00001621
    1f40:	20002edc 	.word	0x20002edc
    1f44:	000014dd 	.word	0x000014dd

00001f48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    1f48:	b570      	push	{r4, r5, r6, lr}
    1f4a:	0004      	movs	r4, r0
    1f4c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1f4e:	4b17      	ldr	r3, [pc, #92]	; (1fac <prvAddCurrentTaskToDelayedList+0x64>)
    1f50:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1f52:	4b17      	ldr	r3, [pc, #92]	; (1fb0 <prvAddCurrentTaskToDelayedList+0x68>)
    1f54:	6818      	ldr	r0, [r3, #0]
    1f56:	3004      	adds	r0, #4
    1f58:	4b16      	ldr	r3, [pc, #88]	; (1fb4 <prvAddCurrentTaskToDelayedList+0x6c>)
    1f5a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1f5c:	1c63      	adds	r3, r4, #1
    1f5e:	d013      	beq.n	1f88 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1f60:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1f62:	4b13      	ldr	r3, [pc, #76]	; (1fb0 <prvAddCurrentTaskToDelayedList+0x68>)
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    1f68:	42a6      	cmp	r6, r4
    1f6a:	d816      	bhi.n	1f9a <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1f6c:	4b12      	ldr	r3, [pc, #72]	; (1fb8 <prvAddCurrentTaskToDelayedList+0x70>)
    1f6e:	6818      	ldr	r0, [r3, #0]
    1f70:	4b0f      	ldr	r3, [pc, #60]	; (1fb0 <prvAddCurrentTaskToDelayedList+0x68>)
    1f72:	6819      	ldr	r1, [r3, #0]
    1f74:	3104      	adds	r1, #4
    1f76:	4b11      	ldr	r3, [pc, #68]	; (1fbc <prvAddCurrentTaskToDelayedList+0x74>)
    1f78:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    1f7a:	4b11      	ldr	r3, [pc, #68]	; (1fc0 <prvAddCurrentTaskToDelayedList+0x78>)
    1f7c:	681b      	ldr	r3, [r3, #0]
    1f7e:	429c      	cmp	r4, r3
    1f80:	d212      	bcs.n	1fa8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    1f82:	4b0f      	ldr	r3, [pc, #60]	; (1fc0 <prvAddCurrentTaskToDelayedList+0x78>)
    1f84:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1f86:	e00f      	b.n	1fa8 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1f88:	2d00      	cmp	r5, #0
    1f8a:	d0e9      	beq.n	1f60 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1f8c:	4b08      	ldr	r3, [pc, #32]	; (1fb0 <prvAddCurrentTaskToDelayedList+0x68>)
    1f8e:	6819      	ldr	r1, [r3, #0]
    1f90:	3104      	adds	r1, #4
    1f92:	480c      	ldr	r0, [pc, #48]	; (1fc4 <prvAddCurrentTaskToDelayedList+0x7c>)
    1f94:	4b0c      	ldr	r3, [pc, #48]	; (1fc8 <prvAddCurrentTaskToDelayedList+0x80>)
    1f96:	4798      	blx	r3
    1f98:	e006      	b.n	1fa8 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1f9a:	4b0c      	ldr	r3, [pc, #48]	; (1fcc <prvAddCurrentTaskToDelayedList+0x84>)
    1f9c:	6818      	ldr	r0, [r3, #0]
    1f9e:	4b04      	ldr	r3, [pc, #16]	; (1fb0 <prvAddCurrentTaskToDelayedList+0x68>)
    1fa0:	6819      	ldr	r1, [r3, #0]
    1fa2:	3104      	adds	r1, #4
    1fa4:	4b05      	ldr	r3, [pc, #20]	; (1fbc <prvAddCurrentTaskToDelayedList+0x74>)
    1fa6:	4798      	blx	r3
}
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	20002fcc 	.word	0x20002fcc
    1fb0:	20002ed0 	.word	0x20002ed0
    1fb4:	000013b7 	.word	0x000013b7
    1fb8:	20002ed4 	.word	0x20002ed4
    1fbc:	00001389 	.word	0x00001389
    1fc0:	20002f84 	.word	0x20002f84
    1fc4:	20002fa4 	.word	0x20002fa4
    1fc8:	00001371 	.word	0x00001371
    1fcc:	20002ed8 	.word	0x20002ed8

00001fd0 <xTaskCreate>:
	{
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	46c6      	mov	lr, r8
    1fd4:	b500      	push	{lr}
    1fd6:	b084      	sub	sp, #16
    1fd8:	9001      	str	r0, [sp, #4]
    1fda:	000d      	movs	r5, r1
    1fdc:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fde:	0097      	lsls	r7, r2, #2
    1fe0:	0038      	movs	r0, r7
    1fe2:	4b5b      	ldr	r3, [pc, #364]	; (2150 <STACK_SIZE+0x150>)
    1fe4:	4798      	blx	r3
    1fe6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    1fe8:	d100      	bne.n	1fec <xTaskCreate+0x1c>
    1fea:	e081      	b.n	20f0 <STACK_SIZE+0xf0>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1fec:	204c      	movs	r0, #76	; 0x4c
    1fee:	4b58      	ldr	r3, [pc, #352]	; (2150 <STACK_SIZE+0x150>)
    1ff0:	4798      	blx	r3
    1ff2:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    1ff4:	d100      	bne.n	1ff8 <xTaskCreate+0x28>
    1ff6:	e078      	b.n	20ea <STACK_SIZE+0xea>
					pxNewTCB->pxStack = pxStack;
    1ff8:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1ffa:	1f38      	subs	r0, r7, #4
    1ffc:	1830      	adds	r0, r6, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1ffe:	2307      	movs	r3, #7
    2000:	4398      	bics	r0, r3
    2002:	4680      	mov	r8, r0
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2004:	782a      	ldrb	r2, [r5, #0]
    2006:	332d      	adds	r3, #45	; 0x2d
    2008:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    200a:	782b      	ldrb	r3, [r5, #0]
    200c:	2b00      	cmp	r3, #0
    200e:	d00d      	beq.n	202c <STACK_SIZE+0x2c>
    2010:	3501      	adds	r5, #1
    2012:	0023      	movs	r3, r4
    2014:	3335      	adds	r3, #53	; 0x35
    2016:	0020      	movs	r0, r4
    2018:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    201a:	782a      	ldrb	r2, [r5, #0]
    201c:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    201e:	782a      	ldrb	r2, [r5, #0]
    2020:	2a00      	cmp	r2, #0
    2022:	d003      	beq.n	202c <STACK_SIZE+0x2c>
    2024:	3501      	adds	r5, #1
    2026:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2028:	4283      	cmp	r3, r0
    202a:	d1f6      	bne.n	201a <STACK_SIZE+0x1a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    202c:	2200      	movs	r2, #0
    202e:	233b      	movs	r3, #59	; 0x3b
    2030:	54e2      	strb	r2, [r4, r3]
    2032:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    2034:	2f04      	cmp	r7, #4
    2036:	d900      	bls.n	203a <STACK_SIZE+0x3a>
    2038:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    203a:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    203c:	63e7      	str	r7, [r4, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
    203e:	2600      	movs	r6, #0
    2040:	6426      	str	r6, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2042:	1d23      	adds	r3, r4, #4
    2044:	9303      	str	r3, [sp, #12]
    2046:	0018      	movs	r0, r3
    2048:	4d42      	ldr	r5, [pc, #264]	; (2154 <STACK_SIZE+0x154>)
    204a:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    204c:	0020      	movs	r0, r4
    204e:	3018      	adds	r0, #24
    2050:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2052:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2054:	2305      	movs	r3, #5
    2056:	1bdb      	subs	r3, r3, r7
    2058:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    205a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    205c:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    205e:	2348      	movs	r3, #72	; 0x48
    2060:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2062:	9a02      	ldr	r2, [sp, #8]
    2064:	9901      	ldr	r1, [sp, #4]
    2066:	4640      	mov	r0, r8
    2068:	4b3b      	ldr	r3, [pc, #236]	; (2158 <STACK_SIZE+0x158>)
    206a:	4798      	blx	r3
    206c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    206e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2070:	2b00      	cmp	r3, #0
    2072:	d000      	beq.n	2076 <STACK_SIZE+0x76>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2074:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    2076:	4b39      	ldr	r3, [pc, #228]	; (215c <STACK_SIZE+0x15c>)
    2078:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    207a:	4a39      	ldr	r2, [pc, #228]	; (2160 <STACK_SIZE+0x160>)
    207c:	6813      	ldr	r3, [r2, #0]
    207e:	3301      	adds	r3, #1
    2080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    2082:	4b38      	ldr	r3, [pc, #224]	; (2164 <STACK_SIZE+0x164>)
    2084:	681b      	ldr	r3, [r3, #0]
    2086:	2b00      	cmp	r3, #0
    2088:	d035      	beq.n	20f6 <STACK_SIZE+0xf6>
			if( xSchedulerRunning == pdFALSE )
    208a:	4b37      	ldr	r3, [pc, #220]	; (2168 <STACK_SIZE+0x168>)
    208c:	681b      	ldr	r3, [r3, #0]
    208e:	2b00      	cmp	r3, #0
    2090:	d107      	bne.n	20a2 <STACK_SIZE+0xa2>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2092:	4b34      	ldr	r3, [pc, #208]	; (2164 <STACK_SIZE+0x164>)
    2094:	681b      	ldr	r3, [r3, #0]
    2096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2098:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    209a:	4293      	cmp	r3, r2
    209c:	d801      	bhi.n	20a2 <STACK_SIZE+0xa2>
					pxCurrentTCB = pxNewTCB;
    209e:	4b31      	ldr	r3, [pc, #196]	; (2164 <STACK_SIZE+0x164>)
    20a0:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    20a2:	4a32      	ldr	r2, [pc, #200]	; (216c <STACK_SIZE+0x16c>)
    20a4:	6813      	ldr	r3, [r2, #0]
    20a6:	3301      	adds	r3, #1
    20a8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
    20aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20ac:	4a30      	ldr	r2, [pc, #192]	; (2170 <STACK_SIZE+0x170>)
    20ae:	6812      	ldr	r2, [r2, #0]
    20b0:	4293      	cmp	r3, r2
    20b2:	d901      	bls.n	20b8 <STACK_SIZE+0xb8>
    20b4:	4a2e      	ldr	r2, [pc, #184]	; (2170 <STACK_SIZE+0x170>)
    20b6:	6013      	str	r3, [r2, #0]
    20b8:	0098      	lsls	r0, r3, #2
    20ba:	18c0      	adds	r0, r0, r3
    20bc:	0080      	lsls	r0, r0, #2
    20be:	4b2d      	ldr	r3, [pc, #180]	; (2174 <STACK_SIZE+0x174>)
    20c0:	1818      	adds	r0, r3, r0
    20c2:	9903      	ldr	r1, [sp, #12]
    20c4:	4b2c      	ldr	r3, [pc, #176]	; (2178 <STACK_SIZE+0x178>)
    20c6:	4798      	blx	r3
	taskEXIT_CRITICAL();
    20c8:	4b2c      	ldr	r3, [pc, #176]	; (217c <STACK_SIZE+0x17c>)
    20ca:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    20cc:	4b26      	ldr	r3, [pc, #152]	; (2168 <STACK_SIZE+0x168>)
    20ce:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    20d0:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    20d2:	2b00      	cmp	r3, #0
    20d4:	d005      	beq.n	20e2 <STACK_SIZE+0xe2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    20d6:	4b23      	ldr	r3, [pc, #140]	; (2164 <STACK_SIZE+0x164>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20de:	429a      	cmp	r2, r3
    20e0:	d331      	bcc.n	2146 <STACK_SIZE+0x146>
	}
    20e2:	b004      	add	sp, #16
    20e4:	bc04      	pop	{r2}
    20e6:	4690      	mov	r8, r2
    20e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    20ea:	0030      	movs	r0, r6
    20ec:	4b24      	ldr	r3, [pc, #144]	; (2180 <STACK_SIZE+0x180>)
    20ee:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    20f0:	2001      	movs	r0, #1
    20f2:	4240      	negs	r0, r0
    20f4:	e7f5      	b.n	20e2 <STACK_SIZE+0xe2>
			pxCurrentTCB = pxNewTCB;
    20f6:	4b1b      	ldr	r3, [pc, #108]	; (2164 <STACK_SIZE+0x164>)
    20f8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    20fa:	6813      	ldr	r3, [r2, #0]
    20fc:	2b01      	cmp	r3, #1
    20fe:	d1d0      	bne.n	20a2 <STACK_SIZE+0xa2>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2100:	4f1c      	ldr	r7, [pc, #112]	; (2174 <STACK_SIZE+0x174>)
    2102:	0038      	movs	r0, r7
    2104:	4e1f      	ldr	r6, [pc, #124]	; (2184 <STACK_SIZE+0x184>)
    2106:	47b0      	blx	r6
    2108:	0038      	movs	r0, r7
    210a:	3014      	adds	r0, #20
    210c:	47b0      	blx	r6
    210e:	0038      	movs	r0, r7
    2110:	3028      	adds	r0, #40	; 0x28
    2112:	47b0      	blx	r6
    2114:	0038      	movs	r0, r7
    2116:	303c      	adds	r0, #60	; 0x3c
    2118:	47b0      	blx	r6
    211a:	0038      	movs	r0, r7
    211c:	3050      	adds	r0, #80	; 0x50
    211e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    2120:	4b19      	ldr	r3, [pc, #100]	; (2188 <STACK_SIZE+0x188>)
    2122:	4698      	mov	r8, r3
    2124:	0018      	movs	r0, r3
    2126:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2128:	4f18      	ldr	r7, [pc, #96]	; (218c <STACK_SIZE+0x18c>)
    212a:	0038      	movs	r0, r7
    212c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    212e:	4818      	ldr	r0, [pc, #96]	; (2190 <STACK_SIZE+0x190>)
    2130:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    2132:	4818      	ldr	r0, [pc, #96]	; (2194 <STACK_SIZE+0x194>)
    2134:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    2136:	4818      	ldr	r0, [pc, #96]	; (2198 <STACK_SIZE+0x198>)
    2138:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    213a:	4b18      	ldr	r3, [pc, #96]	; (219c <STACK_SIZE+0x19c>)
    213c:	4642      	mov	r2, r8
    213e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2140:	4b17      	ldr	r3, [pc, #92]	; (21a0 <STACK_SIZE+0x1a0>)
    2142:	601f      	str	r7, [r3, #0]
    2144:	e7ad      	b.n	20a2 <STACK_SIZE+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
    2146:	4b17      	ldr	r3, [pc, #92]	; (21a4 <STACK_SIZE+0x1a4>)
    2148:	4798      	blx	r3
			xReturn = pdPASS;
    214a:	2001      	movs	r0, #1
    214c:	e7c9      	b.n	20e2 <STACK_SIZE+0xe2>
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	000015b5 	.word	0x000015b5
    2154:	0000136b 	.word	0x0000136b
    2158:	00001445 	.word	0x00001445
    215c:	000014f5 	.word	0x000014f5
    2160:	20002f40 	.word	0x20002f40
    2164:	20002ed0 	.word	0x20002ed0
    2168:	20002fa0 	.word	0x20002fa0
    216c:	20002f50 	.word	0x20002f50
    2170:	20002f54 	.word	0x20002f54
    2174:	20002edc 	.word	0x20002edc
    2178:	00001371 	.word	0x00001371
    217c:	0000150d 	.word	0x0000150d
    2180:	00001621 	.word	0x00001621
    2184:	00001355 	.word	0x00001355
    2188:	20002f58 	.word	0x20002f58
    218c:	20002f6c 	.word	0x20002f6c
    2190:	20002f8c 	.word	0x20002f8c
    2194:	20002fb8 	.word	0x20002fb8
    2198:	20002fa4 	.word	0x20002fa4
    219c:	20002ed4 	.word	0x20002ed4
    21a0:	20002ed8 	.word	0x20002ed8
    21a4:	000014dd 	.word	0x000014dd

000021a8 <vTaskStartScheduler>:
{
    21a8:	b510      	push	{r4, lr}
    21aa:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    21ac:	4b11      	ldr	r3, [pc, #68]	; (21f4 <vTaskStartScheduler+0x4c>)
    21ae:	9301      	str	r3, [sp, #4]
    21b0:	2300      	movs	r3, #0
    21b2:	9300      	str	r3, [sp, #0]
    21b4:	2264      	movs	r2, #100	; 0x64
    21b6:	4910      	ldr	r1, [pc, #64]	; (21f8 <vTaskStartScheduler+0x50>)
    21b8:	4810      	ldr	r0, [pc, #64]	; (21fc <vTaskStartScheduler+0x54>)
    21ba:	4c11      	ldr	r4, [pc, #68]	; (2200 <vTaskStartScheduler+0x58>)
    21bc:	47a0      	blx	r4
		if( xReturn == pdPASS )
    21be:	2801      	cmp	r0, #1
    21c0:	d003      	beq.n	21ca <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    21c2:	1c43      	adds	r3, r0, #1
    21c4:	d013      	beq.n	21ee <vTaskStartScheduler+0x46>
}
    21c6:	b002      	add	sp, #8
    21c8:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    21ca:	4b0e      	ldr	r3, [pc, #56]	; (2204 <vTaskStartScheduler+0x5c>)
    21cc:	4798      	blx	r3
	if( xReturn == pdPASS )
    21ce:	2801      	cmp	r0, #1
    21d0:	d1f7      	bne.n	21c2 <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    21d2:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    21d4:	2201      	movs	r2, #1
    21d6:	4252      	negs	r2, r2
    21d8:	4b0b      	ldr	r3, [pc, #44]	; (2208 <vTaskStartScheduler+0x60>)
    21da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    21dc:	3202      	adds	r2, #2
    21de:	4b0b      	ldr	r3, [pc, #44]	; (220c <vTaskStartScheduler+0x64>)
    21e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    21e2:	2200      	movs	r2, #0
    21e4:	4b0a      	ldr	r3, [pc, #40]	; (2210 <vTaskStartScheduler+0x68>)
    21e6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    21e8:	4b0a      	ldr	r3, [pc, #40]	; (2214 <vTaskStartScheduler+0x6c>)
    21ea:	4798      	blx	r3
    21ec:	e7eb      	b.n	21c6 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    21ee:	b672      	cpsid	i
    21f0:	e7fe      	b.n	21f0 <vTaskStartScheduler+0x48>
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	20002f80 	.word	0x20002f80
    21f8:	00004524 	.word	0x00004524
    21fc:	00001ec9 	.word	0x00001ec9
    2200:	00001fd1 	.word	0x00001fd1
    2204:	00002935 	.word	0x00002935
    2208:	20002f84 	.word	0x20002f84
    220c:	20002fa0 	.word	0x20002fa0
    2210:	20002fcc 	.word	0x20002fcc
    2214:	00001469 	.word	0x00001469

00002218 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2218:	4a02      	ldr	r2, [pc, #8]	; (2224 <vTaskSuspendAll+0xc>)
    221a:	6813      	ldr	r3, [r2, #0]
    221c:	3301      	adds	r3, #1
    221e:	6013      	str	r3, [r2, #0]
}
    2220:	4770      	bx	lr
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	20002f4c 	.word	0x20002f4c

00002228 <xTaskGetTickCount>:
		xTicks = xTickCount;
    2228:	4b01      	ldr	r3, [pc, #4]	; (2230 <xTaskGetTickCount+0x8>)
    222a:	6818      	ldr	r0, [r3, #0]
}
    222c:	4770      	bx	lr
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	20002fcc 	.word	0x20002fcc

00002234 <xTaskIncrementTick>:
{
    2234:	b5f0      	push	{r4, r5, r6, r7, lr}
    2236:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2238:	4b38      	ldr	r3, [pc, #224]	; (231c <xTaskIncrementTick+0xe8>)
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	2b00      	cmp	r3, #0
    223e:	d160      	bne.n	2302 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    2240:	4b37      	ldr	r3, [pc, #220]	; (2320 <xTaskIncrementTick+0xec>)
    2242:	681d      	ldr	r5, [r3, #0]
    2244:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    2246:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    2248:	2d00      	cmp	r5, #0
    224a:	d112      	bne.n	2272 <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
    224c:	4b35      	ldr	r3, [pc, #212]	; (2324 <xTaskIncrementTick+0xf0>)
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	681b      	ldr	r3, [r3, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d001      	beq.n	225a <xTaskIncrementTick+0x26>
    2256:	b672      	cpsid	i
    2258:	e7fe      	b.n	2258 <xTaskIncrementTick+0x24>
    225a:	4a32      	ldr	r2, [pc, #200]	; (2324 <xTaskIncrementTick+0xf0>)
    225c:	6811      	ldr	r1, [r2, #0]
    225e:	4b32      	ldr	r3, [pc, #200]	; (2328 <xTaskIncrementTick+0xf4>)
    2260:	6818      	ldr	r0, [r3, #0]
    2262:	6010      	str	r0, [r2, #0]
    2264:	6019      	str	r1, [r3, #0]
    2266:	4a31      	ldr	r2, [pc, #196]	; (232c <xTaskIncrementTick+0xf8>)
    2268:	6813      	ldr	r3, [r2, #0]
    226a:	3301      	adds	r3, #1
    226c:	6013      	str	r3, [r2, #0]
    226e:	4b30      	ldr	r3, [pc, #192]	; (2330 <xTaskIncrementTick+0xfc>)
    2270:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    2272:	4b30      	ldr	r3, [pc, #192]	; (2334 <xTaskIncrementTick+0x100>)
    2274:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    2276:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    2278:	429d      	cmp	r5, r3
    227a:	d333      	bcc.n	22e4 <xTaskIncrementTick+0xb0>
    227c:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    227e:	4f29      	ldr	r7, [pc, #164]	; (2324 <xTaskIncrementTick+0xf0>)
    2280:	683b      	ldr	r3, [r7, #0]
    2282:	681b      	ldr	r3, [r3, #0]
    2284:	2b00      	cmp	r3, #0
    2286:	d029      	beq.n	22dc <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2288:	4b26      	ldr	r3, [pc, #152]	; (2324 <xTaskIncrementTick+0xf0>)
    228a:	681b      	ldr	r3, [r3, #0]
    228c:	68db      	ldr	r3, [r3, #12]
    228e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    2290:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    2292:	429d      	cmp	r5, r3
    2294:	d332      	bcc.n	22fc <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2296:	1d33      	adds	r3, r6, #4
    2298:	9301      	str	r3, [sp, #4]
    229a:	0018      	movs	r0, r3
    229c:	4b26      	ldr	r3, [pc, #152]	; (2338 <xTaskIncrementTick+0x104>)
    229e:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    22a0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    22a2:	2b00      	cmp	r3, #0
    22a4:	d003      	beq.n	22ae <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    22a6:	0030      	movs	r0, r6
    22a8:	3018      	adds	r0, #24
    22aa:	4b23      	ldr	r3, [pc, #140]	; (2338 <xTaskIncrementTick+0x104>)
    22ac:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    22ae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    22b0:	4a22      	ldr	r2, [pc, #136]	; (233c <xTaskIncrementTick+0x108>)
    22b2:	6812      	ldr	r2, [r2, #0]
    22b4:	4293      	cmp	r3, r2
    22b6:	d901      	bls.n	22bc <xTaskIncrementTick+0x88>
    22b8:	4a20      	ldr	r2, [pc, #128]	; (233c <xTaskIncrementTick+0x108>)
    22ba:	6013      	str	r3, [r2, #0]
    22bc:	0098      	lsls	r0, r3, #2
    22be:	18c0      	adds	r0, r0, r3
    22c0:	0080      	lsls	r0, r0, #2
    22c2:	4b1f      	ldr	r3, [pc, #124]	; (2340 <xTaskIncrementTick+0x10c>)
    22c4:	1818      	adds	r0, r3, r0
    22c6:	9901      	ldr	r1, [sp, #4]
    22c8:	4b1e      	ldr	r3, [pc, #120]	; (2344 <xTaskIncrementTick+0x110>)
    22ca:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    22cc:	4b1e      	ldr	r3, [pc, #120]	; (2348 <xTaskIncrementTick+0x114>)
    22ce:	681b      	ldr	r3, [r3, #0]
    22d0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    22d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22d4:	429a      	cmp	r2, r3
    22d6:	d3d3      	bcc.n	2280 <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
    22d8:	2401      	movs	r4, #1
    22da:	e7d1      	b.n	2280 <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22dc:	2201      	movs	r2, #1
    22de:	4252      	negs	r2, r2
    22e0:	4b14      	ldr	r3, [pc, #80]	; (2334 <xTaskIncrementTick+0x100>)
    22e2:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    22e4:	4b18      	ldr	r3, [pc, #96]	; (2348 <xTaskIncrementTick+0x114>)
    22e6:	681b      	ldr	r3, [r3, #0]
    22e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    22ea:	0093      	lsls	r3, r2, #2
    22ec:	189b      	adds	r3, r3, r2
    22ee:	009b      	lsls	r3, r3, #2
    22f0:	4a13      	ldr	r2, [pc, #76]	; (2340 <xTaskIncrementTick+0x10c>)
    22f2:	589b      	ldr	r3, [r3, r2]
    22f4:	2b01      	cmp	r3, #1
    22f6:	d909      	bls.n	230c <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
    22f8:	2401      	movs	r4, #1
    22fa:	e007      	b.n	230c <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
    22fc:	4a0d      	ldr	r2, [pc, #52]	; (2334 <xTaskIncrementTick+0x100>)
    22fe:	6013      	str	r3, [r2, #0]
						break;
    2300:	e7f0      	b.n	22e4 <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
    2302:	4a12      	ldr	r2, [pc, #72]	; (234c <xTaskIncrementTick+0x118>)
    2304:	6813      	ldr	r3, [r2, #0]
    2306:	3301      	adds	r3, #1
    2308:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    230a:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    230c:	4b10      	ldr	r3, [pc, #64]	; (2350 <xTaskIncrementTick+0x11c>)
    230e:	681b      	ldr	r3, [r3, #0]
    2310:	2b00      	cmp	r3, #0
    2312:	d000      	beq.n	2316 <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
    2314:	2401      	movs	r4, #1
}
    2316:	0020      	movs	r0, r4
    2318:	b003      	add	sp, #12
    231a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    231c:	20002f4c 	.word	0x20002f4c
    2320:	20002fcc 	.word	0x20002fcc
    2324:	20002ed4 	.word	0x20002ed4
    2328:	20002ed8 	.word	0x20002ed8
    232c:	20002f88 	.word	0x20002f88
    2330:	00001e9d 	.word	0x00001e9d
    2334:	20002f84 	.word	0x20002f84
    2338:	000013b7 	.word	0x000013b7
    233c:	20002f54 	.word	0x20002f54
    2340:	20002edc 	.word	0x20002edc
    2344:	00001371 	.word	0x00001371
    2348:	20002ed0 	.word	0x20002ed0
    234c:	20002f48 	.word	0x20002f48
    2350:	20002fd0 	.word	0x20002fd0

00002354 <xTaskResumeAll>:
{
    2354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    2356:	4b30      	ldr	r3, [pc, #192]	; (2418 <xTaskResumeAll+0xc4>)
    2358:	681b      	ldr	r3, [r3, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d101      	bne.n	2362 <xTaskResumeAll+0xe>
    235e:	b672      	cpsid	i
    2360:	e7fe      	b.n	2360 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    2362:	4b2e      	ldr	r3, [pc, #184]	; (241c <xTaskResumeAll+0xc8>)
    2364:	4798      	blx	r3
		--uxSchedulerSuspended;
    2366:	4b2c      	ldr	r3, [pc, #176]	; (2418 <xTaskResumeAll+0xc4>)
    2368:	681a      	ldr	r2, [r3, #0]
    236a:	3a01      	subs	r2, #1
    236c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    236e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    2370:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2372:	2b00      	cmp	r3, #0
    2374:	d103      	bne.n	237e <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2376:	4b2a      	ldr	r3, [pc, #168]	; (2420 <xTaskResumeAll+0xcc>)
    2378:	681b      	ldr	r3, [r3, #0]
    237a:	2b00      	cmp	r3, #0
    237c:	d103      	bne.n	2386 <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    237e:	4b29      	ldr	r3, [pc, #164]	; (2424 <xTaskResumeAll+0xd0>)
    2380:	4798      	blx	r3
}
    2382:	0020      	movs	r0, r4
    2384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2386:	4d28      	ldr	r5, [pc, #160]	; (2428 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2388:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    238a:	682b      	ldr	r3, [r5, #0]
    238c:	2b00      	cmp	r3, #0
    238e:	d022      	beq.n	23d6 <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2390:	68fb      	ldr	r3, [r7, #12]
    2392:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2394:	0020      	movs	r0, r4
    2396:	3018      	adds	r0, #24
    2398:	4b24      	ldr	r3, [pc, #144]	; (242c <xTaskResumeAll+0xd8>)
    239a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    239c:	1d26      	adds	r6, r4, #4
    239e:	0030      	movs	r0, r6
    23a0:	4b22      	ldr	r3, [pc, #136]	; (242c <xTaskResumeAll+0xd8>)
    23a2:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    23a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    23a6:	4a22      	ldr	r2, [pc, #136]	; (2430 <xTaskResumeAll+0xdc>)
    23a8:	6812      	ldr	r2, [r2, #0]
    23aa:	4293      	cmp	r3, r2
    23ac:	d901      	bls.n	23b2 <xTaskResumeAll+0x5e>
    23ae:	4a20      	ldr	r2, [pc, #128]	; (2430 <xTaskResumeAll+0xdc>)
    23b0:	6013      	str	r3, [r2, #0]
    23b2:	0098      	lsls	r0, r3, #2
    23b4:	18c0      	adds	r0, r0, r3
    23b6:	0080      	lsls	r0, r0, #2
    23b8:	4b1e      	ldr	r3, [pc, #120]	; (2434 <xTaskResumeAll+0xe0>)
    23ba:	1818      	adds	r0, r3, r0
    23bc:	0031      	movs	r1, r6
    23be:	4b1e      	ldr	r3, [pc, #120]	; (2438 <xTaskResumeAll+0xe4>)
    23c0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    23c2:	4b1e      	ldr	r3, [pc, #120]	; (243c <xTaskResumeAll+0xe8>)
    23c4:	681b      	ldr	r3, [r3, #0]
    23c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    23c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    23ca:	429a      	cmp	r2, r3
    23cc:	d3dd      	bcc.n	238a <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    23ce:	2201      	movs	r2, #1
    23d0:	4b1b      	ldr	r3, [pc, #108]	; (2440 <xTaskResumeAll+0xec>)
    23d2:	601a      	str	r2, [r3, #0]
    23d4:	e7d9      	b.n	238a <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    23d6:	2c00      	cmp	r4, #0
    23d8:	d001      	beq.n	23de <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    23da:	4b1a      	ldr	r3, [pc, #104]	; (2444 <xTaskResumeAll+0xf0>)
    23dc:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    23de:	4b1a      	ldr	r3, [pc, #104]	; (2448 <xTaskResumeAll+0xf4>)
    23e0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    23e2:	2c00      	cmp	r4, #0
    23e4:	d00e      	beq.n	2404 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    23e6:	4f19      	ldr	r7, [pc, #100]	; (244c <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    23e8:	4e15      	ldr	r6, [pc, #84]	; (2440 <xTaskResumeAll+0xec>)
    23ea:	2501      	movs	r5, #1
    23ec:	e002      	b.n	23f4 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    23ee:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    23f0:	2c00      	cmp	r4, #0
    23f2:	d004      	beq.n	23fe <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    23f4:	47b8      	blx	r7
    23f6:	2800      	cmp	r0, #0
    23f8:	d0f9      	beq.n	23ee <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    23fa:	6035      	str	r5, [r6, #0]
    23fc:	e7f7      	b.n	23ee <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    23fe:	2200      	movs	r2, #0
    2400:	4b11      	ldr	r3, [pc, #68]	; (2448 <xTaskResumeAll+0xf4>)
    2402:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    2404:	4b0e      	ldr	r3, [pc, #56]	; (2440 <xTaskResumeAll+0xec>)
    2406:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    2408:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    240a:	2b00      	cmp	r3, #0
    240c:	d0b7      	beq.n	237e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    240e:	4b10      	ldr	r3, [pc, #64]	; (2450 <xTaskResumeAll+0xfc>)
    2410:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    2412:	3401      	adds	r4, #1
    2414:	e7b3      	b.n	237e <xTaskResumeAll+0x2a>
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	20002f4c 	.word	0x20002f4c
    241c:	000014f5 	.word	0x000014f5
    2420:	20002f40 	.word	0x20002f40
    2424:	0000150d 	.word	0x0000150d
    2428:	20002f8c 	.word	0x20002f8c
    242c:	000013b7 	.word	0x000013b7
    2430:	20002f54 	.word	0x20002f54
    2434:	20002edc 	.word	0x20002edc
    2438:	00001371 	.word	0x00001371
    243c:	20002ed0 	.word	0x20002ed0
    2440:	20002fd0 	.word	0x20002fd0
    2444:	00001e9d 	.word	0x00001e9d
    2448:	20002f48 	.word	0x20002f48
    244c:	00002235 	.word	0x00002235
    2450:	000014dd 	.word	0x000014dd

00002454 <vTaskDelay>:
	{
    2454:	b510      	push	{r4, lr}
    2456:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    2458:	d00f      	beq.n	247a <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    245a:	4b09      	ldr	r3, [pc, #36]	; (2480 <vTaskDelay+0x2c>)
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d001      	beq.n	2466 <vTaskDelay+0x12>
    2462:	b672      	cpsid	i
    2464:	e7fe      	b.n	2464 <vTaskDelay+0x10>
			vTaskSuspendAll();
    2466:	4b07      	ldr	r3, [pc, #28]	; (2484 <vTaskDelay+0x30>)
    2468:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    246a:	2100      	movs	r1, #0
    246c:	0020      	movs	r0, r4
    246e:	4b06      	ldr	r3, [pc, #24]	; (2488 <vTaskDelay+0x34>)
    2470:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    2472:	4b06      	ldr	r3, [pc, #24]	; (248c <vTaskDelay+0x38>)
    2474:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    2476:	2800      	cmp	r0, #0
    2478:	d101      	bne.n	247e <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <vTaskDelay+0x3c>)
    247c:	4798      	blx	r3
	}
    247e:	bd10      	pop	{r4, pc}
    2480:	20002f4c 	.word	0x20002f4c
    2484:	00002219 	.word	0x00002219
    2488:	00001f49 	.word	0x00001f49
    248c:	00002355 	.word	0x00002355
    2490:	000014dd 	.word	0x000014dd

00002494 <vTaskSwitchContext>:
{
    2494:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2496:	4b21      	ldr	r3, [pc, #132]	; (251c <vTaskSwitchContext+0x88>)
    2498:	681b      	ldr	r3, [r3, #0]
    249a:	2b00      	cmp	r3, #0
    249c:	d118      	bne.n	24d0 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
    249e:	2200      	movs	r2, #0
    24a0:	4b1f      	ldr	r3, [pc, #124]	; (2520 <vTaskSwitchContext+0x8c>)
    24a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    24a4:	4b1f      	ldr	r3, [pc, #124]	; (2524 <vTaskSwitchContext+0x90>)
    24a6:	681b      	ldr	r3, [r3, #0]
    24a8:	009a      	lsls	r2, r3, #2
    24aa:	18d2      	adds	r2, r2, r3
    24ac:	0092      	lsls	r2, r2, #2
    24ae:	491e      	ldr	r1, [pc, #120]	; (2528 <vTaskSwitchContext+0x94>)
    24b0:	5852      	ldr	r2, [r2, r1]
    24b2:	2a00      	cmp	r2, #0
    24b4:	d110      	bne.n	24d8 <vTaskSwitchContext+0x44>
    24b6:	2b00      	cmp	r3, #0
    24b8:	d008      	beq.n	24cc <vTaskSwitchContext+0x38>
    24ba:	3b01      	subs	r3, #1
    24bc:	009a      	lsls	r2, r3, #2
    24be:	18d2      	adds	r2, r2, r3
    24c0:	0092      	lsls	r2, r2, #2
    24c2:	5852      	ldr	r2, [r2, r1]
    24c4:	2a00      	cmp	r2, #0
    24c6:	d107      	bne.n	24d8 <vTaskSwitchContext+0x44>
    24c8:	2b00      	cmp	r3, #0
    24ca:	d1f6      	bne.n	24ba <vTaskSwitchContext+0x26>
    24cc:	b672      	cpsid	i
    24ce:	e7fe      	b.n	24ce <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
    24d0:	2201      	movs	r2, #1
    24d2:	4b13      	ldr	r3, [pc, #76]	; (2520 <vTaskSwitchContext+0x8c>)
    24d4:	601a      	str	r2, [r3, #0]
}
    24d6:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    24d8:	4813      	ldr	r0, [pc, #76]	; (2528 <vTaskSwitchContext+0x94>)
    24da:	009a      	lsls	r2, r3, #2
    24dc:	18d1      	adds	r1, r2, r3
    24de:	0089      	lsls	r1, r1, #2
    24e0:	1841      	adds	r1, r0, r1
    24e2:	684c      	ldr	r4, [r1, #4]
    24e4:	6864      	ldr	r4, [r4, #4]
    24e6:	604c      	str	r4, [r1, #4]
    24e8:	18d2      	adds	r2, r2, r3
    24ea:	0092      	lsls	r2, r2, #2
    24ec:	3208      	adds	r2, #8
    24ee:	1882      	adds	r2, r0, r2
    24f0:	4294      	cmp	r4, r2
    24f2:	d00b      	beq.n	250c <vTaskSwitchContext+0x78>
    24f4:	009a      	lsls	r2, r3, #2
    24f6:	18d2      	adds	r2, r2, r3
    24f8:	0092      	lsls	r2, r2, #2
    24fa:	490b      	ldr	r1, [pc, #44]	; (2528 <vTaskSwitchContext+0x94>)
    24fc:	188a      	adds	r2, r1, r2
    24fe:	6852      	ldr	r2, [r2, #4]
    2500:	68d1      	ldr	r1, [r2, #12]
    2502:	4a0a      	ldr	r2, [pc, #40]	; (252c <vTaskSwitchContext+0x98>)
    2504:	6011      	str	r1, [r2, #0]
    2506:	4a07      	ldr	r2, [pc, #28]	; (2524 <vTaskSwitchContext+0x90>)
    2508:	6013      	str	r3, [r2, #0]
}
    250a:	e7e4      	b.n	24d6 <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    250c:	6860      	ldr	r0, [r4, #4]
    250e:	009a      	lsls	r2, r3, #2
    2510:	18d2      	adds	r2, r2, r3
    2512:	0092      	lsls	r2, r2, #2
    2514:	4904      	ldr	r1, [pc, #16]	; (2528 <vTaskSwitchContext+0x94>)
    2516:	188a      	adds	r2, r1, r2
    2518:	6050      	str	r0, [r2, #4]
    251a:	e7eb      	b.n	24f4 <vTaskSwitchContext+0x60>
    251c:	20002f4c 	.word	0x20002f4c
    2520:	20002fd0 	.word	0x20002fd0
    2524:	20002f54 	.word	0x20002f54
    2528:	20002edc 	.word	0x20002edc
    252c:	20002ed0 	.word	0x20002ed0

00002530 <vTaskPlaceOnEventList>:
{
    2530:	b510      	push	{r4, lr}
    2532:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    2534:	2800      	cmp	r0, #0
    2536:	d101      	bne.n	253c <vTaskPlaceOnEventList+0xc>
    2538:	b672      	cpsid	i
    253a:	e7fe      	b.n	253a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <vTaskPlaceOnEventList+0x20>)
    253e:	6819      	ldr	r1, [r3, #0]
    2540:	3118      	adds	r1, #24
    2542:	4b04      	ldr	r3, [pc, #16]	; (2554 <vTaskPlaceOnEventList+0x24>)
    2544:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2546:	2101      	movs	r1, #1
    2548:	0020      	movs	r0, r4
    254a:	4b03      	ldr	r3, [pc, #12]	; (2558 <vTaskPlaceOnEventList+0x28>)
    254c:	4798      	blx	r3
}
    254e:	bd10      	pop	{r4, pc}
    2550:	20002ed0 	.word	0x20002ed0
    2554:	00001389 	.word	0x00001389
    2558:	00001f49 	.word	0x00001f49

0000255c <vTaskPlaceOnEventListRestricted>:
	{
    255c:	b570      	push	{r4, r5, r6, lr}
    255e:	000c      	movs	r4, r1
    2560:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    2562:	2800      	cmp	r0, #0
    2564:	d00d      	beq.n	2582 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2566:	4b08      	ldr	r3, [pc, #32]	; (2588 <vTaskPlaceOnEventListRestricted+0x2c>)
    2568:	6819      	ldr	r1, [r3, #0]
    256a:	3118      	adds	r1, #24
    256c:	4b07      	ldr	r3, [pc, #28]	; (258c <vTaskPlaceOnEventListRestricted+0x30>)
    256e:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    2570:	2d00      	cmp	r5, #0
    2572:	d001      	beq.n	2578 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    2574:	2401      	movs	r4, #1
    2576:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    2578:	0029      	movs	r1, r5
    257a:	0020      	movs	r0, r4
    257c:	4b04      	ldr	r3, [pc, #16]	; (2590 <vTaskPlaceOnEventListRestricted+0x34>)
    257e:	4798      	blx	r3
	}
    2580:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    2582:	b672      	cpsid	i
    2584:	e7fe      	b.n	2584 <vTaskPlaceOnEventListRestricted+0x28>
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	20002ed0 	.word	0x20002ed0
    258c:	00001371 	.word	0x00001371
    2590:	00001f49 	.word	0x00001f49

00002594 <xTaskRemoveFromEventList>:
{
    2594:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2596:	68c3      	ldr	r3, [r0, #12]
    2598:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    259a:	2c00      	cmp	r4, #0
    259c:	d027      	beq.n	25ee <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    259e:	0025      	movs	r5, r4
    25a0:	3518      	adds	r5, #24
    25a2:	0028      	movs	r0, r5
    25a4:	4b15      	ldr	r3, [pc, #84]	; (25fc <xTaskRemoveFromEventList+0x68>)
    25a6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    25a8:	4b15      	ldr	r3, [pc, #84]	; (2600 <xTaskRemoveFromEventList+0x6c>)
    25aa:	681b      	ldr	r3, [r3, #0]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d120      	bne.n	25f2 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    25b0:	1d25      	adds	r5, r4, #4
    25b2:	0028      	movs	r0, r5
    25b4:	4b11      	ldr	r3, [pc, #68]	; (25fc <xTaskRemoveFromEventList+0x68>)
    25b6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    25b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    25ba:	4a12      	ldr	r2, [pc, #72]	; (2604 <xTaskRemoveFromEventList+0x70>)
    25bc:	6812      	ldr	r2, [r2, #0]
    25be:	4293      	cmp	r3, r2
    25c0:	d901      	bls.n	25c6 <xTaskRemoveFromEventList+0x32>
    25c2:	4a10      	ldr	r2, [pc, #64]	; (2604 <xTaskRemoveFromEventList+0x70>)
    25c4:	6013      	str	r3, [r2, #0]
    25c6:	0098      	lsls	r0, r3, #2
    25c8:	18c0      	adds	r0, r0, r3
    25ca:	0080      	lsls	r0, r0, #2
    25cc:	4b0e      	ldr	r3, [pc, #56]	; (2608 <xTaskRemoveFromEventList+0x74>)
    25ce:	1818      	adds	r0, r3, r0
    25d0:	0029      	movs	r1, r5
    25d2:	4b0e      	ldr	r3, [pc, #56]	; (260c <xTaskRemoveFromEventList+0x78>)
    25d4:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    25d6:	4b0e      	ldr	r3, [pc, #56]	; (2610 <xTaskRemoveFromEventList+0x7c>)
    25d8:	681b      	ldr	r3, [r3, #0]
    25da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    25dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    25de:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    25e0:	429a      	cmp	r2, r3
    25e2:	d903      	bls.n	25ec <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    25e4:	2201      	movs	r2, #1
    25e6:	4b0b      	ldr	r3, [pc, #44]	; (2614 <xTaskRemoveFromEventList+0x80>)
    25e8:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    25ea:	3001      	adds	r0, #1
}
    25ec:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    25ee:	b672      	cpsid	i
    25f0:	e7fe      	b.n	25f0 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    25f2:	0029      	movs	r1, r5
    25f4:	4808      	ldr	r0, [pc, #32]	; (2618 <xTaskRemoveFromEventList+0x84>)
    25f6:	4b05      	ldr	r3, [pc, #20]	; (260c <xTaskRemoveFromEventList+0x78>)
    25f8:	4798      	blx	r3
    25fa:	e7ec      	b.n	25d6 <xTaskRemoveFromEventList+0x42>
    25fc:	000013b7 	.word	0x000013b7
    2600:	20002f4c 	.word	0x20002f4c
    2604:	20002f54 	.word	0x20002f54
    2608:	20002edc 	.word	0x20002edc
    260c:	00001371 	.word	0x00001371
    2610:	20002ed0 	.word	0x20002ed0
    2614:	20002fd0 	.word	0x20002fd0
    2618:	20002f8c 	.word	0x20002f8c

0000261c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    261c:	4b03      	ldr	r3, [pc, #12]	; (262c <vTaskInternalSetTimeOutState+0x10>)
    261e:	681b      	ldr	r3, [r3, #0]
    2620:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2622:	4b03      	ldr	r3, [pc, #12]	; (2630 <vTaskInternalSetTimeOutState+0x14>)
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	6043      	str	r3, [r0, #4]
}
    2628:	4770      	bx	lr
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	20002f88 	.word	0x20002f88
    2630:	20002fcc 	.word	0x20002fcc

00002634 <xTaskCheckForTimeOut>:
{
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	0006      	movs	r6, r0
    2638:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    263a:	2800      	cmp	r0, #0
    263c:	d01b      	beq.n	2676 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    263e:	2900      	cmp	r1, #0
    2640:	d01b      	beq.n	267a <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    2642:	4b13      	ldr	r3, [pc, #76]	; (2690 <xTaskCheckForTimeOut+0x5c>)
    2644:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    2646:	4b13      	ldr	r3, [pc, #76]	; (2694 <xTaskCheckForTimeOut+0x60>)
    2648:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    264a:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    264c:	682b      	ldr	r3, [r5, #0]
    264e:	1c58      	adds	r0, r3, #1
    2650:	d01c      	beq.n	268c <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2652:	4811      	ldr	r0, [pc, #68]	; (2698 <xTaskCheckForTimeOut+0x64>)
    2654:	6800      	ldr	r0, [r0, #0]
    2656:	6834      	ldr	r4, [r6, #0]
    2658:	4284      	cmp	r4, r0
    265a:	d002      	beq.n	2662 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    265c:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    265e:	428a      	cmp	r2, r1
    2660:	d205      	bcs.n	266e <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2662:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2664:	429a      	cmp	r2, r3
    2666:	d30a      	bcc.n	267e <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    2668:	2300      	movs	r3, #0
    266a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    266c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    266e:	4b0b      	ldr	r3, [pc, #44]	; (269c <xTaskCheckForTimeOut+0x68>)
    2670:	4798      	blx	r3
}
    2672:	0020      	movs	r0, r4
    2674:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    2676:	b672      	cpsid	i
    2678:	e7fe      	b.n	2678 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    267a:	b672      	cpsid	i
    267c:	e7fe      	b.n	267c <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    267e:	1a9b      	subs	r3, r3, r2
    2680:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    2682:	0030      	movs	r0, r6
    2684:	4b06      	ldr	r3, [pc, #24]	; (26a0 <xTaskCheckForTimeOut+0x6c>)
    2686:	4798      	blx	r3
			xReturn = pdFALSE;
    2688:	2400      	movs	r4, #0
    268a:	e7f0      	b.n	266e <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    268c:	2400      	movs	r4, #0
    268e:	e7ee      	b.n	266e <xTaskCheckForTimeOut+0x3a>
    2690:	000014f5 	.word	0x000014f5
    2694:	20002fcc 	.word	0x20002fcc
    2698:	20002f88 	.word	0x20002f88
    269c:	0000150d 	.word	0x0000150d
    26a0:	0000261d 	.word	0x0000261d

000026a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    26a4:	2201      	movs	r2, #1
    26a6:	4b01      	ldr	r3, [pc, #4]	; (26ac <vTaskMissedYield+0x8>)
    26a8:	601a      	str	r2, [r3, #0]
}
    26aa:	4770      	bx	lr
    26ac:	20002fd0 	.word	0x20002fd0

000026b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    26b0:	4b05      	ldr	r3, [pc, #20]	; (26c8 <xTaskGetSchedulerState+0x18>)
    26b2:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    26b4:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    26b6:	2b00      	cmp	r3, #0
    26b8:	d004      	beq.n	26c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    26ba:	4b04      	ldr	r3, [pc, #16]	; (26cc <xTaskGetSchedulerState+0x1c>)
    26bc:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    26be:	4243      	negs	r3, r0
    26c0:	4158      	adcs	r0, r3
    26c2:	0040      	lsls	r0, r0, #1
	}
    26c4:	4770      	bx	lr
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	20002fa0 	.word	0x20002fa0
    26cc:	20002f4c 	.word	0x20002f4c

000026d0 <xTaskPriorityInherit>:
	{
    26d0:	b570      	push	{r4, r5, r6, lr}
    26d2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    26d4:	d03c      	beq.n	2750 <xTaskPriorityInherit+0x80>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    26d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    26d8:	4b1e      	ldr	r3, [pc, #120]	; (2754 <xTaskPriorityInherit+0x84>)
    26da:	681b      	ldr	r3, [r3, #0]
    26dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26de:	429a      	cmp	r2, r3
    26e0:	d22e      	bcs.n	2740 <xTaskPriorityInherit+0x70>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    26e2:	6983      	ldr	r3, [r0, #24]
    26e4:	2b00      	cmp	r3, #0
    26e6:	db05      	blt.n	26f4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    26e8:	4b1a      	ldr	r3, [pc, #104]	; (2754 <xTaskPriorityInherit+0x84>)
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    26ee:	2305      	movs	r3, #5
    26f0:	1a5b      	subs	r3, r3, r1
    26f2:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    26f4:	0093      	lsls	r3, r2, #2
    26f6:	189b      	adds	r3, r3, r2
    26f8:	009b      	lsls	r3, r3, #2
    26fa:	4a17      	ldr	r2, [pc, #92]	; (2758 <xTaskPriorityInherit+0x88>)
    26fc:	18d3      	adds	r3, r2, r3
    26fe:	6962      	ldr	r2, [r4, #20]
    2700:	429a      	cmp	r2, r3
    2702:	d005      	beq.n	2710 <xTaskPriorityInherit+0x40>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2704:	4b13      	ldr	r3, [pc, #76]	; (2754 <xTaskPriorityInherit+0x84>)
    2706:	681b      	ldr	r3, [r3, #0]
    2708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    270a:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
    270c:	2001      	movs	r0, #1
    270e:	e01e      	b.n	274e <xTaskPriorityInherit+0x7e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2710:	1d25      	adds	r5, r4, #4
    2712:	0028      	movs	r0, r5
    2714:	4b11      	ldr	r3, [pc, #68]	; (275c <xTaskPriorityInherit+0x8c>)
    2716:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2718:	4b0e      	ldr	r3, [pc, #56]	; (2754 <xTaskPriorityInherit+0x84>)
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    271e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    2720:	4a0f      	ldr	r2, [pc, #60]	; (2760 <xTaskPriorityInherit+0x90>)
    2722:	6812      	ldr	r2, [r2, #0]
    2724:	4293      	cmp	r3, r2
    2726:	d901      	bls.n	272c <xTaskPriorityInherit+0x5c>
    2728:	4a0d      	ldr	r2, [pc, #52]	; (2760 <xTaskPriorityInherit+0x90>)
    272a:	6013      	str	r3, [r2, #0]
    272c:	0098      	lsls	r0, r3, #2
    272e:	18c0      	adds	r0, r0, r3
    2730:	0080      	lsls	r0, r0, #2
    2732:	4b09      	ldr	r3, [pc, #36]	; (2758 <xTaskPriorityInherit+0x88>)
    2734:	1818      	adds	r0, r3, r0
    2736:	0029      	movs	r1, r5
    2738:	4b0a      	ldr	r3, [pc, #40]	; (2764 <xTaskPriorityInherit+0x94>)
    273a:	4798      	blx	r3
				xReturn = pdTRUE;
    273c:	2001      	movs	r0, #1
    273e:	e006      	b.n	274e <xTaskPriorityInherit+0x7e>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    2740:	4b04      	ldr	r3, [pc, #16]	; (2754 <xTaskPriorityInherit+0x84>)
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    2746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2748:	4298      	cmp	r0, r3
    274a:	4180      	sbcs	r0, r0
    274c:	4240      	negs	r0, r0
	}
    274e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    2750:	2000      	movs	r0, #0
		return xReturn;
    2752:	e7fc      	b.n	274e <xTaskPriorityInherit+0x7e>
    2754:	20002ed0 	.word	0x20002ed0
    2758:	20002edc 	.word	0x20002edc
    275c:	000013b7 	.word	0x000013b7
    2760:	20002f54 	.word	0x20002f54
    2764:	00001371 	.word	0x00001371

00002768 <xTaskPriorityDisinherit>:
	{
    2768:	b570      	push	{r4, r5, r6, lr}
    276a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    276c:	d02c      	beq.n	27c8 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    276e:	4b18      	ldr	r3, [pc, #96]	; (27d0 <xTaskPriorityDisinherit+0x68>)
    2770:	681b      	ldr	r3, [r3, #0]
    2772:	4298      	cmp	r0, r3
    2774:	d001      	beq.n	277a <xTaskPriorityDisinherit+0x12>
    2776:	b672      	cpsid	i
    2778:	e7fe      	b.n	2778 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    277a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    277c:	2b00      	cmp	r3, #0
    277e:	d101      	bne.n	2784 <xTaskPriorityDisinherit+0x1c>
    2780:	b672      	cpsid	i
    2782:	e7fe      	b.n	2782 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    2784:	3b01      	subs	r3, #1
    2786:	6403      	str	r3, [r0, #64]	; 0x40
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2788:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    278a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    278c:	428a      	cmp	r2, r1
    278e:	d01d      	beq.n	27cc <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    2790:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2792:	2b00      	cmp	r3, #0
    2794:	d117      	bne.n	27c6 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2796:	1d25      	adds	r5, r4, #4
    2798:	0028      	movs	r0, r5
    279a:	4b0e      	ldr	r3, [pc, #56]	; (27d4 <xTaskPriorityDisinherit+0x6c>)
    279c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    279e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    27a0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27a2:	2205      	movs	r2, #5
    27a4:	1ad2      	subs	r2, r2, r3
    27a6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    27a8:	4a0b      	ldr	r2, [pc, #44]	; (27d8 <xTaskPriorityDisinherit+0x70>)
    27aa:	6812      	ldr	r2, [r2, #0]
    27ac:	4293      	cmp	r3, r2
    27ae:	d901      	bls.n	27b4 <xTaskPriorityDisinherit+0x4c>
    27b0:	4a09      	ldr	r2, [pc, #36]	; (27d8 <xTaskPriorityDisinherit+0x70>)
    27b2:	6013      	str	r3, [r2, #0]
    27b4:	009a      	lsls	r2, r3, #2
    27b6:	18d3      	adds	r3, r2, r3
    27b8:	009b      	lsls	r3, r3, #2
    27ba:	4808      	ldr	r0, [pc, #32]	; (27dc <xTaskPriorityDisinherit+0x74>)
    27bc:	18c0      	adds	r0, r0, r3
    27be:	0029      	movs	r1, r5
    27c0:	4b07      	ldr	r3, [pc, #28]	; (27e0 <xTaskPriorityDisinherit+0x78>)
    27c2:	4798      	blx	r3
					xReturn = pdTRUE;
    27c4:	2001      	movs	r0, #1
	}
    27c6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    27c8:	2000      	movs	r0, #0
    27ca:	e7fc      	b.n	27c6 <xTaskPriorityDisinherit+0x5e>
    27cc:	2000      	movs	r0, #0
    27ce:	e7fa      	b.n	27c6 <xTaskPriorityDisinherit+0x5e>
    27d0:	20002ed0 	.word	0x20002ed0
    27d4:	000013b7 	.word	0x000013b7
    27d8:	20002f54 	.word	0x20002f54
    27dc:	20002edc 	.word	0x20002edc
    27e0:	00001371 	.word	0x00001371

000027e4 <vTaskPriorityDisinheritAfterTimeout>:
	{
    27e4:	b570      	push	{r4, r5, r6, lr}
    27e6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    27e8:	d00d      	beq.n	2806 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    27ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
    27ec:	2b00      	cmp	r3, #0
    27ee:	d101      	bne.n	27f4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    27f0:	b672      	cpsid	i
    27f2:	e7fe      	b.n	27f2 <vTaskPriorityDisinheritAfterTimeout+0xe>
    27f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    27f6:	428a      	cmp	r2, r1
    27f8:	d200      	bcs.n	27fc <vTaskPriorityDisinheritAfterTimeout+0x18>
    27fa:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    27fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    27fe:	4291      	cmp	r1, r2
    2800:	d001      	beq.n	2806 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    2802:	2b01      	cmp	r3, #1
    2804:	d000      	beq.n	2808 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    2806:	bd70      	pop	{r4, r5, r6, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    2808:	4b14      	ldr	r3, [pc, #80]	; (285c <vTaskPriorityDisinheritAfterTimeout+0x78>)
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	429c      	cmp	r4, r3
    280e:	d101      	bne.n	2814 <vTaskPriorityDisinheritAfterTimeout+0x30>
    2810:	b672      	cpsid	i
    2812:	e7fe      	b.n	2812 <vTaskPriorityDisinheritAfterTimeout+0x2e>
					pxTCB->uxPriority = uxPriorityToUse;
    2814:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2816:	69a3      	ldr	r3, [r4, #24]
    2818:	2b00      	cmp	r3, #0
    281a:	db02      	blt.n	2822 <vTaskPriorityDisinheritAfterTimeout+0x3e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    281c:	2305      	movs	r3, #5
    281e:	1a9a      	subs	r2, r3, r2
    2820:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    2822:	008b      	lsls	r3, r1, #2
    2824:	185b      	adds	r3, r3, r1
    2826:	009b      	lsls	r3, r3, #2
    2828:	4a0d      	ldr	r2, [pc, #52]	; (2860 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    282a:	18d3      	adds	r3, r2, r3
    282c:	6962      	ldr	r2, [r4, #20]
    282e:	429a      	cmp	r2, r3
    2830:	d1e9      	bne.n	2806 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2832:	1d25      	adds	r5, r4, #4
    2834:	0028      	movs	r0, r5
    2836:	4b0b      	ldr	r3, [pc, #44]	; (2864 <vTaskPriorityDisinheritAfterTimeout+0x80>)
    2838:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    283a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    283c:	4a0a      	ldr	r2, [pc, #40]	; (2868 <vTaskPriorityDisinheritAfterTimeout+0x84>)
    283e:	6812      	ldr	r2, [r2, #0]
    2840:	4293      	cmp	r3, r2
    2842:	d901      	bls.n	2848 <vTaskPriorityDisinheritAfterTimeout+0x64>
    2844:	4a08      	ldr	r2, [pc, #32]	; (2868 <vTaskPriorityDisinheritAfterTimeout+0x84>)
    2846:	6013      	str	r3, [r2, #0]
    2848:	0098      	lsls	r0, r3, #2
    284a:	18c0      	adds	r0, r0, r3
    284c:	0080      	lsls	r0, r0, #2
    284e:	4b04      	ldr	r3, [pc, #16]	; (2860 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    2850:	1818      	adds	r0, r3, r0
    2852:	0029      	movs	r1, r5
    2854:	4b05      	ldr	r3, [pc, #20]	; (286c <vTaskPriorityDisinheritAfterTimeout+0x88>)
    2856:	4798      	blx	r3
	}
    2858:	e7d5      	b.n	2806 <vTaskPriorityDisinheritAfterTimeout+0x22>
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	20002ed0 	.word	0x20002ed0
    2860:	20002edc 	.word	0x20002edc
    2864:	000013b7 	.word	0x000013b7
    2868:	20002f54 	.word	0x20002f54
    286c:	00001371 	.word	0x00001371

00002870 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    2870:	4b05      	ldr	r3, [pc, #20]	; (2888 <pvTaskIncrementMutexHeldCount+0x18>)
    2872:	681b      	ldr	r3, [r3, #0]
    2874:	2b00      	cmp	r3, #0
    2876:	d004      	beq.n	2882 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    2878:	4b03      	ldr	r3, [pc, #12]	; (2888 <pvTaskIncrementMutexHeldCount+0x18>)
    287a:	681a      	ldr	r2, [r3, #0]
    287c:	6c13      	ldr	r3, [r2, #64]	; 0x40
    287e:	3301      	adds	r3, #1
    2880:	6413      	str	r3, [r2, #64]	; 0x40
		return pxCurrentTCB;
    2882:	4b01      	ldr	r3, [pc, #4]	; (2888 <pvTaskIncrementMutexHeldCount+0x18>)
    2884:	6818      	ldr	r0, [r3, #0]
	}
    2886:	4770      	bx	lr
    2888:	20002ed0 	.word	0x20002ed0

0000288c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    288c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    288e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2890:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    2892:	4291      	cmp	r1, r2
    2894:	d80b      	bhi.n	28ae <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2896:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2898:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    289a:	6983      	ldr	r3, [r0, #24]
    289c:	429a      	cmp	r2, r3
    289e:	d211      	bcs.n	28c4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    28a0:	1d01      	adds	r1, r0, #4
    28a2:	4b09      	ldr	r3, [pc, #36]	; (28c8 <prvInsertTimerInActiveList+0x3c>)
    28a4:	6818      	ldr	r0, [r3, #0]
    28a6:	4b09      	ldr	r3, [pc, #36]	; (28cc <prvInsertTimerInActiveList+0x40>)
    28a8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    28aa:	2400      	movs	r4, #0
    28ac:	e00a      	b.n	28c4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    28ae:	429a      	cmp	r2, r3
    28b0:	d202      	bcs.n	28b8 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    28b2:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    28b4:	4299      	cmp	r1, r3
    28b6:	d205      	bcs.n	28c4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    28b8:	1d01      	adds	r1, r0, #4
    28ba:	4b05      	ldr	r3, [pc, #20]	; (28d0 <prvInsertTimerInActiveList+0x44>)
    28bc:	6818      	ldr	r0, [r3, #0]
    28be:	4b03      	ldr	r3, [pc, #12]	; (28cc <prvInsertTimerInActiveList+0x40>)
    28c0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    28c2:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    28c4:	0020      	movs	r0, r4
    28c6:	bd10      	pop	{r4, pc}
    28c8:	20002fd8 	.word	0x20002fd8
    28cc:	00001389 	.word	0x00001389
    28d0:	20002fd4 	.word	0x20002fd4

000028d4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    28d4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    28d6:	4b0e      	ldr	r3, [pc, #56]	; (2910 <prvCheckForValidListAndQueue+0x3c>)
    28d8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    28da:	4b0e      	ldr	r3, [pc, #56]	; (2914 <prvCheckForValidListAndQueue+0x40>)
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	2b00      	cmp	r3, #0
    28e0:	d002      	beq.n	28e8 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    28e2:	4b0d      	ldr	r3, [pc, #52]	; (2918 <prvCheckForValidListAndQueue+0x44>)
    28e4:	4798      	blx	r3
}
    28e6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    28e8:	4d0c      	ldr	r5, [pc, #48]	; (291c <prvCheckForValidListAndQueue+0x48>)
    28ea:	0028      	movs	r0, r5
    28ec:	4e0c      	ldr	r6, [pc, #48]	; (2920 <prvCheckForValidListAndQueue+0x4c>)
    28ee:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    28f0:	4c0c      	ldr	r4, [pc, #48]	; (2924 <prvCheckForValidListAndQueue+0x50>)
    28f2:	0020      	movs	r0, r4
    28f4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    28f6:	4b0c      	ldr	r3, [pc, #48]	; (2928 <prvCheckForValidListAndQueue+0x54>)
    28f8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    28fa:	4b0c      	ldr	r3, [pc, #48]	; (292c <prvCheckForValidListAndQueue+0x58>)
    28fc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    28fe:	2200      	movs	r2, #0
    2900:	210c      	movs	r1, #12
    2902:	2002      	movs	r0, #2
    2904:	4b0a      	ldr	r3, [pc, #40]	; (2930 <prvCheckForValidListAndQueue+0x5c>)
    2906:	4798      	blx	r3
    2908:	4b02      	ldr	r3, [pc, #8]	; (2914 <prvCheckForValidListAndQueue+0x40>)
    290a:	6018      	str	r0, [r3, #0]
    290c:	e7e9      	b.n	28e2 <prvCheckForValidListAndQueue+0xe>
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	000014f5 	.word	0x000014f5
    2914:	20003008 	.word	0x20003008
    2918:	0000150d 	.word	0x0000150d
    291c:	20002fdc 	.word	0x20002fdc
    2920:	00001355 	.word	0x00001355
    2924:	20002ff0 	.word	0x20002ff0
    2928:	20002fd4 	.word	0x20002fd4
    292c:	20002fd8 	.word	0x20002fd8
    2930:	00001881 	.word	0x00001881

00002934 <xTimerCreateTimerTask>:
{
    2934:	b510      	push	{r4, lr}
    2936:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    2938:	4b0a      	ldr	r3, [pc, #40]	; (2964 <xTimerCreateTimerTask+0x30>)
    293a:	4798      	blx	r3
	if( xTimerQueue != NULL )
    293c:	4b0a      	ldr	r3, [pc, #40]	; (2968 <xTimerCreateTimerTask+0x34>)
    293e:	681b      	ldr	r3, [r3, #0]
    2940:	2b00      	cmp	r3, #0
    2942:	d00d      	beq.n	2960 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    2944:	4b09      	ldr	r3, [pc, #36]	; (296c <xTimerCreateTimerTask+0x38>)
    2946:	9301      	str	r3, [sp, #4]
    2948:	2302      	movs	r3, #2
    294a:	9300      	str	r3, [sp, #0]
    294c:	2300      	movs	r3, #0
    294e:	2250      	movs	r2, #80	; 0x50
    2950:	4907      	ldr	r1, [pc, #28]	; (2970 <xTimerCreateTimerTask+0x3c>)
    2952:	4808      	ldr	r0, [pc, #32]	; (2974 <xTimerCreateTimerTask+0x40>)
    2954:	4c08      	ldr	r4, [pc, #32]	; (2978 <xTimerCreateTimerTask+0x44>)
    2956:	47a0      	blx	r4
	configASSERT( xReturn );
    2958:	2800      	cmp	r0, #0
    295a:	d001      	beq.n	2960 <xTimerCreateTimerTask+0x2c>
}
    295c:	b002      	add	sp, #8
    295e:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    2960:	b672      	cpsid	i
    2962:	e7fe      	b.n	2962 <xTimerCreateTimerTask+0x2e>
    2964:	000028d5 	.word	0x000028d5
    2968:	20003008 	.word	0x20003008
    296c:	2000300c 	.word	0x2000300c
    2970:	00004554 	.word	0x00004554
    2974:	00002aa1 	.word	0x00002aa1
    2978:	00001fd1 	.word	0x00001fd1

0000297c <xTimerGenericCommand>:
{
    297c:	b530      	push	{r4, r5, lr}
    297e:	b085      	sub	sp, #20
    2980:	0004      	movs	r4, r0
    2982:	001d      	movs	r5, r3
	configASSERT( xTimer );
    2984:	2800      	cmp	r0, #0
    2986:	d014      	beq.n	29b2 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    2988:	4b13      	ldr	r3, [pc, #76]	; (29d8 <xTimerGenericCommand+0x5c>)
    298a:	6818      	ldr	r0, [r3, #0]
    298c:	2800      	cmp	r0, #0
    298e:	d021      	beq.n	29d4 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    2990:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2992:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2994:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2996:	2905      	cmp	r1, #5
    2998:	dc15      	bgt.n	29c6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    299a:	4b10      	ldr	r3, [pc, #64]	; (29dc <xTimerGenericCommand+0x60>)
    299c:	4798      	blx	r3
    299e:	2802      	cmp	r0, #2
    29a0:	d009      	beq.n	29b6 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    29a2:	4b0d      	ldr	r3, [pc, #52]	; (29d8 <xTimerGenericCommand+0x5c>)
    29a4:	6818      	ldr	r0, [r3, #0]
    29a6:	2300      	movs	r3, #0
    29a8:	2200      	movs	r2, #0
    29aa:	a901      	add	r1, sp, #4
    29ac:	4c0c      	ldr	r4, [pc, #48]	; (29e0 <xTimerGenericCommand+0x64>)
    29ae:	47a0      	blx	r4
    29b0:	e00e      	b.n	29d0 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    29b2:	b672      	cpsid	i
    29b4:	e7fe      	b.n	29b4 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    29b6:	4b08      	ldr	r3, [pc, #32]	; (29d8 <xTimerGenericCommand+0x5c>)
    29b8:	6818      	ldr	r0, [r3, #0]
    29ba:	2300      	movs	r3, #0
    29bc:	9a08      	ldr	r2, [sp, #32]
    29be:	a901      	add	r1, sp, #4
    29c0:	4c07      	ldr	r4, [pc, #28]	; (29e0 <xTimerGenericCommand+0x64>)
    29c2:	47a0      	blx	r4
    29c4:	e004      	b.n	29d0 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    29c6:	2300      	movs	r3, #0
    29c8:	002a      	movs	r2, r5
    29ca:	a901      	add	r1, sp, #4
    29cc:	4c05      	ldr	r4, [pc, #20]	; (29e4 <xTimerGenericCommand+0x68>)
    29ce:	47a0      	blx	r4
}
    29d0:	b005      	add	sp, #20
    29d2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    29d4:	2000      	movs	r0, #0
	return xReturn;
    29d6:	e7fb      	b.n	29d0 <xTimerGenericCommand+0x54>
    29d8:	20003008 	.word	0x20003008
    29dc:	000026b1 	.word	0x000026b1
    29e0:	000018c9 	.word	0x000018c9
    29e4:	00001a81 	.word	0x00001a81

000029e8 <prvSampleTimeNow>:
{
    29e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ea:	46d6      	mov	lr, sl
    29ec:	464f      	mov	r7, r9
    29ee:	4646      	mov	r6, r8
    29f0:	b5c0      	push	{r6, r7, lr}
    29f2:	b082      	sub	sp, #8
    29f4:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    29f6:	4b23      	ldr	r3, [pc, #140]	; (2a84 <prvSampleTimeNow+0x9c>)
    29f8:	4798      	blx	r3
    29fa:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    29fc:	4b22      	ldr	r3, [pc, #136]	; (2a88 <prvSampleTimeNow+0xa0>)
    29fe:	681b      	ldr	r3, [r3, #0]
    2a00:	4298      	cmp	r0, r3
    2a02:	d317      	bcc.n	2a34 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    2a04:	2300      	movs	r3, #0
    2a06:	4642      	mov	r2, r8
    2a08:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    2a0a:	4b1f      	ldr	r3, [pc, #124]	; (2a88 <prvSampleTimeNow+0xa0>)
    2a0c:	4652      	mov	r2, sl
    2a0e:	601a      	str	r2, [r3, #0]
}
    2a10:	4650      	mov	r0, sl
    2a12:	b002      	add	sp, #8
    2a14:	bc1c      	pop	{r2, r3, r4}
    2a16:	4690      	mov	r8, r2
    2a18:	4699      	mov	r9, r3
    2a1a:	46a2      	mov	sl, r4
    2a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a1e:	2300      	movs	r3, #0
    2a20:	9300      	str	r3, [sp, #0]
    2a22:	003a      	movs	r2, r7
    2a24:	2100      	movs	r1, #0
    2a26:	0020      	movs	r0, r4
    2a28:	4c18      	ldr	r4, [pc, #96]	; (2a8c <prvSampleTimeNow+0xa4>)
    2a2a:	47a0      	blx	r4
				configASSERT( xResult );
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d104      	bne.n	2a3a <prvSampleTimeNow+0x52>
    2a30:	b672      	cpsid	i
    2a32:	e7fe      	b.n	2a32 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a34:	4d16      	ldr	r5, [pc, #88]	; (2a90 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a36:	4b17      	ldr	r3, [pc, #92]	; (2a94 <prvSampleTimeNow+0xac>)
    2a38:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a3a:	682b      	ldr	r3, [r5, #0]
    2a3c:	681a      	ldr	r2, [r3, #0]
    2a3e:	2a00      	cmp	r2, #0
    2a40:	d017      	beq.n	2a72 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a42:	68db      	ldr	r3, [r3, #12]
    2a44:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a46:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a48:	1d26      	adds	r6, r4, #4
    2a4a:	0030      	movs	r0, r6
    2a4c:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a4e:	0020      	movs	r0, r4
    2a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2a52:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2a54:	69e3      	ldr	r3, [r4, #28]
    2a56:	2b01      	cmp	r3, #1
    2a58:	d1ef      	bne.n	2a3a <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2a5a:	69a3      	ldr	r3, [r4, #24]
    2a5c:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    2a5e:	429f      	cmp	r7, r3
    2a60:	d2dd      	bcs.n	2a1e <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a62:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a64:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a66:	4b0a      	ldr	r3, [pc, #40]	; (2a90 <prvSampleTimeNow+0xa8>)
    2a68:	6818      	ldr	r0, [r3, #0]
    2a6a:	0031      	movs	r1, r6
    2a6c:	4b0a      	ldr	r3, [pc, #40]	; (2a98 <prvSampleTimeNow+0xb0>)
    2a6e:	4798      	blx	r3
    2a70:	e7e3      	b.n	2a3a <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    2a72:	4a0a      	ldr	r2, [pc, #40]	; (2a9c <prvSampleTimeNow+0xb4>)
    2a74:	4906      	ldr	r1, [pc, #24]	; (2a90 <prvSampleTimeNow+0xa8>)
    2a76:	6810      	ldr	r0, [r2, #0]
    2a78:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    2a7a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    2a7c:	2301      	movs	r3, #1
    2a7e:	4642      	mov	r2, r8
    2a80:	6013      	str	r3, [r2, #0]
    2a82:	e7c2      	b.n	2a0a <prvSampleTimeNow+0x22>
    2a84:	00002229 	.word	0x00002229
    2a88:	20003004 	.word	0x20003004
    2a8c:	0000297d 	.word	0x0000297d
    2a90:	20002fd4 	.word	0x20002fd4
    2a94:	000013b7 	.word	0x000013b7
    2a98:	00001389 	.word	0x00001389
    2a9c:	20002fd8 	.word	0x20002fd8

00002aa0 <prvTimerTask>:
{
    2aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aa2:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2aa4:	4f52      	ldr	r7, [pc, #328]	; (2bf0 <prvTimerTask+0x150>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2aa6:	4b53      	ldr	r3, [pc, #332]	; (2bf4 <prvTimerTask+0x154>)
    2aa8:	681b      	ldr	r3, [r3, #0]
    2aaa:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2aac:	2a00      	cmp	r2, #0
    2aae:	d00e      	beq.n	2ace <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ab0:	68db      	ldr	r3, [r3, #12]
    2ab2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    2ab4:	4b50      	ldr	r3, [pc, #320]	; (2bf8 <prvTimerTask+0x158>)
    2ab6:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2ab8:	a805      	add	r0, sp, #20
    2aba:	4b50      	ldr	r3, [pc, #320]	; (2bfc <prvTimerTask+0x15c>)
    2abc:	4798      	blx	r3
    2abe:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    2ac0:	9b05      	ldr	r3, [sp, #20]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d15f      	bne.n	2b86 <prvTimerTask+0xe6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2ac6:	42a0      	cmp	r0, r4
    2ac8:	d236      	bcs.n	2b38 <prvTimerTask+0x98>
    2aca:	2200      	movs	r2, #0
    2acc:	e00f      	b.n	2aee <prvTimerTask+0x4e>
	vTaskSuspendAll();
    2ace:	4b4a      	ldr	r3, [pc, #296]	; (2bf8 <prvTimerTask+0x158>)
    2ad0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2ad2:	a805      	add	r0, sp, #20
    2ad4:	4b49      	ldr	r3, [pc, #292]	; (2bfc <prvTimerTask+0x15c>)
    2ad6:	4798      	blx	r3
    2ad8:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    2ada:	9b05      	ldr	r3, [sp, #20]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d152      	bne.n	2b86 <prvTimerTask+0xe6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2ae0:	4b47      	ldr	r3, [pc, #284]	; (2c00 <prvTimerTask+0x160>)
    2ae2:	681b      	ldr	r3, [r3, #0]
    2ae4:	681b      	ldr	r3, [r3, #0]
    2ae6:	425a      	negs	r2, r3
    2ae8:	415a      	adcs	r2, r3
    2aea:	b2d2      	uxtb	r2, r2
    2aec:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2aee:	1b61      	subs	r1, r4, r5
    2af0:	4b44      	ldr	r3, [pc, #272]	; (2c04 <prvTimerTask+0x164>)
    2af2:	6818      	ldr	r0, [r3, #0]
    2af4:	4b44      	ldr	r3, [pc, #272]	; (2c08 <prvTimerTask+0x168>)
    2af6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2af8:	4b44      	ldr	r3, [pc, #272]	; (2c0c <prvTimerTask+0x16c>)
    2afa:	4798      	blx	r3
    2afc:	2800      	cmp	r0, #0
    2afe:	d03f      	beq.n	2b80 <prvTimerTask+0xe0>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2b00:	4d40      	ldr	r5, [pc, #256]	; (2c04 <prvTimerTask+0x164>)
    2b02:	4c43      	ldr	r4, [pc, #268]	; (2c10 <prvTimerTask+0x170>)
    2b04:	2200      	movs	r2, #0
    2b06:	a905      	add	r1, sp, #20
    2b08:	6828      	ldr	r0, [r5, #0]
    2b0a:	47a0      	blx	r4
    2b0c:	2800      	cmp	r0, #0
    2b0e:	d0ca      	beq.n	2aa6 <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2b10:	9b05      	ldr	r3, [sp, #20]
    2b12:	9303      	str	r3, [sp, #12]
    2b14:	2b00      	cmp	r3, #0
    2b16:	dbf5      	blt.n	2b04 <prvTimerTask+0x64>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2b18:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2b1a:	6973      	ldr	r3, [r6, #20]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d001      	beq.n	2b24 <prvTimerTask+0x84>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b20:	1d30      	adds	r0, r6, #4
    2b22:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2b24:	a804      	add	r0, sp, #16
    2b26:	4b35      	ldr	r3, [pc, #212]	; (2bfc <prvTimerTask+0x15c>)
    2b28:	4798      	blx	r3
			switch( xMessage.xMessageID )
    2b2a:	9b05      	ldr	r3, [sp, #20]
    2b2c:	2b09      	cmp	r3, #9
    2b2e:	d8e9      	bhi.n	2b04 <prvTimerTask+0x64>
    2b30:	009b      	lsls	r3, r3, #2
    2b32:	4a38      	ldr	r2, [pc, #224]	; (2c14 <prvTimerTask+0x174>)
    2b34:	58d3      	ldr	r3, [r2, r3]
    2b36:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    2b38:	4b34      	ldr	r3, [pc, #208]	; (2c0c <prvTimerTask+0x16c>)
    2b3a:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b3c:	4b2d      	ldr	r3, [pc, #180]	; (2bf4 <prvTimerTask+0x154>)
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	68db      	ldr	r3, [r3, #12]
    2b42:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b44:	1d30      	adds	r0, r6, #4
    2b46:	4b2a      	ldr	r3, [pc, #168]	; (2bf0 <prvTimerTask+0x150>)
    2b48:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2b4a:	69f3      	ldr	r3, [r6, #28]
    2b4c:	2b01      	cmp	r3, #1
    2b4e:	d003      	beq.n	2b58 <prvTimerTask+0xb8>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b50:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2b52:	0030      	movs	r0, r6
    2b54:	4798      	blx	r3
    2b56:	e7d3      	b.n	2b00 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2b58:	69b3      	ldr	r3, [r6, #24]
    2b5a:	18e1      	adds	r1, r4, r3
    2b5c:	0023      	movs	r3, r4
    2b5e:	002a      	movs	r2, r5
    2b60:	0030      	movs	r0, r6
    2b62:	4d2d      	ldr	r5, [pc, #180]	; (2c18 <prvTimerTask+0x178>)
    2b64:	47a8      	blx	r5
    2b66:	2800      	cmp	r0, #0
    2b68:	d0f2      	beq.n	2b50 <prvTimerTask+0xb0>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b6a:	2300      	movs	r3, #0
    2b6c:	9300      	str	r3, [sp, #0]
    2b6e:	0022      	movs	r2, r4
    2b70:	2100      	movs	r1, #0
    2b72:	0030      	movs	r0, r6
    2b74:	4c29      	ldr	r4, [pc, #164]	; (2c1c <prvTimerTask+0x17c>)
    2b76:	47a0      	blx	r4
			configASSERT( xResult );
    2b78:	2800      	cmp	r0, #0
    2b7a:	d1e9      	bne.n	2b50 <prvTimerTask+0xb0>
    2b7c:	b672      	cpsid	i
    2b7e:	e7fe      	b.n	2b7e <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
    2b80:	4b27      	ldr	r3, [pc, #156]	; (2c20 <prvTimerTask+0x180>)
    2b82:	4798      	blx	r3
    2b84:	e7bc      	b.n	2b00 <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    2b86:	4b21      	ldr	r3, [pc, #132]	; (2c0c <prvTimerTask+0x16c>)
    2b88:	4798      	blx	r3
    2b8a:	e7b9      	b.n	2b00 <prvTimerTask+0x60>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2b8c:	9b06      	ldr	r3, [sp, #24]
    2b8e:	69b2      	ldr	r2, [r6, #24]
    2b90:	4694      	mov	ip, r2
    2b92:	4463      	add	r3, ip
    2b94:	0019      	movs	r1, r3
    2b96:	9b06      	ldr	r3, [sp, #24]
    2b98:	0002      	movs	r2, r0
    2b9a:	0030      	movs	r0, r6
    2b9c:	4c1e      	ldr	r4, [pc, #120]	; (2c18 <prvTimerTask+0x178>)
    2b9e:	47a0      	blx	r4
    2ba0:	2800      	cmp	r0, #0
    2ba2:	d0ae      	beq.n	2b02 <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ba4:	0030      	movs	r0, r6
    2ba6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2ba8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2baa:	69f3      	ldr	r3, [r6, #28]
    2bac:	2b01      	cmp	r3, #1
    2bae:	d1a8      	bne.n	2b02 <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2bb0:	9b06      	ldr	r3, [sp, #24]
    2bb2:	69b1      	ldr	r1, [r6, #24]
    2bb4:	468c      	mov	ip, r1
    2bb6:	4463      	add	r3, ip
    2bb8:	001a      	movs	r2, r3
    2bba:	2300      	movs	r3, #0
    2bbc:	9300      	str	r3, [sp, #0]
    2bbe:	2100      	movs	r1, #0
    2bc0:	0030      	movs	r0, r6
    2bc2:	4c16      	ldr	r4, [pc, #88]	; (2c1c <prvTimerTask+0x17c>)
    2bc4:	47a0      	blx	r4
							configASSERT( xResult );
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d19b      	bne.n	2b02 <prvTimerTask+0x62>
    2bca:	b672      	cpsid	i
    2bcc:	e7fe      	b.n	2bcc <prvTimerTask+0x12c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2bce:	9906      	ldr	r1, [sp, #24]
    2bd0:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2bd2:	2900      	cmp	r1, #0
    2bd4:	d006      	beq.n	2be4 <prvTimerTask+0x144>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2bd6:	1841      	adds	r1, r0, r1
    2bd8:	0003      	movs	r3, r0
    2bda:	0002      	movs	r2, r0
    2bdc:	0030      	movs	r0, r6
    2bde:	4c0e      	ldr	r4, [pc, #56]	; (2c18 <prvTimerTask+0x178>)
    2be0:	47a0      	blx	r4
    2be2:	e78e      	b.n	2b02 <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2be4:	b672      	cpsid	i
    2be6:	e7fe      	b.n	2be6 <prvTimerTask+0x146>
						vPortFree( pxTimer );
    2be8:	0030      	movs	r0, r6
    2bea:	4b0e      	ldr	r3, [pc, #56]	; (2c24 <prvTimerTask+0x184>)
    2bec:	4798      	blx	r3
    2bee:	e788      	b.n	2b02 <prvTimerTask+0x62>
    2bf0:	000013b7 	.word	0x000013b7
    2bf4:	20002fd4 	.word	0x20002fd4
    2bf8:	00002219 	.word	0x00002219
    2bfc:	000029e9 	.word	0x000029e9
    2c00:	20002fd8 	.word	0x20002fd8
    2c04:	20003008 	.word	0x20003008
    2c08:	00001e3d 	.word	0x00001e3d
    2c0c:	00002355 	.word	0x00002355
    2c10:	00001b51 	.word	0x00001b51
    2c14:	0000452c 	.word	0x0000452c
    2c18:	0000288d 	.word	0x0000288d
    2c1c:	0000297d 	.word	0x0000297d
    2c20:	000014dd 	.word	0x000014dd
    2c24:	00001621 	.word	0x00001621

00002c28 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	b082      	sub	sp, #8
    2c2c:	0005      	movs	r5, r0
    2c2e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2c30:	2200      	movs	r2, #0
    2c32:	466b      	mov	r3, sp
    2c34:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2c36:	4c06      	ldr	r4, [pc, #24]	; (2c50 <usart_serial_getchar+0x28>)
    2c38:	466b      	mov	r3, sp
    2c3a:	1d99      	adds	r1, r3, #6
    2c3c:	0028      	movs	r0, r5
    2c3e:	47a0      	blx	r4
    2c40:	2800      	cmp	r0, #0
    2c42:	d1f9      	bne.n	2c38 <usart_serial_getchar+0x10>

	*c = temp;
    2c44:	466b      	mov	r3, sp
    2c46:	3306      	adds	r3, #6
    2c48:	881b      	ldrh	r3, [r3, #0]
    2c4a:	7033      	strb	r3, [r6, #0]
}
    2c4c:	b002      	add	sp, #8
    2c4e:	bd70      	pop	{r4, r5, r6, pc}
    2c50:	00000a6d 	.word	0x00000a6d

00002c54 <usart_serial_putchar>:
{
    2c54:	b570      	push	{r4, r5, r6, lr}
    2c56:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2c58:	b28c      	uxth	r4, r1
    2c5a:	4e03      	ldr	r6, [pc, #12]	; (2c68 <usart_serial_putchar+0x14>)
    2c5c:	0021      	movs	r1, r4
    2c5e:	0028      	movs	r0, r5
    2c60:	47b0      	blx	r6
    2c62:	2800      	cmp	r0, #0
    2c64:	d1fa      	bne.n	2c5c <usart_serial_putchar+0x8>
}
    2c66:	bd70      	pop	{r4, r5, r6, pc}
    2c68:	00000a41 	.word	0x00000a41

00002c6c <writer>:
}



void writer(void * param)
{
    2c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char * write_buffer;
	for(;;)
	{
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    2c6e:	4f13      	ldr	r7, [pc, #76]	; (2cbc <writer+0x50>)
    2c70:	4e13      	ldr	r6, [pc, #76]	; (2cc0 <writer+0x54>)
		printf("Dentro do semafaro\n");
    2c72:	4d14      	ldr	r5, [pc, #80]	; (2cc4 <writer+0x58>)
    2c74:	e013      	b.n	2c9e <writer+0x32>
		{
			printf("buffer vazio\n");
		}
		else
		{
			printf("%s", g_buffer);
    2c76:	4c14      	ldr	r4, [pc, #80]	; (2cc8 <writer+0x5c>)
    2c78:	0021      	movs	r1, r4
    2c7a:	4814      	ldr	r0, [pc, #80]	; (2ccc <writer+0x60>)
    2c7c:	4b14      	ldr	r3, [pc, #80]	; (2cd0 <writer+0x64>)
    2c7e:	4798      	blx	r3
			memset(g_buffer, 0, BUFFER_SIZE);
    2c80:	2264      	movs	r2, #100	; 0x64
    2c82:	2100      	movs	r1, #0
    2c84:	0020      	movs	r0, r4
    2c86:	4b13      	ldr	r3, [pc, #76]	; (2cd4 <writer+0x68>)
    2c88:	4798      	blx	r3
		}
		else
		{
			printf("nada no queue\n");
		}*/
		xSemaphoreGive(terminal_mutex);
    2c8a:	4b0c      	ldr	r3, [pc, #48]	; (2cbc <writer+0x50>)
    2c8c:	6818      	ldr	r0, [r3, #0]
    2c8e:	2300      	movs	r3, #0
    2c90:	2200      	movs	r2, #0
    2c92:	2100      	movs	r1, #0
    2c94:	4c10      	ldr	r4, [pc, #64]	; (2cd8 <writer+0x6c>)
    2c96:	47a0      	blx	r4
		vTaskDelay(WRITER_TASK_DELAY);
    2c98:	2002      	movs	r0, #2
    2c9a:	4b10      	ldr	r3, [pc, #64]	; (2cdc <writer+0x70>)
    2c9c:	4798      	blx	r3
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    2c9e:	2101      	movs	r1, #1
    2ca0:	4249      	negs	r1, r1
    2ca2:	6838      	ldr	r0, [r7, #0]
    2ca4:	47b0      	blx	r6
		printf("Dentro do semafaro\n");
    2ca6:	0028      	movs	r0, r5
    2ca8:	4b0d      	ldr	r3, [pc, #52]	; (2ce0 <writer+0x74>)
    2caa:	4798      	blx	r3
		if(*g_buffer == 0)
    2cac:	4b06      	ldr	r3, [pc, #24]	; (2cc8 <writer+0x5c>)
    2cae:	781b      	ldrb	r3, [r3, #0]
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d1e0      	bne.n	2c76 <writer+0xa>
			printf("buffer vazio\n");
    2cb4:	480b      	ldr	r0, [pc, #44]	; (2ce4 <writer+0x78>)
    2cb6:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <writer+0x74>)
    2cb8:	4798      	blx	r3
    2cba:	e7e6      	b.n	2c8a <writer+0x1e>
    2cbc:	20003074 	.word	0x20003074
    2cc0:	00001ca5 	.word	0x00001ca5
    2cc4:	0000463c 	.word	0x0000463c
    2cc8:	20003010 	.word	0x20003010
    2ccc:	00004660 	.word	0x00004660
    2cd0:	00003521 	.word	0x00003521
    2cd4:	00003455 	.word	0x00003455
    2cd8:	000018c9 	.word	0x000018c9
    2cdc:	00002455 	.word	0x00002455
    2ce0:	00003615 	.word	0x00003615
    2ce4:	00004650 	.word	0x00004650

00002ce8 <print_usage>:
{
    2ce8:	b510      	push	{r4, lr}
	printf("Invalid command\nUse -r to read file\n-i message to write message\n");
    2cea:	4802      	ldr	r0, [pc, #8]	; (2cf4 <print_usage+0xc>)
    2cec:	4b02      	ldr	r3, [pc, #8]	; (2cf8 <print_usage+0x10>)
    2cee:	4798      	blx	r3
}
    2cf0:	bd10      	pop	{r4, pc}
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	000045a8 	.word	0x000045a8
    2cf8:	00003615 	.word	0x00003615

00002cfc <read_cmd>:
{
    2cfc:	b510      	push	{r4, lr}
	printf("Reading the file...\n");
    2cfe:	4802      	ldr	r0, [pc, #8]	; (2d08 <read_cmd+0xc>)
    2d00:	4b02      	ldr	r3, [pc, #8]	; (2d0c <read_cmd+0x10>)
    2d02:	4798      	blx	r3
}
    2d04:	bd10      	pop	{r4, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	000045e8 	.word	0x000045e8
    2d0c:	00003615 	.word	0x00003615

00002d10 <write_buffer>:
{
    2d10:	b510      	push	{r4, lr}
	if(*message == '\0')
    2d12:	78c3      	ldrb	r3, [r0, #3]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d009      	beq.n	2d2c <write_buffer+0x1c>
	char * message = string + 3;        //skip the first 3 characters that are not the message ("-i ")
    2d18:	1cc4      	adds	r4, r0, #3
	printf("Writing to buffer: %s", message);
    2d1a:	0021      	movs	r1, r4
    2d1c:	4805      	ldr	r0, [pc, #20]	; (2d34 <write_buffer+0x24>)
    2d1e:	4b06      	ldr	r3, [pc, #24]	; (2d38 <write_buffer+0x28>)
    2d20:	4798      	blx	r3
	strcpy(g_buffer, message);
    2d22:	0021      	movs	r1, r4
    2d24:	4805      	ldr	r0, [pc, #20]	; (2d3c <write_buffer+0x2c>)
    2d26:	4b06      	ldr	r3, [pc, #24]	; (2d40 <write_buffer+0x30>)
    2d28:	4798      	blx	r3
}
    2d2a:	bd10      	pop	{r4, pc}
		printf("Message is invalid\n");
    2d2c:	4805      	ldr	r0, [pc, #20]	; (2d44 <write_buffer+0x34>)
    2d2e:	4b06      	ldr	r3, [pc, #24]	; (2d48 <write_buffer+0x38>)
    2d30:	4798      	blx	r3
		return;
    2d32:	e7fa      	b.n	2d2a <write_buffer+0x1a>
    2d34:	00004624 	.word	0x00004624
    2d38:	00003521 	.word	0x00003521
    2d3c:	20003010 	.word	0x20003010
    2d40:	00003989 	.word	0x00003989
    2d44:	00004610 	.word	0x00004610
    2d48:	00003615 	.word	0x00003615

00002d4c <parse_command>:
{
    2d4c:	b510      	push	{r4, lr}
	if(sizeof(cmd) < 3 || cmd[0] != '-')
    2d4e:	7803      	ldrb	r3, [r0, #0]
    2d50:	2b2d      	cmp	r3, #45	; 0x2d
    2d52:	d107      	bne.n	2d64 <parse_command+0x18>
	if(cmd[1] == 'r')
    2d54:	7843      	ldrb	r3, [r0, #1]
    2d56:	2b72      	cmp	r3, #114	; 0x72
    2d58:	d007      	beq.n	2d6a <parse_command+0x1e>
	else if(cmd[1] == 'i')
    2d5a:	2b69      	cmp	r3, #105	; 0x69
    2d5c:	d008      	beq.n	2d70 <parse_command+0x24>
		print_usage();
    2d5e:	4b06      	ldr	r3, [pc, #24]	; (2d78 <parse_command+0x2c>)
    2d60:	4798      	blx	r3
}
    2d62:	bd10      	pop	{r4, pc}
		print_usage();
    2d64:	4b04      	ldr	r3, [pc, #16]	; (2d78 <parse_command+0x2c>)
    2d66:	4798      	blx	r3
		return;
    2d68:	e7fb      	b.n	2d62 <parse_command+0x16>
		read_cmd();
    2d6a:	4b04      	ldr	r3, [pc, #16]	; (2d7c <parse_command+0x30>)
    2d6c:	4798      	blx	r3
    2d6e:	e7f8      	b.n	2d62 <parse_command+0x16>
		write_buffer(cmd);
    2d70:	4b03      	ldr	r3, [pc, #12]	; (2d80 <parse_command+0x34>)
    2d72:	4798      	blx	r3
    2d74:	e7f5      	b.n	2d62 <parse_command+0x16>
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	00002ce9 	.word	0x00002ce9
    2d7c:	00002cfd 	.word	0x00002cfd
    2d80:	00002d11 	.word	0x00002d11

00002d84 <receiver>:
{
    2d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d86:	b09b      	sub	sp, #108	; 0x6c
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    2d88:	4c0e      	ldr	r4, [pc, #56]	; (2dc4 <receiver+0x40>)
    2d8a:	4f0f      	ldr	r7, [pc, #60]	; (2dc8 <receiver+0x44>)
		printf("Escreva um comando:\n");
    2d8c:	4e0f      	ldr	r6, [pc, #60]	; (2dcc <receiver+0x48>)
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    2d8e:	2101      	movs	r1, #1
    2d90:	4249      	negs	r1, r1
    2d92:	6820      	ldr	r0, [r4, #0]
    2d94:	47b8      	blx	r7
		printf("Escreva um comando:\n");
    2d96:	0030      	movs	r0, r6
    2d98:	4b0d      	ldr	r3, [pc, #52]	; (2dd0 <receiver+0x4c>)
    2d9a:	4798      	blx	r3
		fgets(input_buffer, BUFFER_SIZE, stdin);
    2d9c:	4b0d      	ldr	r3, [pc, #52]	; (2dd4 <receiver+0x50>)
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	685a      	ldr	r2, [r3, #4]
    2da2:	2164      	movs	r1, #100	; 0x64
    2da4:	a801      	add	r0, sp, #4
    2da6:	4b0c      	ldr	r3, [pc, #48]	; (2dd8 <receiver+0x54>)
    2da8:	4798      	blx	r3
		parse_command(input_buffer);
    2daa:	a801      	add	r0, sp, #4
    2dac:	4b0b      	ldr	r3, [pc, #44]	; (2ddc <receiver+0x58>)
    2dae:	4798      	blx	r3
		xSemaphoreGive(terminal_mutex);
    2db0:	2300      	movs	r3, #0
    2db2:	2200      	movs	r2, #0
    2db4:	2100      	movs	r1, #0
    2db6:	6820      	ldr	r0, [r4, #0]
    2db8:	4d09      	ldr	r5, [pc, #36]	; (2de0 <receiver+0x5c>)
    2dba:	47a8      	blx	r5
		vTaskDelay(RECEVER_TASK_DELAY);
    2dbc:	2002      	movs	r0, #2
    2dbe:	4b09      	ldr	r3, [pc, #36]	; (2de4 <receiver+0x60>)
    2dc0:	4798      	blx	r3
    2dc2:	e7e4      	b.n	2d8e <receiver+0xa>
    2dc4:	20003074 	.word	0x20003074
    2dc8:	00001ca5 	.word	0x00001ca5
    2dcc:	000045fc 	.word	0x000045fc
    2dd0:	00003615 	.word	0x00003615
    2dd4:	20000008 	.word	0x20000008
    2dd8:	000031e5 	.word	0x000031e5
    2ddc:	00002d4d 	.word	0x00002d4d
    2de0:	000018c9 	.word	0x000018c9
    2de4:	00002455 	.word	0x00002455

00002de8 <set_usart_config>:
{
    2de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2dea:	4a2b      	ldr	r2, [pc, #172]	; (2e98 <set_usart_config+0xb0>)
    2dec:	2380      	movs	r3, #128	; 0x80
    2dee:	05db      	lsls	r3, r3, #23
    2df0:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2df2:	2300      	movs	r3, #0
    2df4:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    2df6:	21ff      	movs	r1, #255	; 0xff
    2df8:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    2dfa:	2100      	movs	r1, #0
    2dfc:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2dfe:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2e00:	2401      	movs	r4, #1
    2e02:	2524      	movs	r5, #36	; 0x24
    2e04:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    2e06:	3501      	adds	r5, #1
    2e08:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    2e0a:	3501      	adds	r5, #1
    2e0c:	5553      	strb	r3, [r2, r5]
	config->use_external_clock = false;
    2e0e:	3501      	adds	r5, #1
    2e10:	5553      	strb	r3, [r2, r5]
	config->ext_clock_freq   = 0;
    2e12:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2e14:	3505      	adds	r5, #5
    2e16:	5553      	strb	r3, [r2, r5]
	config->generator_source = GCLK_GENERATOR_0;
    2e18:	3501      	adds	r5, #1
    2e1a:	5553      	strb	r3, [r2, r5]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2e1c:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2e1e:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2e20:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2e22:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2e24:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2e26:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    2e28:	2313      	movs	r3, #19
    2e2a:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2e2c:	7751      	strb	r1, [r2, #29]
	usart_conf.baudrate    = baudrate;
    2e2e:	6210      	str	r0, [r2, #32]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2e30:	2380      	movs	r3, #128	; 0x80
    2e32:	035b      	lsls	r3, r3, #13
    2e34:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2e36:	4b19      	ldr	r3, [pc, #100]	; (2e9c <set_usart_config+0xb4>)
    2e38:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2e3a:	4b19      	ldr	r3, [pc, #100]	; (2ea0 <set_usart_config+0xb8>)
    2e3c:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2e3e:	2301      	movs	r3, #1
    2e40:	425b      	negs	r3, r3
    2e42:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2e44:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2e46:	4d17      	ldr	r5, [pc, #92]	; (2ea4 <set_usart_config+0xbc>)
    2e48:	4b17      	ldr	r3, [pc, #92]	; (2ea8 <set_usart_config+0xc0>)
    2e4a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2e4c:	4917      	ldr	r1, [pc, #92]	; (2eac <set_usart_config+0xc4>)
    2e4e:	4b18      	ldr	r3, [pc, #96]	; (2eb0 <set_usart_config+0xc8>)
    2e50:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2e52:	4918      	ldr	r1, [pc, #96]	; (2eb4 <set_usart_config+0xcc>)
    2e54:	4b18      	ldr	r3, [pc, #96]	; (2eb8 <set_usart_config+0xd0>)
    2e56:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2e58:	4918      	ldr	r1, [pc, #96]	; (2ebc <set_usart_config+0xd4>)
    2e5a:	0028      	movs	r0, r5
    2e5c:	4b18      	ldr	r3, [pc, #96]	; (2ec0 <set_usart_config+0xd8>)
    2e5e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2e60:	4f18      	ldr	r7, [pc, #96]	; (2ec4 <set_usart_config+0xdc>)
    2e62:	683b      	ldr	r3, [r7, #0]
    2e64:	6898      	ldr	r0, [r3, #8]
    2e66:	2100      	movs	r1, #0
    2e68:	4e17      	ldr	r6, [pc, #92]	; (2ec8 <set_usart_config+0xe0>)
    2e6a:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2e6c:	683b      	ldr	r3, [r7, #0]
    2e6e:	6858      	ldr	r0, [r3, #4]
    2e70:	2100      	movs	r1, #0
    2e72:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e74:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2e76:	0030      	movs	r0, r6
    2e78:	4b14      	ldr	r3, [pc, #80]	; (2ecc <set_usart_config+0xe4>)
    2e7a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e7c:	231f      	movs	r3, #31
    2e7e:	4018      	ands	r0, r3
    2e80:	4084      	lsls	r4, r0
    2e82:	4b13      	ldr	r3, [pc, #76]	; (2ed0 <set_usart_config+0xe8>)
    2e84:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e86:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2e88:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d1fc      	bne.n	2e88 <set_usart_config+0xa0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2e8e:	6833      	ldr	r3, [r6, #0]
    2e90:	2202      	movs	r2, #2
    2e92:	4313      	orrs	r3, r2
    2e94:	6033      	str	r3, [r6, #0]
}
    2e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e98:	200030dc 	.word	0x200030dc
    2e9c:	00160002 	.word	0x00160002
    2ea0:	00170002 	.word	0x00170002
    2ea4:	200030a8 	.word	0x200030a8
    2ea8:	2000308c 	.word	0x2000308c
    2eac:	00002c55 	.word	0x00002c55
    2eb0:	20003088 	.word	0x20003088
    2eb4:	00002c29 	.word	0x00002c29
    2eb8:	20003084 	.word	0x20003084
    2ebc:	42001400 	.word	0x42001400
    2ec0:	000006fd 	.word	0x000006fd
    2ec4:	20000008 	.word	0x20000008
    2ec8:	00003785 	.word	0x00003785
    2ecc:	0000066d 	.word	0x0000066d
    2ed0:	e000e100 	.word	0xe000e100

00002ed4 <demotasks_init>:

/**
 * \brief Initialize tasks and resources for demo
 */
void demotasks_init(void)
{
    2ed4:	b510      	push	{r4, lr}
    2ed6:	b082      	sub	sp, #8
	int error_return = 0;
	//configure USART
	set_usart_config(9600);
    2ed8:	2096      	movs	r0, #150	; 0x96
    2eda:	0180      	lsls	r0, r0, #6
    2edc:	4b1a      	ldr	r3, [pc, #104]	; (2f48 <demotasks_init+0x74>)
    2ede:	4798      	blx	r3
	terminal_mutex = xSemaphoreCreateMutex();
    2ee0:	2001      	movs	r0, #1
    2ee2:	4c1a      	ldr	r4, [pc, #104]	; (2f4c <demotasks_init+0x78>)
    2ee4:	47a0      	blx	r4
    2ee6:	4b1a      	ldr	r3, [pc, #104]	; (2f50 <demotasks_init+0x7c>)
    2ee8:	6018      	str	r0, [r3, #0]
	queue_mutex = xSemaphoreCreateMutex();
    2eea:	2001      	movs	r0, #1
    2eec:	47a0      	blx	r4
	QMessage = xQueueCreate(1, sizeof(char *));
    2eee:	2200      	movs	r2, #0
    2ef0:	2104      	movs	r1, #4
    2ef2:	2001      	movs	r0, #1
    2ef4:	4b17      	ldr	r3, [pc, #92]	; (2f54 <demotasks_init+0x80>)
    2ef6:	4798      	blx	r3
	if(QMessage == 0)
    2ef8:	2800      	cmp	r0, #0
    2efa:	d019      	beq.n	2f30 <demotasks_init+0x5c>
	{
		printf("Failed to create Queue\n");
	}
	
	error_return = xTaskCreate(receiver,
    2efc:	2300      	movs	r3, #0
    2efe:	9301      	str	r3, [sp, #4]
    2f00:	3305      	adds	r3, #5
    2f02:	9300      	str	r3, [sp, #0]
    2f04:	2300      	movs	r3, #0
    2f06:	4a14      	ldr	r2, [pc, #80]	; (2f58 <demotasks_init+0x84>)
    2f08:	4914      	ldr	r1, [pc, #80]	; (2f5c <demotasks_init+0x88>)
    2f0a:	4815      	ldr	r0, [pc, #84]	; (2f60 <demotasks_init+0x8c>)
    2f0c:	4c15      	ldr	r4, [pc, #84]	; (2f64 <demotasks_init+0x90>)
    2f0e:	47a0      	blx	r4
			(const char *) "RX",
			configMINIMAL_STACK_SIZE + 514,
			NULL,
			RECEVER_TASK_PRIORITY,
			NULL);
	if(error_return == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
    2f10:	1c43      	adds	r3, r0, #1
    2f12:	d011      	beq.n	2f38 <demotasks_init+0x64>
	{
		printf("Erro criando receiver\n");
	}
	error_return = xTaskCreate(writer,
    2f14:	2300      	movs	r3, #0
    2f16:	9301      	str	r3, [sp, #4]
    2f18:	3305      	adds	r3, #5
    2f1a:	9300      	str	r3, [sp, #0]
    2f1c:	2300      	movs	r3, #0
    2f1e:	22e4      	movs	r2, #228	; 0xe4
    2f20:	4911      	ldr	r1, [pc, #68]	; (2f68 <demotasks_init+0x94>)
    2f22:	4812      	ldr	r0, [pc, #72]	; (2f6c <demotasks_init+0x98>)
    2f24:	4c0f      	ldr	r4, [pc, #60]	; (2f64 <demotasks_init+0x90>)
    2f26:	47a0      	blx	r4
			(const char *) "WR",
			configMINIMAL_STACK_SIZE + 128,
			NULL,
			WRITER_TASK_PRIORITY,
			NULL);
	if(error_return == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
    2f28:	1c43      	adds	r3, r0, #1
    2f2a:	d009      	beq.n	2f40 <demotasks_init+0x6c>
	{
		printf("Erro criando writer\n");
	}
}
    2f2c:	b002      	add	sp, #8
    2f2e:	bd10      	pop	{r4, pc}
		printf("Failed to create Queue\n");
    2f30:	480f      	ldr	r0, [pc, #60]	; (2f70 <demotasks_init+0x9c>)
    2f32:	4b10      	ldr	r3, [pc, #64]	; (2f74 <demotasks_init+0xa0>)
    2f34:	4798      	blx	r3
    2f36:	e7e1      	b.n	2efc <demotasks_init+0x28>
		printf("Erro criando receiver\n");
    2f38:	480f      	ldr	r0, [pc, #60]	; (2f78 <demotasks_init+0xa4>)
    2f3a:	4b0e      	ldr	r3, [pc, #56]	; (2f74 <demotasks_init+0xa0>)
    2f3c:	4798      	blx	r3
    2f3e:	e7e9      	b.n	2f14 <demotasks_init+0x40>
		printf("Erro criando writer\n");
    2f40:	480e      	ldr	r0, [pc, #56]	; (2f7c <demotasks_init+0xa8>)
    2f42:	4b0c      	ldr	r3, [pc, #48]	; (2f74 <demotasks_init+0xa0>)
    2f44:	4798      	blx	r3
}
    2f46:	e7f1      	b.n	2f2c <demotasks_init+0x58>
    2f48:	00002de9 	.word	0x00002de9
    2f4c:	00001a55 	.word	0x00001a55
    2f50:	20003074 	.word	0x20003074
    2f54:	00001881 	.word	0x00001881
    2f58:	00000266 	.word	0x00000266
    2f5c:	00004574 	.word	0x00004574
    2f60:	00002d85 	.word	0x00002d85
    2f64:	00001fd1 	.word	0x00001fd1
    2f68:	00004590 	.word	0x00004590
    2f6c:	00002c6d 	.word	0x00002c6d
    2f70:	0000455c 	.word	0x0000455c
    2f74:	00003615 	.word	0x00003615
    2f78:	00004578 	.word	0x00004578
    2f7c:	00004594 	.word	0x00004594

00002f80 <main>:
#include <asf.h>
#include "demotasks.h"


int main (void)
{
    2f80:	b510      	push	{r4, lr}
	system_init();
    2f82:	4b05      	ldr	r3, [pc, #20]	; (2f98 <main+0x18>)
    2f84:	4798      	blx	r3
	//initialize tasks
	demotasks_init();
    2f86:	4b05      	ldr	r3, [pc, #20]	; (2f9c <main+0x1c>)
    2f88:	4798      	blx	r3
	printf("Welcome to microTextEditor!\n");
    2f8a:	4805      	ldr	r0, [pc, #20]	; (2fa0 <main+0x20>)
    2f8c:	4b05      	ldr	r3, [pc, #20]	; (2fa4 <main+0x24>)
    2f8e:	4798      	blx	r3
	//start scheduler
	vTaskStartScheduler();
    2f90:	4b05      	ldr	r3, [pc, #20]	; (2fa8 <main+0x28>)
    2f92:	4798      	blx	r3
    2f94:	e7fe      	b.n	2f94 <main+0x14>
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	00001205 	.word	0x00001205
    2f9c:	00002ed5 	.word	0x00002ed5
    2fa0:	00004664 	.word	0x00004664
    2fa4:	00003615 	.word	0x00003615
    2fa8:	000021a9 	.word	0x000021a9

00002fac <__udivsi3>:
    2fac:	2200      	movs	r2, #0
    2fae:	0843      	lsrs	r3, r0, #1
    2fb0:	428b      	cmp	r3, r1
    2fb2:	d374      	bcc.n	309e <__udivsi3+0xf2>
    2fb4:	0903      	lsrs	r3, r0, #4
    2fb6:	428b      	cmp	r3, r1
    2fb8:	d35f      	bcc.n	307a <__udivsi3+0xce>
    2fba:	0a03      	lsrs	r3, r0, #8
    2fbc:	428b      	cmp	r3, r1
    2fbe:	d344      	bcc.n	304a <__udivsi3+0x9e>
    2fc0:	0b03      	lsrs	r3, r0, #12
    2fc2:	428b      	cmp	r3, r1
    2fc4:	d328      	bcc.n	3018 <__udivsi3+0x6c>
    2fc6:	0c03      	lsrs	r3, r0, #16
    2fc8:	428b      	cmp	r3, r1
    2fca:	d30d      	bcc.n	2fe8 <__udivsi3+0x3c>
    2fcc:	22ff      	movs	r2, #255	; 0xff
    2fce:	0209      	lsls	r1, r1, #8
    2fd0:	ba12      	rev	r2, r2
    2fd2:	0c03      	lsrs	r3, r0, #16
    2fd4:	428b      	cmp	r3, r1
    2fd6:	d302      	bcc.n	2fde <__udivsi3+0x32>
    2fd8:	1212      	asrs	r2, r2, #8
    2fda:	0209      	lsls	r1, r1, #8
    2fdc:	d065      	beq.n	30aa <__udivsi3+0xfe>
    2fde:	0b03      	lsrs	r3, r0, #12
    2fe0:	428b      	cmp	r3, r1
    2fe2:	d319      	bcc.n	3018 <__udivsi3+0x6c>
    2fe4:	e000      	b.n	2fe8 <__udivsi3+0x3c>
    2fe6:	0a09      	lsrs	r1, r1, #8
    2fe8:	0bc3      	lsrs	r3, r0, #15
    2fea:	428b      	cmp	r3, r1
    2fec:	d301      	bcc.n	2ff2 <__udivsi3+0x46>
    2fee:	03cb      	lsls	r3, r1, #15
    2ff0:	1ac0      	subs	r0, r0, r3
    2ff2:	4152      	adcs	r2, r2
    2ff4:	0b83      	lsrs	r3, r0, #14
    2ff6:	428b      	cmp	r3, r1
    2ff8:	d301      	bcc.n	2ffe <__udivsi3+0x52>
    2ffa:	038b      	lsls	r3, r1, #14
    2ffc:	1ac0      	subs	r0, r0, r3
    2ffe:	4152      	adcs	r2, r2
    3000:	0b43      	lsrs	r3, r0, #13
    3002:	428b      	cmp	r3, r1
    3004:	d301      	bcc.n	300a <__udivsi3+0x5e>
    3006:	034b      	lsls	r3, r1, #13
    3008:	1ac0      	subs	r0, r0, r3
    300a:	4152      	adcs	r2, r2
    300c:	0b03      	lsrs	r3, r0, #12
    300e:	428b      	cmp	r3, r1
    3010:	d301      	bcc.n	3016 <__udivsi3+0x6a>
    3012:	030b      	lsls	r3, r1, #12
    3014:	1ac0      	subs	r0, r0, r3
    3016:	4152      	adcs	r2, r2
    3018:	0ac3      	lsrs	r3, r0, #11
    301a:	428b      	cmp	r3, r1
    301c:	d301      	bcc.n	3022 <__udivsi3+0x76>
    301e:	02cb      	lsls	r3, r1, #11
    3020:	1ac0      	subs	r0, r0, r3
    3022:	4152      	adcs	r2, r2
    3024:	0a83      	lsrs	r3, r0, #10
    3026:	428b      	cmp	r3, r1
    3028:	d301      	bcc.n	302e <__udivsi3+0x82>
    302a:	028b      	lsls	r3, r1, #10
    302c:	1ac0      	subs	r0, r0, r3
    302e:	4152      	adcs	r2, r2
    3030:	0a43      	lsrs	r3, r0, #9
    3032:	428b      	cmp	r3, r1
    3034:	d301      	bcc.n	303a <__udivsi3+0x8e>
    3036:	024b      	lsls	r3, r1, #9
    3038:	1ac0      	subs	r0, r0, r3
    303a:	4152      	adcs	r2, r2
    303c:	0a03      	lsrs	r3, r0, #8
    303e:	428b      	cmp	r3, r1
    3040:	d301      	bcc.n	3046 <__udivsi3+0x9a>
    3042:	020b      	lsls	r3, r1, #8
    3044:	1ac0      	subs	r0, r0, r3
    3046:	4152      	adcs	r2, r2
    3048:	d2cd      	bcs.n	2fe6 <__udivsi3+0x3a>
    304a:	09c3      	lsrs	r3, r0, #7
    304c:	428b      	cmp	r3, r1
    304e:	d301      	bcc.n	3054 <__udivsi3+0xa8>
    3050:	01cb      	lsls	r3, r1, #7
    3052:	1ac0      	subs	r0, r0, r3
    3054:	4152      	adcs	r2, r2
    3056:	0983      	lsrs	r3, r0, #6
    3058:	428b      	cmp	r3, r1
    305a:	d301      	bcc.n	3060 <__udivsi3+0xb4>
    305c:	018b      	lsls	r3, r1, #6
    305e:	1ac0      	subs	r0, r0, r3
    3060:	4152      	adcs	r2, r2
    3062:	0943      	lsrs	r3, r0, #5
    3064:	428b      	cmp	r3, r1
    3066:	d301      	bcc.n	306c <__udivsi3+0xc0>
    3068:	014b      	lsls	r3, r1, #5
    306a:	1ac0      	subs	r0, r0, r3
    306c:	4152      	adcs	r2, r2
    306e:	0903      	lsrs	r3, r0, #4
    3070:	428b      	cmp	r3, r1
    3072:	d301      	bcc.n	3078 <__udivsi3+0xcc>
    3074:	010b      	lsls	r3, r1, #4
    3076:	1ac0      	subs	r0, r0, r3
    3078:	4152      	adcs	r2, r2
    307a:	08c3      	lsrs	r3, r0, #3
    307c:	428b      	cmp	r3, r1
    307e:	d301      	bcc.n	3084 <__udivsi3+0xd8>
    3080:	00cb      	lsls	r3, r1, #3
    3082:	1ac0      	subs	r0, r0, r3
    3084:	4152      	adcs	r2, r2
    3086:	0883      	lsrs	r3, r0, #2
    3088:	428b      	cmp	r3, r1
    308a:	d301      	bcc.n	3090 <__udivsi3+0xe4>
    308c:	008b      	lsls	r3, r1, #2
    308e:	1ac0      	subs	r0, r0, r3
    3090:	4152      	adcs	r2, r2
    3092:	0843      	lsrs	r3, r0, #1
    3094:	428b      	cmp	r3, r1
    3096:	d301      	bcc.n	309c <__udivsi3+0xf0>
    3098:	004b      	lsls	r3, r1, #1
    309a:	1ac0      	subs	r0, r0, r3
    309c:	4152      	adcs	r2, r2
    309e:	1a41      	subs	r1, r0, r1
    30a0:	d200      	bcs.n	30a4 <__udivsi3+0xf8>
    30a2:	4601      	mov	r1, r0
    30a4:	4152      	adcs	r2, r2
    30a6:	4610      	mov	r0, r2
    30a8:	4770      	bx	lr
    30aa:	e7ff      	b.n	30ac <__udivsi3+0x100>
    30ac:	b501      	push	{r0, lr}
    30ae:	2000      	movs	r0, #0
    30b0:	f000 f806 	bl	30c0 <__aeabi_idiv0>
    30b4:	bd02      	pop	{r1, pc}
    30b6:	46c0      	nop			; (mov r8, r8)

000030b8 <__aeabi_uidivmod>:
    30b8:	2900      	cmp	r1, #0
    30ba:	d0f7      	beq.n	30ac <__udivsi3+0x100>
    30bc:	e776      	b.n	2fac <__udivsi3>
    30be:	4770      	bx	lr

000030c0 <__aeabi_idiv0>:
    30c0:	4770      	bx	lr
    30c2:	46c0      	nop			; (mov r8, r8)

000030c4 <__aeabi_lmul>:
    30c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c6:	46ce      	mov	lr, r9
    30c8:	4647      	mov	r7, r8
    30ca:	0415      	lsls	r5, r2, #16
    30cc:	0c2d      	lsrs	r5, r5, #16
    30ce:	002e      	movs	r6, r5
    30d0:	b580      	push	{r7, lr}
    30d2:	0407      	lsls	r7, r0, #16
    30d4:	0c14      	lsrs	r4, r2, #16
    30d6:	0c3f      	lsrs	r7, r7, #16
    30d8:	4699      	mov	r9, r3
    30da:	0c03      	lsrs	r3, r0, #16
    30dc:	437e      	muls	r6, r7
    30de:	435d      	muls	r5, r3
    30e0:	4367      	muls	r7, r4
    30e2:	4363      	muls	r3, r4
    30e4:	197f      	adds	r7, r7, r5
    30e6:	0c34      	lsrs	r4, r6, #16
    30e8:	19e4      	adds	r4, r4, r7
    30ea:	469c      	mov	ip, r3
    30ec:	42a5      	cmp	r5, r4
    30ee:	d903      	bls.n	30f8 <__aeabi_lmul+0x34>
    30f0:	2380      	movs	r3, #128	; 0x80
    30f2:	025b      	lsls	r3, r3, #9
    30f4:	4698      	mov	r8, r3
    30f6:	44c4      	add	ip, r8
    30f8:	464b      	mov	r3, r9
    30fa:	4351      	muls	r1, r2
    30fc:	4343      	muls	r3, r0
    30fe:	0436      	lsls	r6, r6, #16
    3100:	0c36      	lsrs	r6, r6, #16
    3102:	0c25      	lsrs	r5, r4, #16
    3104:	0424      	lsls	r4, r4, #16
    3106:	4465      	add	r5, ip
    3108:	19a4      	adds	r4, r4, r6
    310a:	1859      	adds	r1, r3, r1
    310c:	1949      	adds	r1, r1, r5
    310e:	0020      	movs	r0, r4
    3110:	bc0c      	pop	{r2, r3}
    3112:	4690      	mov	r8, r2
    3114:	4699      	mov	r9, r3
    3116:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003118 <_fgets_r>:
    3118:	b5f0      	push	{r4, r5, r6, r7, lr}
    311a:	b085      	sub	sp, #20
    311c:	0006      	movs	r6, r0
    311e:	9103      	str	r1, [sp, #12]
    3120:	0015      	movs	r5, r2
    3122:	001c      	movs	r4, r3
    3124:	2a01      	cmp	r2, #1
    3126:	dc02      	bgt.n	312e <_fgets_r+0x16>
    3128:	2000      	movs	r0, #0
    312a:	b005      	add	sp, #20
    312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    312e:	2800      	cmp	r0, #0
    3130:	d004      	beq.n	313c <_fgets_r+0x24>
    3132:	6983      	ldr	r3, [r0, #24]
    3134:	2b00      	cmp	r3, #0
    3136:	d101      	bne.n	313c <_fgets_r+0x24>
    3138:	f000 f8a2 	bl	3280 <__sinit>
    313c:	4b26      	ldr	r3, [pc, #152]	; (31d8 <_fgets_r+0xc0>)
    313e:	429c      	cmp	r4, r3
    3140:	d112      	bne.n	3168 <_fgets_r+0x50>
    3142:	6874      	ldr	r4, [r6, #4]
    3144:	1e6b      	subs	r3, r5, #1
    3146:	9f03      	ldr	r7, [sp, #12]
    3148:	9301      	str	r3, [sp, #4]
    314a:	6865      	ldr	r5, [r4, #4]
    314c:	2d00      	cmp	r5, #0
    314e:	d116      	bne.n	317e <_fgets_r+0x66>
    3150:	0021      	movs	r1, r4
    3152:	0030      	movs	r0, r6
    3154:	f000 fa74 	bl	3640 <__srefill_r>
    3158:	2800      	cmp	r0, #0
    315a:	d00f      	beq.n	317c <_fgets_r+0x64>
    315c:	9b03      	ldr	r3, [sp, #12]
    315e:	429f      	cmp	r7, r3
    3160:	d0e2      	beq.n	3128 <_fgets_r+0x10>
    3162:	2300      	movs	r3, #0
    3164:	703b      	strb	r3, [r7, #0]
    3166:	e024      	b.n	31b2 <_fgets_r+0x9a>
    3168:	4b1c      	ldr	r3, [pc, #112]	; (31dc <_fgets_r+0xc4>)
    316a:	429c      	cmp	r4, r3
    316c:	d101      	bne.n	3172 <_fgets_r+0x5a>
    316e:	68b4      	ldr	r4, [r6, #8]
    3170:	e7e8      	b.n	3144 <_fgets_r+0x2c>
    3172:	4b1b      	ldr	r3, [pc, #108]	; (31e0 <_fgets_r+0xc8>)
    3174:	429c      	cmp	r4, r3
    3176:	d1e5      	bne.n	3144 <_fgets_r+0x2c>
    3178:	68f4      	ldr	r4, [r6, #12]
    317a:	e7e3      	b.n	3144 <_fgets_r+0x2c>
    317c:	6865      	ldr	r5, [r4, #4]
    317e:	6823      	ldr	r3, [r4, #0]
    3180:	9302      	str	r3, [sp, #8]
    3182:	9b01      	ldr	r3, [sp, #4]
    3184:	429d      	cmp	r5, r3
    3186:	d900      	bls.n	318a <_fgets_r+0x72>
    3188:	001d      	movs	r5, r3
    318a:	002a      	movs	r2, r5
    318c:	210a      	movs	r1, #10
    318e:	9802      	ldr	r0, [sp, #8]
    3190:	f000 f94c 	bl	342c <memchr>
    3194:	6863      	ldr	r3, [r4, #4]
    3196:	2800      	cmp	r0, #0
    3198:	d00d      	beq.n	31b6 <_fgets_r+0x9e>
    319a:	9a02      	ldr	r2, [sp, #8]
    319c:	3001      	adds	r0, #1
    319e:	1a85      	subs	r5, r0, r2
    31a0:	1b5b      	subs	r3, r3, r5
    31a2:	c409      	stmia	r4!, {r0, r3}
    31a4:	002a      	movs	r2, r5
    31a6:	9902      	ldr	r1, [sp, #8]
    31a8:	0038      	movs	r0, r7
    31aa:	f000 f94a 	bl	3442 <memcpy>
    31ae:	2300      	movs	r3, #0
    31b0:	557b      	strb	r3, [r7, r5]
    31b2:	9803      	ldr	r0, [sp, #12]
    31b4:	e7b9      	b.n	312a <_fgets_r+0x12>
    31b6:	1b5b      	subs	r3, r3, r5
    31b8:	6063      	str	r3, [r4, #4]
    31ba:	6823      	ldr	r3, [r4, #0]
    31bc:	0038      	movs	r0, r7
    31be:	195b      	adds	r3, r3, r5
    31c0:	6023      	str	r3, [r4, #0]
    31c2:	002a      	movs	r2, r5
    31c4:	9902      	ldr	r1, [sp, #8]
    31c6:	f000 f93c 	bl	3442 <memcpy>
    31ca:	9b01      	ldr	r3, [sp, #4]
    31cc:	197f      	adds	r7, r7, r5
    31ce:	1b5b      	subs	r3, r3, r5
    31d0:	9301      	str	r3, [sp, #4]
    31d2:	d1ba      	bne.n	314a <_fgets_r+0x32>
    31d4:	e7c5      	b.n	3162 <_fgets_r+0x4a>
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	000046a0 	.word	0x000046a0
    31dc:	000046c0 	.word	0x000046c0
    31e0:	00004680 	.word	0x00004680

000031e4 <fgets>:
    31e4:	b510      	push	{r4, lr}
    31e6:	0013      	movs	r3, r2
    31e8:	000a      	movs	r2, r1
    31ea:	0001      	movs	r1, r0
    31ec:	4802      	ldr	r0, [pc, #8]	; (31f8 <fgets+0x14>)
    31ee:	6800      	ldr	r0, [r0, #0]
    31f0:	f7ff ff92 	bl	3118 <_fgets_r>
    31f4:	bd10      	pop	{r4, pc}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	20000008 	.word	0x20000008

000031fc <_cleanup_r>:
    31fc:	b510      	push	{r4, lr}
    31fe:	4902      	ldr	r1, [pc, #8]	; (3208 <_cleanup_r+0xc>)
    3200:	f000 f8ce 	bl	33a0 <_fwalk_reent>
    3204:	bd10      	pop	{r4, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	00003c91 	.word	0x00003c91

0000320c <std.isra.0>:
    320c:	2300      	movs	r3, #0
    320e:	b510      	push	{r4, lr}
    3210:	0004      	movs	r4, r0
    3212:	6003      	str	r3, [r0, #0]
    3214:	6043      	str	r3, [r0, #4]
    3216:	6083      	str	r3, [r0, #8]
    3218:	8181      	strh	r1, [r0, #12]
    321a:	6643      	str	r3, [r0, #100]	; 0x64
    321c:	81c2      	strh	r2, [r0, #14]
    321e:	6103      	str	r3, [r0, #16]
    3220:	6143      	str	r3, [r0, #20]
    3222:	6183      	str	r3, [r0, #24]
    3224:	0019      	movs	r1, r3
    3226:	2208      	movs	r2, #8
    3228:	305c      	adds	r0, #92	; 0x5c
    322a:	f000 f913 	bl	3454 <memset>
    322e:	4b05      	ldr	r3, [pc, #20]	; (3244 <std.isra.0+0x38>)
    3230:	6224      	str	r4, [r4, #32]
    3232:	6263      	str	r3, [r4, #36]	; 0x24
    3234:	4b04      	ldr	r3, [pc, #16]	; (3248 <std.isra.0+0x3c>)
    3236:	62a3      	str	r3, [r4, #40]	; 0x28
    3238:	4b04      	ldr	r3, [pc, #16]	; (324c <std.isra.0+0x40>)
    323a:	62e3      	str	r3, [r4, #44]	; 0x2c
    323c:	4b04      	ldr	r3, [pc, #16]	; (3250 <std.isra.0+0x44>)
    323e:	6323      	str	r3, [r4, #48]	; 0x30
    3240:	bd10      	pop	{r4, pc}
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	000038f1 	.word	0x000038f1
    3248:	00003919 	.word	0x00003919
    324c:	00003951 	.word	0x00003951
    3250:	0000397d 	.word	0x0000397d

00003254 <__sfmoreglue>:
    3254:	b570      	push	{r4, r5, r6, lr}
    3256:	2568      	movs	r5, #104	; 0x68
    3258:	1e4a      	subs	r2, r1, #1
    325a:	4355      	muls	r5, r2
    325c:	000e      	movs	r6, r1
    325e:	0029      	movs	r1, r5
    3260:	3174      	adds	r1, #116	; 0x74
    3262:	f000 f8ff 	bl	3464 <_malloc_r>
    3266:	1e04      	subs	r4, r0, #0
    3268:	d008      	beq.n	327c <__sfmoreglue+0x28>
    326a:	2100      	movs	r1, #0
    326c:	002a      	movs	r2, r5
    326e:	6001      	str	r1, [r0, #0]
    3270:	6046      	str	r6, [r0, #4]
    3272:	300c      	adds	r0, #12
    3274:	60a0      	str	r0, [r4, #8]
    3276:	3268      	adds	r2, #104	; 0x68
    3278:	f000 f8ec 	bl	3454 <memset>
    327c:	0020      	movs	r0, r4
    327e:	bd70      	pop	{r4, r5, r6, pc}

00003280 <__sinit>:
    3280:	6983      	ldr	r3, [r0, #24]
    3282:	b513      	push	{r0, r1, r4, lr}
    3284:	0004      	movs	r4, r0
    3286:	2b00      	cmp	r3, #0
    3288:	d128      	bne.n	32dc <__sinit+0x5c>
    328a:	6483      	str	r3, [r0, #72]	; 0x48
    328c:	64c3      	str	r3, [r0, #76]	; 0x4c
    328e:	6503      	str	r3, [r0, #80]	; 0x50
    3290:	4b13      	ldr	r3, [pc, #76]	; (32e0 <__sinit+0x60>)
    3292:	4a14      	ldr	r2, [pc, #80]	; (32e4 <__sinit+0x64>)
    3294:	681b      	ldr	r3, [r3, #0]
    3296:	6282      	str	r2, [r0, #40]	; 0x28
    3298:	9301      	str	r3, [sp, #4]
    329a:	4298      	cmp	r0, r3
    329c:	d101      	bne.n	32a2 <__sinit+0x22>
    329e:	2301      	movs	r3, #1
    32a0:	6183      	str	r3, [r0, #24]
    32a2:	0020      	movs	r0, r4
    32a4:	f000 f820 	bl	32e8 <__sfp>
    32a8:	6060      	str	r0, [r4, #4]
    32aa:	0020      	movs	r0, r4
    32ac:	f000 f81c 	bl	32e8 <__sfp>
    32b0:	60a0      	str	r0, [r4, #8]
    32b2:	0020      	movs	r0, r4
    32b4:	f000 f818 	bl	32e8 <__sfp>
    32b8:	2200      	movs	r2, #0
    32ba:	60e0      	str	r0, [r4, #12]
    32bc:	2104      	movs	r1, #4
    32be:	6860      	ldr	r0, [r4, #4]
    32c0:	f7ff ffa4 	bl	320c <std.isra.0>
    32c4:	2201      	movs	r2, #1
    32c6:	2109      	movs	r1, #9
    32c8:	68a0      	ldr	r0, [r4, #8]
    32ca:	f7ff ff9f 	bl	320c <std.isra.0>
    32ce:	2202      	movs	r2, #2
    32d0:	2112      	movs	r1, #18
    32d2:	68e0      	ldr	r0, [r4, #12]
    32d4:	f7ff ff9a 	bl	320c <std.isra.0>
    32d8:	2301      	movs	r3, #1
    32da:	61a3      	str	r3, [r4, #24]
    32dc:	bd13      	pop	{r0, r1, r4, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	000046e0 	.word	0x000046e0
    32e4:	000031fd 	.word	0x000031fd

000032e8 <__sfp>:
    32e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ea:	4b1e      	ldr	r3, [pc, #120]	; (3364 <__sfp+0x7c>)
    32ec:	0007      	movs	r7, r0
    32ee:	681e      	ldr	r6, [r3, #0]
    32f0:	69b3      	ldr	r3, [r6, #24]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d102      	bne.n	32fc <__sfp+0x14>
    32f6:	0030      	movs	r0, r6
    32f8:	f7ff ffc2 	bl	3280 <__sinit>
    32fc:	3648      	adds	r6, #72	; 0x48
    32fe:	68b4      	ldr	r4, [r6, #8]
    3300:	6873      	ldr	r3, [r6, #4]
    3302:	3b01      	subs	r3, #1
    3304:	d504      	bpl.n	3310 <__sfp+0x28>
    3306:	6833      	ldr	r3, [r6, #0]
    3308:	2b00      	cmp	r3, #0
    330a:	d007      	beq.n	331c <__sfp+0x34>
    330c:	6836      	ldr	r6, [r6, #0]
    330e:	e7f6      	b.n	32fe <__sfp+0x16>
    3310:	220c      	movs	r2, #12
    3312:	5ea5      	ldrsh	r5, [r4, r2]
    3314:	2d00      	cmp	r5, #0
    3316:	d00d      	beq.n	3334 <__sfp+0x4c>
    3318:	3468      	adds	r4, #104	; 0x68
    331a:	e7f2      	b.n	3302 <__sfp+0x1a>
    331c:	2104      	movs	r1, #4
    331e:	0038      	movs	r0, r7
    3320:	f7ff ff98 	bl	3254 <__sfmoreglue>
    3324:	6030      	str	r0, [r6, #0]
    3326:	2800      	cmp	r0, #0
    3328:	d1f0      	bne.n	330c <__sfp+0x24>
    332a:	230c      	movs	r3, #12
    332c:	0004      	movs	r4, r0
    332e:	603b      	str	r3, [r7, #0]
    3330:	0020      	movs	r0, r4
    3332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3334:	2301      	movs	r3, #1
    3336:	0020      	movs	r0, r4
    3338:	425b      	negs	r3, r3
    333a:	81e3      	strh	r3, [r4, #14]
    333c:	3302      	adds	r3, #2
    333e:	81a3      	strh	r3, [r4, #12]
    3340:	6665      	str	r5, [r4, #100]	; 0x64
    3342:	6025      	str	r5, [r4, #0]
    3344:	60a5      	str	r5, [r4, #8]
    3346:	6065      	str	r5, [r4, #4]
    3348:	6125      	str	r5, [r4, #16]
    334a:	6165      	str	r5, [r4, #20]
    334c:	61a5      	str	r5, [r4, #24]
    334e:	2208      	movs	r2, #8
    3350:	0029      	movs	r1, r5
    3352:	305c      	adds	r0, #92	; 0x5c
    3354:	f000 f87e 	bl	3454 <memset>
    3358:	6365      	str	r5, [r4, #52]	; 0x34
    335a:	63a5      	str	r5, [r4, #56]	; 0x38
    335c:	64a5      	str	r5, [r4, #72]	; 0x48
    335e:	64e5      	str	r5, [r4, #76]	; 0x4c
    3360:	e7e6      	b.n	3330 <__sfp+0x48>
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	000046e0 	.word	0x000046e0

00003368 <_fwalk>:
    3368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    336a:	3048      	adds	r0, #72	; 0x48
    336c:	0004      	movs	r4, r0
    336e:	2600      	movs	r6, #0
    3370:	9101      	str	r1, [sp, #4]
    3372:	2c00      	cmp	r4, #0
    3374:	d101      	bne.n	337a <_fwalk+0x12>
    3376:	0030      	movs	r0, r6
    3378:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    337a:	68a5      	ldr	r5, [r4, #8]
    337c:	6867      	ldr	r7, [r4, #4]
    337e:	3f01      	subs	r7, #1
    3380:	d501      	bpl.n	3386 <_fwalk+0x1e>
    3382:	6824      	ldr	r4, [r4, #0]
    3384:	e7f5      	b.n	3372 <_fwalk+0xa>
    3386:	89ab      	ldrh	r3, [r5, #12]
    3388:	2b01      	cmp	r3, #1
    338a:	d907      	bls.n	339c <_fwalk+0x34>
    338c:	220e      	movs	r2, #14
    338e:	5eab      	ldrsh	r3, [r5, r2]
    3390:	3301      	adds	r3, #1
    3392:	d003      	beq.n	339c <_fwalk+0x34>
    3394:	0028      	movs	r0, r5
    3396:	9b01      	ldr	r3, [sp, #4]
    3398:	4798      	blx	r3
    339a:	4306      	orrs	r6, r0
    339c:	3568      	adds	r5, #104	; 0x68
    339e:	e7ee      	b.n	337e <_fwalk+0x16>

000033a0 <_fwalk_reent>:
    33a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33a2:	0004      	movs	r4, r0
    33a4:	0007      	movs	r7, r0
    33a6:	2600      	movs	r6, #0
    33a8:	9101      	str	r1, [sp, #4]
    33aa:	3448      	adds	r4, #72	; 0x48
    33ac:	2c00      	cmp	r4, #0
    33ae:	d101      	bne.n	33b4 <_fwalk_reent+0x14>
    33b0:	0030      	movs	r0, r6
    33b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    33b4:	6863      	ldr	r3, [r4, #4]
    33b6:	68a5      	ldr	r5, [r4, #8]
    33b8:	9300      	str	r3, [sp, #0]
    33ba:	9b00      	ldr	r3, [sp, #0]
    33bc:	3b01      	subs	r3, #1
    33be:	9300      	str	r3, [sp, #0]
    33c0:	d501      	bpl.n	33c6 <_fwalk_reent+0x26>
    33c2:	6824      	ldr	r4, [r4, #0]
    33c4:	e7f2      	b.n	33ac <_fwalk_reent+0xc>
    33c6:	89ab      	ldrh	r3, [r5, #12]
    33c8:	2b01      	cmp	r3, #1
    33ca:	d908      	bls.n	33de <_fwalk_reent+0x3e>
    33cc:	220e      	movs	r2, #14
    33ce:	5eab      	ldrsh	r3, [r5, r2]
    33d0:	3301      	adds	r3, #1
    33d2:	d004      	beq.n	33de <_fwalk_reent+0x3e>
    33d4:	0029      	movs	r1, r5
    33d6:	0038      	movs	r0, r7
    33d8:	9b01      	ldr	r3, [sp, #4]
    33da:	4798      	blx	r3
    33dc:	4306      	orrs	r6, r0
    33de:	3568      	adds	r5, #104	; 0x68
    33e0:	e7eb      	b.n	33ba <_fwalk_reent+0x1a>
	...

000033e4 <__libc_init_array>:
    33e4:	b570      	push	{r4, r5, r6, lr}
    33e6:	2600      	movs	r6, #0
    33e8:	4d0c      	ldr	r5, [pc, #48]	; (341c <__libc_init_array+0x38>)
    33ea:	4c0d      	ldr	r4, [pc, #52]	; (3420 <__libc_init_array+0x3c>)
    33ec:	1b64      	subs	r4, r4, r5
    33ee:	10a4      	asrs	r4, r4, #2
    33f0:	42a6      	cmp	r6, r4
    33f2:	d109      	bne.n	3408 <__libc_init_array+0x24>
    33f4:	2600      	movs	r6, #0
    33f6:	f001 f98f 	bl	4718 <_init>
    33fa:	4d0a      	ldr	r5, [pc, #40]	; (3424 <__libc_init_array+0x40>)
    33fc:	4c0a      	ldr	r4, [pc, #40]	; (3428 <__libc_init_array+0x44>)
    33fe:	1b64      	subs	r4, r4, r5
    3400:	10a4      	asrs	r4, r4, #2
    3402:	42a6      	cmp	r6, r4
    3404:	d105      	bne.n	3412 <__libc_init_array+0x2e>
    3406:	bd70      	pop	{r4, r5, r6, pc}
    3408:	00b3      	lsls	r3, r6, #2
    340a:	58eb      	ldr	r3, [r5, r3]
    340c:	4798      	blx	r3
    340e:	3601      	adds	r6, #1
    3410:	e7ee      	b.n	33f0 <__libc_init_array+0xc>
    3412:	00b3      	lsls	r3, r6, #2
    3414:	58eb      	ldr	r3, [r5, r3]
    3416:	4798      	blx	r3
    3418:	3601      	adds	r6, #1
    341a:	e7f2      	b.n	3402 <__libc_init_array+0x1e>
    341c:	00004724 	.word	0x00004724
    3420:	00004724 	.word	0x00004724
    3424:	00004724 	.word	0x00004724
    3428:	00004728 	.word	0x00004728

0000342c <memchr>:
    342c:	b2c9      	uxtb	r1, r1
    342e:	1882      	adds	r2, r0, r2
    3430:	4290      	cmp	r0, r2
    3432:	d101      	bne.n	3438 <memchr+0xc>
    3434:	2000      	movs	r0, #0
    3436:	4770      	bx	lr
    3438:	7803      	ldrb	r3, [r0, #0]
    343a:	428b      	cmp	r3, r1
    343c:	d0fb      	beq.n	3436 <memchr+0xa>
    343e:	3001      	adds	r0, #1
    3440:	e7f6      	b.n	3430 <memchr+0x4>

00003442 <memcpy>:
    3442:	2300      	movs	r3, #0
    3444:	b510      	push	{r4, lr}
    3446:	429a      	cmp	r2, r3
    3448:	d100      	bne.n	344c <memcpy+0xa>
    344a:	bd10      	pop	{r4, pc}
    344c:	5ccc      	ldrb	r4, [r1, r3]
    344e:	54c4      	strb	r4, [r0, r3]
    3450:	3301      	adds	r3, #1
    3452:	e7f8      	b.n	3446 <memcpy+0x4>

00003454 <memset>:
    3454:	0003      	movs	r3, r0
    3456:	1882      	adds	r2, r0, r2
    3458:	4293      	cmp	r3, r2
    345a:	d100      	bne.n	345e <memset+0xa>
    345c:	4770      	bx	lr
    345e:	7019      	strb	r1, [r3, #0]
    3460:	3301      	adds	r3, #1
    3462:	e7f9      	b.n	3458 <memset+0x4>

00003464 <_malloc_r>:
    3464:	2303      	movs	r3, #3
    3466:	b570      	push	{r4, r5, r6, lr}
    3468:	1ccd      	adds	r5, r1, #3
    346a:	439d      	bics	r5, r3
    346c:	3508      	adds	r5, #8
    346e:	0006      	movs	r6, r0
    3470:	2d0c      	cmp	r5, #12
    3472:	d21e      	bcs.n	34b2 <_malloc_r+0x4e>
    3474:	250c      	movs	r5, #12
    3476:	42a9      	cmp	r1, r5
    3478:	d81d      	bhi.n	34b6 <_malloc_r+0x52>
    347a:	0030      	movs	r0, r6
    347c:	f000 fcd2 	bl	3e24 <__malloc_lock>
    3480:	4a25      	ldr	r2, [pc, #148]	; (3518 <_malloc_r+0xb4>)
    3482:	6814      	ldr	r4, [r2, #0]
    3484:	0021      	movs	r1, r4
    3486:	2900      	cmp	r1, #0
    3488:	d119      	bne.n	34be <_malloc_r+0x5a>
    348a:	4c24      	ldr	r4, [pc, #144]	; (351c <_malloc_r+0xb8>)
    348c:	6823      	ldr	r3, [r4, #0]
    348e:	2b00      	cmp	r3, #0
    3490:	d103      	bne.n	349a <_malloc_r+0x36>
    3492:	0030      	movs	r0, r6
    3494:	f000 f964 	bl	3760 <_sbrk_r>
    3498:	6020      	str	r0, [r4, #0]
    349a:	0029      	movs	r1, r5
    349c:	0030      	movs	r0, r6
    349e:	f000 f95f 	bl	3760 <_sbrk_r>
    34a2:	1c43      	adds	r3, r0, #1
    34a4:	d12c      	bne.n	3500 <_malloc_r+0x9c>
    34a6:	230c      	movs	r3, #12
    34a8:	0030      	movs	r0, r6
    34aa:	6033      	str	r3, [r6, #0]
    34ac:	f000 fcbb 	bl	3e26 <__malloc_unlock>
    34b0:	e003      	b.n	34ba <_malloc_r+0x56>
    34b2:	2d00      	cmp	r5, #0
    34b4:	dadf      	bge.n	3476 <_malloc_r+0x12>
    34b6:	230c      	movs	r3, #12
    34b8:	6033      	str	r3, [r6, #0]
    34ba:	2000      	movs	r0, #0
    34bc:	bd70      	pop	{r4, r5, r6, pc}
    34be:	680b      	ldr	r3, [r1, #0]
    34c0:	1b5b      	subs	r3, r3, r5
    34c2:	d41a      	bmi.n	34fa <_malloc_r+0x96>
    34c4:	2b0b      	cmp	r3, #11
    34c6:	d903      	bls.n	34d0 <_malloc_r+0x6c>
    34c8:	600b      	str	r3, [r1, #0]
    34ca:	18cc      	adds	r4, r1, r3
    34cc:	6025      	str	r5, [r4, #0]
    34ce:	e003      	b.n	34d8 <_malloc_r+0x74>
    34d0:	428c      	cmp	r4, r1
    34d2:	d10e      	bne.n	34f2 <_malloc_r+0x8e>
    34d4:	6863      	ldr	r3, [r4, #4]
    34d6:	6013      	str	r3, [r2, #0]
    34d8:	0030      	movs	r0, r6
    34da:	f000 fca4 	bl	3e26 <__malloc_unlock>
    34de:	0020      	movs	r0, r4
    34e0:	2207      	movs	r2, #7
    34e2:	300b      	adds	r0, #11
    34e4:	1d23      	adds	r3, r4, #4
    34e6:	4390      	bics	r0, r2
    34e8:	1ac3      	subs	r3, r0, r3
    34ea:	d0e7      	beq.n	34bc <_malloc_r+0x58>
    34ec:	425a      	negs	r2, r3
    34ee:	50e2      	str	r2, [r4, r3]
    34f0:	e7e4      	b.n	34bc <_malloc_r+0x58>
    34f2:	684b      	ldr	r3, [r1, #4]
    34f4:	6063      	str	r3, [r4, #4]
    34f6:	000c      	movs	r4, r1
    34f8:	e7ee      	b.n	34d8 <_malloc_r+0x74>
    34fa:	000c      	movs	r4, r1
    34fc:	6849      	ldr	r1, [r1, #4]
    34fe:	e7c2      	b.n	3486 <_malloc_r+0x22>
    3500:	2303      	movs	r3, #3
    3502:	1cc4      	adds	r4, r0, #3
    3504:	439c      	bics	r4, r3
    3506:	42a0      	cmp	r0, r4
    3508:	d0e0      	beq.n	34cc <_malloc_r+0x68>
    350a:	1a21      	subs	r1, r4, r0
    350c:	0030      	movs	r0, r6
    350e:	f000 f927 	bl	3760 <_sbrk_r>
    3512:	1c43      	adds	r3, r0, #1
    3514:	d1da      	bne.n	34cc <_malloc_r+0x68>
    3516:	e7c6      	b.n	34a6 <_malloc_r+0x42>
    3518:	20003078 	.word	0x20003078
    351c:	2000307c 	.word	0x2000307c

00003520 <iprintf>:
    3520:	b40f      	push	{r0, r1, r2, r3}
    3522:	4b0b      	ldr	r3, [pc, #44]	; (3550 <iprintf+0x30>)
    3524:	b513      	push	{r0, r1, r4, lr}
    3526:	681c      	ldr	r4, [r3, #0]
    3528:	2c00      	cmp	r4, #0
    352a:	d005      	beq.n	3538 <iprintf+0x18>
    352c:	69a3      	ldr	r3, [r4, #24]
    352e:	2b00      	cmp	r3, #0
    3530:	d102      	bne.n	3538 <iprintf+0x18>
    3532:	0020      	movs	r0, r4
    3534:	f7ff fea4 	bl	3280 <__sinit>
    3538:	ab05      	add	r3, sp, #20
    353a:	9a04      	ldr	r2, [sp, #16]
    353c:	68a1      	ldr	r1, [r4, #8]
    353e:	0020      	movs	r0, r4
    3540:	9301      	str	r3, [sp, #4]
    3542:	f000 fce3 	bl	3f0c <_vfiprintf_r>
    3546:	bc16      	pop	{r1, r2, r4}
    3548:	bc08      	pop	{r3}
    354a:	b004      	add	sp, #16
    354c:	4718      	bx	r3
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	20000008 	.word	0x20000008

00003554 <_puts_r>:
    3554:	b570      	push	{r4, r5, r6, lr}
    3556:	0005      	movs	r5, r0
    3558:	000e      	movs	r6, r1
    355a:	2800      	cmp	r0, #0
    355c:	d004      	beq.n	3568 <_puts_r+0x14>
    355e:	6983      	ldr	r3, [r0, #24]
    3560:	2b00      	cmp	r3, #0
    3562:	d101      	bne.n	3568 <_puts_r+0x14>
    3564:	f7ff fe8c 	bl	3280 <__sinit>
    3568:	69ab      	ldr	r3, [r5, #24]
    356a:	68ac      	ldr	r4, [r5, #8]
    356c:	2b00      	cmp	r3, #0
    356e:	d102      	bne.n	3576 <_puts_r+0x22>
    3570:	0028      	movs	r0, r5
    3572:	f7ff fe85 	bl	3280 <__sinit>
    3576:	4b24      	ldr	r3, [pc, #144]	; (3608 <_puts_r+0xb4>)
    3578:	429c      	cmp	r4, r3
    357a:	d10f      	bne.n	359c <_puts_r+0x48>
    357c:	686c      	ldr	r4, [r5, #4]
    357e:	89a3      	ldrh	r3, [r4, #12]
    3580:	071b      	lsls	r3, r3, #28
    3582:	d502      	bpl.n	358a <_puts_r+0x36>
    3584:	6923      	ldr	r3, [r4, #16]
    3586:	2b00      	cmp	r3, #0
    3588:	d120      	bne.n	35cc <_puts_r+0x78>
    358a:	0021      	movs	r1, r4
    358c:	0028      	movs	r0, r5
    358e:	f000 fa6d 	bl	3a6c <__swsetup_r>
    3592:	2800      	cmp	r0, #0
    3594:	d01a      	beq.n	35cc <_puts_r+0x78>
    3596:	2001      	movs	r0, #1
    3598:	4240      	negs	r0, r0
    359a:	bd70      	pop	{r4, r5, r6, pc}
    359c:	4b1b      	ldr	r3, [pc, #108]	; (360c <_puts_r+0xb8>)
    359e:	429c      	cmp	r4, r3
    35a0:	d101      	bne.n	35a6 <_puts_r+0x52>
    35a2:	68ac      	ldr	r4, [r5, #8]
    35a4:	e7eb      	b.n	357e <_puts_r+0x2a>
    35a6:	4b1a      	ldr	r3, [pc, #104]	; (3610 <_puts_r+0xbc>)
    35a8:	429c      	cmp	r4, r3
    35aa:	d1e8      	bne.n	357e <_puts_r+0x2a>
    35ac:	68ec      	ldr	r4, [r5, #12]
    35ae:	e7e6      	b.n	357e <_puts_r+0x2a>
    35b0:	3b01      	subs	r3, #1
    35b2:	3601      	adds	r6, #1
    35b4:	60a3      	str	r3, [r4, #8]
    35b6:	2b00      	cmp	r3, #0
    35b8:	da04      	bge.n	35c4 <_puts_r+0x70>
    35ba:	69a2      	ldr	r2, [r4, #24]
    35bc:	4293      	cmp	r3, r2
    35be:	db16      	blt.n	35ee <_puts_r+0x9a>
    35c0:	290a      	cmp	r1, #10
    35c2:	d014      	beq.n	35ee <_puts_r+0x9a>
    35c4:	6823      	ldr	r3, [r4, #0]
    35c6:	1c5a      	adds	r2, r3, #1
    35c8:	6022      	str	r2, [r4, #0]
    35ca:	7019      	strb	r1, [r3, #0]
    35cc:	7831      	ldrb	r1, [r6, #0]
    35ce:	68a3      	ldr	r3, [r4, #8]
    35d0:	2900      	cmp	r1, #0
    35d2:	d1ed      	bne.n	35b0 <_puts_r+0x5c>
    35d4:	3b01      	subs	r3, #1
    35d6:	60a3      	str	r3, [r4, #8]
    35d8:	2b00      	cmp	r3, #0
    35da:	da0f      	bge.n	35fc <_puts_r+0xa8>
    35dc:	0022      	movs	r2, r4
    35de:	310a      	adds	r1, #10
    35e0:	0028      	movs	r0, r5
    35e2:	f000 f9d9 	bl	3998 <__swbuf_r>
    35e6:	1c43      	adds	r3, r0, #1
    35e8:	d0d5      	beq.n	3596 <_puts_r+0x42>
    35ea:	200a      	movs	r0, #10
    35ec:	e7d5      	b.n	359a <_puts_r+0x46>
    35ee:	0022      	movs	r2, r4
    35f0:	0028      	movs	r0, r5
    35f2:	f000 f9d1 	bl	3998 <__swbuf_r>
    35f6:	1c43      	adds	r3, r0, #1
    35f8:	d1e8      	bne.n	35cc <_puts_r+0x78>
    35fa:	e7cc      	b.n	3596 <_puts_r+0x42>
    35fc:	200a      	movs	r0, #10
    35fe:	6823      	ldr	r3, [r4, #0]
    3600:	1c5a      	adds	r2, r3, #1
    3602:	6022      	str	r2, [r4, #0]
    3604:	7018      	strb	r0, [r3, #0]
    3606:	e7c8      	b.n	359a <_puts_r+0x46>
    3608:	000046a0 	.word	0x000046a0
    360c:	000046c0 	.word	0x000046c0
    3610:	00004680 	.word	0x00004680

00003614 <puts>:
    3614:	b510      	push	{r4, lr}
    3616:	4b03      	ldr	r3, [pc, #12]	; (3624 <puts+0x10>)
    3618:	0001      	movs	r1, r0
    361a:	6818      	ldr	r0, [r3, #0]
    361c:	f7ff ff9a 	bl	3554 <_puts_r>
    3620:	bd10      	pop	{r4, pc}
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	20000008 	.word	0x20000008

00003628 <lflush>:
    3628:	2209      	movs	r2, #9
    362a:	b510      	push	{r4, lr}
    362c:	8983      	ldrh	r3, [r0, #12]
    362e:	4013      	ands	r3, r2
    3630:	2200      	movs	r2, #0
    3632:	2b09      	cmp	r3, #9
    3634:	d102      	bne.n	363c <lflush+0x14>
    3636:	f000 fb57 	bl	3ce8 <fflush>
    363a:	0002      	movs	r2, r0
    363c:	0010      	movs	r0, r2
    363e:	bd10      	pop	{r4, pc}

00003640 <__srefill_r>:
    3640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3642:	0005      	movs	r5, r0
    3644:	000c      	movs	r4, r1
    3646:	2800      	cmp	r0, #0
    3648:	d004      	beq.n	3654 <__srefill_r+0x14>
    364a:	6983      	ldr	r3, [r0, #24]
    364c:	2b00      	cmp	r3, #0
    364e:	d101      	bne.n	3654 <__srefill_r+0x14>
    3650:	f7ff fe16 	bl	3280 <__sinit>
    3654:	4b3d      	ldr	r3, [pc, #244]	; (374c <__srefill_r+0x10c>)
    3656:	429c      	cmp	r4, r3
    3658:	d10a      	bne.n	3670 <__srefill_r+0x30>
    365a:	686c      	ldr	r4, [r5, #4]
    365c:	2300      	movs	r3, #0
    365e:	6063      	str	r3, [r4, #4]
    3660:	230c      	movs	r3, #12
    3662:	5ee2      	ldrsh	r2, [r4, r3]
    3664:	b293      	uxth	r3, r2
    3666:	0699      	lsls	r1, r3, #26
    3668:	d50c      	bpl.n	3684 <__srefill_r+0x44>
    366a:	2001      	movs	r0, #1
    366c:	4240      	negs	r0, r0
    366e:	e068      	b.n	3742 <__srefill_r+0x102>
    3670:	4b37      	ldr	r3, [pc, #220]	; (3750 <__srefill_r+0x110>)
    3672:	429c      	cmp	r4, r3
    3674:	d101      	bne.n	367a <__srefill_r+0x3a>
    3676:	68ac      	ldr	r4, [r5, #8]
    3678:	e7f0      	b.n	365c <__srefill_r+0x1c>
    367a:	4b36      	ldr	r3, [pc, #216]	; (3754 <__srefill_r+0x114>)
    367c:	429c      	cmp	r4, r3
    367e:	d1ed      	bne.n	365c <__srefill_r+0x1c>
    3680:	68ec      	ldr	r4, [r5, #12]
    3682:	e7eb      	b.n	365c <__srefill_r+0x1c>
    3684:	0759      	lsls	r1, r3, #29
    3686:	d44a      	bmi.n	371e <__srefill_r+0xde>
    3688:	06d9      	lsls	r1, r3, #27
    368a:	d405      	bmi.n	3698 <__srefill_r+0x58>
    368c:	2309      	movs	r3, #9
    368e:	602b      	str	r3, [r5, #0]
    3690:	3337      	adds	r3, #55	; 0x37
    3692:	4313      	orrs	r3, r2
    3694:	81a3      	strh	r3, [r4, #12]
    3696:	e7e8      	b.n	366a <__srefill_r+0x2a>
    3698:	2608      	movs	r6, #8
    369a:	4233      	tst	r3, r6
    369c:	d00a      	beq.n	36b4 <__srefill_r+0x74>
    369e:	0021      	movs	r1, r4
    36a0:	0028      	movs	r0, r5
    36a2:	f000 faf5 	bl	3c90 <_fflush_r>
    36a6:	2800      	cmp	r0, #0
    36a8:	d1df      	bne.n	366a <__srefill_r+0x2a>
    36aa:	89a3      	ldrh	r3, [r4, #12]
    36ac:	60a0      	str	r0, [r4, #8]
    36ae:	43b3      	bics	r3, r6
    36b0:	81a3      	strh	r3, [r4, #12]
    36b2:	61a0      	str	r0, [r4, #24]
    36b4:	2304      	movs	r3, #4
    36b6:	89a2      	ldrh	r2, [r4, #12]
    36b8:	4313      	orrs	r3, r2
    36ba:	81a3      	strh	r3, [r4, #12]
    36bc:	6923      	ldr	r3, [r4, #16]
    36be:	2b00      	cmp	r3, #0
    36c0:	d103      	bne.n	36ca <__srefill_r+0x8a>
    36c2:	0021      	movs	r1, r4
    36c4:	0028      	movs	r0, r5
    36c6:	f000 fb5f 	bl	3d88 <__smakebuf_r>
    36ca:	230c      	movs	r3, #12
    36cc:	5ee7      	ldrsh	r7, [r4, r3]
    36ce:	b2be      	uxth	r6, r7
    36d0:	07b3      	lsls	r3, r6, #30
    36d2:	d00f      	beq.n	36f4 <__srefill_r+0xb4>
    36d4:	2301      	movs	r3, #1
    36d6:	81a3      	strh	r3, [r4, #12]
    36d8:	4b1f      	ldr	r3, [pc, #124]	; (3758 <__srefill_r+0x118>)
    36da:	4920      	ldr	r1, [pc, #128]	; (375c <__srefill_r+0x11c>)
    36dc:	6818      	ldr	r0, [r3, #0]
    36de:	f7ff fe43 	bl	3368 <_fwalk>
    36e2:	2309      	movs	r3, #9
    36e4:	81a7      	strh	r7, [r4, #12]
    36e6:	401e      	ands	r6, r3
    36e8:	429e      	cmp	r6, r3
    36ea:	d103      	bne.n	36f4 <__srefill_r+0xb4>
    36ec:	0021      	movs	r1, r4
    36ee:	0028      	movs	r0, r5
    36f0:	f000 fa44 	bl	3b7c <__sflush_r>
    36f4:	6923      	ldr	r3, [r4, #16]
    36f6:	6922      	ldr	r2, [r4, #16]
    36f8:	6023      	str	r3, [r4, #0]
    36fa:	0028      	movs	r0, r5
    36fc:	6963      	ldr	r3, [r4, #20]
    36fe:	6a21      	ldr	r1, [r4, #32]
    3700:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3702:	47a8      	blx	r5
    3704:	0002      	movs	r2, r0
    3706:	6060      	str	r0, [r4, #4]
    3708:	2000      	movs	r0, #0
    370a:	4282      	cmp	r2, r0
    370c:	dc19      	bgt.n	3742 <__srefill_r+0x102>
    370e:	89a1      	ldrh	r1, [r4, #12]
    3710:	4282      	cmp	r2, r0
    3712:	d117      	bne.n	3744 <__srefill_r+0x104>
    3714:	2320      	movs	r3, #32
    3716:	430b      	orrs	r3, r1
    3718:	81a3      	strh	r3, [r4, #12]
    371a:	3801      	subs	r0, #1
    371c:	e011      	b.n	3742 <__srefill_r+0x102>
    371e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3720:	2900      	cmp	r1, #0
    3722:	d0cb      	beq.n	36bc <__srefill_r+0x7c>
    3724:	0023      	movs	r3, r4
    3726:	3344      	adds	r3, #68	; 0x44
    3728:	4299      	cmp	r1, r3
    372a:	d002      	beq.n	3732 <__srefill_r+0xf2>
    372c:	0028      	movs	r0, r5
    372e:	f000 fb7b 	bl	3e28 <_free_r>
    3732:	2000      	movs	r0, #0
    3734:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3736:	6360      	str	r0, [r4, #52]	; 0x34
    3738:	6063      	str	r3, [r4, #4]
    373a:	4283      	cmp	r3, r0
    373c:	d0be      	beq.n	36bc <__srefill_r+0x7c>
    373e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3740:	6023      	str	r3, [r4, #0]
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	2340      	movs	r3, #64	; 0x40
    3746:	6060      	str	r0, [r4, #4]
    3748:	430b      	orrs	r3, r1
    374a:	e7a3      	b.n	3694 <__srefill_r+0x54>
    374c:	000046a0 	.word	0x000046a0
    3750:	000046c0 	.word	0x000046c0
    3754:	00004680 	.word	0x00004680
    3758:	000046e0 	.word	0x000046e0
    375c:	00003629 	.word	0x00003629

00003760 <_sbrk_r>:
    3760:	2300      	movs	r3, #0
    3762:	b570      	push	{r4, r5, r6, lr}
    3764:	4c06      	ldr	r4, [pc, #24]	; (3780 <_sbrk_r+0x20>)
    3766:	0005      	movs	r5, r0
    3768:	0008      	movs	r0, r1
    376a:	6023      	str	r3, [r4, #0]
    376c:	f7fd fdd4 	bl	1318 <_sbrk>
    3770:	1c43      	adds	r3, r0, #1
    3772:	d103      	bne.n	377c <_sbrk_r+0x1c>
    3774:	6823      	ldr	r3, [r4, #0]
    3776:	2b00      	cmp	r3, #0
    3778:	d000      	beq.n	377c <_sbrk_r+0x1c>
    377a:	602b      	str	r3, [r5, #0]
    377c:	bd70      	pop	{r4, r5, r6, pc}
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	2000311c 	.word	0x2000311c

00003784 <setbuf>:
    3784:	424a      	negs	r2, r1
    3786:	414a      	adcs	r2, r1
    3788:	2380      	movs	r3, #128	; 0x80
    378a:	b510      	push	{r4, lr}
    378c:	0052      	lsls	r2, r2, #1
    378e:	00db      	lsls	r3, r3, #3
    3790:	f000 f802 	bl	3798 <setvbuf>
    3794:	bd10      	pop	{r4, pc}
	...

00003798 <setvbuf>:
    3798:	b5f0      	push	{r4, r5, r6, r7, lr}
    379a:	001d      	movs	r5, r3
    379c:	4b4f      	ldr	r3, [pc, #316]	; (38dc <setvbuf+0x144>)
    379e:	b085      	sub	sp, #20
    37a0:	681e      	ldr	r6, [r3, #0]
    37a2:	0004      	movs	r4, r0
    37a4:	000f      	movs	r7, r1
    37a6:	9200      	str	r2, [sp, #0]
    37a8:	2e00      	cmp	r6, #0
    37aa:	d005      	beq.n	37b8 <setvbuf+0x20>
    37ac:	69b3      	ldr	r3, [r6, #24]
    37ae:	2b00      	cmp	r3, #0
    37b0:	d102      	bne.n	37b8 <setvbuf+0x20>
    37b2:	0030      	movs	r0, r6
    37b4:	f7ff fd64 	bl	3280 <__sinit>
    37b8:	4b49      	ldr	r3, [pc, #292]	; (38e0 <setvbuf+0x148>)
    37ba:	429c      	cmp	r4, r3
    37bc:	d150      	bne.n	3860 <setvbuf+0xc8>
    37be:	6874      	ldr	r4, [r6, #4]
    37c0:	9b00      	ldr	r3, [sp, #0]
    37c2:	2b02      	cmp	r3, #2
    37c4:	d005      	beq.n	37d2 <setvbuf+0x3a>
    37c6:	2b01      	cmp	r3, #1
    37c8:	d900      	bls.n	37cc <setvbuf+0x34>
    37ca:	e084      	b.n	38d6 <setvbuf+0x13e>
    37cc:	2d00      	cmp	r5, #0
    37ce:	da00      	bge.n	37d2 <setvbuf+0x3a>
    37d0:	e081      	b.n	38d6 <setvbuf+0x13e>
    37d2:	0021      	movs	r1, r4
    37d4:	0030      	movs	r0, r6
    37d6:	f000 fa5b 	bl	3c90 <_fflush_r>
    37da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    37dc:	2900      	cmp	r1, #0
    37de:	d008      	beq.n	37f2 <setvbuf+0x5a>
    37e0:	0023      	movs	r3, r4
    37e2:	3344      	adds	r3, #68	; 0x44
    37e4:	4299      	cmp	r1, r3
    37e6:	d002      	beq.n	37ee <setvbuf+0x56>
    37e8:	0030      	movs	r0, r6
    37ea:	f000 fb1d 	bl	3e28 <_free_r>
    37ee:	2300      	movs	r3, #0
    37f0:	6363      	str	r3, [r4, #52]	; 0x34
    37f2:	2300      	movs	r3, #0
    37f4:	61a3      	str	r3, [r4, #24]
    37f6:	6063      	str	r3, [r4, #4]
    37f8:	89a3      	ldrh	r3, [r4, #12]
    37fa:	061b      	lsls	r3, r3, #24
    37fc:	d503      	bpl.n	3806 <setvbuf+0x6e>
    37fe:	6921      	ldr	r1, [r4, #16]
    3800:	0030      	movs	r0, r6
    3802:	f000 fb11 	bl	3e28 <_free_r>
    3806:	89a3      	ldrh	r3, [r4, #12]
    3808:	4a36      	ldr	r2, [pc, #216]	; (38e4 <setvbuf+0x14c>)
    380a:	4013      	ands	r3, r2
    380c:	81a3      	strh	r3, [r4, #12]
    380e:	9b00      	ldr	r3, [sp, #0]
    3810:	2b02      	cmp	r3, #2
    3812:	d05a      	beq.n	38ca <setvbuf+0x132>
    3814:	ab03      	add	r3, sp, #12
    3816:	aa02      	add	r2, sp, #8
    3818:	0021      	movs	r1, r4
    381a:	0030      	movs	r0, r6
    381c:	f000 fa8c 	bl	3d38 <__swhatbuf_r>
    3820:	89a3      	ldrh	r3, [r4, #12]
    3822:	4318      	orrs	r0, r3
    3824:	81a0      	strh	r0, [r4, #12]
    3826:	2d00      	cmp	r5, #0
    3828:	d124      	bne.n	3874 <setvbuf+0xdc>
    382a:	9d02      	ldr	r5, [sp, #8]
    382c:	0028      	movs	r0, r5
    382e:	f000 faef 	bl	3e10 <malloc>
    3832:	9501      	str	r5, [sp, #4]
    3834:	1e07      	subs	r7, r0, #0
    3836:	d142      	bne.n	38be <setvbuf+0x126>
    3838:	9b02      	ldr	r3, [sp, #8]
    383a:	9301      	str	r3, [sp, #4]
    383c:	42ab      	cmp	r3, r5
    383e:	d139      	bne.n	38b4 <setvbuf+0x11c>
    3840:	2001      	movs	r0, #1
    3842:	4240      	negs	r0, r0
    3844:	2302      	movs	r3, #2
    3846:	89a2      	ldrh	r2, [r4, #12]
    3848:	4313      	orrs	r3, r2
    384a:	81a3      	strh	r3, [r4, #12]
    384c:	2300      	movs	r3, #0
    384e:	60a3      	str	r3, [r4, #8]
    3850:	0023      	movs	r3, r4
    3852:	3347      	adds	r3, #71	; 0x47
    3854:	6023      	str	r3, [r4, #0]
    3856:	6123      	str	r3, [r4, #16]
    3858:	2301      	movs	r3, #1
    385a:	6163      	str	r3, [r4, #20]
    385c:	b005      	add	sp, #20
    385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3860:	4b21      	ldr	r3, [pc, #132]	; (38e8 <setvbuf+0x150>)
    3862:	429c      	cmp	r4, r3
    3864:	d101      	bne.n	386a <setvbuf+0xd2>
    3866:	68b4      	ldr	r4, [r6, #8]
    3868:	e7aa      	b.n	37c0 <setvbuf+0x28>
    386a:	4b20      	ldr	r3, [pc, #128]	; (38ec <setvbuf+0x154>)
    386c:	429c      	cmp	r4, r3
    386e:	d1a7      	bne.n	37c0 <setvbuf+0x28>
    3870:	68f4      	ldr	r4, [r6, #12]
    3872:	e7a5      	b.n	37c0 <setvbuf+0x28>
    3874:	2f00      	cmp	r7, #0
    3876:	d0d9      	beq.n	382c <setvbuf+0x94>
    3878:	69b3      	ldr	r3, [r6, #24]
    387a:	2b00      	cmp	r3, #0
    387c:	d102      	bne.n	3884 <setvbuf+0xec>
    387e:	0030      	movs	r0, r6
    3880:	f7ff fcfe 	bl	3280 <__sinit>
    3884:	9b00      	ldr	r3, [sp, #0]
    3886:	2b01      	cmp	r3, #1
    3888:	d103      	bne.n	3892 <setvbuf+0xfa>
    388a:	89a3      	ldrh	r3, [r4, #12]
    388c:	9a00      	ldr	r2, [sp, #0]
    388e:	431a      	orrs	r2, r3
    3890:	81a2      	strh	r2, [r4, #12]
    3892:	2008      	movs	r0, #8
    3894:	89a3      	ldrh	r3, [r4, #12]
    3896:	6027      	str	r7, [r4, #0]
    3898:	6127      	str	r7, [r4, #16]
    389a:	6165      	str	r5, [r4, #20]
    389c:	4018      	ands	r0, r3
    389e:	d018      	beq.n	38d2 <setvbuf+0x13a>
    38a0:	2001      	movs	r0, #1
    38a2:	4018      	ands	r0, r3
    38a4:	2300      	movs	r3, #0
    38a6:	4298      	cmp	r0, r3
    38a8:	d011      	beq.n	38ce <setvbuf+0x136>
    38aa:	426d      	negs	r5, r5
    38ac:	60a3      	str	r3, [r4, #8]
    38ae:	61a5      	str	r5, [r4, #24]
    38b0:	0018      	movs	r0, r3
    38b2:	e7d3      	b.n	385c <setvbuf+0xc4>
    38b4:	9801      	ldr	r0, [sp, #4]
    38b6:	f000 faab 	bl	3e10 <malloc>
    38ba:	1e07      	subs	r7, r0, #0
    38bc:	d0c0      	beq.n	3840 <setvbuf+0xa8>
    38be:	2380      	movs	r3, #128	; 0x80
    38c0:	89a2      	ldrh	r2, [r4, #12]
    38c2:	9d01      	ldr	r5, [sp, #4]
    38c4:	4313      	orrs	r3, r2
    38c6:	81a3      	strh	r3, [r4, #12]
    38c8:	e7d6      	b.n	3878 <setvbuf+0xe0>
    38ca:	2000      	movs	r0, #0
    38cc:	e7ba      	b.n	3844 <setvbuf+0xac>
    38ce:	60a5      	str	r5, [r4, #8]
    38d0:	e7c4      	b.n	385c <setvbuf+0xc4>
    38d2:	60a0      	str	r0, [r4, #8]
    38d4:	e7c2      	b.n	385c <setvbuf+0xc4>
    38d6:	2001      	movs	r0, #1
    38d8:	4240      	negs	r0, r0
    38da:	e7bf      	b.n	385c <setvbuf+0xc4>
    38dc:	20000008 	.word	0x20000008
    38e0:	000046a0 	.word	0x000046a0
    38e4:	fffff35c 	.word	0xfffff35c
    38e8:	000046c0 	.word	0x000046c0
    38ec:	00004680 	.word	0x00004680

000038f0 <__sread>:
    38f0:	b570      	push	{r4, r5, r6, lr}
    38f2:	000c      	movs	r4, r1
    38f4:	250e      	movs	r5, #14
    38f6:	5f49      	ldrsh	r1, [r1, r5]
    38f8:	f000 fdac 	bl	4454 <_read_r>
    38fc:	2800      	cmp	r0, #0
    38fe:	db03      	blt.n	3908 <__sread+0x18>
    3900:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3902:	181b      	adds	r3, r3, r0
    3904:	6563      	str	r3, [r4, #84]	; 0x54
    3906:	bd70      	pop	{r4, r5, r6, pc}
    3908:	89a3      	ldrh	r3, [r4, #12]
    390a:	4a02      	ldr	r2, [pc, #8]	; (3914 <__sread+0x24>)
    390c:	4013      	ands	r3, r2
    390e:	81a3      	strh	r3, [r4, #12]
    3910:	e7f9      	b.n	3906 <__sread+0x16>
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	ffffefff 	.word	0xffffefff

00003918 <__swrite>:
    3918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    391a:	001f      	movs	r7, r3
    391c:	898b      	ldrh	r3, [r1, #12]
    391e:	0005      	movs	r5, r0
    3920:	000c      	movs	r4, r1
    3922:	0016      	movs	r6, r2
    3924:	05db      	lsls	r3, r3, #23
    3926:	d505      	bpl.n	3934 <__swrite+0x1c>
    3928:	230e      	movs	r3, #14
    392a:	5ec9      	ldrsh	r1, [r1, r3]
    392c:	2200      	movs	r2, #0
    392e:	2302      	movs	r3, #2
    3930:	f000 f9ee 	bl	3d10 <_lseek_r>
    3934:	89a3      	ldrh	r3, [r4, #12]
    3936:	4a05      	ldr	r2, [pc, #20]	; (394c <__swrite+0x34>)
    3938:	0028      	movs	r0, r5
    393a:	4013      	ands	r3, r2
    393c:	81a3      	strh	r3, [r4, #12]
    393e:	0032      	movs	r2, r6
    3940:	230e      	movs	r3, #14
    3942:	5ee1      	ldrsh	r1, [r4, r3]
    3944:	003b      	movs	r3, r7
    3946:	f000 f87d 	bl	3a44 <_write_r>
    394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    394c:	ffffefff 	.word	0xffffefff

00003950 <__sseek>:
    3950:	b570      	push	{r4, r5, r6, lr}
    3952:	000c      	movs	r4, r1
    3954:	250e      	movs	r5, #14
    3956:	5f49      	ldrsh	r1, [r1, r5]
    3958:	f000 f9da 	bl	3d10 <_lseek_r>
    395c:	89a3      	ldrh	r3, [r4, #12]
    395e:	1c42      	adds	r2, r0, #1
    3960:	d103      	bne.n	396a <__sseek+0x1a>
    3962:	4a05      	ldr	r2, [pc, #20]	; (3978 <__sseek+0x28>)
    3964:	4013      	ands	r3, r2
    3966:	81a3      	strh	r3, [r4, #12]
    3968:	bd70      	pop	{r4, r5, r6, pc}
    396a:	2280      	movs	r2, #128	; 0x80
    396c:	0152      	lsls	r2, r2, #5
    396e:	4313      	orrs	r3, r2
    3970:	81a3      	strh	r3, [r4, #12]
    3972:	6560      	str	r0, [r4, #84]	; 0x54
    3974:	e7f8      	b.n	3968 <__sseek+0x18>
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	ffffefff 	.word	0xffffefff

0000397c <__sclose>:
    397c:	b510      	push	{r4, lr}
    397e:	230e      	movs	r3, #14
    3980:	5ec9      	ldrsh	r1, [r1, r3]
    3982:	f000 f8e9 	bl	3b58 <_close_r>
    3986:	bd10      	pop	{r4, pc}

00003988 <strcpy>:
    3988:	1c03      	adds	r3, r0, #0
    398a:	780a      	ldrb	r2, [r1, #0]
    398c:	3101      	adds	r1, #1
    398e:	701a      	strb	r2, [r3, #0]
    3990:	3301      	adds	r3, #1
    3992:	2a00      	cmp	r2, #0
    3994:	d1f9      	bne.n	398a <strcpy+0x2>
    3996:	4770      	bx	lr

00003998 <__swbuf_r>:
    3998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    399a:	0005      	movs	r5, r0
    399c:	000e      	movs	r6, r1
    399e:	0014      	movs	r4, r2
    39a0:	2800      	cmp	r0, #0
    39a2:	d004      	beq.n	39ae <__swbuf_r+0x16>
    39a4:	6983      	ldr	r3, [r0, #24]
    39a6:	2b00      	cmp	r3, #0
    39a8:	d101      	bne.n	39ae <__swbuf_r+0x16>
    39aa:	f7ff fc69 	bl	3280 <__sinit>
    39ae:	4b22      	ldr	r3, [pc, #136]	; (3a38 <__swbuf_r+0xa0>)
    39b0:	429c      	cmp	r4, r3
    39b2:	d12d      	bne.n	3a10 <__swbuf_r+0x78>
    39b4:	686c      	ldr	r4, [r5, #4]
    39b6:	69a3      	ldr	r3, [r4, #24]
    39b8:	60a3      	str	r3, [r4, #8]
    39ba:	89a3      	ldrh	r3, [r4, #12]
    39bc:	071b      	lsls	r3, r3, #28
    39be:	d531      	bpl.n	3a24 <__swbuf_r+0x8c>
    39c0:	6923      	ldr	r3, [r4, #16]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d02e      	beq.n	3a24 <__swbuf_r+0x8c>
    39c6:	6823      	ldr	r3, [r4, #0]
    39c8:	6922      	ldr	r2, [r4, #16]
    39ca:	b2f7      	uxtb	r7, r6
    39cc:	1a98      	subs	r0, r3, r2
    39ce:	6963      	ldr	r3, [r4, #20]
    39d0:	b2f6      	uxtb	r6, r6
    39d2:	4298      	cmp	r0, r3
    39d4:	db05      	blt.n	39e2 <__swbuf_r+0x4a>
    39d6:	0021      	movs	r1, r4
    39d8:	0028      	movs	r0, r5
    39da:	f000 f959 	bl	3c90 <_fflush_r>
    39de:	2800      	cmp	r0, #0
    39e0:	d126      	bne.n	3a30 <__swbuf_r+0x98>
    39e2:	68a3      	ldr	r3, [r4, #8]
    39e4:	3001      	adds	r0, #1
    39e6:	3b01      	subs	r3, #1
    39e8:	60a3      	str	r3, [r4, #8]
    39ea:	6823      	ldr	r3, [r4, #0]
    39ec:	1c5a      	adds	r2, r3, #1
    39ee:	6022      	str	r2, [r4, #0]
    39f0:	701f      	strb	r7, [r3, #0]
    39f2:	6963      	ldr	r3, [r4, #20]
    39f4:	4298      	cmp	r0, r3
    39f6:	d004      	beq.n	3a02 <__swbuf_r+0x6a>
    39f8:	89a3      	ldrh	r3, [r4, #12]
    39fa:	07db      	lsls	r3, r3, #31
    39fc:	d51a      	bpl.n	3a34 <__swbuf_r+0x9c>
    39fe:	2e0a      	cmp	r6, #10
    3a00:	d118      	bne.n	3a34 <__swbuf_r+0x9c>
    3a02:	0021      	movs	r1, r4
    3a04:	0028      	movs	r0, r5
    3a06:	f000 f943 	bl	3c90 <_fflush_r>
    3a0a:	2800      	cmp	r0, #0
    3a0c:	d012      	beq.n	3a34 <__swbuf_r+0x9c>
    3a0e:	e00f      	b.n	3a30 <__swbuf_r+0x98>
    3a10:	4b0a      	ldr	r3, [pc, #40]	; (3a3c <__swbuf_r+0xa4>)
    3a12:	429c      	cmp	r4, r3
    3a14:	d101      	bne.n	3a1a <__swbuf_r+0x82>
    3a16:	68ac      	ldr	r4, [r5, #8]
    3a18:	e7cd      	b.n	39b6 <__swbuf_r+0x1e>
    3a1a:	4b09      	ldr	r3, [pc, #36]	; (3a40 <__swbuf_r+0xa8>)
    3a1c:	429c      	cmp	r4, r3
    3a1e:	d1ca      	bne.n	39b6 <__swbuf_r+0x1e>
    3a20:	68ec      	ldr	r4, [r5, #12]
    3a22:	e7c8      	b.n	39b6 <__swbuf_r+0x1e>
    3a24:	0021      	movs	r1, r4
    3a26:	0028      	movs	r0, r5
    3a28:	f000 f820 	bl	3a6c <__swsetup_r>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d0ca      	beq.n	39c6 <__swbuf_r+0x2e>
    3a30:	2601      	movs	r6, #1
    3a32:	4276      	negs	r6, r6
    3a34:	0030      	movs	r0, r6
    3a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a38:	000046a0 	.word	0x000046a0
    3a3c:	000046c0 	.word	0x000046c0
    3a40:	00004680 	.word	0x00004680

00003a44 <_write_r>:
    3a44:	b570      	push	{r4, r5, r6, lr}
    3a46:	0005      	movs	r5, r0
    3a48:	0008      	movs	r0, r1
    3a4a:	0011      	movs	r1, r2
    3a4c:	2200      	movs	r2, #0
    3a4e:	4c06      	ldr	r4, [pc, #24]	; (3a68 <_write_r+0x24>)
    3a50:	6022      	str	r2, [r4, #0]
    3a52:	001a      	movs	r2, r3
    3a54:	f7fc fba2 	bl	19c <_write>
    3a58:	1c43      	adds	r3, r0, #1
    3a5a:	d103      	bne.n	3a64 <_write_r+0x20>
    3a5c:	6823      	ldr	r3, [r4, #0]
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d000      	beq.n	3a64 <_write_r+0x20>
    3a62:	602b      	str	r3, [r5, #0]
    3a64:	bd70      	pop	{r4, r5, r6, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	2000311c 	.word	0x2000311c

00003a6c <__swsetup_r>:
    3a6c:	4b36      	ldr	r3, [pc, #216]	; (3b48 <__swsetup_r+0xdc>)
    3a6e:	b570      	push	{r4, r5, r6, lr}
    3a70:	681d      	ldr	r5, [r3, #0]
    3a72:	0006      	movs	r6, r0
    3a74:	000c      	movs	r4, r1
    3a76:	2d00      	cmp	r5, #0
    3a78:	d005      	beq.n	3a86 <__swsetup_r+0x1a>
    3a7a:	69ab      	ldr	r3, [r5, #24]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d102      	bne.n	3a86 <__swsetup_r+0x1a>
    3a80:	0028      	movs	r0, r5
    3a82:	f7ff fbfd 	bl	3280 <__sinit>
    3a86:	4b31      	ldr	r3, [pc, #196]	; (3b4c <__swsetup_r+0xe0>)
    3a88:	429c      	cmp	r4, r3
    3a8a:	d10f      	bne.n	3aac <__swsetup_r+0x40>
    3a8c:	686c      	ldr	r4, [r5, #4]
    3a8e:	230c      	movs	r3, #12
    3a90:	5ee2      	ldrsh	r2, [r4, r3]
    3a92:	b293      	uxth	r3, r2
    3a94:	0719      	lsls	r1, r3, #28
    3a96:	d42d      	bmi.n	3af4 <__swsetup_r+0x88>
    3a98:	06d9      	lsls	r1, r3, #27
    3a9a:	d411      	bmi.n	3ac0 <__swsetup_r+0x54>
    3a9c:	2309      	movs	r3, #9
    3a9e:	2001      	movs	r0, #1
    3aa0:	6033      	str	r3, [r6, #0]
    3aa2:	3337      	adds	r3, #55	; 0x37
    3aa4:	4313      	orrs	r3, r2
    3aa6:	81a3      	strh	r3, [r4, #12]
    3aa8:	4240      	negs	r0, r0
    3aaa:	bd70      	pop	{r4, r5, r6, pc}
    3aac:	4b28      	ldr	r3, [pc, #160]	; (3b50 <__swsetup_r+0xe4>)
    3aae:	429c      	cmp	r4, r3
    3ab0:	d101      	bne.n	3ab6 <__swsetup_r+0x4a>
    3ab2:	68ac      	ldr	r4, [r5, #8]
    3ab4:	e7eb      	b.n	3a8e <__swsetup_r+0x22>
    3ab6:	4b27      	ldr	r3, [pc, #156]	; (3b54 <__swsetup_r+0xe8>)
    3ab8:	429c      	cmp	r4, r3
    3aba:	d1e8      	bne.n	3a8e <__swsetup_r+0x22>
    3abc:	68ec      	ldr	r4, [r5, #12]
    3abe:	e7e6      	b.n	3a8e <__swsetup_r+0x22>
    3ac0:	075b      	lsls	r3, r3, #29
    3ac2:	d513      	bpl.n	3aec <__swsetup_r+0x80>
    3ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ac6:	2900      	cmp	r1, #0
    3ac8:	d008      	beq.n	3adc <__swsetup_r+0x70>
    3aca:	0023      	movs	r3, r4
    3acc:	3344      	adds	r3, #68	; 0x44
    3ace:	4299      	cmp	r1, r3
    3ad0:	d002      	beq.n	3ad8 <__swsetup_r+0x6c>
    3ad2:	0030      	movs	r0, r6
    3ad4:	f000 f9a8 	bl	3e28 <_free_r>
    3ad8:	2300      	movs	r3, #0
    3ada:	6363      	str	r3, [r4, #52]	; 0x34
    3adc:	2224      	movs	r2, #36	; 0x24
    3ade:	89a3      	ldrh	r3, [r4, #12]
    3ae0:	4393      	bics	r3, r2
    3ae2:	81a3      	strh	r3, [r4, #12]
    3ae4:	2300      	movs	r3, #0
    3ae6:	6063      	str	r3, [r4, #4]
    3ae8:	6923      	ldr	r3, [r4, #16]
    3aea:	6023      	str	r3, [r4, #0]
    3aec:	2308      	movs	r3, #8
    3aee:	89a2      	ldrh	r2, [r4, #12]
    3af0:	4313      	orrs	r3, r2
    3af2:	81a3      	strh	r3, [r4, #12]
    3af4:	6923      	ldr	r3, [r4, #16]
    3af6:	2b00      	cmp	r3, #0
    3af8:	d10b      	bne.n	3b12 <__swsetup_r+0xa6>
    3afa:	21a0      	movs	r1, #160	; 0xa0
    3afc:	2280      	movs	r2, #128	; 0x80
    3afe:	89a3      	ldrh	r3, [r4, #12]
    3b00:	0089      	lsls	r1, r1, #2
    3b02:	0092      	lsls	r2, r2, #2
    3b04:	400b      	ands	r3, r1
    3b06:	4293      	cmp	r3, r2
    3b08:	d003      	beq.n	3b12 <__swsetup_r+0xa6>
    3b0a:	0021      	movs	r1, r4
    3b0c:	0030      	movs	r0, r6
    3b0e:	f000 f93b 	bl	3d88 <__smakebuf_r>
    3b12:	2301      	movs	r3, #1
    3b14:	89a2      	ldrh	r2, [r4, #12]
    3b16:	4013      	ands	r3, r2
    3b18:	d011      	beq.n	3b3e <__swsetup_r+0xd2>
    3b1a:	2300      	movs	r3, #0
    3b1c:	60a3      	str	r3, [r4, #8]
    3b1e:	6963      	ldr	r3, [r4, #20]
    3b20:	425b      	negs	r3, r3
    3b22:	61a3      	str	r3, [r4, #24]
    3b24:	2000      	movs	r0, #0
    3b26:	6923      	ldr	r3, [r4, #16]
    3b28:	4283      	cmp	r3, r0
    3b2a:	d1be      	bne.n	3aaa <__swsetup_r+0x3e>
    3b2c:	230c      	movs	r3, #12
    3b2e:	5ee2      	ldrsh	r2, [r4, r3]
    3b30:	0613      	lsls	r3, r2, #24
    3b32:	d5ba      	bpl.n	3aaa <__swsetup_r+0x3e>
    3b34:	2340      	movs	r3, #64	; 0x40
    3b36:	4313      	orrs	r3, r2
    3b38:	81a3      	strh	r3, [r4, #12]
    3b3a:	3801      	subs	r0, #1
    3b3c:	e7b5      	b.n	3aaa <__swsetup_r+0x3e>
    3b3e:	0792      	lsls	r2, r2, #30
    3b40:	d400      	bmi.n	3b44 <__swsetup_r+0xd8>
    3b42:	6963      	ldr	r3, [r4, #20]
    3b44:	60a3      	str	r3, [r4, #8]
    3b46:	e7ed      	b.n	3b24 <__swsetup_r+0xb8>
    3b48:	20000008 	.word	0x20000008
    3b4c:	000046a0 	.word	0x000046a0
    3b50:	000046c0 	.word	0x000046c0
    3b54:	00004680 	.word	0x00004680

00003b58 <_close_r>:
    3b58:	2300      	movs	r3, #0
    3b5a:	b570      	push	{r4, r5, r6, lr}
    3b5c:	4c06      	ldr	r4, [pc, #24]	; (3b78 <_close_r+0x20>)
    3b5e:	0005      	movs	r5, r0
    3b60:	0008      	movs	r0, r1
    3b62:	6023      	str	r3, [r4, #0]
    3b64:	f7fd fbea 	bl	133c <_close>
    3b68:	1c43      	adds	r3, r0, #1
    3b6a:	d103      	bne.n	3b74 <_close_r+0x1c>
    3b6c:	6823      	ldr	r3, [r4, #0]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d000      	beq.n	3b74 <_close_r+0x1c>
    3b72:	602b      	str	r3, [r5, #0]
    3b74:	bd70      	pop	{r4, r5, r6, pc}
    3b76:	46c0      	nop			; (mov r8, r8)
    3b78:	2000311c 	.word	0x2000311c

00003b7c <__sflush_r>:
    3b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b7e:	898a      	ldrh	r2, [r1, #12]
    3b80:	0005      	movs	r5, r0
    3b82:	000c      	movs	r4, r1
    3b84:	0713      	lsls	r3, r2, #28
    3b86:	d460      	bmi.n	3c4a <__sflush_r+0xce>
    3b88:	684b      	ldr	r3, [r1, #4]
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	dc04      	bgt.n	3b98 <__sflush_r+0x1c>
    3b8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3b90:	2b00      	cmp	r3, #0
    3b92:	dc01      	bgt.n	3b98 <__sflush_r+0x1c>
    3b94:	2000      	movs	r0, #0
    3b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b9a:	2f00      	cmp	r7, #0
    3b9c:	d0fa      	beq.n	3b94 <__sflush_r+0x18>
    3b9e:	2300      	movs	r3, #0
    3ba0:	682e      	ldr	r6, [r5, #0]
    3ba2:	602b      	str	r3, [r5, #0]
    3ba4:	2380      	movs	r3, #128	; 0x80
    3ba6:	015b      	lsls	r3, r3, #5
    3ba8:	401a      	ands	r2, r3
    3baa:	d034      	beq.n	3c16 <__sflush_r+0x9a>
    3bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3bae:	89a3      	ldrh	r3, [r4, #12]
    3bb0:	075b      	lsls	r3, r3, #29
    3bb2:	d506      	bpl.n	3bc2 <__sflush_r+0x46>
    3bb4:	6863      	ldr	r3, [r4, #4]
    3bb6:	1ac0      	subs	r0, r0, r3
    3bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d001      	beq.n	3bc2 <__sflush_r+0x46>
    3bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3bc0:	1ac0      	subs	r0, r0, r3
    3bc2:	0002      	movs	r2, r0
    3bc4:	6a21      	ldr	r1, [r4, #32]
    3bc6:	2300      	movs	r3, #0
    3bc8:	0028      	movs	r0, r5
    3bca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3bcc:	47b8      	blx	r7
    3bce:	89a1      	ldrh	r1, [r4, #12]
    3bd0:	1c43      	adds	r3, r0, #1
    3bd2:	d106      	bne.n	3be2 <__sflush_r+0x66>
    3bd4:	682b      	ldr	r3, [r5, #0]
    3bd6:	2b1d      	cmp	r3, #29
    3bd8:	d831      	bhi.n	3c3e <__sflush_r+0xc2>
    3bda:	4a2c      	ldr	r2, [pc, #176]	; (3c8c <__sflush_r+0x110>)
    3bdc:	40da      	lsrs	r2, r3
    3bde:	07d3      	lsls	r3, r2, #31
    3be0:	d52d      	bpl.n	3c3e <__sflush_r+0xc2>
    3be2:	2300      	movs	r3, #0
    3be4:	6063      	str	r3, [r4, #4]
    3be6:	6923      	ldr	r3, [r4, #16]
    3be8:	6023      	str	r3, [r4, #0]
    3bea:	04cb      	lsls	r3, r1, #19
    3bec:	d505      	bpl.n	3bfa <__sflush_r+0x7e>
    3bee:	1c43      	adds	r3, r0, #1
    3bf0:	d102      	bne.n	3bf8 <__sflush_r+0x7c>
    3bf2:	682b      	ldr	r3, [r5, #0]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d100      	bne.n	3bfa <__sflush_r+0x7e>
    3bf8:	6560      	str	r0, [r4, #84]	; 0x54
    3bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3bfc:	602e      	str	r6, [r5, #0]
    3bfe:	2900      	cmp	r1, #0
    3c00:	d0c8      	beq.n	3b94 <__sflush_r+0x18>
    3c02:	0023      	movs	r3, r4
    3c04:	3344      	adds	r3, #68	; 0x44
    3c06:	4299      	cmp	r1, r3
    3c08:	d002      	beq.n	3c10 <__sflush_r+0x94>
    3c0a:	0028      	movs	r0, r5
    3c0c:	f000 f90c 	bl	3e28 <_free_r>
    3c10:	2000      	movs	r0, #0
    3c12:	6360      	str	r0, [r4, #52]	; 0x34
    3c14:	e7bf      	b.n	3b96 <__sflush_r+0x1a>
    3c16:	2301      	movs	r3, #1
    3c18:	6a21      	ldr	r1, [r4, #32]
    3c1a:	0028      	movs	r0, r5
    3c1c:	47b8      	blx	r7
    3c1e:	1c43      	adds	r3, r0, #1
    3c20:	d1c5      	bne.n	3bae <__sflush_r+0x32>
    3c22:	682b      	ldr	r3, [r5, #0]
    3c24:	2b00      	cmp	r3, #0
    3c26:	d0c2      	beq.n	3bae <__sflush_r+0x32>
    3c28:	2b1d      	cmp	r3, #29
    3c2a:	d001      	beq.n	3c30 <__sflush_r+0xb4>
    3c2c:	2b16      	cmp	r3, #22
    3c2e:	d101      	bne.n	3c34 <__sflush_r+0xb8>
    3c30:	602e      	str	r6, [r5, #0]
    3c32:	e7af      	b.n	3b94 <__sflush_r+0x18>
    3c34:	2340      	movs	r3, #64	; 0x40
    3c36:	89a2      	ldrh	r2, [r4, #12]
    3c38:	4313      	orrs	r3, r2
    3c3a:	81a3      	strh	r3, [r4, #12]
    3c3c:	e7ab      	b.n	3b96 <__sflush_r+0x1a>
    3c3e:	2340      	movs	r3, #64	; 0x40
    3c40:	430b      	orrs	r3, r1
    3c42:	2001      	movs	r0, #1
    3c44:	81a3      	strh	r3, [r4, #12]
    3c46:	4240      	negs	r0, r0
    3c48:	e7a5      	b.n	3b96 <__sflush_r+0x1a>
    3c4a:	690f      	ldr	r7, [r1, #16]
    3c4c:	2f00      	cmp	r7, #0
    3c4e:	d0a1      	beq.n	3b94 <__sflush_r+0x18>
    3c50:	680b      	ldr	r3, [r1, #0]
    3c52:	600f      	str	r7, [r1, #0]
    3c54:	1bdb      	subs	r3, r3, r7
    3c56:	9301      	str	r3, [sp, #4]
    3c58:	2300      	movs	r3, #0
    3c5a:	0792      	lsls	r2, r2, #30
    3c5c:	d100      	bne.n	3c60 <__sflush_r+0xe4>
    3c5e:	694b      	ldr	r3, [r1, #20]
    3c60:	60a3      	str	r3, [r4, #8]
    3c62:	9b01      	ldr	r3, [sp, #4]
    3c64:	2b00      	cmp	r3, #0
    3c66:	dc00      	bgt.n	3c6a <__sflush_r+0xee>
    3c68:	e794      	b.n	3b94 <__sflush_r+0x18>
    3c6a:	9b01      	ldr	r3, [sp, #4]
    3c6c:	003a      	movs	r2, r7
    3c6e:	6a21      	ldr	r1, [r4, #32]
    3c70:	0028      	movs	r0, r5
    3c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3c74:	47b0      	blx	r6
    3c76:	2800      	cmp	r0, #0
    3c78:	dc03      	bgt.n	3c82 <__sflush_r+0x106>
    3c7a:	2340      	movs	r3, #64	; 0x40
    3c7c:	89a2      	ldrh	r2, [r4, #12]
    3c7e:	4313      	orrs	r3, r2
    3c80:	e7df      	b.n	3c42 <__sflush_r+0xc6>
    3c82:	9b01      	ldr	r3, [sp, #4]
    3c84:	183f      	adds	r7, r7, r0
    3c86:	1a1b      	subs	r3, r3, r0
    3c88:	9301      	str	r3, [sp, #4]
    3c8a:	e7ea      	b.n	3c62 <__sflush_r+0xe6>
    3c8c:	20400001 	.word	0x20400001

00003c90 <_fflush_r>:
    3c90:	690b      	ldr	r3, [r1, #16]
    3c92:	b570      	push	{r4, r5, r6, lr}
    3c94:	0005      	movs	r5, r0
    3c96:	000c      	movs	r4, r1
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d101      	bne.n	3ca0 <_fflush_r+0x10>
    3c9c:	2000      	movs	r0, #0
    3c9e:	bd70      	pop	{r4, r5, r6, pc}
    3ca0:	2800      	cmp	r0, #0
    3ca2:	d004      	beq.n	3cae <_fflush_r+0x1e>
    3ca4:	6983      	ldr	r3, [r0, #24]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d101      	bne.n	3cae <_fflush_r+0x1e>
    3caa:	f7ff fae9 	bl	3280 <__sinit>
    3cae:	4b0b      	ldr	r3, [pc, #44]	; (3cdc <_fflush_r+0x4c>)
    3cb0:	429c      	cmp	r4, r3
    3cb2:	d109      	bne.n	3cc8 <_fflush_r+0x38>
    3cb4:	686c      	ldr	r4, [r5, #4]
    3cb6:	220c      	movs	r2, #12
    3cb8:	5ea3      	ldrsh	r3, [r4, r2]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d0ee      	beq.n	3c9c <_fflush_r+0xc>
    3cbe:	0021      	movs	r1, r4
    3cc0:	0028      	movs	r0, r5
    3cc2:	f7ff ff5b 	bl	3b7c <__sflush_r>
    3cc6:	e7ea      	b.n	3c9e <_fflush_r+0xe>
    3cc8:	4b05      	ldr	r3, [pc, #20]	; (3ce0 <_fflush_r+0x50>)
    3cca:	429c      	cmp	r4, r3
    3ccc:	d101      	bne.n	3cd2 <_fflush_r+0x42>
    3cce:	68ac      	ldr	r4, [r5, #8]
    3cd0:	e7f1      	b.n	3cb6 <_fflush_r+0x26>
    3cd2:	4b04      	ldr	r3, [pc, #16]	; (3ce4 <_fflush_r+0x54>)
    3cd4:	429c      	cmp	r4, r3
    3cd6:	d1ee      	bne.n	3cb6 <_fflush_r+0x26>
    3cd8:	68ec      	ldr	r4, [r5, #12]
    3cda:	e7ec      	b.n	3cb6 <_fflush_r+0x26>
    3cdc:	000046a0 	.word	0x000046a0
    3ce0:	000046c0 	.word	0x000046c0
    3ce4:	00004680 	.word	0x00004680

00003ce8 <fflush>:
    3ce8:	b510      	push	{r4, lr}
    3cea:	1e01      	subs	r1, r0, #0
    3cec:	d105      	bne.n	3cfa <fflush+0x12>
    3cee:	4b05      	ldr	r3, [pc, #20]	; (3d04 <fflush+0x1c>)
    3cf0:	4905      	ldr	r1, [pc, #20]	; (3d08 <fflush+0x20>)
    3cf2:	6818      	ldr	r0, [r3, #0]
    3cf4:	f7ff fb54 	bl	33a0 <_fwalk_reent>
    3cf8:	bd10      	pop	{r4, pc}
    3cfa:	4b04      	ldr	r3, [pc, #16]	; (3d0c <fflush+0x24>)
    3cfc:	6818      	ldr	r0, [r3, #0]
    3cfe:	f7ff ffc7 	bl	3c90 <_fflush_r>
    3d02:	e7f9      	b.n	3cf8 <fflush+0x10>
    3d04:	000046e0 	.word	0x000046e0
    3d08:	00003c91 	.word	0x00003c91
    3d0c:	20000008 	.word	0x20000008

00003d10 <_lseek_r>:
    3d10:	b570      	push	{r4, r5, r6, lr}
    3d12:	0005      	movs	r5, r0
    3d14:	0008      	movs	r0, r1
    3d16:	0011      	movs	r1, r2
    3d18:	2200      	movs	r2, #0
    3d1a:	4c06      	ldr	r4, [pc, #24]	; (3d34 <_lseek_r+0x24>)
    3d1c:	6022      	str	r2, [r4, #0]
    3d1e:	001a      	movs	r2, r3
    3d20:	f7fd fb16 	bl	1350 <_lseek>
    3d24:	1c43      	adds	r3, r0, #1
    3d26:	d103      	bne.n	3d30 <_lseek_r+0x20>
    3d28:	6823      	ldr	r3, [r4, #0]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d000      	beq.n	3d30 <_lseek_r+0x20>
    3d2e:	602b      	str	r3, [r5, #0]
    3d30:	bd70      	pop	{r4, r5, r6, pc}
    3d32:	46c0      	nop			; (mov r8, r8)
    3d34:	2000311c 	.word	0x2000311c

00003d38 <__swhatbuf_r>:
    3d38:	b570      	push	{r4, r5, r6, lr}
    3d3a:	000e      	movs	r6, r1
    3d3c:	001d      	movs	r5, r3
    3d3e:	230e      	movs	r3, #14
    3d40:	5ec9      	ldrsh	r1, [r1, r3]
    3d42:	b090      	sub	sp, #64	; 0x40
    3d44:	0014      	movs	r4, r2
    3d46:	2900      	cmp	r1, #0
    3d48:	da07      	bge.n	3d5a <__swhatbuf_r+0x22>
    3d4a:	2300      	movs	r3, #0
    3d4c:	602b      	str	r3, [r5, #0]
    3d4e:	89b3      	ldrh	r3, [r6, #12]
    3d50:	061b      	lsls	r3, r3, #24
    3d52:	d411      	bmi.n	3d78 <__swhatbuf_r+0x40>
    3d54:	2380      	movs	r3, #128	; 0x80
    3d56:	00db      	lsls	r3, r3, #3
    3d58:	e00f      	b.n	3d7a <__swhatbuf_r+0x42>
    3d5a:	aa01      	add	r2, sp, #4
    3d5c:	f000 fb8e 	bl	447c <_fstat_r>
    3d60:	2800      	cmp	r0, #0
    3d62:	dbf2      	blt.n	3d4a <__swhatbuf_r+0x12>
    3d64:	22f0      	movs	r2, #240	; 0xf0
    3d66:	9b02      	ldr	r3, [sp, #8]
    3d68:	0212      	lsls	r2, r2, #8
    3d6a:	4013      	ands	r3, r2
    3d6c:	4a05      	ldr	r2, [pc, #20]	; (3d84 <__swhatbuf_r+0x4c>)
    3d6e:	189b      	adds	r3, r3, r2
    3d70:	425a      	negs	r2, r3
    3d72:	4153      	adcs	r3, r2
    3d74:	602b      	str	r3, [r5, #0]
    3d76:	e7ed      	b.n	3d54 <__swhatbuf_r+0x1c>
    3d78:	2340      	movs	r3, #64	; 0x40
    3d7a:	2000      	movs	r0, #0
    3d7c:	6023      	str	r3, [r4, #0]
    3d7e:	b010      	add	sp, #64	; 0x40
    3d80:	bd70      	pop	{r4, r5, r6, pc}
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	ffffe000 	.word	0xffffe000

00003d88 <__smakebuf_r>:
    3d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d8a:	2602      	movs	r6, #2
    3d8c:	898b      	ldrh	r3, [r1, #12]
    3d8e:	0005      	movs	r5, r0
    3d90:	000c      	movs	r4, r1
    3d92:	4233      	tst	r3, r6
    3d94:	d006      	beq.n	3da4 <__smakebuf_r+0x1c>
    3d96:	0023      	movs	r3, r4
    3d98:	3347      	adds	r3, #71	; 0x47
    3d9a:	6023      	str	r3, [r4, #0]
    3d9c:	6123      	str	r3, [r4, #16]
    3d9e:	2301      	movs	r3, #1
    3da0:	6163      	str	r3, [r4, #20]
    3da2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3da4:	ab01      	add	r3, sp, #4
    3da6:	466a      	mov	r2, sp
    3da8:	f7ff ffc6 	bl	3d38 <__swhatbuf_r>
    3dac:	9900      	ldr	r1, [sp, #0]
    3dae:	0007      	movs	r7, r0
    3db0:	0028      	movs	r0, r5
    3db2:	f7ff fb57 	bl	3464 <_malloc_r>
    3db6:	2800      	cmp	r0, #0
    3db8:	d108      	bne.n	3dcc <__smakebuf_r+0x44>
    3dba:	220c      	movs	r2, #12
    3dbc:	5ea3      	ldrsh	r3, [r4, r2]
    3dbe:	059a      	lsls	r2, r3, #22
    3dc0:	d4ef      	bmi.n	3da2 <__smakebuf_r+0x1a>
    3dc2:	2203      	movs	r2, #3
    3dc4:	4393      	bics	r3, r2
    3dc6:	431e      	orrs	r6, r3
    3dc8:	81a6      	strh	r6, [r4, #12]
    3dca:	e7e4      	b.n	3d96 <__smakebuf_r+0xe>
    3dcc:	4b0f      	ldr	r3, [pc, #60]	; (3e0c <__smakebuf_r+0x84>)
    3dce:	62ab      	str	r3, [r5, #40]	; 0x28
    3dd0:	2380      	movs	r3, #128	; 0x80
    3dd2:	89a2      	ldrh	r2, [r4, #12]
    3dd4:	6020      	str	r0, [r4, #0]
    3dd6:	4313      	orrs	r3, r2
    3dd8:	81a3      	strh	r3, [r4, #12]
    3dda:	9b00      	ldr	r3, [sp, #0]
    3ddc:	6120      	str	r0, [r4, #16]
    3dde:	6163      	str	r3, [r4, #20]
    3de0:	9b01      	ldr	r3, [sp, #4]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d00d      	beq.n	3e02 <__smakebuf_r+0x7a>
    3de6:	230e      	movs	r3, #14
    3de8:	5ee1      	ldrsh	r1, [r4, r3]
    3dea:	0028      	movs	r0, r5
    3dec:	f000 fb58 	bl	44a0 <_isatty_r>
    3df0:	2800      	cmp	r0, #0
    3df2:	d006      	beq.n	3e02 <__smakebuf_r+0x7a>
    3df4:	2203      	movs	r2, #3
    3df6:	89a3      	ldrh	r3, [r4, #12]
    3df8:	4393      	bics	r3, r2
    3dfa:	001a      	movs	r2, r3
    3dfc:	2301      	movs	r3, #1
    3dfe:	4313      	orrs	r3, r2
    3e00:	81a3      	strh	r3, [r4, #12]
    3e02:	89a0      	ldrh	r0, [r4, #12]
    3e04:	4338      	orrs	r0, r7
    3e06:	81a0      	strh	r0, [r4, #12]
    3e08:	e7cb      	b.n	3da2 <__smakebuf_r+0x1a>
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	000031fd 	.word	0x000031fd

00003e10 <malloc>:
    3e10:	b510      	push	{r4, lr}
    3e12:	4b03      	ldr	r3, [pc, #12]	; (3e20 <malloc+0x10>)
    3e14:	0001      	movs	r1, r0
    3e16:	6818      	ldr	r0, [r3, #0]
    3e18:	f7ff fb24 	bl	3464 <_malloc_r>
    3e1c:	bd10      	pop	{r4, pc}
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	20000008 	.word	0x20000008

00003e24 <__malloc_lock>:
    3e24:	4770      	bx	lr

00003e26 <__malloc_unlock>:
    3e26:	4770      	bx	lr

00003e28 <_free_r>:
    3e28:	b570      	push	{r4, r5, r6, lr}
    3e2a:	0005      	movs	r5, r0
    3e2c:	2900      	cmp	r1, #0
    3e2e:	d010      	beq.n	3e52 <_free_r+0x2a>
    3e30:	1f0c      	subs	r4, r1, #4
    3e32:	6823      	ldr	r3, [r4, #0]
    3e34:	2b00      	cmp	r3, #0
    3e36:	da00      	bge.n	3e3a <_free_r+0x12>
    3e38:	18e4      	adds	r4, r4, r3
    3e3a:	0028      	movs	r0, r5
    3e3c:	f7ff fff2 	bl	3e24 <__malloc_lock>
    3e40:	4a1d      	ldr	r2, [pc, #116]	; (3eb8 <_free_r+0x90>)
    3e42:	6813      	ldr	r3, [r2, #0]
    3e44:	2b00      	cmp	r3, #0
    3e46:	d105      	bne.n	3e54 <_free_r+0x2c>
    3e48:	6063      	str	r3, [r4, #4]
    3e4a:	6014      	str	r4, [r2, #0]
    3e4c:	0028      	movs	r0, r5
    3e4e:	f7ff ffea 	bl	3e26 <__malloc_unlock>
    3e52:	bd70      	pop	{r4, r5, r6, pc}
    3e54:	42a3      	cmp	r3, r4
    3e56:	d909      	bls.n	3e6c <_free_r+0x44>
    3e58:	6821      	ldr	r1, [r4, #0]
    3e5a:	1860      	adds	r0, r4, r1
    3e5c:	4283      	cmp	r3, r0
    3e5e:	d1f3      	bne.n	3e48 <_free_r+0x20>
    3e60:	6818      	ldr	r0, [r3, #0]
    3e62:	685b      	ldr	r3, [r3, #4]
    3e64:	1841      	adds	r1, r0, r1
    3e66:	6021      	str	r1, [r4, #0]
    3e68:	e7ee      	b.n	3e48 <_free_r+0x20>
    3e6a:	0013      	movs	r3, r2
    3e6c:	685a      	ldr	r2, [r3, #4]
    3e6e:	2a00      	cmp	r2, #0
    3e70:	d001      	beq.n	3e76 <_free_r+0x4e>
    3e72:	42a2      	cmp	r2, r4
    3e74:	d9f9      	bls.n	3e6a <_free_r+0x42>
    3e76:	6819      	ldr	r1, [r3, #0]
    3e78:	1858      	adds	r0, r3, r1
    3e7a:	42a0      	cmp	r0, r4
    3e7c:	d10b      	bne.n	3e96 <_free_r+0x6e>
    3e7e:	6820      	ldr	r0, [r4, #0]
    3e80:	1809      	adds	r1, r1, r0
    3e82:	1858      	adds	r0, r3, r1
    3e84:	6019      	str	r1, [r3, #0]
    3e86:	4282      	cmp	r2, r0
    3e88:	d1e0      	bne.n	3e4c <_free_r+0x24>
    3e8a:	6810      	ldr	r0, [r2, #0]
    3e8c:	6852      	ldr	r2, [r2, #4]
    3e8e:	1841      	adds	r1, r0, r1
    3e90:	6019      	str	r1, [r3, #0]
    3e92:	605a      	str	r2, [r3, #4]
    3e94:	e7da      	b.n	3e4c <_free_r+0x24>
    3e96:	42a0      	cmp	r0, r4
    3e98:	d902      	bls.n	3ea0 <_free_r+0x78>
    3e9a:	230c      	movs	r3, #12
    3e9c:	602b      	str	r3, [r5, #0]
    3e9e:	e7d5      	b.n	3e4c <_free_r+0x24>
    3ea0:	6821      	ldr	r1, [r4, #0]
    3ea2:	1860      	adds	r0, r4, r1
    3ea4:	4282      	cmp	r2, r0
    3ea6:	d103      	bne.n	3eb0 <_free_r+0x88>
    3ea8:	6810      	ldr	r0, [r2, #0]
    3eaa:	6852      	ldr	r2, [r2, #4]
    3eac:	1841      	adds	r1, r0, r1
    3eae:	6021      	str	r1, [r4, #0]
    3eb0:	6062      	str	r2, [r4, #4]
    3eb2:	605c      	str	r4, [r3, #4]
    3eb4:	e7ca      	b.n	3e4c <_free_r+0x24>
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	20003078 	.word	0x20003078

00003ebc <__sfputc_r>:
    3ebc:	6893      	ldr	r3, [r2, #8]
    3ebe:	b510      	push	{r4, lr}
    3ec0:	3b01      	subs	r3, #1
    3ec2:	6093      	str	r3, [r2, #8]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	da05      	bge.n	3ed4 <__sfputc_r+0x18>
    3ec8:	6994      	ldr	r4, [r2, #24]
    3eca:	42a3      	cmp	r3, r4
    3ecc:	db08      	blt.n	3ee0 <__sfputc_r+0x24>
    3ece:	b2cb      	uxtb	r3, r1
    3ed0:	2b0a      	cmp	r3, #10
    3ed2:	d005      	beq.n	3ee0 <__sfputc_r+0x24>
    3ed4:	6813      	ldr	r3, [r2, #0]
    3ed6:	1c58      	adds	r0, r3, #1
    3ed8:	6010      	str	r0, [r2, #0]
    3eda:	7019      	strb	r1, [r3, #0]
    3edc:	b2c8      	uxtb	r0, r1
    3ede:	bd10      	pop	{r4, pc}
    3ee0:	f7ff fd5a 	bl	3998 <__swbuf_r>
    3ee4:	e7fb      	b.n	3ede <__sfputc_r+0x22>

00003ee6 <__sfputs_r>:
    3ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ee8:	0006      	movs	r6, r0
    3eea:	000f      	movs	r7, r1
    3eec:	0014      	movs	r4, r2
    3eee:	18d5      	adds	r5, r2, r3
    3ef0:	42ac      	cmp	r4, r5
    3ef2:	d101      	bne.n	3ef8 <__sfputs_r+0x12>
    3ef4:	2000      	movs	r0, #0
    3ef6:	e007      	b.n	3f08 <__sfputs_r+0x22>
    3ef8:	7821      	ldrb	r1, [r4, #0]
    3efa:	003a      	movs	r2, r7
    3efc:	0030      	movs	r0, r6
    3efe:	f7ff ffdd 	bl	3ebc <__sfputc_r>
    3f02:	3401      	adds	r4, #1
    3f04:	1c43      	adds	r3, r0, #1
    3f06:	d1f3      	bne.n	3ef0 <__sfputs_r+0xa>
    3f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003f0c <_vfiprintf_r>:
    3f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f0e:	b09f      	sub	sp, #124	; 0x7c
    3f10:	0006      	movs	r6, r0
    3f12:	000f      	movs	r7, r1
    3f14:	0014      	movs	r4, r2
    3f16:	9305      	str	r3, [sp, #20]
    3f18:	2800      	cmp	r0, #0
    3f1a:	d004      	beq.n	3f26 <_vfiprintf_r+0x1a>
    3f1c:	6983      	ldr	r3, [r0, #24]
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d101      	bne.n	3f26 <_vfiprintf_r+0x1a>
    3f22:	f7ff f9ad 	bl	3280 <__sinit>
    3f26:	4b7f      	ldr	r3, [pc, #508]	; (4124 <_vfiprintf_r+0x218>)
    3f28:	429f      	cmp	r7, r3
    3f2a:	d15c      	bne.n	3fe6 <_vfiprintf_r+0xda>
    3f2c:	6877      	ldr	r7, [r6, #4]
    3f2e:	89bb      	ldrh	r3, [r7, #12]
    3f30:	071b      	lsls	r3, r3, #28
    3f32:	d562      	bpl.n	3ffa <_vfiprintf_r+0xee>
    3f34:	693b      	ldr	r3, [r7, #16]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d05f      	beq.n	3ffa <_vfiprintf_r+0xee>
    3f3a:	2300      	movs	r3, #0
    3f3c:	ad06      	add	r5, sp, #24
    3f3e:	616b      	str	r3, [r5, #20]
    3f40:	3320      	adds	r3, #32
    3f42:	766b      	strb	r3, [r5, #25]
    3f44:	3310      	adds	r3, #16
    3f46:	76ab      	strb	r3, [r5, #26]
    3f48:	9402      	str	r4, [sp, #8]
    3f4a:	9c02      	ldr	r4, [sp, #8]
    3f4c:	7823      	ldrb	r3, [r4, #0]
    3f4e:	2b00      	cmp	r3, #0
    3f50:	d15d      	bne.n	400e <_vfiprintf_r+0x102>
    3f52:	9b02      	ldr	r3, [sp, #8]
    3f54:	1ae3      	subs	r3, r4, r3
    3f56:	9304      	str	r3, [sp, #16]
    3f58:	d00d      	beq.n	3f76 <_vfiprintf_r+0x6a>
    3f5a:	9b04      	ldr	r3, [sp, #16]
    3f5c:	9a02      	ldr	r2, [sp, #8]
    3f5e:	0039      	movs	r1, r7
    3f60:	0030      	movs	r0, r6
    3f62:	f7ff ffc0 	bl	3ee6 <__sfputs_r>
    3f66:	1c43      	adds	r3, r0, #1
    3f68:	d100      	bne.n	3f6c <_vfiprintf_r+0x60>
    3f6a:	e0cc      	b.n	4106 <_vfiprintf_r+0x1fa>
    3f6c:	696a      	ldr	r2, [r5, #20]
    3f6e:	9b04      	ldr	r3, [sp, #16]
    3f70:	4694      	mov	ip, r2
    3f72:	4463      	add	r3, ip
    3f74:	616b      	str	r3, [r5, #20]
    3f76:	7823      	ldrb	r3, [r4, #0]
    3f78:	2b00      	cmp	r3, #0
    3f7a:	d100      	bne.n	3f7e <_vfiprintf_r+0x72>
    3f7c:	e0c3      	b.n	4106 <_vfiprintf_r+0x1fa>
    3f7e:	2201      	movs	r2, #1
    3f80:	2300      	movs	r3, #0
    3f82:	4252      	negs	r2, r2
    3f84:	606a      	str	r2, [r5, #4]
    3f86:	a902      	add	r1, sp, #8
    3f88:	3254      	adds	r2, #84	; 0x54
    3f8a:	1852      	adds	r2, r2, r1
    3f8c:	3401      	adds	r4, #1
    3f8e:	602b      	str	r3, [r5, #0]
    3f90:	60eb      	str	r3, [r5, #12]
    3f92:	60ab      	str	r3, [r5, #8]
    3f94:	7013      	strb	r3, [r2, #0]
    3f96:	65ab      	str	r3, [r5, #88]	; 0x58
    3f98:	7821      	ldrb	r1, [r4, #0]
    3f9a:	2205      	movs	r2, #5
    3f9c:	4862      	ldr	r0, [pc, #392]	; (4128 <_vfiprintf_r+0x21c>)
    3f9e:	f7ff fa45 	bl	342c <memchr>
    3fa2:	1c63      	adds	r3, r4, #1
    3fa4:	469c      	mov	ip, r3
    3fa6:	2800      	cmp	r0, #0
    3fa8:	d135      	bne.n	4016 <_vfiprintf_r+0x10a>
    3faa:	6829      	ldr	r1, [r5, #0]
    3fac:	06cb      	lsls	r3, r1, #27
    3fae:	d504      	bpl.n	3fba <_vfiprintf_r+0xae>
    3fb0:	2353      	movs	r3, #83	; 0x53
    3fb2:	aa02      	add	r2, sp, #8
    3fb4:	3020      	adds	r0, #32
    3fb6:	189b      	adds	r3, r3, r2
    3fb8:	7018      	strb	r0, [r3, #0]
    3fba:	070b      	lsls	r3, r1, #28
    3fbc:	d504      	bpl.n	3fc8 <_vfiprintf_r+0xbc>
    3fbe:	2353      	movs	r3, #83	; 0x53
    3fc0:	202b      	movs	r0, #43	; 0x2b
    3fc2:	aa02      	add	r2, sp, #8
    3fc4:	189b      	adds	r3, r3, r2
    3fc6:	7018      	strb	r0, [r3, #0]
    3fc8:	7823      	ldrb	r3, [r4, #0]
    3fca:	2b2a      	cmp	r3, #42	; 0x2a
    3fcc:	d02c      	beq.n	4028 <_vfiprintf_r+0x11c>
    3fce:	2000      	movs	r0, #0
    3fd0:	210a      	movs	r1, #10
    3fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3fd4:	7822      	ldrb	r2, [r4, #0]
    3fd6:	3a30      	subs	r2, #48	; 0x30
    3fd8:	2a09      	cmp	r2, #9
    3fda:	d800      	bhi.n	3fde <_vfiprintf_r+0xd2>
    3fdc:	e06b      	b.n	40b6 <_vfiprintf_r+0x1aa>
    3fde:	2800      	cmp	r0, #0
    3fe0:	d02a      	beq.n	4038 <_vfiprintf_r+0x12c>
    3fe2:	9309      	str	r3, [sp, #36]	; 0x24
    3fe4:	e028      	b.n	4038 <_vfiprintf_r+0x12c>
    3fe6:	4b51      	ldr	r3, [pc, #324]	; (412c <_vfiprintf_r+0x220>)
    3fe8:	429f      	cmp	r7, r3
    3fea:	d101      	bne.n	3ff0 <_vfiprintf_r+0xe4>
    3fec:	68b7      	ldr	r7, [r6, #8]
    3fee:	e79e      	b.n	3f2e <_vfiprintf_r+0x22>
    3ff0:	4b4f      	ldr	r3, [pc, #316]	; (4130 <_vfiprintf_r+0x224>)
    3ff2:	429f      	cmp	r7, r3
    3ff4:	d19b      	bne.n	3f2e <_vfiprintf_r+0x22>
    3ff6:	68f7      	ldr	r7, [r6, #12]
    3ff8:	e799      	b.n	3f2e <_vfiprintf_r+0x22>
    3ffa:	0039      	movs	r1, r7
    3ffc:	0030      	movs	r0, r6
    3ffe:	f7ff fd35 	bl	3a6c <__swsetup_r>
    4002:	2800      	cmp	r0, #0
    4004:	d099      	beq.n	3f3a <_vfiprintf_r+0x2e>
    4006:	2001      	movs	r0, #1
    4008:	4240      	negs	r0, r0
    400a:	b01f      	add	sp, #124	; 0x7c
    400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    400e:	2b25      	cmp	r3, #37	; 0x25
    4010:	d09f      	beq.n	3f52 <_vfiprintf_r+0x46>
    4012:	3401      	adds	r4, #1
    4014:	e79a      	b.n	3f4c <_vfiprintf_r+0x40>
    4016:	4b44      	ldr	r3, [pc, #272]	; (4128 <_vfiprintf_r+0x21c>)
    4018:	6829      	ldr	r1, [r5, #0]
    401a:	1ac0      	subs	r0, r0, r3
    401c:	2301      	movs	r3, #1
    401e:	4083      	lsls	r3, r0
    4020:	430b      	orrs	r3, r1
    4022:	602b      	str	r3, [r5, #0]
    4024:	4664      	mov	r4, ip
    4026:	e7b7      	b.n	3f98 <_vfiprintf_r+0x8c>
    4028:	9b05      	ldr	r3, [sp, #20]
    402a:	1d18      	adds	r0, r3, #4
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	9005      	str	r0, [sp, #20]
    4030:	2b00      	cmp	r3, #0
    4032:	db3a      	blt.n	40aa <_vfiprintf_r+0x19e>
    4034:	9309      	str	r3, [sp, #36]	; 0x24
    4036:	4664      	mov	r4, ip
    4038:	7823      	ldrb	r3, [r4, #0]
    403a:	2b2e      	cmp	r3, #46	; 0x2e
    403c:	d10b      	bne.n	4056 <_vfiprintf_r+0x14a>
    403e:	7863      	ldrb	r3, [r4, #1]
    4040:	1c62      	adds	r2, r4, #1
    4042:	2b2a      	cmp	r3, #42	; 0x2a
    4044:	d13f      	bne.n	40c6 <_vfiprintf_r+0x1ba>
    4046:	9b05      	ldr	r3, [sp, #20]
    4048:	3402      	adds	r4, #2
    404a:	1d1a      	adds	r2, r3, #4
    404c:	681b      	ldr	r3, [r3, #0]
    404e:	9205      	str	r2, [sp, #20]
    4050:	2b00      	cmp	r3, #0
    4052:	db35      	blt.n	40c0 <_vfiprintf_r+0x1b4>
    4054:	9307      	str	r3, [sp, #28]
    4056:	7821      	ldrb	r1, [r4, #0]
    4058:	2203      	movs	r2, #3
    405a:	4836      	ldr	r0, [pc, #216]	; (4134 <_vfiprintf_r+0x228>)
    405c:	f7ff f9e6 	bl	342c <memchr>
    4060:	2800      	cmp	r0, #0
    4062:	d007      	beq.n	4074 <_vfiprintf_r+0x168>
    4064:	4b33      	ldr	r3, [pc, #204]	; (4134 <_vfiprintf_r+0x228>)
    4066:	682a      	ldr	r2, [r5, #0]
    4068:	1ac0      	subs	r0, r0, r3
    406a:	2340      	movs	r3, #64	; 0x40
    406c:	4083      	lsls	r3, r0
    406e:	4313      	orrs	r3, r2
    4070:	602b      	str	r3, [r5, #0]
    4072:	3401      	adds	r4, #1
    4074:	7821      	ldrb	r1, [r4, #0]
    4076:	1c63      	adds	r3, r4, #1
    4078:	2206      	movs	r2, #6
    407a:	482f      	ldr	r0, [pc, #188]	; (4138 <_vfiprintf_r+0x22c>)
    407c:	9302      	str	r3, [sp, #8]
    407e:	7629      	strb	r1, [r5, #24]
    4080:	f7ff f9d4 	bl	342c <memchr>
    4084:	2800      	cmp	r0, #0
    4086:	d044      	beq.n	4112 <_vfiprintf_r+0x206>
    4088:	4b2c      	ldr	r3, [pc, #176]	; (413c <_vfiprintf_r+0x230>)
    408a:	2b00      	cmp	r3, #0
    408c:	d12f      	bne.n	40ee <_vfiprintf_r+0x1e2>
    408e:	6829      	ldr	r1, [r5, #0]
    4090:	9b05      	ldr	r3, [sp, #20]
    4092:	2207      	movs	r2, #7
    4094:	05c9      	lsls	r1, r1, #23
    4096:	d528      	bpl.n	40ea <_vfiprintf_r+0x1de>
    4098:	189b      	adds	r3, r3, r2
    409a:	4393      	bics	r3, r2
    409c:	3308      	adds	r3, #8
    409e:	9305      	str	r3, [sp, #20]
    40a0:	696b      	ldr	r3, [r5, #20]
    40a2:	9a03      	ldr	r2, [sp, #12]
    40a4:	189b      	adds	r3, r3, r2
    40a6:	616b      	str	r3, [r5, #20]
    40a8:	e74f      	b.n	3f4a <_vfiprintf_r+0x3e>
    40aa:	425b      	negs	r3, r3
    40ac:	60eb      	str	r3, [r5, #12]
    40ae:	2302      	movs	r3, #2
    40b0:	430b      	orrs	r3, r1
    40b2:	602b      	str	r3, [r5, #0]
    40b4:	e7bf      	b.n	4036 <_vfiprintf_r+0x12a>
    40b6:	434b      	muls	r3, r1
    40b8:	3401      	adds	r4, #1
    40ba:	189b      	adds	r3, r3, r2
    40bc:	2001      	movs	r0, #1
    40be:	e789      	b.n	3fd4 <_vfiprintf_r+0xc8>
    40c0:	2301      	movs	r3, #1
    40c2:	425b      	negs	r3, r3
    40c4:	e7c6      	b.n	4054 <_vfiprintf_r+0x148>
    40c6:	2300      	movs	r3, #0
    40c8:	0014      	movs	r4, r2
    40ca:	200a      	movs	r0, #10
    40cc:	001a      	movs	r2, r3
    40ce:	606b      	str	r3, [r5, #4]
    40d0:	7821      	ldrb	r1, [r4, #0]
    40d2:	3930      	subs	r1, #48	; 0x30
    40d4:	2909      	cmp	r1, #9
    40d6:	d903      	bls.n	40e0 <_vfiprintf_r+0x1d4>
    40d8:	2b00      	cmp	r3, #0
    40da:	d0bc      	beq.n	4056 <_vfiprintf_r+0x14a>
    40dc:	9207      	str	r2, [sp, #28]
    40de:	e7ba      	b.n	4056 <_vfiprintf_r+0x14a>
    40e0:	4342      	muls	r2, r0
    40e2:	3401      	adds	r4, #1
    40e4:	1852      	adds	r2, r2, r1
    40e6:	2301      	movs	r3, #1
    40e8:	e7f2      	b.n	40d0 <_vfiprintf_r+0x1c4>
    40ea:	3307      	adds	r3, #7
    40ec:	e7d5      	b.n	409a <_vfiprintf_r+0x18e>
    40ee:	ab05      	add	r3, sp, #20
    40f0:	9300      	str	r3, [sp, #0]
    40f2:	003a      	movs	r2, r7
    40f4:	4b12      	ldr	r3, [pc, #72]	; (4140 <_vfiprintf_r+0x234>)
    40f6:	0029      	movs	r1, r5
    40f8:	0030      	movs	r0, r6
    40fa:	e000      	b.n	40fe <_vfiprintf_r+0x1f2>
    40fc:	bf00      	nop
    40fe:	9003      	str	r0, [sp, #12]
    4100:	9b03      	ldr	r3, [sp, #12]
    4102:	3301      	adds	r3, #1
    4104:	d1cc      	bne.n	40a0 <_vfiprintf_r+0x194>
    4106:	89bb      	ldrh	r3, [r7, #12]
    4108:	065b      	lsls	r3, r3, #25
    410a:	d500      	bpl.n	410e <_vfiprintf_r+0x202>
    410c:	e77b      	b.n	4006 <_vfiprintf_r+0xfa>
    410e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4110:	e77b      	b.n	400a <_vfiprintf_r+0xfe>
    4112:	ab05      	add	r3, sp, #20
    4114:	9300      	str	r3, [sp, #0]
    4116:	003a      	movs	r2, r7
    4118:	4b09      	ldr	r3, [pc, #36]	; (4140 <_vfiprintf_r+0x234>)
    411a:	0029      	movs	r1, r5
    411c:	0030      	movs	r0, r6
    411e:	f000 f87f 	bl	4220 <_printf_i>
    4122:	e7ec      	b.n	40fe <_vfiprintf_r+0x1f2>
    4124:	000046a0 	.word	0x000046a0
    4128:	000046e4 	.word	0x000046e4
    412c:	000046c0 	.word	0x000046c0
    4130:	00004680 	.word	0x00004680
    4134:	000046ea 	.word	0x000046ea
    4138:	000046ee 	.word	0x000046ee
    413c:	00000000 	.word	0x00000000
    4140:	00003ee7 	.word	0x00003ee7

00004144 <_printf_common>:
    4144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4146:	0015      	movs	r5, r2
    4148:	9301      	str	r3, [sp, #4]
    414a:	688a      	ldr	r2, [r1, #8]
    414c:	690b      	ldr	r3, [r1, #16]
    414e:	9000      	str	r0, [sp, #0]
    4150:	000c      	movs	r4, r1
    4152:	4293      	cmp	r3, r2
    4154:	da00      	bge.n	4158 <_printf_common+0x14>
    4156:	0013      	movs	r3, r2
    4158:	0022      	movs	r2, r4
    415a:	602b      	str	r3, [r5, #0]
    415c:	3243      	adds	r2, #67	; 0x43
    415e:	7812      	ldrb	r2, [r2, #0]
    4160:	2a00      	cmp	r2, #0
    4162:	d001      	beq.n	4168 <_printf_common+0x24>
    4164:	3301      	adds	r3, #1
    4166:	602b      	str	r3, [r5, #0]
    4168:	6823      	ldr	r3, [r4, #0]
    416a:	069b      	lsls	r3, r3, #26
    416c:	d502      	bpl.n	4174 <_printf_common+0x30>
    416e:	682b      	ldr	r3, [r5, #0]
    4170:	3302      	adds	r3, #2
    4172:	602b      	str	r3, [r5, #0]
    4174:	2706      	movs	r7, #6
    4176:	6823      	ldr	r3, [r4, #0]
    4178:	401f      	ands	r7, r3
    417a:	d027      	beq.n	41cc <_printf_common+0x88>
    417c:	0023      	movs	r3, r4
    417e:	3343      	adds	r3, #67	; 0x43
    4180:	781b      	ldrb	r3, [r3, #0]
    4182:	1e5a      	subs	r2, r3, #1
    4184:	4193      	sbcs	r3, r2
    4186:	6822      	ldr	r2, [r4, #0]
    4188:	0692      	lsls	r2, r2, #26
    418a:	d430      	bmi.n	41ee <_printf_common+0xaa>
    418c:	0022      	movs	r2, r4
    418e:	9901      	ldr	r1, [sp, #4]
    4190:	3243      	adds	r2, #67	; 0x43
    4192:	9800      	ldr	r0, [sp, #0]
    4194:	9e08      	ldr	r6, [sp, #32]
    4196:	47b0      	blx	r6
    4198:	1c43      	adds	r3, r0, #1
    419a:	d025      	beq.n	41e8 <_printf_common+0xa4>
    419c:	2306      	movs	r3, #6
    419e:	6820      	ldr	r0, [r4, #0]
    41a0:	682a      	ldr	r2, [r5, #0]
    41a2:	68e1      	ldr	r1, [r4, #12]
    41a4:	4003      	ands	r3, r0
    41a6:	2500      	movs	r5, #0
    41a8:	2b04      	cmp	r3, #4
    41aa:	d103      	bne.n	41b4 <_printf_common+0x70>
    41ac:	1a8d      	subs	r5, r1, r2
    41ae:	43eb      	mvns	r3, r5
    41b0:	17db      	asrs	r3, r3, #31
    41b2:	401d      	ands	r5, r3
    41b4:	68a3      	ldr	r3, [r4, #8]
    41b6:	6922      	ldr	r2, [r4, #16]
    41b8:	4293      	cmp	r3, r2
    41ba:	dd01      	ble.n	41c0 <_printf_common+0x7c>
    41bc:	1a9b      	subs	r3, r3, r2
    41be:	18ed      	adds	r5, r5, r3
    41c0:	2700      	movs	r7, #0
    41c2:	42bd      	cmp	r5, r7
    41c4:	d120      	bne.n	4208 <_printf_common+0xc4>
    41c6:	2000      	movs	r0, #0
    41c8:	e010      	b.n	41ec <_printf_common+0xa8>
    41ca:	3701      	adds	r7, #1
    41cc:	68e3      	ldr	r3, [r4, #12]
    41ce:	682a      	ldr	r2, [r5, #0]
    41d0:	1a9b      	subs	r3, r3, r2
    41d2:	429f      	cmp	r7, r3
    41d4:	dad2      	bge.n	417c <_printf_common+0x38>
    41d6:	0022      	movs	r2, r4
    41d8:	2301      	movs	r3, #1
    41da:	3219      	adds	r2, #25
    41dc:	9901      	ldr	r1, [sp, #4]
    41de:	9800      	ldr	r0, [sp, #0]
    41e0:	9e08      	ldr	r6, [sp, #32]
    41e2:	47b0      	blx	r6
    41e4:	1c43      	adds	r3, r0, #1
    41e6:	d1f0      	bne.n	41ca <_printf_common+0x86>
    41e8:	2001      	movs	r0, #1
    41ea:	4240      	negs	r0, r0
    41ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    41ee:	2030      	movs	r0, #48	; 0x30
    41f0:	18e1      	adds	r1, r4, r3
    41f2:	3143      	adds	r1, #67	; 0x43
    41f4:	7008      	strb	r0, [r1, #0]
    41f6:	0021      	movs	r1, r4
    41f8:	1c5a      	adds	r2, r3, #1
    41fa:	3145      	adds	r1, #69	; 0x45
    41fc:	7809      	ldrb	r1, [r1, #0]
    41fe:	18a2      	adds	r2, r4, r2
    4200:	3243      	adds	r2, #67	; 0x43
    4202:	3302      	adds	r3, #2
    4204:	7011      	strb	r1, [r2, #0]
    4206:	e7c1      	b.n	418c <_printf_common+0x48>
    4208:	0022      	movs	r2, r4
    420a:	2301      	movs	r3, #1
    420c:	321a      	adds	r2, #26
    420e:	9901      	ldr	r1, [sp, #4]
    4210:	9800      	ldr	r0, [sp, #0]
    4212:	9e08      	ldr	r6, [sp, #32]
    4214:	47b0      	blx	r6
    4216:	1c43      	adds	r3, r0, #1
    4218:	d0e6      	beq.n	41e8 <_printf_common+0xa4>
    421a:	3701      	adds	r7, #1
    421c:	e7d1      	b.n	41c2 <_printf_common+0x7e>
	...

00004220 <_printf_i>:
    4220:	b5f0      	push	{r4, r5, r6, r7, lr}
    4222:	b08b      	sub	sp, #44	; 0x2c
    4224:	9206      	str	r2, [sp, #24]
    4226:	000a      	movs	r2, r1
    4228:	3243      	adds	r2, #67	; 0x43
    422a:	9307      	str	r3, [sp, #28]
    422c:	9005      	str	r0, [sp, #20]
    422e:	9204      	str	r2, [sp, #16]
    4230:	7e0a      	ldrb	r2, [r1, #24]
    4232:	000c      	movs	r4, r1
    4234:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4236:	2a6e      	cmp	r2, #110	; 0x6e
    4238:	d100      	bne.n	423c <_printf_i+0x1c>
    423a:	e08f      	b.n	435c <_printf_i+0x13c>
    423c:	d817      	bhi.n	426e <_printf_i+0x4e>
    423e:	2a63      	cmp	r2, #99	; 0x63
    4240:	d02c      	beq.n	429c <_printf_i+0x7c>
    4242:	d808      	bhi.n	4256 <_printf_i+0x36>
    4244:	2a00      	cmp	r2, #0
    4246:	d100      	bne.n	424a <_printf_i+0x2a>
    4248:	e099      	b.n	437e <_printf_i+0x15e>
    424a:	2a58      	cmp	r2, #88	; 0x58
    424c:	d054      	beq.n	42f8 <_printf_i+0xd8>
    424e:	0026      	movs	r6, r4
    4250:	3642      	adds	r6, #66	; 0x42
    4252:	7032      	strb	r2, [r6, #0]
    4254:	e029      	b.n	42aa <_printf_i+0x8a>
    4256:	2a64      	cmp	r2, #100	; 0x64
    4258:	d001      	beq.n	425e <_printf_i+0x3e>
    425a:	2a69      	cmp	r2, #105	; 0x69
    425c:	d1f7      	bne.n	424e <_printf_i+0x2e>
    425e:	6821      	ldr	r1, [r4, #0]
    4260:	681a      	ldr	r2, [r3, #0]
    4262:	0608      	lsls	r0, r1, #24
    4264:	d523      	bpl.n	42ae <_printf_i+0x8e>
    4266:	1d11      	adds	r1, r2, #4
    4268:	6019      	str	r1, [r3, #0]
    426a:	6815      	ldr	r5, [r2, #0]
    426c:	e025      	b.n	42ba <_printf_i+0x9a>
    426e:	2a73      	cmp	r2, #115	; 0x73
    4270:	d100      	bne.n	4274 <_printf_i+0x54>
    4272:	e088      	b.n	4386 <_printf_i+0x166>
    4274:	d808      	bhi.n	4288 <_printf_i+0x68>
    4276:	2a6f      	cmp	r2, #111	; 0x6f
    4278:	d029      	beq.n	42ce <_printf_i+0xae>
    427a:	2a70      	cmp	r2, #112	; 0x70
    427c:	d1e7      	bne.n	424e <_printf_i+0x2e>
    427e:	2220      	movs	r2, #32
    4280:	6809      	ldr	r1, [r1, #0]
    4282:	430a      	orrs	r2, r1
    4284:	6022      	str	r2, [r4, #0]
    4286:	e003      	b.n	4290 <_printf_i+0x70>
    4288:	2a75      	cmp	r2, #117	; 0x75
    428a:	d020      	beq.n	42ce <_printf_i+0xae>
    428c:	2a78      	cmp	r2, #120	; 0x78
    428e:	d1de      	bne.n	424e <_printf_i+0x2e>
    4290:	0022      	movs	r2, r4
    4292:	2178      	movs	r1, #120	; 0x78
    4294:	3245      	adds	r2, #69	; 0x45
    4296:	7011      	strb	r1, [r2, #0]
    4298:	4a6c      	ldr	r2, [pc, #432]	; (444c <_printf_i+0x22c>)
    429a:	e030      	b.n	42fe <_printf_i+0xde>
    429c:	000e      	movs	r6, r1
    429e:	681a      	ldr	r2, [r3, #0]
    42a0:	3642      	adds	r6, #66	; 0x42
    42a2:	1d11      	adds	r1, r2, #4
    42a4:	6019      	str	r1, [r3, #0]
    42a6:	6813      	ldr	r3, [r2, #0]
    42a8:	7033      	strb	r3, [r6, #0]
    42aa:	2301      	movs	r3, #1
    42ac:	e079      	b.n	43a2 <_printf_i+0x182>
    42ae:	0649      	lsls	r1, r1, #25
    42b0:	d5d9      	bpl.n	4266 <_printf_i+0x46>
    42b2:	1d11      	adds	r1, r2, #4
    42b4:	6019      	str	r1, [r3, #0]
    42b6:	2300      	movs	r3, #0
    42b8:	5ed5      	ldrsh	r5, [r2, r3]
    42ba:	2d00      	cmp	r5, #0
    42bc:	da03      	bge.n	42c6 <_printf_i+0xa6>
    42be:	232d      	movs	r3, #45	; 0x2d
    42c0:	9a04      	ldr	r2, [sp, #16]
    42c2:	426d      	negs	r5, r5
    42c4:	7013      	strb	r3, [r2, #0]
    42c6:	4b62      	ldr	r3, [pc, #392]	; (4450 <_printf_i+0x230>)
    42c8:	270a      	movs	r7, #10
    42ca:	9303      	str	r3, [sp, #12]
    42cc:	e02f      	b.n	432e <_printf_i+0x10e>
    42ce:	6820      	ldr	r0, [r4, #0]
    42d0:	6819      	ldr	r1, [r3, #0]
    42d2:	0605      	lsls	r5, r0, #24
    42d4:	d503      	bpl.n	42de <_printf_i+0xbe>
    42d6:	1d08      	adds	r0, r1, #4
    42d8:	6018      	str	r0, [r3, #0]
    42da:	680d      	ldr	r5, [r1, #0]
    42dc:	e005      	b.n	42ea <_printf_i+0xca>
    42de:	0640      	lsls	r0, r0, #25
    42e0:	d5f9      	bpl.n	42d6 <_printf_i+0xb6>
    42e2:	680d      	ldr	r5, [r1, #0]
    42e4:	1d08      	adds	r0, r1, #4
    42e6:	6018      	str	r0, [r3, #0]
    42e8:	b2ad      	uxth	r5, r5
    42ea:	4b59      	ldr	r3, [pc, #356]	; (4450 <_printf_i+0x230>)
    42ec:	2708      	movs	r7, #8
    42ee:	9303      	str	r3, [sp, #12]
    42f0:	2a6f      	cmp	r2, #111	; 0x6f
    42f2:	d018      	beq.n	4326 <_printf_i+0x106>
    42f4:	270a      	movs	r7, #10
    42f6:	e016      	b.n	4326 <_printf_i+0x106>
    42f8:	3145      	adds	r1, #69	; 0x45
    42fa:	700a      	strb	r2, [r1, #0]
    42fc:	4a54      	ldr	r2, [pc, #336]	; (4450 <_printf_i+0x230>)
    42fe:	9203      	str	r2, [sp, #12]
    4300:	681a      	ldr	r2, [r3, #0]
    4302:	6821      	ldr	r1, [r4, #0]
    4304:	1d10      	adds	r0, r2, #4
    4306:	6018      	str	r0, [r3, #0]
    4308:	6815      	ldr	r5, [r2, #0]
    430a:	0608      	lsls	r0, r1, #24
    430c:	d522      	bpl.n	4354 <_printf_i+0x134>
    430e:	07cb      	lsls	r3, r1, #31
    4310:	d502      	bpl.n	4318 <_printf_i+0xf8>
    4312:	2320      	movs	r3, #32
    4314:	4319      	orrs	r1, r3
    4316:	6021      	str	r1, [r4, #0]
    4318:	2710      	movs	r7, #16
    431a:	2d00      	cmp	r5, #0
    431c:	d103      	bne.n	4326 <_printf_i+0x106>
    431e:	2320      	movs	r3, #32
    4320:	6822      	ldr	r2, [r4, #0]
    4322:	439a      	bics	r2, r3
    4324:	6022      	str	r2, [r4, #0]
    4326:	0023      	movs	r3, r4
    4328:	2200      	movs	r2, #0
    432a:	3343      	adds	r3, #67	; 0x43
    432c:	701a      	strb	r2, [r3, #0]
    432e:	6863      	ldr	r3, [r4, #4]
    4330:	60a3      	str	r3, [r4, #8]
    4332:	2b00      	cmp	r3, #0
    4334:	db5c      	blt.n	43f0 <_printf_i+0x1d0>
    4336:	2204      	movs	r2, #4
    4338:	6821      	ldr	r1, [r4, #0]
    433a:	4391      	bics	r1, r2
    433c:	6021      	str	r1, [r4, #0]
    433e:	2d00      	cmp	r5, #0
    4340:	d158      	bne.n	43f4 <_printf_i+0x1d4>
    4342:	9e04      	ldr	r6, [sp, #16]
    4344:	2b00      	cmp	r3, #0
    4346:	d064      	beq.n	4412 <_printf_i+0x1f2>
    4348:	0026      	movs	r6, r4
    434a:	9b03      	ldr	r3, [sp, #12]
    434c:	3642      	adds	r6, #66	; 0x42
    434e:	781b      	ldrb	r3, [r3, #0]
    4350:	7033      	strb	r3, [r6, #0]
    4352:	e05e      	b.n	4412 <_printf_i+0x1f2>
    4354:	0648      	lsls	r0, r1, #25
    4356:	d5da      	bpl.n	430e <_printf_i+0xee>
    4358:	b2ad      	uxth	r5, r5
    435a:	e7d8      	b.n	430e <_printf_i+0xee>
    435c:	6809      	ldr	r1, [r1, #0]
    435e:	681a      	ldr	r2, [r3, #0]
    4360:	0608      	lsls	r0, r1, #24
    4362:	d505      	bpl.n	4370 <_printf_i+0x150>
    4364:	1d11      	adds	r1, r2, #4
    4366:	6019      	str	r1, [r3, #0]
    4368:	6813      	ldr	r3, [r2, #0]
    436a:	6962      	ldr	r2, [r4, #20]
    436c:	601a      	str	r2, [r3, #0]
    436e:	e006      	b.n	437e <_printf_i+0x15e>
    4370:	0649      	lsls	r1, r1, #25
    4372:	d5f7      	bpl.n	4364 <_printf_i+0x144>
    4374:	1d11      	adds	r1, r2, #4
    4376:	6019      	str	r1, [r3, #0]
    4378:	6813      	ldr	r3, [r2, #0]
    437a:	8aa2      	ldrh	r2, [r4, #20]
    437c:	801a      	strh	r2, [r3, #0]
    437e:	2300      	movs	r3, #0
    4380:	9e04      	ldr	r6, [sp, #16]
    4382:	6123      	str	r3, [r4, #16]
    4384:	e054      	b.n	4430 <_printf_i+0x210>
    4386:	681a      	ldr	r2, [r3, #0]
    4388:	1d11      	adds	r1, r2, #4
    438a:	6019      	str	r1, [r3, #0]
    438c:	6816      	ldr	r6, [r2, #0]
    438e:	2100      	movs	r1, #0
    4390:	6862      	ldr	r2, [r4, #4]
    4392:	0030      	movs	r0, r6
    4394:	f7ff f84a 	bl	342c <memchr>
    4398:	2800      	cmp	r0, #0
    439a:	d001      	beq.n	43a0 <_printf_i+0x180>
    439c:	1b80      	subs	r0, r0, r6
    439e:	6060      	str	r0, [r4, #4]
    43a0:	6863      	ldr	r3, [r4, #4]
    43a2:	6123      	str	r3, [r4, #16]
    43a4:	2300      	movs	r3, #0
    43a6:	9a04      	ldr	r2, [sp, #16]
    43a8:	7013      	strb	r3, [r2, #0]
    43aa:	e041      	b.n	4430 <_printf_i+0x210>
    43ac:	6923      	ldr	r3, [r4, #16]
    43ae:	0032      	movs	r2, r6
    43b0:	9906      	ldr	r1, [sp, #24]
    43b2:	9805      	ldr	r0, [sp, #20]
    43b4:	9d07      	ldr	r5, [sp, #28]
    43b6:	47a8      	blx	r5
    43b8:	1c43      	adds	r3, r0, #1
    43ba:	d043      	beq.n	4444 <_printf_i+0x224>
    43bc:	6823      	ldr	r3, [r4, #0]
    43be:	2500      	movs	r5, #0
    43c0:	079b      	lsls	r3, r3, #30
    43c2:	d40f      	bmi.n	43e4 <_printf_i+0x1c4>
    43c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43c6:	68e0      	ldr	r0, [r4, #12]
    43c8:	4298      	cmp	r0, r3
    43ca:	da3d      	bge.n	4448 <_printf_i+0x228>
    43cc:	0018      	movs	r0, r3
    43ce:	e03b      	b.n	4448 <_printf_i+0x228>
    43d0:	0022      	movs	r2, r4
    43d2:	2301      	movs	r3, #1
    43d4:	3219      	adds	r2, #25
    43d6:	9906      	ldr	r1, [sp, #24]
    43d8:	9805      	ldr	r0, [sp, #20]
    43da:	9e07      	ldr	r6, [sp, #28]
    43dc:	47b0      	blx	r6
    43de:	1c43      	adds	r3, r0, #1
    43e0:	d030      	beq.n	4444 <_printf_i+0x224>
    43e2:	3501      	adds	r5, #1
    43e4:	68e3      	ldr	r3, [r4, #12]
    43e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    43e8:	1a9b      	subs	r3, r3, r2
    43ea:	429d      	cmp	r5, r3
    43ec:	dbf0      	blt.n	43d0 <_printf_i+0x1b0>
    43ee:	e7e9      	b.n	43c4 <_printf_i+0x1a4>
    43f0:	2d00      	cmp	r5, #0
    43f2:	d0a9      	beq.n	4348 <_printf_i+0x128>
    43f4:	9e04      	ldr	r6, [sp, #16]
    43f6:	0028      	movs	r0, r5
    43f8:	0039      	movs	r1, r7
    43fa:	f7fe fe5d 	bl	30b8 <__aeabi_uidivmod>
    43fe:	9b03      	ldr	r3, [sp, #12]
    4400:	3e01      	subs	r6, #1
    4402:	5c5b      	ldrb	r3, [r3, r1]
    4404:	0028      	movs	r0, r5
    4406:	7033      	strb	r3, [r6, #0]
    4408:	0039      	movs	r1, r7
    440a:	f7fe fdcf 	bl	2fac <__udivsi3>
    440e:	1e05      	subs	r5, r0, #0
    4410:	d1f1      	bne.n	43f6 <_printf_i+0x1d6>
    4412:	2f08      	cmp	r7, #8
    4414:	d109      	bne.n	442a <_printf_i+0x20a>
    4416:	6823      	ldr	r3, [r4, #0]
    4418:	07db      	lsls	r3, r3, #31
    441a:	d506      	bpl.n	442a <_printf_i+0x20a>
    441c:	6863      	ldr	r3, [r4, #4]
    441e:	6922      	ldr	r2, [r4, #16]
    4420:	4293      	cmp	r3, r2
    4422:	dc02      	bgt.n	442a <_printf_i+0x20a>
    4424:	2330      	movs	r3, #48	; 0x30
    4426:	3e01      	subs	r6, #1
    4428:	7033      	strb	r3, [r6, #0]
    442a:	9b04      	ldr	r3, [sp, #16]
    442c:	1b9b      	subs	r3, r3, r6
    442e:	6123      	str	r3, [r4, #16]
    4430:	9b07      	ldr	r3, [sp, #28]
    4432:	aa09      	add	r2, sp, #36	; 0x24
    4434:	9300      	str	r3, [sp, #0]
    4436:	0021      	movs	r1, r4
    4438:	9b06      	ldr	r3, [sp, #24]
    443a:	9805      	ldr	r0, [sp, #20]
    443c:	f7ff fe82 	bl	4144 <_printf_common>
    4440:	1c43      	adds	r3, r0, #1
    4442:	d1b3      	bne.n	43ac <_printf_i+0x18c>
    4444:	2001      	movs	r0, #1
    4446:	4240      	negs	r0, r0
    4448:	b00b      	add	sp, #44	; 0x2c
    444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    444c:	00004706 	.word	0x00004706
    4450:	000046f5 	.word	0x000046f5

00004454 <_read_r>:
    4454:	b570      	push	{r4, r5, r6, lr}
    4456:	0005      	movs	r5, r0
    4458:	0008      	movs	r0, r1
    445a:	0011      	movs	r1, r2
    445c:	2200      	movs	r2, #0
    445e:	4c06      	ldr	r4, [pc, #24]	; (4478 <_read_r+0x24>)
    4460:	6022      	str	r2, [r4, #0]
    4462:	001a      	movs	r2, r3
    4464:	f7fb fe78 	bl	158 <_read>
    4468:	1c43      	adds	r3, r0, #1
    446a:	d103      	bne.n	4474 <_read_r+0x20>
    446c:	6823      	ldr	r3, [r4, #0]
    446e:	2b00      	cmp	r3, #0
    4470:	d000      	beq.n	4474 <_read_r+0x20>
    4472:	602b      	str	r3, [r5, #0]
    4474:	bd70      	pop	{r4, r5, r6, pc}
    4476:	46c0      	nop			; (mov r8, r8)
    4478:	2000311c 	.word	0x2000311c

0000447c <_fstat_r>:
    447c:	2300      	movs	r3, #0
    447e:	b570      	push	{r4, r5, r6, lr}
    4480:	4c06      	ldr	r4, [pc, #24]	; (449c <_fstat_r+0x20>)
    4482:	0005      	movs	r5, r0
    4484:	0008      	movs	r0, r1
    4486:	0011      	movs	r1, r2
    4488:	6023      	str	r3, [r4, #0]
    448a:	f7fc ff5a 	bl	1342 <_fstat>
    448e:	1c43      	adds	r3, r0, #1
    4490:	d103      	bne.n	449a <_fstat_r+0x1e>
    4492:	6823      	ldr	r3, [r4, #0]
    4494:	2b00      	cmp	r3, #0
    4496:	d000      	beq.n	449a <_fstat_r+0x1e>
    4498:	602b      	str	r3, [r5, #0]
    449a:	bd70      	pop	{r4, r5, r6, pc}
    449c:	2000311c 	.word	0x2000311c

000044a0 <_isatty_r>:
    44a0:	2300      	movs	r3, #0
    44a2:	b570      	push	{r4, r5, r6, lr}
    44a4:	4c06      	ldr	r4, [pc, #24]	; (44c0 <_isatty_r+0x20>)
    44a6:	0005      	movs	r5, r0
    44a8:	0008      	movs	r0, r1
    44aa:	6023      	str	r3, [r4, #0]
    44ac:	f7fc ff4e 	bl	134c <_isatty>
    44b0:	1c43      	adds	r3, r0, #1
    44b2:	d103      	bne.n	44bc <_isatty_r+0x1c>
    44b4:	6823      	ldr	r3, [r4, #0]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d000      	beq.n	44bc <_isatty_r+0x1c>
    44ba:	602b      	str	r3, [r5, #0]
    44bc:	bd70      	pop	{r4, r5, r6, pc}
    44be:	46c0      	nop			; (mov r8, r8)
    44c0:	2000311c 	.word	0x2000311c
    44c4:	42000800 	.word	0x42000800
    44c8:	42000c00 	.word	0x42000c00
    44cc:	42001000 	.word	0x42001000
    44d0:	42001400 	.word	0x42001400
    44d4:	42001800 	.word	0x42001800
    44d8:	42001c00 	.word	0x42001c00
    44dc:	00000c82 	.word	0x00000c82
    44e0:	00000c7e 	.word	0x00000c7e
    44e4:	00000c7e 	.word	0x00000c7e
    44e8:	00000ce4 	.word	0x00000ce4
    44ec:	00000ce4 	.word	0x00000ce4
    44f0:	00000c96 	.word	0x00000c96
    44f4:	00000c88 	.word	0x00000c88
    44f8:	00000c9c 	.word	0x00000c9c
    44fc:	00000cd2 	.word	0x00000cd2
    4500:	00000d6c 	.word	0x00000d6c
    4504:	00000d4c 	.word	0x00000d4c
    4508:	00000d4c 	.word	0x00000d4c
    450c:	00000dd8 	.word	0x00000dd8
    4510:	00000d5e 	.word	0x00000d5e
    4514:	00000d7a 	.word	0x00000d7a
    4518:	00000d50 	.word	0x00000d50
    451c:	00000d88 	.word	0x00000d88
    4520:	00000dc8 	.word	0x00000dc8
    4524:	454c4449 	.word	0x454c4449
    4528:	00000000 	.word	0x00000000
    452c:	00002b8c 	.word	0x00002b8c
    4530:	00002b8c 	.word	0x00002b8c
    4534:	00002b8c 	.word	0x00002b8c
    4538:	00002b04 	.word	0x00002b04
    453c:	00002bce 	.word	0x00002bce
    4540:	00002be8 	.word	0x00002be8
    4544:	00002b8c 	.word	0x00002b8c
    4548:	00002b8c 	.word	0x00002b8c
    454c:	00002b04 	.word	0x00002b04
    4550:	00002bce 	.word	0x00002bce
    4554:	20726d54 	.word	0x20726d54
    4558:	00637653 	.word	0x00637653
    455c:	6c696146 	.word	0x6c696146
    4560:	74206465 	.word	0x74206465
    4564:	7263206f 	.word	0x7263206f
    4568:	65746165 	.word	0x65746165
    456c:	65755120 	.word	0x65755120
    4570:	00006575 	.word	0x00006575
    4574:	00005852 	.word	0x00005852
    4578:	6f727245 	.word	0x6f727245
    457c:	69726320 	.word	0x69726320
    4580:	6f646e61 	.word	0x6f646e61
    4584:	63657220 	.word	0x63657220
    4588:	65766965 	.word	0x65766965
    458c:	00000072 	.word	0x00000072
    4590:	00005257 	.word	0x00005257
    4594:	6f727245 	.word	0x6f727245
    4598:	69726320 	.word	0x69726320
    459c:	6f646e61 	.word	0x6f646e61
    45a0:	69727720 	.word	0x69727720
    45a4:	00726574 	.word	0x00726574
    45a8:	61766e49 	.word	0x61766e49
    45ac:	2064696c 	.word	0x2064696c
    45b0:	6d6d6f63 	.word	0x6d6d6f63
    45b4:	0a646e61 	.word	0x0a646e61
    45b8:	20657355 	.word	0x20657355
    45bc:	7420722d 	.word	0x7420722d
    45c0:	6572206f 	.word	0x6572206f
    45c4:	66206461 	.word	0x66206461
    45c8:	0a656c69 	.word	0x0a656c69
    45cc:	6d20692d 	.word	0x6d20692d
    45d0:	61737365 	.word	0x61737365
    45d4:	74206567 	.word	0x74206567
    45d8:	7277206f 	.word	0x7277206f
    45dc:	20657469 	.word	0x20657469
    45e0:	7373656d 	.word	0x7373656d
    45e4:	00656761 	.word	0x00656761
    45e8:	64616552 	.word	0x64616552
    45ec:	20676e69 	.word	0x20676e69
    45f0:	20656874 	.word	0x20656874
    45f4:	656c6966 	.word	0x656c6966
    45f8:	002e2e2e 	.word	0x002e2e2e
    45fc:	72637345 	.word	0x72637345
    4600:	20617665 	.word	0x20617665
    4604:	63206d75 	.word	0x63206d75
    4608:	6e616d6f 	.word	0x6e616d6f
    460c:	003a6f64 	.word	0x003a6f64
    4610:	7373654d 	.word	0x7373654d
    4614:	20656761 	.word	0x20656761
    4618:	69207369 	.word	0x69207369
    461c:	6c61766e 	.word	0x6c61766e
    4620:	00006469 	.word	0x00006469
    4624:	74697257 	.word	0x74697257
    4628:	20676e69 	.word	0x20676e69
    462c:	62206f74 	.word	0x62206f74
    4630:	65666675 	.word	0x65666675
    4634:	25203a72 	.word	0x25203a72
    4638:	00000073 	.word	0x00000073
    463c:	746e6544 	.word	0x746e6544
    4640:	64206f72 	.word	0x64206f72
    4644:	6573206f 	.word	0x6573206f
    4648:	6166616d 	.word	0x6166616d
    464c:	00006f72 	.word	0x00006f72
    4650:	66667562 	.word	0x66667562
    4654:	76207265 	.word	0x76207265
    4658:	6f697a61 	.word	0x6f697a61
    465c:	00000000 	.word	0x00000000
    4660:	00007325 	.word	0x00007325
    4664:	636c6557 	.word	0x636c6557
    4668:	20656d6f 	.word	0x20656d6f
    466c:	6d206f74 	.word	0x6d206f74
    4670:	6f726369 	.word	0x6f726369
    4674:	74786554 	.word	0x74786554
    4678:	74696445 	.word	0x74696445
    467c:	0021726f 	.word	0x0021726f

00004680 <__sf_fake_stderr>:
	...

000046a0 <__sf_fake_stdin>:
	...

000046c0 <__sf_fake_stdout>:
	...

000046e0 <_global_impure_ptr>:
    46e0:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    46f0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    4700:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    4710:	64636261 00006665                       abcdef..

00004718 <_init>:
    4718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    471e:	bc08      	pop	{r3}
    4720:	469e      	mov	lr, r3
    4722:	4770      	bx	lr

00004724 <__init_array_start>:
    4724:	000000dd 	.word	0x000000dd

00004728 <_fini>:
    4728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    472a:	46c0      	nop			; (mov r8, r8)
    472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    472e:	bc08      	pop	{r3}
    4730:	469e      	mov	lr, r3
    4732:	4770      	bx	lr

00004734 <__fini_array_start>:
    4734:	000000b5 	.word	0x000000b5
